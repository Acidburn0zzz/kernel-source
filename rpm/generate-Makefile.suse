#! /bin/sh

sourcedir=${1:-.}

cat <<'EOF'
# Do not print "Entering directory ..."
MAKEFLAGS += --no-print-directory

ifeq ($(KERNEL_SOURCE),)
export KERNEL_SOURCE := /usr/src/linux
endif

ifeq ($(V),)
Q := @
endif

HOSTARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \
				   -e s/arm.*/arm/ -e s/sa110/arm/ \
				   -e s/s390x/s390/ -e s/parisc64/parisc/ )

OUT_FIND_IGNORE := \( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \
		      -o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \
		      -o -name .tmp_versions -o -name .build \) -prune -o

EOF

for arch in $($sourcedir/arch-symbols --list); do
    symbols=$($sourcedir/arch-symbols $arch)
    eval syms_$arch='$($sourcedir/guards $symbols < $sourcedir/config.conf \
		       | grep -v '^[^/]*/um$')'
done

# Merge identical lists of symbols
unstable=1
while [ -n "$unstable" ]; do
    unstable=
    for syms in ${!syms_*}; do
	for syms2 in ${!syms_*}; do
	    [ $syms == $syms2 ] && continue
	    if [ "${!syms}" = "${!syms2}" ]; then
		archs=${syms#syms_}
		archs=
		eval syms_${syms#syms_}__${syms2#syms_}='"${!syms}"'
		unset $syms $syms2
		unstable=1
		break 2
	    fi
	done
    done
done

for syms in ${!syms_*}; do
    [ -z "${!syms}" ] && continue
    archs=${syms#syms_}
    archs=${archs//__/|}
    if [ ${archs/|} = $archs ]; then
	echo "ifeq (\$(HOSTARCH),$archs)"
    else
	echo "ifneq (\$(findstring |\$(HOSTARCH)|,|$archs|),)"
    fi
    echo "ARCH_FLAVORS :=" ${!syms}
    echo "endif"
done

cat <<'EOF'

modules: $(patsubst %,_mod_%,$(ARCH_FLAVORS))

install: $(patsubst %,_ins_%,$(ARCH_FLAVORS))

clean:
	$(Q)rm -rf .build


$(patsubst %,_upd_%,$(ARCH_FLAVORS)):
	$(Q)mkdir -p .build/$(patsubst _upd_%,%,$@); \
	cp -udp --parents $(shell find . $(OUT_FIND_IGNORE) -not -type d \
		-print) .build/$(patsubst _upd_%,%,$@); \
	cp -u $(KERNEL_SOURCE)/arch/$(subst /,/defconfig.,$(patsubst \
		_upd_%,%,$@)) .build/$(patsubst _upd_%,%,$@)/.config

$(patsubst %,_mod_%,$(ARCH_FLAVORS)):  $(patsubst %,_upd_%,$(ARCH_FLAVORS))
	$(Q)echo "[building modules for $(patsubst _mod_%,%,$@)]"; \
	if [ ! -e $(KERNEL_SOURCE)/modversions-$(subst \
		/,-,$(patsubst _mod_%,%,$@)) ]; then \
	    echo "Warning: no modversion information available; install the" \
	         "kernel-syms package for modules with modversions."; \
	fi; \
	arch_flavor=$(patsubst _mod_%,%,$@); \
	case $$arch_flavor in \
	    */um)   MAKE_ARGS="ARCH=um SUBARCH=$${arch_flavor%/*}" ;; \
	    *)	    MAKE_ARGS="ARCH=$${arch_flavor%/*}" ;; \
	esac; \
	$(MAKE) -C $(CURDIR)/.build/$$arch_flavor modules \
		$$MAKE_ARGS KERNEL_SOURCE:=$(KERNEL_SOURCE) \
		KBUILD_OUTPUT:=$(CURDIR)/.build/$$arch_flavor

$(patsubst %,_ins_%,$(ARCH_FLAVORS)):
	$(Q)echo "[installing modules for $(patsubst _ins_%,%,$@)]"; \
	arch_flavor=$(patsubst _mod_%,%,$@); \
	case $$arch_flavor in \
	    */um)   MAKE_ARGS="ARCH=um SUBARCH=$${arch_flavor%/*}" ;; \
	    *)	    MAKE_ARGS="ARCH=$${arch_flavor%/*}" ;; \
	esac; \
	$(MAKE) -C $(CURDIR)/.build/$(patsubst _ins_%,%,$@) install \
		$$MAKE_ARGS KERNEL_SOURCE:=$(KERNEL_SOURCE) \
		KBUILD_OUTPUT:=$(CURDIR)/.build/$(patsubst _ins_%,%,$@)

.PHONY: $(patsubst %,_mod_%,$(ARCH_FLAVORS)) \
	$(patsubst %,_upd_%,$(ARCH_FLAVORS)) \
	$(patsubst %,_ins_%,$(ARCH_FLAVORS))
EOF
