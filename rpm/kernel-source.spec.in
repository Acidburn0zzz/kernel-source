#
# spec file for package @NAME@ (Version @RPMVERSION@)
#
# Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

# norootforbuild
# icecream 0

# FIXME: this check will go before the next release ...

%if 0%{?opensuse_bs}
# Strip off the build number ("y") from the "x.y" release number
%define source_rel %(release=%release; echo ${release%.*})
%else
# We don't have build numbers internally
%define source_rel %release
%endif

Name:         @NAME@
Summary:      Dummy summary
Version:      @RPMVERSION@
Release:      @RELEASE_PREFIX@<RELEASE>
License:      GPL
Group:        Development/Sources
AutoReqProv:  off
BuildRequires:  coreutils sed
BuildRequires:  fdupes
Requires(post): coreutils sed
%if ! 0%{?opensuse_bs}
BuildRequires:  kernel-dummy
%endif
Provides:       linux
Provides:       kernel-source = @RPMVERSION@-%source_rel
%if "@NAME@" == "kernel-source"
Provides:     linux lx_suse lx_sus22 lx_sus24
Obsoletes:    linux lx-gdt lx-hack lx-suse lx1162_1 lx1162_2 lx1212_1 lx1212_2 lx1213_1 lx1213_2 lx121_1 lx121_2 lx126_1 lx126_2 lx129_1 lx129_2 lx_large kernel_headers lx_suse lx_sus22 lx_sus24
%endif
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-@SRCVERSION@.tar.bz2
Source1:      functions.sh
Source2:      source-post.sh
%if "@NAME@" == "kernel-source"
Source3:      kernel-source.rpmlintrc
%endif
Source10:     pre.sh
Source11:     post.sh
Source12:     postun.sh
Source13:     series.conf
Source14:     arch-symbols
Source15:     guards
Source21:     config.conf
Source23:     supported.conf
Source30:     config-subst
Source33:     check-for-config-changes
Source34:     check-supported-list
Source37:     README.SUSE
Source38:     kabi-checks
Source40:     build-source-timestamp
Source41:     built-in-where
Source42:     make-symsets
Source43:     find-provides
Source45:     module-renames
Source46:     modversions
Source47:     extract-modaliases
Source48:     macros.kernel-source
Source49:     kernel-module-subpackage
@BINARY_SPEC_FILES@
Source100:    config.tar.bz2
Source101:    patches.arch.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.fixes.tar.bz2
Source104:    patches.rpmify.tar.bz2
Source105:    patches.suse.tar.bz2
Source106:    patches.uml.tar.bz2
Source107:    patches.xen.tar.bz2
Source108:    patches.addon.tar.bz2
Source109:    patches.kernel.org.tar.bz2
Source110:    patches.apparmor.tar.bz2
Source111:    patches.rt.tar.bz2
Source112:    patches.trace.tar.bz2
Source120:    kabi.tar.bz2
BuildRoot:    %_tmppath/%name-%version-build
Prefix:       /usr/src

# Build with bash instead of sh as the shell: this turns on bash
# extensions like <(...).
%define _buildshell /bin/bash

%define my_builddir %_builddir/%{name}-%{version}

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes,kabi-checks})

%define symbols %(set -- $(%_sourcedir/arch-symbols %_target_cpu) $([ -e %_sourcedir/extra-symbols ] && cat %_sourcedir/extra-symbols) ; echo $*)

%define tolerate_unknown_new_config_options @TOLERATE_UNKNOWN_NEW_CONFIG_OPTIONS@
%define with_rt 0

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-@SRCVERSION@.tar.bz2 ]; then
    echo "Please get a copy of linux-@SRCVERSION@.tar.bz2 from" \
	 "ftp://ftp.kernel.org/pub/linux/kernel/v2.6/."
fi

echo "Architecture symbol(s): %symbols"

# Unpack all sources and patches
%setup -q -c -T -a 100 -a 101 -a 102 -a 103 -a 104 -a 105 -a 106 -a 107 -a 108 -a 109 -a 110 -a 111 -a 112

#chmod -x arch/arm/mach-at91/board-yl-9200.c # executable by accident (fixed in 2.6.27)

%build
# Release number without the EXTRAVERSION
RELEASE=%source_rel
while [ "$RELEASE" != "${RELEASE#[^0-9]*.}" ]; do
    RELEASE=${RELEASE#[^0-9]*.}
done

KERNELRELEASE=@PATCHVERSION@-$RELEASE
cat > %_builddir/%{name}-%{version}/.rpm-defs <<EOF
KERNELRELEASE=$KERNELRELEASE
SYMBOLS="%symbols"
EOF

create_source_tree() {
    local name=$1 extrasymbols
    shift ; extrasymbols=$*

    cp -rld linux-@SRCVERSION@.orig $name
    cd $name
    %_sourcedir/guards %symbols $extrasymbols < %_sourcedir/series.conf \
	> .patches
    for patch in $(< .patches); do
	if ! patch -s -F0 -E -p1 --no-backup-if-mismatch \
		  -i %_builddir/@NAME@-@RPMVERSION@/$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
	fi
    done

    if [ -f %_sourcedir/localversion ] ; then
	cat %_sourcedir/localversion > localversion
    fi
    cd ..
}

mkdir -p $RPM_BUILD_ROOT/usr/src
cd $RPM_BUILD_ROOT/usr/src

# Unpack the vanilla kernel sources
bzip2 -cd %_sourcedir/linux-@SRCVERSION@.tar.bz2 \
| tar xf -
mv linux-@SRCVERSION@ linux-@SRCVERSION@.orig

create_source_tree linux-$KERNELRELEASE
%if %with_rt
create_source_tree linux-$KERNELRELEASE-rt RT
%endif

cat > %my_builddir/kernel-source.files <<EOF
%%%%defattr(-, root, root)
%%%%ghost /usr/src/linux
%%%%ghost /usr/src/linux-obj
/usr/src/linux-$KERNELRELEASE
/usr/src/linux-$KERNELRELEASE-obj
/usr/share/doc/packages/%name
/etc/rpm/macros.kernel-source
/usr/lib/rpm/kernel-module-subpackage
%%%%dir /lib/modules
EOF

%if %with_rt
cat > %my_builddir/kernel-source-rt.files <<EOF
%%%%defattr(-, root, root)
%%%%ghost /usr/src/linux-rt
%%%%ghost /usr/src/linux-rt-obj
/usr/src/linux-$KERNELRELEASE-rt
/usr/src/linux-$KERNELRELEASE-rt-obj
/usr/share/doc/packages/%name
/etc/rpm/macros.kernel-source
/usr/lib/rpm/kernel-module-subpackage
%%%%dir /lib/modules
EOF
%endif

for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf | grep -v vanilla); do
    arch=${config%/*}
    flavor=${config#*/}
    config=%_builddir/%buildsubdir/config/$config

    case "$flavor" in
    *-*)
	echo "Flavor '$flavor' must not contain dashes." >&2
	exit 1
	;;
    esac

    set -- kernel-$flavor $flavor
    case $flavor in
    (rt|rt_*)
	set -- "$@" RT
	source_tree=linux-$KERNELRELEASE-rt
	echo "/lib/modules/$KERNELRELEASE-$flavor" >> %my_builddir/kernel-source-rt.files
	;;
    (*)
	source_tree=linux-$KERNELRELEASE
	echo "/lib/modules/$KERNELRELEASE-$flavor" >> %my_builddir/kernel-source.files
	;;
    esac

    diff -q $source_tree/.patches \
	    <(%_sourcedir/guards $* %symbols < %_sourcedir/series.conf) \
	|| continue

    o=$RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE-obj/$arch/$flavor
    mkdir -p $o
    cat $config \
    | %_sourcedir/config-subst CONFIG_LOCALVERSION '"'-$flavor'"' \
    | %_sourcedir/config-subst CONFIG_SUSE_KERNEL y \
    > $o/.config
    echo "-$RELEASE" > $source_tree/localversion-rpm-release

    case $flavor in
    um)
	MAKE_ARGS="ARCH=$flavor SUBARCH=$arch O=$o" ;;
    *)
	MAKE_ARGS="ARCH=$arch O=$o" ;;
    esac

    # Works around a "fix" in mainline that ends up causing the makefile
    # to not be regenerated.
    echo "Automatically" > $o/Makefile

%if %{tolerate_unknown_new_config_options}
    yes '' | make oldconfig $MAKE_ARGS
%else
    make -C $source_tree silentoldconfig $MAKE_ARGS < /dev/null
    %_sourcedir/check-for-config-changes $config $o/.config
%endif

    make -C $source_tree prepare $MAKE_ARGS
    make -C $source_tree scripts $MAKE_ARGS
    krel=$(make -C $source_tree -s kernelrelease $MAKE_ARGS)
    if [ $KERNELRELEASE != "${krel%%-*}" ]; then
	echo "Kernel release mismatch: $KERNELRELEASE != ${krel%%-*}" >&2
	exit 1
    fi
    make -C $source_tree clean $MAKE_ARGS

    mkdir -p $RPM_BUILD_ROOT/lib/modules/$krel
    ln -s ../../../usr/src/linux-$KERNELRELEASE \
    	$RPM_BUILD_ROOT/lib/modules/$krel/source

    # Replace the absolute with a relative path
    sed -e "s,$RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE,../../../linux-$KERNELRELEASE,g" \
	-i $o/Makefile
    rm -f $o/.config.old
done

rm -rf linux-@SRCVERSION@.orig
rm -f linux-$KERNELRELEASE/.patches
%if %with_rt
rm -f linux-$KERNELRELEASE-rt/.patches
%endif

# Hardlink duplicate files automatically (from package fdupes).
%fdupes $RPM_BUILD_ROOT

cd $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE-obj
set -- *
[ -e %_target_cpu ] || ln -s $1 %_target_cpu
%ifarch ppc ppc64
[ -e ppc ] || ln -s $1 ppc
[ -e ppc64 ] || ln -s $1 ppc64
%endif

cd $RPM_BUILD_ROOT/usr/src

rm -f `find linux-$KERNELRELEASE -name ".gitignore"`

# Remove $RPM_BUILD_ROOT prefix from symlinks.
for link in $(find $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE-obj -type l); do
    target=$(readlink $link)
    rm -f $link
    ln -s ${target/$RPM_BUILD_ROOT/} $link
done

ln -sf linux linux  # dummy symlink
ln -sf linux-obj linux-obj  # dummy symlink

%install
source .rpm-defs

# Install the documentation and example Kernel Module Package.
DOC=$RPM_BUILD_ROOT/usr/share/doc/packages/%name
mkdir -p $DOC
cp %_sourcedir/README.SUSE $DOC
ln -s /usr/share/doc/packages/%name/README.SUSE \
    $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE/

install -m 755 -d $RPM_BUILD_ROOT/etc/rpm
install -m 644 %_sourcedir/macros.kernel-source $RPM_BUILD_ROOT/etc/rpm/
install -m 755 -d $RPM_BUILD_ROOT/usr/lib/rpm
install -m 644 %_sourcedir/kernel-module-subpackage \
    $RPM_BUILD_ROOT/usr/lib/rpm/

for variant in '' '-rt'; do
    (   cat %_sourcedir/functions.sh
	sed -e "s:@KERNELRELEASE@:$KERNELRELEASE:g" \
	    -e "s:@VARIANT@:$variant:g" \
	    %_sourcedir/source-post.sh
    ) > source-post$variant.sh
done

%post -f source-post.sh

%files -f kernel-source.files

%package -n @NAME@-rt
Summary:      Dummy summary
License:      GPL
Group:        Development/Sources
Requires(post): coreutils sed
Provides:       kernel-source-rt = @RPMVERSION@-%source_rel

%description -n @NAME@-rt
Dummy description.

%post -n @NAME@-rt -f source-post-rt.sh

%if %with_rt
%files -n @NAME@-rt -f kernel-source-rt.files
%endif
