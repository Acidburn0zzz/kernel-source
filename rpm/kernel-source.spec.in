#
# spec file for package @NAME@ (Version @RPMVERSION@)
#
# Copyright (c) 2003 SuSE Linux AG, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://www.suse.de/feedback/
#

# norootforbuild
# neededforbuild kernel-dummy

Name:         @NAME@
License:      GPL
Provides:     linux
Autoreqprov:  off
Summary:      Dummy summary
Group:        Development/Sources
%if "@NAME@" == "kernel-source"
Provides:     linux lx_suse lx_sus22 lx_sus24
Obsoletes:    linux lx-gdt lx-hack lx-suse lx1162_1 lx1162_2 lx1212_1 lx1212_2 lx1213_1 lx1213_2 lx121_1 lx121_2 lx126_1 lx126_2 lx129_1 lx129_2 lx_large kernel_headers lx_suse lx_sus22 lx_sus24
%endif
PreReq:       /sbin/insserv /usr/bin/grep /bin/sed /bin/uname /bin/mkdir /bin/cat /bin/ln /bin/rm /etc/rc.status
Version:      @RPMVERSION@
Release:      0
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-@SRCVERSION@.tar.bz2
Source1:      functions.sh
Source2:      source-post.sh
Source8:      trigger-script.sh.in
Source11:     post.sh
Source12:     postun.sh
Source13:     series.conf
Source14:     arch-symbols
Source15:     guards
Source21:     config.conf
Source22:     config.tar.bz2
Source23:     supported.conf
Source30:     config-subst
Source32:     running-kernel.init.in
Source33:     check-for-config-changes
Source34:     check-supported-list
Source35:     install-configs
Source36:     Makefile.suse
Source37:     README.SUSE
Source40:     build-source-timestamp
@BINARY_SPEC_FILES@
Source100:    patches.arch.tar.bz2
Source101:    patches.fixes.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.rpmify.tar.bz2
Source104:    patches.uml.tar.bz2
Source105:    patches.suse.tar.bz2
Source106:    patches.addon.tar.bz2
Source107:    patches.xen.tar.bz2
Source120:    hello.tar.bz2
BuildRoot:    %_tmppath/%name-%version-build
Prefix:       /usr/src
%ifarch ppc
# do not waste space on the CDs and on the mirrors
NoSource:     0
%endif

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes})
%define preconf @PRECONF@
%define symbols %(export PATCH_ARCH=%_target_cpu ; cd %_sourcedir ; set -- $(./arch-symbols) $([ -e extra-symbols ] && cat extra-symbols) ; echo $*)

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-@SRCVERSION@.tar.bz2 ]; then
    echo "Please get a copy of linux-@SRCVERSION@.tar.bz2 from" \
	 "ftp://ftp.kernel.org/pub/linux/kernel/v2.6/."
fi

echo "Architecture symbol(s): %symbols"

# Unpack all sources and patches
%setup -q -c -T -a 22 -a 100 -a 101 -a 102 -a 103 -a 104 -a 105 -a 106 -a 107

%build
mkdir -p $RPM_BUILD_ROOT/usr/src
cd $RPM_BUILD_ROOT/usr/src

# Unpack the vanilla kernel sources
bzip2 -cd %_sourcedir/linux-@SRCVERSION@.tar.bz2 \
| tar xf -
cd linux-@SRCVERSION@
# Hello Linus: hint, hint ...
chmod -Rf a+rX,g-w,o-w .

# Apply the patches needed for this architecture.
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf); do
    if ! patch -s -E -p1 --no-backup-if-mismatch -i %_builddir/@NAME@-@RPMVERSION@/$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done

%_sourcedir/install-configs %_sourcedir %_builddir/@NAME@-@RPMVERSION@ %release

# Find out the precise kernel release string
KERNELRELEASE=$(
    echo -e 'extract:\n\t@echo $(KERNELRELEASE)\ninclude Makefile' \
    | make -f -)
if [ "$KERNELRELEASE" != @VERSION@@EXTRAVERSION@-%release ]; then
    echo "Please correct EXTRAVERSION in scripts/config.sh in the CVS" >&2
    exit 1
fi

cat > %_builddir/%{name}-%{version}/.rpm-defs <<EOF
KERNELRELEASE=$KERNELRELEASE
SYMBOLS=$symbols
EOF

cd ..
mv linux-@SRCVERSION@ linux-$KERNELRELEASE
cd linux-$KERNELRELEASE

chmod +x arch/ia64/scripts/toolchain-flags  # agruen: necessary?

cd $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE
for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf); do
    arch=${config%/*}
    flavor=${config#*/}
    config=arch/$arch/defconfig.$flavor

    # UML needs a slightly different setup; we cannot support it
    # in the meta-configuration.
    [ $flavor = um ] && continue
    [ $flavor = xen ] && continue

    o=$RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE-obj/$arch/$flavor
    mkdir -p $o
    cp $config $o/.config
%ifarch mips
    echo "CONFIG_CROSSCOMPILE=y" >> $o/.config
%endif

    MAKE_ARGS="ARCH=$arch O=$o"
    make silentoldconfig $MAKE_ARGS < /dev/null
    %_sourcedir/check-for-config-changes $config $o/.config

    make prepare-all $MAKE_ARGS
    make clean $MAKE_ARGS
    rm -rf $o/.config.old $o/include/config

    # Replace the Makefile in the object directory with a version
    # that has relative path names.
    read VERSION PATCHLEVEL SUBLEVEL <<-EOF
	$(set -- @VERSION@ ; echo ${*//./ })
	EOF
    source scripts/mkmakefile \
	../../../linux-$KERNELRELEASE \
	../linux-$KERNELRELEASE-obj/$arch/$flavor \
	$VERSION \
	$PATCHLEVEL \
	> $o/Makefile
done

cd $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE-obj
set -- */*
for arch_flavor in $* ; do
    if ! [ -e obj.files ]; then
	(cd $arch_flavor ; find -type f) > obj.files
    fi

    # Strip ELF files
    while read file ; do
	strip $file
    done <<-EOF
	$(xargs -i% file $arch_flavor/% < obj.files \
	    | grep ELF \
	    | sed -e 's/: .*//')
	EOF

    if [ $arch_flavor != $1 ]; then
	while read file ; do
	    if [ -s $arch_flavor/$file ] \
	       && cmp -s $1/$file $arch_flavor/$file ; then
		ln -f $1/$file $arch_flavor/$file
	    fi
	done < obj.files
    fi
done
rm -f obj.files

cd $RPM_BUILD_ROOT/usr/src

cp -p %_sourcedir/Makefile.suse linux-$KERNELRELEASE/

for name in nftlcore.c nftlmount.c inftlcore.c inftlmount.c ftl.c; do
  rm linux-$KERNELRELEASE/drivers/mtd/$name
done

# Remove $RPM_BUILD_ROOT prefix from symlinks.
for link in $(find $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE-obj -type l); do
    target=$(readlink $link)
    rm -f $link
    ln -s ${target/$RPM_BUILD_ROOT/} $link
done

ln -sf linux linux  # dummy symlink
ln -sf linux-obj linux-obj  # dummy symlink

%install
source .rpm-defs

# Install the documentation and demo modules
DOC=$RPM_BUILD_ROOT/usr/share/doc/packages/%name
mkdir -p $DOC
cp %_sourcedir/README.SUSE $DOC
bzip2 -cd  %_sourcedir/hello.tar.bz2 \
| tar -xf - -C $DOC
ln -s /usr/share/doc/packages/%name/README.SUSE \
    $RPM_BUILD_ROOT/usr/src/linux-$KERNELRELEASE/

%if %preconf
# Generate a list of known flavors.
shopt -s nullglob
flavors=
for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf); do
    arch=${config%/*}
    flavor=${config#*/}

    flavors="$flavors $arch/$flavor"
done
flavors="${flavors:1}"
shopt -u nullglob

# Init script that adapts /usr/src/linux to the running kernel.
mkdir -p $RPM_BUILD_ROOT/etc/init.d
sed -e "s,@ARCHS_FLAVORS@,$flavors," %_sourcedir/running-kernel.init.in \
> $RPM_BUILD_ROOT/etc/init.d/running-kernel
%endif

cat >kernel-source.files <<EOF
%%defattr(-, root, root)
%%ghost /usr/src/linux
%%ghost /usr/src/linux-obj
/usr/src/linux-$KERNELRELEASE
/usr/src/linux-$KERNELRELEASE-obj
/usr/share/doc/packages/%name
%if %preconf
%%attr(755, root, root) /etc/init.d/running-kernel
%endif
EOF

(   cat %_sourcedir/functions.sh
    sed -e "s:@KERNELRELEASE@:$KERNELRELEASE:g" %_sourcedir/source-post.sh
) > source-post.sh

%post -f source-post.sh

%postun
%if %preconf
%{insserv_cleanup}
%endif

%files -f kernel-source.files
