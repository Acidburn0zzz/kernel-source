#
# spec file for package @NAME@ (Version @VERSION@)
#
# Copyright (c) 2003 SuSE Linux AG, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://www.suse.de/feedback/
#

# norootforbuild
# neededforbuild

Name:         @NAME@
License:      GPL
Provides:     linux
Autoreqprov:  off
Summary:      Dummy summary
Group:        Development/Sources
Requires:     make c_compiler
%if "@NAME@" == "kernel-source"
Provides:     linux lx_suse lx_sus22 lx_sus24
Obsoletes:    linux lx-gdt lx-hack lx-suse lx1162_1 lx1162_2 lx1212_1 lx1212_2 lx1213_1 lx1213_2 lx121_1 lx121_2 lx126_1 lx126_2 lx129_1 lx129_2 lx_large kernel_headers lx_suse lx_sus22 lx_sus24
%endif
PreReq:       /sbin/insserv
Version:      @VERSION@
Release:      1
%define kversion %(echo %version | sed s/_/-/g)
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-%kversion.tar.bz2
Source1:      functions.sh
Source2:      source-post.sh
Source10:     series.conf
Source11:     arch-symbols
Source12:     guards
Source21:     config.conf
Source22:     config.tar.bz2
Source30:     config-subst
Source31:     merge-headers
Source32:     running-kernel.init.in
Source33:     check-for-config-changes
Source40:     timestamp
Source100:    patches.arch.tar.bz2
Source101:    patches.fixes.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.rpmify.tar.bz2
Source104:    patches.uml.tar.bz2
Source105:    patches.suse.tar.bz2
%define ver_str %kversion-%release
BuildRoot:    %_tmppath/%name-%version-build
Prefix:       /usr/src
%ifarch ppc
# do not waste space on the CDs and on the mirrors
NoSource:     0
%endif

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,merge-headers,check-for-config-changes})
%define preconf @PRECONF@
%define symbols %(export PATCH_ARCH=%_target_cpu ; cd %_sourcedir ; set -- $(./arch-symbols) $([ -e extra-symbols ] && cat extra-symbols) ; echo $*)

%description
Dummy description.

%prep
echo "Architecture symbol(s): %symbols"

# Unpack all sources and patches
%setup -q -T -n config          -b 22
%setup -q -T -n patches.arch    -b 100
%setup -q -T -n patches.fixes   -b 101
%setup -q -T -n patches.drivers -b 102
%setup -q -T -n patches.rpmify  -b 103
%setup -q -T -n patches.uml     -b 104
%setup -q -T -n patches.suse    -b 105

# The kernel source tree is unpacked last so that RPM_BUILD_DIR
# points to the right path, /usr/src/packages/BUILD/linux-%version
%setup -q -n linux-%kversion

# Apply the patches needed for this architecture.
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf); do
    if ! patch -s -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done

# Install all config files. Some of them might not work in the
# kernel sources because of architecture specific patches, but
# we don't care.
configs="$(%_sourcedir/guards --list < %_sourcedir/config.conf)"
for config in $configs; do
    name=$(basename $config)
    path=arch/$(dirname $config)/defconfig.$name
    mkdir -p $(dirname $path)
    cat ../config/$config \
	| %_sourcedir/config-subst CONFIG_CFGNAME '"'$name'"' \
	| %_sourcedir/config-subst CONFIG_RELEASE '"'%release'"' \
	| %_sourcedir/config-subst CONFIG_SUSE_KERNEL y \
	> $path
done

# For all architectures included, if there is a defconfig.default,
# make that the defconfig as well. If there is no defconfig.default,
# also remove the defconfig, as it is obviously not a tested, and
# woldn't work, anyway.
for config in $configs; do
    arch=${config%/*}
    if [ -e arch/$arch/defconfig.default ]; then
	cat arch/$arch/defconfig.default > arch/$arch/defconfig
    else
	rm -f arch/$arch/defconfig
    fi
done

chmod +x arch/ia64/scripts/toolchain-flags  # agruen: necessary?

%build
# Collect the filelist
find . -mindepth 1 -not -path ./linux.files > linux.files

## Create a custom hostname utility and place it in the path
## before the system wide one so that we don't need to create
## a temporary make file.
#export PATH=%_builddir:$PATH
#cat > %_builddir/hostname <<-EOF
#	#! /bin/sh
#	echo "%_arch.suse.de"
#	EOF
#chmod +x %_builddir/hostname

%if %preconf
# Configure the kernel sources for each supported configuration

mkdir FLAVORS
for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf); do
    arch=${config%/*}
    flavor=${config#*/}
    config=arch/$arch/defconfig.$flavor

    # UML needs a slightly different setup; we cannot support it
    # in the meta-configuration.
    [ $flavor = um ] && continue

    cfg="$(echo ARCH_FLAVOR_${arch}_${flavor} | tr a-z- A-Z_)"
    ln -s ../$cfg FLAVORS/'"'$arch-$flavor'"'

    cp $config .config
%ifarch mips
    echo "CONFIG_CROSSCOMPILE=y" >> .config
%endif

    MAKE_ARGS="ARCH=$arch"
    make oldconfig $MAKE_ARGS > /dev/null
    %_sourcedir/check-for-config-changes $config .config

    make include/linux/version.h $MAKE_ARGS
    mkdir $cfg
    cp .config $cfg/.config
    cp include/linux/version.h include/linux/autoconf.h $cfg/
#%ifarch x86_64
#    make include/asm-x86_64/offset.h $MAKE_ARGS
#    cp include/asm-x86_64/offset.h $cfg/
#%endif
    make -s distclean $MAKE_ARGS
done

# Merge the configurations

any_defined() {
    while [ $# -gt 1 ]; do
	echo -n "defined($1) || "
	shift
    done
    echo -n "defined($1)"
}

(   cat <<-EOF
	ifeq (\$(ARCH_FLAVOR),)
	-include /var/adm/running-kernel.make
	endif
	EOF
	cd FLAVORS
	%_sourcedir/merge-headers --make ARCH_FLAVOR */.config
) > .config
(   cat <<-EOF
	#if !($(any_defined ARCH_FLAVOR_*))
	# include </var/adm/running-kernel.h>
	#endif
	EOF
    %_sourcedir/merge-headers ARCH_FLAVOR_*/autoconf.h
) > include/linux/autoconf.h
(   cat <<-EOF
	#if !($(any_defined ARCH_FLAVOR_*))
	# include </var/adm/running-kernel.h>
	#endif
	EOF
    %_sourcedir/merge-headers ARCH_FLAVOR_*/version.h
) > include/linux/version.h
#%ifarch x86_64
#(   cat <<-EOF
#	#if !($(any_defined ARCH_FLAVOR_*))
#	# include </var/adm/running-kernel.h>
#	#endif
#	EOF
#    %_sourcedir/merge-headers ARCH_FLAVOR_*/offset.h
#) > include/asm-x86_64/offset.h
#%endif

# Add files generated by configuring
any_flavor="$( cd FLAVORS ; set -- * ; echo $1 )"
make include/asm $MAKE_ARGS ARCH_FLAVOR='"'$any_flavor'"'
cat >> linux.files <<-EOF
	./.config
	./include/linux/version.h
	./include/linux/autoconf.h
	./include/asm
	EOF

rm -r ARCH_FLAVOR_* FLAVORS
%endif

%install
rm -rf $RPM_BUILD_ROOT
mkdir -p $RPM_BUILD_ROOT/usr/src/linux-%ver_str
ln -sf linux $RPM_BUILD_ROOT/usr/src/linux  # dummy symlink
cpio -p $RPM_BUILD_ROOT/usr/src/linux-%ver_str < linux.files

cp %_sourcedir/timestamp \
    $RPM_BUILD_ROOT/usr/src/linux-%ver_str/timestamp
touch -d "$(cat %_sourcedir/timestamp)" \
    $RPM_BUILD_ROOT/usr/src/linux-%ver_str/timestamp

## Install the documentation and demo modules
DOC=$RPM_BUILD_ROOT/usr/share/doc/packages/%name
mkdir -p $DOC
#cp %{SOURCE?} $DOC
#bzip2 -cd %{SOURCE21} | tar -xf - -C $DOC
#ln -s /usr/share/doc/packages/%name/README.SuSE \
#    $RPM_BUILD_ROOT/usr/src/linux/

%if %preconf
# Generate a list of known flavors.
shopt -s nullglob
flavors=
for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf); do
    arch=${config%/*}
    flavor=${config#*/}

    # UML needs a slightly different setup; we cannot support it
    # in the meta-configuration.
    [ "$flavor" = um ] && continue

    flavors="$flavors $arch-$flavor"
done
flavors="${flavors:1}"
shopt -u nullglob

# The init script that adapts /var/adm/running-kernel.{h,make}.
mkdir -p $RPM_BUILD_ROOT/etc/rc.d
sed -e "s,@FLAVORS@,$flavors," %_sourcedir/running-kernel.init.in \
> $RPM_BUILD_ROOT/etc/rc.d/running-kernel

mkdir -p $RPM_BUILD_ROOT/var/adm
touch $RPM_BUILD_ROOT/var/adm/running-kernel.h \
      $RPM_BUILD_ROOT/var/adm/running-kernel.make
%endif

cat %_sourcedir/{functions.sh,source-post.sh}  >> source-post.sh

%post -f source-post.sh

%postun
%if %preconf
%{insserv_cleanup}
%endif

%files
%defattr(-, root, root)
%ghost /usr/src/linux
/usr/src/linux-%ver_str
/usr/share/doc/packages/%name
%if %preconf
%ghost /var/adm/running-kernel.h
%ghost /var/adm/running-kernel.make
%attr(755, root, root) /etc/rc.d/running-kernel
%endif
