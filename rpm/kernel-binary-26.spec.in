divert(-1)

# This file is processed with m4, with "«" and "»" as the string
# delimiters after the CFGNAME, ARCH, and PATCHES symbols, enclosed
# by @ characters, have been substituted. The default delimiters and
# angle brackets (a common fallback) would both interfere with shell
# syntax.

# Change quote characters:
changequote(«, »)

# Macros start with @ here:
changesyntax(«@@»)

@define(km,@dnl
@ifelse(@ARCH@, i386,	km_ndiswrapper
	)@dnl
)

@divert(0)@dnl
#
# spec file for package @NAME@ (Version @VERSION@)
#
# Copyright (c) 2004 SuSE Linux AG, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://www.suse.de/feedback/
#

# norootforbuild
«#» neededforbuild  gpp libgpp popt popt-devel @km
# usedforbuild    aaa_base acl attr bash bind-utils bison bzip2 coreutils cpio cpp cvs cyrus-sasl db devs diffutils e2fsprogs file filesystem fillup findutils flex gawk gdbm-devel glibc glibc-devel glibc-locale gpm grep groff gzip info insserv kbd less libacl libattr libgcc libstdc++ libxcrypt m4 make man mktemp modutils ncurses ncurses-devel net-tools netcfg openldap2-client openssl pam pam-devel pam-modules patch permissions popt ps rcs readline sed sendmail shadow strace syslogd sysvinit tar texinfo timezone unzip util-linux vim zlib zlib-devel autoconf automake binutils cracklib gcc gcc-c++ gdbm gettext libstdc++-devel libtool perl popt-devel rpm

Name:         @NAME@
Version:      @VERSION@
Release:      0
Summary:      Dummy summary
License:      GPL
Group:        System/Kernel
Provides:     kernel
Autoreqprov:  on
%define kversion %(echo %version | sed s/_/-/g)
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-%kversion.tar.bz2
Source1:      functions.sh
Source8:      trigger-script.sh.in
Source10:     post.sh
Source11:     postun.sh
Source20:     series.conf
Source21:     config.conf
Source22:     config.tar.bz2
Source30:     arch-symbols
Source31:     guards
Source32:     config_subst.sh
Source33:     check-for-config-changes
Source100:    patches.arch.tar.bz2
Source101:    patches.fixes.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.rpmify.tar.bz2
Source104:    patches.uml.tar.bz2
Source105:    patches.suse.tar.bz2
PreReq:       /usr/bin/test /sbin/mkinitrd /bin/df /usr/bin/du /bin/cp /bin/sed /usr/bin/cut /usr/bin/expr /bin/touch
BuildRoot:    %_tmppath/%name-%version-build
%define ver_str %kversion-%release-@CFGNAME@

# These files are found in the kernel-source package:
NoSource:     0
NoSource:     100
NoSource:     101
NoSource:     102
NoSource:     103
NoSource:     104
NoSource:     105

%description
Dummy description.

%prep
# Unpack all sources and patches
%setup -q -T -n config          -b 22
%setup -q -T -n patches.arch    -b 100
%setup -q -T -n patches.fixes   -b 101
%setup -q -T -n patches.drivers -b 102
%setup -q -T -n patches.rpmify  -b 103
%setup -q -T -n patches.uml     -b 104
%setup -q -T -n patches.suse    -b 105

# The kernel source tree is unpacked last so that %buildsubdir
# points to the right path, linux-%kversion
%setup -q -n linux-%kversion

# Determine which symbols to use for controlling the patch/file
# selection mechanism.
export PATCH_ARCH=%_target_cpu
chmod +x %_sourcedir/arch-symbols
SYMBOLS="$(%_sourcedir/arch-symbols)"
if [ -z "$SYMBOLS" ]; then
    echo "Unsupported architecture \`$PATCH_ARCH'" >&2
    exit 1
fi
if [ -e %_sourcedir/extra-symbols ]; then
    SYMBOLS="$SYMBOLS $(cat %_sourcedir/extra-symbols)"
fi
echo "Architecture symbol(s): $SYMBOLS"

# Apply the patches needed for this architecture.
chmod +x %_sourcedir/guards
for patch in $(%_sourcedir/guards $SYMBOLS < %_sourcedir/series.conf); do
    if ! patch -s -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done

for when in pre preun post postun ; do
    sed -e "s/@when@/$when/g" %{SOURCE8} > $when.sh
done

cat %{SOURCE1} %{SOURCE10} >> post.sh
cat %{SOURCE1} %{SOURCE11} >> postun.sh

%build
BOPTS="@ifelse(«@CFGNAME@», «um», «ARCH=um»)"

source %{SOURCE32}  # config_subst.sh
cat ../config/@ARCH@/@CFGNAME@ \
    | config_subst CONFIG_CFGNAME '"'@CFGNAME@'"' \
    | config_subst CONFIG_RELEASE %release \
    > .config

cp .config .config.orig
make ${BOPTS} oldconfig
chmod +x %{SOURCE33}  # check-for-config-changes
%{SOURCE33} .config.orig .config
rm .config.orig

export KBUILD_VERBOSE=0
make @ifelse(«@CFGNAME@», «um», «linux», «all») ${BOPTS} %{?jobs:-j%jobs}

mkdir -p %_builddir/modules-%kversion
shopt -s nullglob
for dir in /usr/src/kernel-modules/*; do
    if [ -e $dir/Makefile ]; then
	build_dir="%_builddir/modules-%kversion/${dir##*/}"
	cp -r $dir $build_dir

	make -C $build_dir modules ${BOPTS} %{?jobs:-j%jobs} \
	    KERNEL_SOURCE="%_builddir/linux-%kversion" \
	    ARCH=@ARCH@ SUBARCH=@SUBARCH@
    fi
done
shopt -u nullglob

%install

# Don't check for stale symlinks in the brp-symlink check:
export NO_BRP_STALE_LINK_ERROR=yes

BOPTS="@ifelse(«@CFGNAME@», «um», «ARCH=um»)"

rm -rf %buildroot
mkdir -p %buildroot/boot
cp -a System.map %buildroot/boot/System.map-%ver_str
%ifnarch ia64
cp -a vmlinux %buildroot/boot/vmlinux-%ver_str
gzip -f9 %buildroot/boot/vmlinux-%ver_str
%endif

@ifelse(«@CFGNAME@», «um», «
mkdir -p %buildroot/usr/bin
cp linux %buildroot/usr/bin/linux-%ver_str
», «
%ifarch %ix86 x86_64
cp -a arch/*/boot/bzImage \
	%buildroot/boot/vmlinuz-%ver_str
%endif
%ifarch ia64
cp -a vmlinux.gz %buildroot/boot/vmlinuz-%ver_str
%endif
if [ -e Kerntypes ]; then
    cp -p Kerntypes  %buildroot/boot/Kerntypes-%ver_str
fi
»)@dnl

%ifnarch ia64
ln -s vmlinuz %buildroot/boot/vmlinuz
ln -s initrd  %buildroot/boot/initrd
%endif
gzip -c9 modversions.@CFGNAME@ \
    > %buildroot/boot/modversions-%ver_str.gz
make	${BOPTS} INSTALL_MOD_PATH="%buildroot" modules_install

shopt -s nullglob
for build_dir in %_builddir/modules-%kversion/* ; do
    make -C $build_dir install ${BOPTS} \
	KERNEL_SOURCE="%_builddir/linux-%kversion" \
	ARCH=@ARCH@ SUBARCH=@SUBARCH@ \
	INSTALL_MOD_PATH="%buildroot"
done
shopt -u nullglob

# We were building in %_builddir/linux-%kversion, but the sources will
# later be installed in /usr/src/linux-%kversion-%release. Fix up the
# build symlink.
rm -f %buildroot/lib/modules/%ver_str/build
ln -s /usr/src/linux-%kversion-%release \
    %buildroot/lib/modules/%ver_str/build

# Set up the override directory: Modules in that path take precedence
# over modules in the directory specific to this package.
mkdir -p %buildroot/lib/modules/%version-override-@CFGNAME@
/sbin/depmod -b %buildroot -ae -F %buildroot/boot/System.map-%ver_str %ver_str

# Collect the file list.
(   cd %buildroot
    echo "%defattr(-, root, root)"
    find boot \
	-type l -printf '%%%%ghost /%%p\n' -o \
	-type f -printf '/%%p\n'
    find lib/modules/%ver_str \
	-type d -printf '%%%%dir /%%p\n' -o \
	-path '*/modules.*' -printf '%%%%verify(not md5 size mtime) /%%p\n' -o \
	-printf '/%%p\n'
    echo "/lib/modules/%version-override-@CFGNAME@"
) > %_builddir/linux-%kversion/kernel.files

%pre -f pre.sh

%preun -f preun.sh

%post -f post.sh

%postun -f postun.sh

#%clean
#test "%buildroot" != "" -a "%buildroot" != "/" &&\
#	rm -rf "%buildroot"

%files -f kernel.files

@ifelse(«@CFGNAME@», «um», «
%package -n um-host-kernel
Summary:      Dummy summary
Group:        System/Kernel

%description -n um-host-kernel
Dummy description.

%files -n um-host-kernel
/usr/bin/linux-%ver_str
»)@dnl
