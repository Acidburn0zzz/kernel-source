#
# spec file for package @NAME@ (Version @VERSION@)
#
# Copyright (c) 2004 SuSE Linux AG, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://www.suse.de/feedback/
#

# norootforbuild
# neededforbuild  gpp libgpp popt popt-devel python kernel-dummy kernel-module-packages gpg @EXTRA_NEEDS@

# ( kernel-module-packages is expanded into the list of all km_*
#   packages for each architecture by Autobuild. )

Name:         @NAME@
Version:      @VERSION@
Release:      0
Summary:      Dummy summary
License:      core kernel and most modules are GPL, some proprietary
Group:        System/Kernel
%if "@NAME@" != "kernel-um"
Provides:     kernel = @VERSION@-%release
%endif
@PROVIDES_OBSOLETES@
%ifarch x86_64
%if "@NAME@" != "kernel-default"
Requires:     irqbalance
%endif
%endif
Autoreqprov:  on
%define kversion %(echo %version | sed s/_/-/g)
%define my_builddir %_builddir/%{name}-%{version}
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-%kversion.tar.bz2
Source1:      functions.sh
Source8:      trigger-script.sh.in
Source11:     postun.sh
Source12:     post.sh
Source20:     series.conf
Source21:     config.conf
Source22:     supported.conf
Source25:     config.tar.bz2
Source30:     arch-symbols
Source31:     guards
Source32:     config-subst
Source33:     check-for-config-changes
Source34:     check-supported-list
Source35:     install-configs
Source40:     build-source-timestamp
Source100:    patches.arch.tar.bz2
Source101:    patches.fixes.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.rpmify.tar.bz2
Source104:    patches.uml.tar.bz2
Source105:    patches.suse.tar.bz2
Source106:    patches.addon.tar.bz2
PreReq:       /usr/bin/test /sbin/mkinitrd /bin/df /usr/bin/du /bin/cp /bin/sed /usr/bin/cut /usr/bin/expr /bin/touch
BuildRoot:    %_tmppath/%name-%version-build
ExclusiveArch: @ARCHS@

# These files are found in the kernel-source package:
NoSource:     0
NoSource:     100
NoSource:     101
NoSource:     102
NoSource:     103
NoSource:     104
NoSource:     105
NoSource:     106

# Will failures in external modules abort the kernel build (0/1)?
%define extmod_failures_are_fatal 0

# Will unknown sybols cause the kernel build to fail (0/1)?
%define unknown_symbol_check 0

# Will modules not listed in supported.conf abort the kernel build (0/1)?
%define supported_modules_check 0

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes,check-supported-list})
%define ver_str %kversion-%release-@CFGNAME@
%define symbols %(export PATCH_ARCH=%_target_cpu ; cd %_sourcedir ; echo $(./arch-symbols) $([ -e extra-symbols ] && cat extra-symbols))
%define build_um %([ @CFGNAME@ != um ] ; echo $?)

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-%kversion.tar.bz2 ]; then
    echo "The @NAME@-@VERSION@.nosrc.rpm package does not contain the" \
	 "complete sources. Please install kernel-source-@VERSION@.src.rpm."
    exit 1
fi

echo "Architecture symbol(s): %symbols"

# Unpack all sources and patches
%setup -q -c -T -a 0 -a 25 -a 100 -a 101 -a 102 -a 103 -a 104 -a 105 -a 106

# Generate the list of supported modules
(   %_sourcedir/guards %symbols < %_sourcedir/supported.conf
    for how in external; do
	(   %_sourcedir/guards %symbols < %_sourcedir/supported.conf
	    %_sourcedir/guards %symbols < %_sourcedir/supported.conf
	    %_sourcedir/guards %symbols $how < %_sourcedir/supported.conf \
	) | sort | uniq -u | sed -e 's:$: '"$how"':'
    done
) | sed -e 's,.*/,,' | sort > linux-%kversion/Module.supported

# Create the scipts for %pre, %post, %preun, %postun
for when in pre preun post postun ; do
    sed -e "s/@when@/$when/g" %_sourcedir/trigger-script.sh.in > $when.sh
done

echo 'run_mkinitrd=1' >> post.sh
cat %_sourcedir/{functions.sh,post.sh} >> post.sh
cat %_sourcedir/{functions.sh,postun.sh} >> postun.sh
#
cd linux-%kversion

# Find out for which architecture to build. We do this here, and use the
# result in the %build and %install sections.
#
# On architectures with a bi-arch or cross compiler, we can compile for
# an architecture different from %arch. The location of the config file
# tells us for which architecture to compile.
set -- $(
    for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf) ; do
	[ ${config#*/} = @CFGNAME@ ] || continue
	echo $config
    done)
if [ $# -ne 1 ]; then
    echo "$# config files found for this spec file (but one needed)" >&2
    exit 1
fi
flavor=${1#*/}
subarch=${1%/*}

# Apply the patches needed for this architecture.
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf); do
    if ! patch -s -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done

%_sourcedir/install-configs %_sourcedir %my_builddir %release
config=arch/$subarch/defconfig.$flavor

# We compile for this sub-architecture (i.e., machine architecture):
%if %build_um
cat > .rpm-defs <<EOF
ARCH=um
SUBARCH=$subarch
FLAVOR=$flavor
MAKE_ARGS="ARCH=um SUBARCH=$subarch"
CONFIG=$config
EOF
%else
cat > .rpm-defs <<EOF
ARCH=$subarch
SUBARCH=$subarch
FLAVOR=$flavor
MAKE_ARGS="ARCH=$subarch"
CONFIG=$config
EOF
%endif

%build
cd linux-%kversion
source .rpm-defs
if [ -n "$CONFIG" ]; then
    cp $CONFIG .config
fi

cp .config .config.orig
make silentoldconfig $MAKE_ARGS < /dev/null
%_sourcedir/check-for-config-changes .config.orig .config
rm .config.orig

# Override the timestamp `uname -v' reports with the build
# timestamp.
export BUILD_TIMESTAMP="$(head -n 1 %_sourcedir/build-source-timestamp)"

# The following branch/timestamp will end up in Oopses.
export OOPS_TIMESTAMP="$(
    echo -n $(sed -ne 's/^CVS Branch: \(.*\)/\1-/p' \
		  %_sourcedir/build-source-timestamp)
    head -n 1 %_sourcedir/build-source-timestamp \
	| tr -dc 0-9)"

export KBUILD_VERBOSE=0
make %{?jobs:-j%jobs} all $MAKE_ARGS

mkdir -p %my_builddir/modules-%kversion
shopt -s nullglob
for dir in /usr/src/kernel-modules/*; do
    if [ -e $dir/Makefile ]; then
	build_dir=%my_builddir/modules-%kversion/${dir##*/}
	cp -a $dir $build_dir

	rm -f $build_dir-failed
	if ! make -C $build_dir %{?jobs:-j%jobs} modules $MAKE_ARGS \
		  KERNEL_SOURCE=%my_builddir/linux-%kversion; then
%if %extmod_failures_are_fatal
	    exit 1
%endif
	    echo "External module error: $dir failed"
	    touch $build_dir-failed
	fi
    fi
done
shopt -u nullglob

%install
# get rid of /usr/lib/rpm/brp-strip-debug 
# strip removes too much from the vmlinux ELF binary
export NO_BRP_STRIP_DEBUG=true

cd linux-%kversion

source .rpm-defs

# /lib/modules/%ver_str/build will be a stale symlink until the
# kernel-source package is installed. Don't check for stale symlinks
# in the brp-symlink check:
export NO_BRP_STALE_LINK_ERROR=yes

rm -rf %buildroot
mkdir -p %buildroot/boot
# (Could strip out non-public symbols.)
cp -p System.map %buildroot/boot/System.map-%ver_str

%if %build_um
    mkdir -p %buildroot/usr/bin
    cp vmlinux %buildroot/usr/bin/linux-%ver_str
    cp vmlinux %buildroot/boot/linux-%ver_str
    image=linux
%else
%ifarch %ix86 x86_64
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-%ver_str.gz
    cp -p arch/*/boot/bzImage %buildroot/boot/vmlinuz-%ver_str
    image=vmlinuz
%endif
%ifarch alpha
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-%ver_str.gz
    cp -p arch/alpha/boot/vmlinux.gz %buildroot/boot/vmlinuz-%ver_str
    image=vmlinuz
%endif
%ifarch ppc ppc64
    cp -p vmlinux %buildroot/boot/vmlinux-%ver_str
    image=vmlinux
%endif
%ifarch ia64
    cp -p vmlinux.gz %buildroot/boot/vmlinuz-%ver_str
    image=vmlinuz
%endif
%ifarch s390 s390x
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-%ver_str.gz
    cp -p arch/s390/boot/image %buildroot/boot/image-%ver_str
    image=image
%endif
    if [ -e init/kerntypes.o ]; then
	cp init/kerntypes.o %buildroot/boot/Kerntypes-%ver_str
    fi
%endif
ln -s $image %buildroot/boot/$image
ln -s initrd %buildroot/boot/initrd
ln -s $image %buildroot/boot/$image.previous
ln -s initrd %buildroot/boot/initrd.previous
cp .config %buildroot/boot/config-%ver_str

make modules_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot

shopt -s nullglob
for build_dir in %my_builddir/modules-%kversion/* ; do
    [ -d $build_dir ] || continue
    if [ -e $build_dir-failed ]; then
	echo "Build of $build_dir has failed"
    else
	make -C $build_dir install $MAKE_ARGS \
	    KERNEL_SOURCE=%my_builddir/linux-%kversion \
	    INSTALL_MOD_PATH=%buildroot
    fi
done
shopt -u nullglob

if ! %_sourcedir/check-supported-list \
	%_sourcedir %buildroot/lib/modules/%ver_str; then
%if %supported_modules_check
    exit 1
%endif
    echo "Consistency check error: please update supported.conf."
fi

#if [ -e Module.symvers ]; then
#    gzip -c9 Module.symvers \
#	> %buildroot/boot/symvers-%kversion-%release-$ARCH-@CFGNAME@.gz
#fi

# Recreate Module.symvers, and include all symbols from modules in
# km_* packages.
symver() {
    local file=$1 name=${1%.ko}
    nm $file \
    | sed -ne 's,^0*\([0-9a-f]\{8\}\) A __crc_\(.*\),0x\1\t\2\t'"$name"',p'
}

(   symver vmlinux
    moddir=%buildroot/lib/modules/%ver_str
    cd $moddir/kernel
    for module in $(find * -name '*.ko'); do
	symver $module
    done
    cd $moddir
    for module in $(find * -path 'kernel/*' -prune -o \
			   -name '*.ko' -print); do
	symver $module
    done
) | sort -u -k2 \
| gzip -c9 > %buildroot/boot/symvers-%kversion-%release-$ARCH-@CFGNAME@.gz

# Also put the resulting file in /usr/src/linux-obj/$SUBARCH/$FLAVOR
# so that kernel-source + kernel-$FLAVOR is sufficient for building
# modules that have modversions as well.
mkdir -p %buildroot/usr/src/linux-%kversion-%release-obj/$SUBARCH/$FLAVOR
zcat %buildroot/boot/symvers-%kversion-%release-$ARCH-@CFGNAME@.gz \
    > %buildroot/usr/src/linux-%kversion-%release-obj/$SUBARCH/$FLAVOR/Module.symvers

# We were building in %my_builddir/linux-%kversion, but the sources will
# later be installed in /usr/src/linux-%kversion-%release. Fix up the
# build symlink.
rm -f %buildroot/lib/modules/%ver_str/{source,build}
ln -s /usr/src/linux-%kversion-%release \
    %buildroot/lib/modules/%ver_str/source
ln -s /usr/src/linux-%kversion-%release-obj/$ARCH/$FLAVOR \
    %buildroot/lib/modules/%ver_str/build

# Set up the override directory: Modules in that path take precedence
# over modules in the directory specific to this package.
mkdir -p %buildroot/lib/modules/%version-override-@CFGNAME@
ln -s ../%version-override-@CFGNAME@ \
    %buildroot/lib/modules/%ver_str/updates
mkdir -p %buildroot/lib/modules/scripts
mkdir -p %buildroot/lib/modules/precompiled
/sbin/depmod -b %buildroot -ae -F %buildroot/boot/System.map-%ver_str \
    %ver_str 2>&1 \
| awk '
    /needs unknown symbol/  { fail=FAIL }
			    { print }
    END			    { exit fail }
' FAIL=%unknown_symbol_check

# Create a dummy initrd with roughly the size the real one will have.
# That way, YaST will know that this package requires some additional
# space in /boot.
dd if=/dev/zero of=%buildroot/boot/initrd-%ver_str \
    bs=1024 seek=2047 count=1

cd %buildroot
# Collect the file list.
(   echo "%%defattr(-, root, root)"
    find boot \
	-type l -printf '%%%%ghost /%%p\n' -o \
	-type f -printf '/%%p\n'
    find lib/modules/%ver_str \
	-type d -printf '%%%%dir /%%p\n' -o \
	-path '*/modules.*' -printf '%%%%ghost /%%p\n' -o \
	-not -path '*.ko' -printf '/%%p\n'
    find usr/src/linux-%kversion-%release-obj \
	-type d -printf '%%%%dir /%%p\n' -o \
	-printf '/%%p\n'
    echo /lib/modules/%version-override-@CFGNAME@
    echo /lib/modules/scripts
    echo /lib/modules/precompiled
    echo "%%ghost /boot/initrd-%ver_str"
    if [ -e .%_docdir/%name ]; then
	echo "%%doc %_docdir/%name"
    fi
) > %my_builddir/kernel.files
echo "%%defattr(-, root, root)" > %my_builddir/nongpl.files

# Split modules in GPL (and GPL compatible) and others.
for module in $(find lib/modules/%ver_str -path '*.ko'); do
    case "$(/sbin/modinfo $module | sed -ne 's/^license:[ \t]*//p')" in
	"GPL" | "GPL v2" | "GPL and additional rights" | \
	"Dual BSD/GPL" | "Dual MPL/GPL")
	    target=kernel.files ;;
	*)
	    target=nongpl.files ;;
    esac
    echo "/$module" >> %my_builddir/$target
done

# %post script for nongpl packages: regenerate the initrd if it
# contains one of the modules contained in the package.
(
    echo 'run_mkinitrd=
[ -e /etc/sysconfig/kernel ] && source /etc/sysconfig/kernel
for module in $INITRD_MODULES; do
    case "${module%.ko}" in'
    sed -ne 's:.*/\([^/]*\).ko$:    \1 | \\:p' %my_builddir/nongpl.files
    echo '    "")
	run_mkinitrd=1
	break
	;;
    esac
done'
    cat %_sourcedir/{functions.sh,post.sh}
) >> %my_builddir/post-nongpl.sh

%pre -f pre.sh

%preun -f preun.sh

%post -f post.sh

%postun -f postun.sh

%files -f kernel.files

%package -n @NAME@-nongpl
Summary:      Dummy summary
Group:        System/Kernel
Provides:     kernel-nongpl
Requires:     @NAME@ = @VERSION@-%release
%description -n @NAME@-nongpl
Dummy description.

%post -n @NAME@-nongpl -f post-nongpl.sh

%files -n @NAME@-nongpl -f nongpl.files

%if %build_um
%package -n um-host-kernel
Summary:      Dummy summary
Group:        System/Kernel

%description -n um-host-kernel
Dummy description.

%files -n um-host-kernel
%defattr(-, root, root)
/usr/bin/linux-%ver_str
%endif
