#
# spec file for package @NAME@ (Version @VERSION@)
#
# Copyright (c) 2004 SuSE Linux AG, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://www.suse.de/feedback/
#

# norootforbuild
# neededforbuild  gpp libgpp popt popt-devel python kernel-dummy kernel-module-packages gpg

# ( kernel-module-packages is expanded into the list of all km_*
#   packages for each architecture by Autobuild. )

Name:         @NAME@
Version:      @VERSION@
Release:      0
Summary:      Dummy summary
License:      GPL
Group:        System/Kernel
@PROVIDES_OBSOLETES@
Autoreqprov:  on
%define kversion %(echo %version | sed s/_/-/g)
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-%kversion.tar.bz2
Source1:      functions.sh
Source8:      trigger-script.sh.in
Source10:     post.sh
Source11:     postun.sh
Source20:     series.conf
Source21:     config.conf
Source22:     config.tar.bz2
Source30:     arch-symbols
Source31:     guards
Source32:     config-subst
Source33:     check-for-config-changes
Source34:     install-configs
Source35:     generate-Makefile.suse
Source40:     build-source-timestamp
Source100:    patches.arch.tar.bz2
Source101:    patches.fixes.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.rpmify.tar.bz2
Source104:    patches.uml.tar.bz2
Source105:    patches.suse.tar.bz2
PreReq:       /usr/bin/test /sbin/mkinitrd /bin/df /usr/bin/du /bin/cp /bin/sed /usr/bin/cut /usr/bin/expr /bin/touch /sbin/update-modules.dep
BuildRoot:    %_tmppath/%name-%version-build
ExclusiveArch: @ARCHS@

# These files are found in the kernel-source package:
NoSource:     0
NoSource:     100
NoSource:     101
NoSource:     102
NoSource:     103
NoSource:     104
NoSource:     105

# Will failures in external modules abort the kernel build?
%define extmod_failures_are_fatal 1

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes})
%define ver_str %kversion-%release-@CFGNAME@
%define symbols %(export PATCH_ARCH=%_target_cpu ; cd %_sourcedir ; echo $(./arch-symbols) $([ -e extra-symbols ] && cat extra-symbols))
%define build_um %([ @CFGNAME@ != um ] ; echo $?)

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-%kversion.tar.bz2 ]; then
    echo "The @NAME@-@VERSION@.nosrc.rpm package does not contain the" \
	 "complete sources. Please install kernel-source-@VERSION@.src.rpm."
    exit 1
fi

echo "Architecture symbol(s): %symbols"

# Unpack all sources and patches
%setup -q -T -n config          -b 22
%setup -q -T -n patches.arch    -b 100
%setup -q -T -n patches.fixes   -b 101
%setup -q -T -n patches.drivers -b 102
%setup -q -T -n patches.rpmify  -b 103
%setup -q -T -n patches.uml     -b 104
%setup -q -T -n patches.suse    -b 105

# The kernel source tree is unpacked last so that %buildsubdir
# points to the right path, linux-%kversion
%setup -q -n linux-%kversion

# Find out for which architecture to build. We do this here, and use the
# result in the %build and %install sections.
#
# On architectures with a bi-arch or cross compiler, we can compile for
# an architecture different from %arch. The location of the config file
# tells us for which architecture to compile.
set -- $(
    for config in $(%_sourcedir/guards %symbols < %_sourcedir/config.conf) ; do
	[ ${config#*/} = @CFGNAME@ ] || continue
	echo $config
    done)
if [ $# -ne 1 ]; then
    echo "$# config files found for this spec file (but one needed)" >&2
    exit 1
fi
flavor=${1#*/}
subarch=${1%/*}

# Apply the patches needed for this architecture.
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf); do
    if ! patch -s -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done

# We allow to apply an additional patch for custom builds
if [ -e %_sourcedir/$subarch-$flavor.diff ]; then
    echo "Applying additional patch $subarch-$flavor.diff"
    if ! patch -s -E -p1 --no-backup-if-mismatch \
	       -i %_sourcedir/$subarch-$flavor.diff; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
fi

# We allow to override the config file for custom builds
if [ -e %_sourcedir/$subarch-$flavor.conf ]; then
    echo "Using override config file $subarch-$flavor.conf"
    cat %_sourcedir/$subarch-$flavor.conf \
	| %_sourcedir/config-subst CONFIG_CFGNAME '"'$flavor'"' \
	| %_sourcedir/config-subst CONFIG_RELEASE '"'%release'"' \
	| %_sourcedir/config-subst CONFIG_SUSE_KERNEL y \
	> config.override
    config=config.override
else
    %_sourcedir/install-configs %_sourcedir %release
    config=arch/$subarch/defconfig.$flavor
fi

# We compile for this sub-architecture (i.e., machine architecture):
%if %build_um
cat > .rpm-defs <<EOF
ARCH=um
SUBARCH=$subarch
FLAVOR=$flavor
MAKE_ARGS="ARCH=um SUBARCH=$subarch"
CONFIG=$config
EOF
%else
cat > .rpm-defs <<EOF
ARCH=$subarch
SUBARCH=$subarch
FLAVOR=$flavor
MAKE_ARGS="ARCH=$subarch"
CONFIG=$config
EOF
%endif

# Create the scipts for %pre, %post, %preun, %postun
for when in pre preun post postun ; do
    sed -e "s/@when@/$when/g" %_sourcedir/trigger-script.sh.in > $when.sh
done

cat %_sourcedir/{functions.sh,post.sh}  >> post.sh
cat %_sourcedir/{functions.sh,postun.sh} >> postun.sh

%build
source .rpm-defs
if [ -n "$CONFIG" ]; then
    cp $CONFIG .config
fi

%_sourcedir/generate-Makefile.suse %_sourcedir \
    > Makefile.suse

cp .config .config.orig
make silentoldconfig $MAKE_ARGS < /dev/null
%_sourcedir/check-for-config-changes .config.orig .config
rm .config.orig

export KBUILD_VERBOSE=0
%if %build_um
    make sys_prepare $MAKE_ARGS  # workaround for broken dependencies
    make %{?jobs:-j%jobs} linux modules $MAKE_ARGS
%else
    make %{?jobs:-j%jobs} all $MAKE_ARGS
%endif

rm -rf %_builddir/modules-%kversion
mkdir -p %_builddir/modules-%kversion
shopt -s nullglob
for dir in /usr/src/kernel-modules/*; do
    if [ -e $dir/Makefile ]; then
	build_dir=%_builddir/modules-%kversion/${dir##*/}
	cp -r $dir $build_dir

	rm -f $build_dir-failed
	if ! make -C $build_dir %{?jobs:-j%jobs} modules $MAKE_ARGS \
		  KERNEL_SOURCE=%_builddir/linux-%kversion; then
%if %extmod_failures_are_fatal
	    exit 1
%endif
	    touch $build_dir-failed
	fi
    fi
done
shopt -u nullglob

%install
# get rid of /usr/lib/rpm/brp-strip-debug 
# strip removes too much from the vmlinux ELF binary
export NO_BRP_STRIP_DEBUG=true

source .rpm-defs

# /lib/modules/%ver_str/build will be a stale symlink until the
# kernel-source package is installed. Don't check for stale symlinks
# in the brp-symlink check:
export NO_BRP_STALE_LINK_ERROR=yes

rm -rf %buildroot
mkdir -p %buildroot/boot
cp -p System.map %buildroot/boot/System.map-%ver_str

%if %build_um
    mkdir -p %buildroot/usr/bin
    cp linux %buildroot/usr/bin/linux-%ver_str
    cp linux %buildroot/boot/linux-%ver_str
    image=linux
%else
%ifarch %ix86 x86_64
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-%ver_str.gz
    cp -p arch/*/boot/bzImage %buildroot/boot/vmlinuz-%ver_str
    image=vmlinuz
%endif
%ifarch alpha
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-%ver_str.gz
    cp -p arch/alpha/boot/vmlinux.gz %buildroot/boot/vmlinuz-%ver_str
    image=vmlinuz
%endif
%ifarch ppc ppc64
    cp -p vmlinux %buildroot/boot/vmlinux-%ver_str
    image=vmlinux
%endif
%ifarch ia64
    cp -p vmlinux.gz %buildroot/boot/vmlinuz-%ver_str
    image=vmlinuz
%endif
%ifarch s390 s390x
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-%ver_str.gz
    cp -p arch/s390/boot/image %buildroot/boot/image-%ver_str
    image=image
%endif
    if [ -e init/kerntypes.o ]; then
	cp init/kerntypes.o %buildroot/boot/Kerntypes-%ver_str
    fi
%endif
ln -s $image %buildroot/boot/$image
ln -s initrd %buildroot/boot/initrd
ln -s $image %buildroot/boot/$image.previous
ln -s initrd %buildroot/boot/initrd.previous
cp .config %buildroot/boot/config-%ver_str

if [ -e modversions-$ARCH-@CFGNAME@ ]; then
    gzip -c9 modversions-$ARCH-@CFGNAME@ \
	> %buildroot/boot/modversions-%kversion-%release-$ARCH-@CFGNAME@.gz
fi
make modules_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot

shopt -s nullglob
for build_dir in %_builddir/modules-%kversion/* ; do
    [ -d $build_dir ] || continue
    if [ -e $build_dir-failed ]; then
	echo "Build of $build_dir has failed"
    else
	make -C $build_dir install $MAKE_ARGS \
	    KERNEL_SOURCE=%_builddir/linux-%kversion \
	    INSTALL_MOD_PATH=%buildroot
    fi
done
shopt -u nullglob

# We were building in %_builddir/linux-%kversion, but the sources will
# later be installed in /usr/src/linux-%kversion-%release. Fix up the
# build symlink.
rm -f %buildroot/lib/modules/%ver_str/build
ln -s /usr/src/linux-%kversion-%release \
    %buildroot/lib/modules/%ver_str/build

# Set up the override directory: Modules in that path take precedence
# over modules in the directory specific to this package.
mkdir -p %buildroot/lib/modules/%version-override-@CFGNAME@
mkdir -p %buildroot/lib/modules/scripts
mkdir -p %buildroot/lib/modules/precompiled
/sbin/depmod -b %buildroot -ae -F %buildroot/boot/System.map-%ver_str %ver_str \
| awk '
    /needs unknown symbol/  { fail=1 }
			    { print }
    END			    { exit fail }
'

# Collect the file list.
(   cd %buildroot
    echo "%%defattr(-, root, root)"
    find boot \
	-type l -printf '%%%%ghost /%%p\n' -o \
	-type f -printf '/%%p\n'
    find lib/modules/%ver_str \
	-type d -printf '%%%%dir /%%p\n' -o \
	-path '*/modules.*' -printf '%%%%verify(not md5 size mtime) /%%p\n' -o \
	-printf '/%%p\n'
    echo /lib/modules/%version-override-@CFGNAME@
    echo /lib/modules/scripts
    echo /lib/modules/precompiled
) > %_builddir/linux-%kversion/kernel.files

%pre -f pre.sh

%preun -f preun.sh

%post -f post.sh

%postun -f postun.sh

%files -f kernel.files

%if %build_um
%package -n um-host-kernel
Summary:      Dummy summary
Group:        System/Kernel

%description -n um-host-kernel
Dummy description.

%files -n um-host-kernel
%defattr(-, root, root)
/usr/bin/linux-%ver_str
%endif
