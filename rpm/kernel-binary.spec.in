#
# spec file for package @NAME@ (Version @RPMVERSION@)
#
# Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

# norootforbuild

%if 0%{?opensuse_bs}
# Strip off the build number ("y") from the "x.y" release number
%define source_rel %(release=%release; echo ${release%.*})
%else
# We don't have build numbers internally
%define source_rel %release
%endif

# Don't use shell commands in build macros, this won't work outside of rpm
%define build_flavor "@FLAVOR@"
%define build_kdump 0
%define build_xen 0
%define build_um 0
%define build_vanilla 0

%if %{build_flavor} == "kdump"
%define build_kdump 1
%endif
%if %{build_flavor} == "xen"
%define build_xen 1
%endif
%if %{build_flavor} == "um"
%define build_um 1
%endif
%if %{build_flavor} == "vanilla"
%define build_vanilla 1
%endif

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes,check-supported-list,built-in-where,find-provides,list-exported-symbols,split-into-symsets,modversions,kabi-checks})

%define symbols %(set -- @NAME@ @FLAVOR@ $(case @FLAVOR@ in (rt|rt_*) echo RT ;; esac) $(%_sourcedir/arch-symbols %_target_cpu) $([ -e %_sourcedir/extra-symbols ] && cat %_sourcedir/extra-symbols) ; echo $*)
%define subarch_flavor %(%_sourcedir/guards %symbols < %_sourcedir/config.conf | grep '/@FLAVOR@$')

# Define some CONFIG variables as rpm macros as well. (rpm cannot handle
# defining them all at once.)
%define config_vars CONFIG_MODULES
%{expand:%(eval "$(test -n "%subarch_flavor" && tar xfj %_sourcedir/config.tar.bz2 --to-stdout config/%subarch_flavor)"; for config in %config_vars; do echo "%%global $config ${!config:-n}"; done)}

%if %build_vanilla || %build_kdump || %CONFIG_MODULES != "y"
%define split_packages 0
%else
%define split_packages 1
%endif

Name:           @NAME@
Summary:        Dummy summary
Version:        @RPMVERSION@
Release:        @RELEASE_PREFIX@<RELEASE>
License:        GPL
Group:          System/Kernel
Url:            http://www.kernel.org/
AutoReqProv:    on
BuildRequires:  coreutils module-init-tools sparse
BuildRequires:  fdupes
%if %split_packages
Requires:       @NAME@-base = %version-%release
%endif
Requires(pre):  coreutils awk
Requires(post): module-init-tools
# This Requires is wrong, because the post/postun scripts have a
# test -x update-bootloader, having perl-Bootloader is not a hard requirement.
# But, there is no way to tell rpm or yast to schedule the installation
# of perl-Bootloader before kernel-binary.rpm if both are in the list of
# packages to install/update. Likewise, this is true for mkinitrd.
# A specific version of perl-Bootloader is not required, because the post/postun
# scripts handle the two API versions of 10.1/SLES10 GA and 10.2/SLES10 SP1
Requires(post): perl-Bootloader
Requires(post): mkinitrd
Recommends: kerneloops
#!BuildIgnore:  perl-Bootloader mkinitrd

%if ! 0%{?opensuse_bs}
BuildRequires:  kernel-dummy
%endif
%if %build_um
BuildRequires:  libpcap xorg-x11-devel
%endif
%ifarch ia64
# arch/ia64/scripts/unwcheck.py
BuildRequires:  python
%endif
%if %build_xen
%ifarch %ix86
Provides:       kernel-xenpae = @RPMVERSION@
Obsoletes:      kernel-xenpae <= @RPMVERSION@
%endif
#!BuildIgnore:  xen
%endif

Provides:     @NAME@-nongpl
Obsoletes:    @NAME@-nongpl
%if %build_vanilla
# force bzip2 instead of lzma compression to allow install on older dist versions
%define _binary_payload w9.bzdio
%endif
# dead network if installed on SLES10, otherwise it will work (mostly)
Conflicts:    sysfsutils < 2.0
%if ! %build_vanilla
Conflicts:    apparmor-profiles <= 2.1
Conflicts:    apparmor-parser < 2.3
# root-lvm only works with newer udevs
Conflicts:      udev < 118
Conflicts:      lvm2 < 2.02.33
%endif
%ifarch %ix86
Conflicts:      libc.so.6()(64bit)
%endif
%if %build_um
#Conflicts:    kernel
%else
Provides:     kernel = @RPMVERSION@-%source_rel
%endif
@PROVIDES_OBSOLETES@

Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-@SRCVERSION@.tar.bz2
Source10:     preun.sh
Source11:     postun.sh
Source12:     pre.sh
Source13:     post.sh
Source20:     series.conf
Source21:     config.conf
Source22:     supported.conf
Source30:     arch-symbols
Source31:     guards
Source32:     config-subst
Source33:     check-for-config-changes
Source34:     check-supported-list
Source38:     kabi-checks
Source40:     build-source-timestamp
Source41:     built-in-where
Source42:     list-exported-symbols
Source43:     split-into-symsets
Source44:     find-provides
Source45:     module-renames
Source46:     modversions
Source100:    config.tar.bz2
Source101:    patches.arch.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.fixes.tar.bz2
Source104:    patches.rpmify.tar.bz2
Source105:    patches.suse.tar.bz2
Source107:    patches.xen.tar.bz2
Source108:    patches.addon.tar.bz2
Source109:    patches.kernel.org.tar.bz2
Source110:    patches.apparmor.tar.bz2
Source111:    patches.rt.tar.bz2
Source112:    patches.trace.tar.bz2
Source120:    kabi.tar.bz2
%define my_builddir %_builddir/%{name}-%{version}
BuildRoot:    %{_tmppath}/%{name}-%{version}-build
ExclusiveArch: @ARCHS@

# These files are found in the kernel-source package:
NoSource:     0
NoSource:     100
NoSource:     101
NoSource:     102
NoSource:     103
NoSource:     104
NoSource:     105
NoSource:     107
NoSource:     108
NoSource:     109
NoSource:     110
NoSource:     111
NoSource:     120

# The following KMPs have been integrated into the kernel package.
Obsoletes: iwlwifi-kmp
Obsoletes: ipw3945-kmp
Obsoletes: adm8211-kmp
Obsoletes: rt2x00-kmp
Obsoletes: rfswitch-kmp
Obsoletes: uvcvideo-kmp
Obsoletes: atl2-kmp
Obsoletes: wlan-ng-kmp
Obsoletes: et131x-kmp
Obsoletes: ivtv-kmp
Obsoletes: at76_usb-kmp
Obsoletes: pcc-acpi-kmp
Obsoletes: uvcvideo-kmp
Obsoletes: ralink-rt2860-kmp

# Build with bash instead of sh as the shell: this turns on bash
# extensions like <(...).
%define _buildshell /bin/bash

# Provide the exported symbols as "ksym(symbol) = hash"
%define __find_provides %_sourcedir/find-provides %name

# Will modules not listed in supported.conf abort the kernel build (0/1)?
%define supported_modules_check 0

%define tolerate_unknown_new_config_options @TOLERATE_UNKNOWN_NEW_CONFIG_OPTIONS@

# kABI change tolerance (default in maintenance should be 4, 6, 8 or 15,
# 31 is the maximum; see scripts/kabi-checks)
%define tolerate_kabi_changes 31

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-@SRCVERSION@.tar.bz2 ]; then
    echo "The @NAME@-@RPMVERSION@.nosrc.rpm package does not contain the" \
	 "complete sources. Please install kernel-source-@RPMVERSION@.src.rpm."
    exit 1
fi

echo "Architecture symbol(s):" %symbols

# Unpack all sources and patches
%setup -q -c -T -a 0 -a 100 -a 101 -a 102 -a 103 -a 104 -a 105 -a 107 -a 108 -a 109 -a 110 -a 111 -a 112 -a 120

supported_conf() {
	%_sourcedir/guards %symbols $* < %_sourcedir/supported.conf | sort -u
}

# Generate the list of modules to be marked as supported
{   supported_conf base
    for how in external; do
	comm -2 -3 <(supported_conf base $how) <(supported_conf base) \
	    | sed -e 's:$: '"$how"':'
    done
} | sed -e 's,.*/,,' -e 's,\.ko$,,' > linux-@SRCVERSION@/Module.supported

# Create grep pattern file for the modules to end up in the base package
comm -2 -3 <(supported_conf base) <(supported_conf) \
    | sed -e 's:.*/::' -e 's:^:\\/:' -e 's:$:\.ko$:' \
    > %my_builddir/grep-for-base-modules

cd linux-@SRCVERSION@

# Find out for which architecture to build. We do this here, and use the
# result in the %build and %install sections.
#
# On architectures with a bi-arch or cross compiler, we can compile for
# an architecture different from %arch. The location of the config file
# tells us for which architecture to compile.
set -- %subarch_flavor
if [ $# -ne 1 ]; then
    echo "$# config files found for this spec file (but one needed)" >&2
    exit 1
fi
subarch=${1%/*}

# Apply the patches needed for this architecture.
%if ! %build_vanilla
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf); do
    if ! patch -s -F0 -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done
%else
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf | egrep kernel.org\|rpmify); do
    if ! patch -s -F0 -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done
%endif

# Release number without the EXTRAVERSION
RELEASE=%source_rel
while [ "$RELEASE" != "${RELEASE#[^0-9]*.}" ]; do
    RELEASE=${RELEASE#[^0-9]*.}
done

if [ -f %_sourcedir/localversion ] ; then
    cat %_sourcedir/localversion > localversion
fi

cat ../config/%subarch_flavor \
| %_sourcedir/config-subst CONFIG_LOCALVERSION '"'-$RELEASE-@FLAVOR@'"' \
| %_sourcedir/config-subst CONFIG_SUSE_KERNEL y \
%if 0%{?__debug_package:1}
    | %_sourcedir/config-subst CONFIG_DEBUG_INFO y \
%endif
    > .config

# We compile for this sub-architecture (i.e., machine architecture):
%if %build_um
cat > ../.rpm-defs <<EOF
ARCH=@FLAVOR@
SUBARCH=$subarch
MAKE_ARGS="ARCH=@FLAVOR@ SUBARCH=$subarch"
EOF
%else
cat > ../.rpm-defs <<EOF
ARCH=$subarch
SUBARCH=$subarch
MAKE_ARGS="ARCH=$subarch"
EOF
%endif

cat >> ../.rpm-defs <<EOF
KERNELRELEASE=@PATCHVERSION@-$RELEASE-@FLAVOR@
EOF

%if 0%{?__debug_package:1}
cat >> ../.rpm-defs <<EOF
MAKE_ARGS="\$MAKE_ARGS CONFIG_DEBUG_INFO=y"
EOF
%endif

echo CONFIG_MODULES=%CONFIG_MODULES >> ../.rpm-defs

%build
source .rpm-defs

cd linux-@SRCVERSION@
cp .config .config.orig
%if %{tolerate_unknown_new_config_options}
MAKE_ARGS="$MAKE_ARGS -k"
yes '' | make oldconfig $MAKE_ARGS
%else
make silentoldconfig $MAKE_ARGS < /dev/null
%_sourcedir/check-for-config-changes .config.orig .config
rm .config.orig
%endif

make prepare $MAKE_ARGS
krel=$(make -s kernelrelease $MAKE_ARGS)

if [ "$krel" != "$KERNELRELEASE" ]; then
    echo "Kernel release mismatch: $krel != $KERNELRELEASE" >&2
    exit 1
fi


cat > .kernel-binary.spec.buildenv <<EOF
# Override the timestamp 'uname -v' reports with the build
# timestamp.
export KBUILD_BUILD_VERSION="$(grep SHA1_ID %_sourcedir/build-source-timestamp | awk '{ print $2 }')"
export KBUILD_BUILD_TIMESTAMP="$(head -n 1 %_sourcedir/build-source-timestamp)"

# The following branch/timestamp will end up in Oopses.
export OOPS_TIMESTAMP="$(
    echo -n $(sed -ne 's/^CVS Branch: \(.*\)/\1-/p' \
		  %_sourcedir/build-source-timestamp)
    head -n 1 %_sourcedir/build-source-timestamp \
	| tr -dc 0-9)"

export KBUILD_VERBOSE=0
export KBUILD_SYMTYPES=1
EOF
source .kernel-binary.spec.buildenv
make %{?jobs:-j%jobs} all $MAKE_ARGS CONFIG_DEBUG_SECTION_MISMATCH=y

%install
source .rpm-defs

# get rid of /usr/lib/rpm/brp-strip-debug
# strip removes too much from the vmlinux ELF binary
export NO_BRP_STRIP_DEBUG=true

# /lib/modules/$KERNELRELEASE/build will be a stale symlink until the
# kernel-source package is installed. Don't check for stale symlinks
# in the brp-symlink check:
export NO_BRP_STALE_LINK_ERROR=yes

cd linux-@SRCVERSION@

mkdir %buildroot/boot
# (Could strip out non-public symbols.)
cp -p System.map %buildroot/boot/System.map-$KERNELRELEASE

add_vmlinux()
{
    local vmlinux=boot/vmlinux-$KERNELRELEASE
%if 0%{?__debug_package:1}
    local vmlinux_debug=usr/lib/debug/$vmlinux.debug
    mkdir -p $(dirname %buildroot/$vmlinux_debug)
    cp vmlinux %buildroot/$vmlinux
    /usr/lib/rpm/debugedit -b $RPM_BUILD_DIR -d /usr/src/debug \
			   -l vmlinux.sourcefiles %buildroot/$vmlinux
    objcopy --only-keep-debug \
	    %buildroot/$vmlinux \
	    %buildroot/$vmlinux_debug || :
    objcopy --add-gnu-debuglink=%buildroot/$vmlinux_debug \
	    --strip-debug \
	    %buildroot/$vmlinux || :
    mkdir -p %buildroot/usr/src/debug
    LANG=C sort -z -u vmlinux.sourcefiles | grep -z -v "<built-in>" \
	| ( cd %_builddir && cpio -pd0m %buildroot/usr/src/debug )
    find %buildroot/usr/src/debug -type d -print0 | xargs -0 -r chmod 0755
    find %buildroot/usr/src/debug -type f -print0 | xargs -0 -r chmod 0644
%else
    cp vmlinux %buildroot/$vmlinux
%endif
    if [ "$1" = --compressed ]; then
	gzip -9 %buildroot/$vmlinux
        chmod a-x %buildroot/$vmlinux.gz
    fi
}

%if %build_kdump
    add_vmlinux
    chmod 644 %buildroot/boot/vmlinux-$KERNELRELEASE
    image=vmlinux
%else
%if %build_um
    add_vmlinux
    chmod 755 %buildroot/boot/vmlinux-$KERNELRELEASE
    image=linux
%else

# architecture specifics
%ifarch %ix86 x86_64
    add_vmlinux --compressed
%if %build_xen
    image=vmlinuz
%else
    image=bzImage
%endif
    cp -p arch/x86/boot/$image %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%endif
%ifarch alpha
    add_vmlinux --compressed
    cp -p arch/alpha/boot/vmlinux.gz %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%endif
%ifarch ppc ppc64
    add_vmlinux
    chmod 644 %buildroot/boot/vmlinux-$KERNELRELEASE
    image=vmlinux
%endif
%ifarch ia64
    add_vmlinux --compressed
    mv %buildroot/boot/vmlinux-$KERNELRELEASE.gz \
       %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%endif
%ifarch s390 s390x
    add_vmlinux --compressed
    cp -p arch/s390/boot/image %buildroot/boot/image-$KERNELRELEASE
    image=image
%endif
    if [ -e init/kerntypes.o ]; then
	cp init/kerntypes.o %buildroot/boot/Kerntypes-$KERNELRELEASE
    fi

# end of build_um
%endif
# end of build_kdump
%endif

for sub in '-base' '' '-extra'; do
%if %split_packages
    if [ "x$sub" = "x-base" ]; then
        base_package=1
    else
        base_package=0
    fi
%else
    base_package=1
%endif
    for script in preun postun pre post; do
        sed -e "s:@KERNELRELEASE@:$KERNELRELEASE:g" \
            -e "s:@IMAGE@:$image:g" \
            -e "s:@FLAVOR""@:@FLAVOR@:g" \
            -e "s:@SUBPACKAGE@:@NAME@$sub:g" \
            -e "s:@BASE_PACKAGE@:$base_package:g" \
            -e "s:@RPM_VERSION_RELEASE@:%version-%release:g" \
            %_sourcedir/$script.sh > ../$script$sub.sh
    done
done


%if %build_kdump || %build_um || %build_xen || %build_vanilla
suffix=-@FLAVOR@
%endif
ln -s $image$suffix %buildroot/boot/$image$suffix
ln -s initrd$suffix %buildroot/boot/initrd$suffix

cp .config %buildroot/boot/config-$KERNELRELEASE

# Figure out where the symbols that vmlinux exports are defined.
# (We need this information below as well as in find-provides; we "annotate"
#  the original Module.symvers here to make sure that we are consistent in
#  both places.)
%_sourcedir/built-in-where < Module.symvers > Module.symvers.split
mv Module.symvers.split Module.symvers

gzip -c9 < Module.symvers > %buildroot/boot/symvers-$KERNELRELEASE.gz

# Install the unstripped vdso's that are linked in the kernel image
%ifarch %ix86 x86_64 ppc ppc64
make vdso_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot
%endif

if [ $CONFIG_MODULES = y ]; then
    make modules_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot

    if ! %_sourcedir/check-supported-list \
	    %_sourcedir %buildroot/lib/modules/$KERNELRELEASE; then
%if %supported_modules_check
	exit 1
%endif
	echo "Consistency check error: please update supported.conf."
    fi

    # Also put the resulting file in $obj_dir/$SUBARCH/@FLAVOR@
    # so that kernel-source + kernel-@FLAVOR@ is sufficient for building
    # modules that have modversions as well.
    obj_dir=usr/src/linux-${KERNELRELEASE%%-@FLAVOR@}-obj
    mkdir -p %buildroot/$obj_dir/$SUBARCH/@FLAVOR@
    cp Module.symvers %buildroot/$obj_dir/$SUBARCH/@FLAVOR@

    # Table of types used in exported symbols (for modversion debugging).
    %_sourcedir/modversions --pack . > %buildroot/boot/symtypes-$KERNELRELEASE
    if [ -s %buildroot/boot/symtypes-$KERNELRELEASE ]; then
	gzip -9 %buildroot/boot/symtypes-$KERNELRELEASE
    else
	rm -f %buildroot/boot/symtypes-$KERNELRELEASE
    fi

    # Some architecture's $(uname -m) output is different from the ARCH
    # parameter that needs to be passed to kbuild. Create symlinks from
    # $(uname -m) to the ARCH directory.
    [ -e %buildroot/$obj_dir/%_target_cpu ] \
	|| ln -sf $SUBARCH %buildroot/$obj_dir/%_target_cpu
%ifarch ppc ppc64
    [ -e %buildroot/$obj_dir/ppc ] \
	|| ln -s $SUBARCH %buildroot/$obj_dir/ppc
    [ -e %buildroot/$obj_dir/ppc64 ] \
	|| ln -s $SUBARCH %buildroot/$obj_dir/ppc64
%endif

    # Check for kABI changes
    KABI=0
    if [ -e %my_builddir/kabi/$SUBARCH/symvers-@FLAVOR@ ]; then
	%_sourcedir/kabi-checks \
	    %my_builddir/kabi/$SUBARCH/symvers-@FLAVOR@ \
	    Module.symvers \
	    %my_builddir/kabi/commonsyms \
	    %my_builddir/kabi/usedsyms \
	|| KABI=$?
    fi
    if [ $KABI -gt %tolerate_kabi_changes ]; then
	echo "kABI changes of badness $KABI exceed the maximum allowed badness" \
	     "of %tolerate_kabi_changes. Please try to avoid the kABI changes."
	if [ ! -e %my_builddir/kabi/$SUBARCH/ignore-@FLAVOR@ -a \
	     ! -e %_sourcedir/IGNORE-KABI-BADNESS ]; then
	    echo "Create a file IGNORE-KABI-BADNESS in the kernel-source" \
		 "directory to build this kernel even though its badness is" \
		 "higher than allowed for an official kernel."
	   exit 1
	fi

	# Indicate the ABI badness in build result emails.
	echo "KABI BADNESS $KABI" > %_rpmdir/%_arch/mbuild_subject.tag
    fi
    if [ $KABI -ge 8 ]; then
	echo "To find out which types have changed relative to the reference" \
	     "symbols, diff the symtypes.gz files of the reference kernel" \
	     "against the symtypes.gz file from this build."
    fi

    # We were building in %my_builddir/linux-@SRCVERSION@, but the sources will
    # later be installed in /usr/src/linux-@SRCVERSION@-%source_rel. Fix up the
    # build symlink.
    rm -f %buildroot/lib/modules/$KERNELRELEASE/{source,build}
    ln -s /usr/src/linux-${KERNELRELEASE%%-@FLAVOR@} \
	%buildroot/lib/modules/$KERNELRELEASE/source
    ln -s /$obj_dir/$SUBARCH/@FLAVOR@ \
	%buildroot/lib/modules/$KERNELRELEASE/build

    # Abort if there are any undefined symbols
    msg="$(/sbin/depmod -F %buildroot/boot/System.map-$KERNELRELEASE \
			-b %buildroot -ae $KERNELRELEASE 2>&1)"
    if [ $? -ne 0 ] || echo "$msg" | grep  'needs unknown symbol'; then
	exit 1
    fi

    # Create a dummy initrd with roughly the size the real one will have.
    # That way, YaST will know that this package requires some additional
    # space in /boot.
    dd if=/dev/zero of=%buildroot/boot/initrd-$KERNELRELEASE \
	bs=1024 seek=2047 count=1

%if %split_packages
    # Generate the lists of supported and unsupported modules.
    (   cd %buildroot
	: > %my_builddir/supported-modules
	: > %my_builddir/unsupported-modules
	for module in $(find lib/modules/$KERNELRELEASE -type f -name '*.ko'); do
	    case "$(/sbin/modinfo -F supported $module)" in
	    (yes|external)
		modname=$(basename $module .ko)
		deps=$(/sbin/modinfo -F depends $module|tr ',' ' ')
		echo "$modname: $deps" >> %my_builddir/Makefile.supported
		echo "/$module" >> %my_builddir/supported-modules
		;;
	    (*)
		echo "/$module" >> %my_builddir/unsupported-modules
		;;
	    esac
	done
    )

    add_dependent_modules() {
	local modules_dep=$1

	xargs make -rRs -f <(echo -e '%:\n\t@echo $@' ; cat $modules_dep)
    }

    modules_dep=%buildroot/lib/modules/$KERNELRELEASE/modules.dep

    # Make sure that no supported modules depend on any unsupported modules.
    dependent_unsupported_modules=$(
	OUT=$(mktemp)
	sed -e 's/:.*//g' < %my_builddir/Makefile.supported | \
		    xargs make -rRsk -f %my_builddir/Makefile.supported > $OUT
	sed -ne '/No rule/s/^.*No rule to make target//p' < $OUT | tr -d "\`'"
    )
    if [ -n "$dependent_unsupported_modules" ]; then
	echo "The following unsupported modules are used by supported modules:"
	echo "$dependent_unsupported_modules"
	echo "Please fix supported.conf."
	if [ ! -e %_sourcedir/IGNORE-UNSUPPORTED-DEPS ]; then
		exit 1
	fi
    fi

    # Compute the list of base modules: modules that core modules depend on
    # implicitly are also core modules.
    grep -f %my_builddir/grep-for-base-modules %my_builddir/supported-modules \
    | add_dependent_modules $modules_dep > %my_builddir/base-modules

    # All supported modules which are not core modules belong in @NAME@.
    comm -3 <(sort %my_builddir/supported-modules) \
	    <(sort %my_builddir/base-modules) \
	> %my_builddir/main-modules
%else
    (   cd %buildroot
	find lib/modules/$KERNELRELEASE -type f -name '*.ko' -printf '/%%p\n'
    ) > %my_builddir/base-modules
%endif

    exported_by_modules() {
	local module

	while read module; do
	    %_sourcedir/list-exported-symbols $RPM_BUILD_ROOT$module
	done
    }

    mkdir %my_builddir/{base,main,extra}
    (   awk '$3 == "vmlinux" || $3 ~ /\/built-in$/ { print }' Module.symvers
	exported_by_modules < %my_builddir/base-modules
    ) | %_sourcedir/split-into-symsets %my_builddir/base
%if %split_packages
    exported_by_modules < %my_builddir/main-modules \
	| %_sourcedir/split-into-symsets %my_builddir/main
    exported_by_modules < %my_builddir/unsupported-modules \
	| %_sourcedir/split-into-symsets %my_builddir/extra
%endif

    # Notes:
    # - We rely on list-exported-symbols to correctly extract all exported
    #   symbols from modules; Module.symvers is disregarded for that.
    # - We recompute the symsets in find-provides. Take care to keep the
    #   algorithm the same in both places.

    ## Preserve exports from previous kernels when possible.
    #old_symsets=%my_builddir/kabi/$SUBARCH/symsets-@FLAVOR@.tar.gz
    #[ -e $old_symsets ] || old_symsets=
    # FIXME: implement

    symsets=%my_builddir/symsets-$KERNELRELEASE
    mkdir $symsets
    find %my_builddir/{base,main,extra} -type f \
	| xargs --replace='{}' cp '{}' $symsets/
    tar c -C ${symsets%/*} ${symsets##*/} \
	| gzip -9 \
	> %buildroot/boot/symsets-$KERNELRELEASE.tar.gz

    # FIXME: check for abi changes

    # Set up some module aliases
    install -d -m 755 %buildroot/etc/modprobe.d/
    install -m 644 %_sourcedir/module-renames %buildroot/etc/modprobe.d/
fi

add_dirs_to_filelist() {
    local filelist

    filelist=$(cat "$@")
    echo "$filelist"

    # Below, we do this:
    # - remove filelist macros
    # - remove last pathname component
    # - generate all parents and make the list unique
    # - skip directories owned be other packages
    # - add the %dir prefix (double-escaped for find and rpm)

    echo "$filelist" \
    | sed -re 's:%%%%[a-z]+(\([^)]+\))? ?::g' \
    | sed -re 's:/[^/]+$::' \
    | sed -nre ':a; p; s:/[^/]+$::; ta' \
    | sort -u \
    | sed -r -e '\:^(|/boot|/etc|/lib(/modules|/firmware)?|/usr(/src)?)$:d' \
    | sed -e 's:^:%%%%dir :'
}

# Collect the file lists.
{   cd %buildroot
    find boot \
	\( -type l -o -name 'initrd-*' \) -printf '%%%%%%%%ghost /%%p\n' -o \
	-type f -printf '/%%p\n'

    # Add the auto-generated (by mkdumprd) kdump initrd to %ghost so that
    # the file gets removed when uninstalling the kernel.
    echo '%%%%ghost /boot/initrd-'${KERNELRELEASE}'-kdump'
    touch $RPM_BUILD_ROOT/boot/initrd-${KERNELRELEASE}-kdump

    if [ $CONFIG_MODULES = y ]; then
	find lib/modules/$KERNELRELEASE \
	    -type d -o \
	    -path '*/modules.*' -printf '%%%%%%%%ghost /%%p\n' -o \
	    -name '*.ko' -prune -o \
	    -printf '/%%p\n'
	cat %my_builddir/base-modules
	echo '%%%%config /etc/modprobe.d/module-renames'
	find $obj_dir \
	    -type d -o \
	    -printf '/%%p\n'
    fi
    test -d lib/firmware/$KERNELRELEASE && \
    find lib/firmware/$KERNELRELEASE \
	-type d -o \
	-printf '/%%p\n'
    if [ -e .%_docdir/%name ]; then
	echo "%%%%doc %_docdir/%name"
    fi
} | add_dirs_to_filelist > %my_builddir/kernel-base.files

%if %split_packages
    add_dirs_to_filelist %my_builddir/main-modules > %my_builddir/kernel-main.files
    add_dirs_to_filelist %my_builddir/unsupported-modules > %my_builddir/kernel-extra.files
%endif

# Hardlink duplicate files automatically (from package fdupes): It doesn't save
# much, but it keeps rpmlint from breaking the package build.
%fdupes $RPM_BUILD_ROOT

%preun -f preun.sh
%postun -f postun.sh
%pre -f pre.sh
%post -f post.sh


%if %split_packages
%files -f kernel-main.files
%else
%files -f kernel-base.files
%endif
%defattr(-, root, root)

%package -n @NAME@-base
Summary: Base kernel package
License:        GPL
Group:          System/Kernel
Url:            http://www.kernel.org/
AutoReqProv:    on
Requires(pre):  coreutils awk
Requires(post): module-init-tools
Requires(post): perl-Bootloader
Requires(post): mkinitrd
%ifarch %ix86
Conflicts:      libc.so.6()(64bit)
%endif

%description -n @NAME@-base
Dummy description.

%preun base -f preun-base.sh
%postun base -f postun-base.sh
%pre base -f pre-base.sh
%post base -f post-base.sh

%if %split_packages
%files -n @NAME@-base -f kernel-base.files
%defattr(-, root, root)
%endif

%package -n @NAME@-extra
Summary: Unsupported kernel modules
License:        GPL
Group:          System/Kernel
Url:            http://www.kernel.org/
AutoReqProv:    on
Requires:       @NAME@ = %version-%release
Requires(pre):  coreutils awk
Requires(post): module-init-tools
Requires(post): perl-Bootloader
Requires(post): mkinitrd
Supplements:    packageand(product(SUSE_SLED):@NAME@)
Supplements:    packageand(product(openSUSE):@NAME@)
%ifarch %ix86
Conflicts:      libc.so.6()(64bit)
%endif

%description -n @NAME@-extra
Dummy description.

%preun extra -f preun-extra.sh
%postun extra -f postun-extra.sh
%pre extra -f pre-extra.sh
%post extra -f post-extra.sh

%if %split_packages
%files -n @NAME@-extra -f kernel-extra.files
%defattr(-, root, root)
%endif
