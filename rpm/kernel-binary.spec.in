#
# spec file for package kernel-@FLAVOR@ (Version @RPMVERSION@)
#
# Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

# norootforbuild

%define using_buildservice	0%{?opensuse_bs}

%if %using_buildservice
# Strip off the build number ("y") from the "x.y" release number
%define source_rel %(release=%release; echo ${release%.*})
%else
# We don't have build numbers internally
%define source_rel %release
%endif

# Don't use shell commands in build macros, this won't work outside of rpm
%define build_flavor @FLAVOR@
%define build_kdump	(%build_flavor == "kdump")
%define build_xen	(%build_flavor == "xen")
%define build_vanilla	(%build_flavor == "vanilla")
%define build_ps3	(%build_flavor == "ps3")

%define srcversion @SRCVERSION@
%define patchversion @PATCHVERSION@
%define variant %(echo -n @VARIANT@)
%define release_major %(rel="%source_rel" ; echo "${rel##[^0-9]*.}")
%define kernelrelease %patchversion-%release_major

%define build_src_dir %my_builddir/linux-%srcversion
%define src_install_dir /usr/src/linux-%kernelrelease%variant
%define obj_install_dir %src_install_dir-obj
%define rpm_install_dir %buildroot%obj_install_dir
%define kernel_build_dir %my_builddir/linux-obj

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes,check-supported-list,built-in-where,modversions,symsets.pl})

%define arch_symbols %(%_sourcedir/arch-symbols %_target_cpu)
%define symbols %(set -- %name kernel-%build_flavor $(case %build_flavor in (rt|rt_*) echo RT ;; esac) $([ -e %_sourcedir/extra-symbols ] && cat %_sourcedir/extra-symbols) ; echo $*)
%define cpu_arch_flavor %{expand:%(%_sourcedir/guards %symbols %arch_symbols < %_sourcedir/config.conf | grep '/%build_flavor$')}
%define cpu_arch %(var=%cpu_arch_flavor ; echo ${var%/*})

# Define some CONFIG variables as rpm macros as well. (rpm cannot handle
# defining them all at once.)
%define config_vars CONFIG_MODULES CONFIG_KMSG_IDS CONFIG_SPLIT_PACKAGE
%{expand:%(eval "$(test -n "%cpu_arch_flavor" && tar xfj %_sourcedir/config.tar.bz2 --to-stdout config/%cpu_arch_flavor)"; for config in %config_vars; do echo "%%global $config ${!config:-n}"; done)}
%define split_packages (%CONFIG_SPLIT_PACKAGE == "y")

%ifarch %ix86 x86_64
%define install_vdso 1
%else
%define install_vdso 0
%endif

Name:           @NAME@
Summary:        Dummy summary
Version:        @RPMVERSION@
Release:        @RELEASE@
License:        GPL
Group:          System/Kernel
Url:            http://www.kernel.org/
AutoReqProv:    on
BuildRequires:  coreutils module-init-tools sparse
BuildRequires:  fdupes
Provides:       %{name}_%_target_cpu = %version-%release
%if %split_packages
Requires:       %name-base_%_target_cpu = %version-%release
%endif
Requires(pre):  coreutils awk
Requires(post): module-init-tools
# This Requires is wrong, because the post/postun scripts have a
# test -x update-bootloader, having perl-Bootloader is not a hard requirement.
# But, there is no way to tell rpm or yast to schedule the installation
# of perl-Bootloader before kernel-binary.rpm if both are in the list of
# packages to install/update. Likewise, this is true for mkinitrd.
# A specific version of perl-Bootloader is not required, because the post/postun
# scripts handle the two API versions of 10.1/SLES10 GA and 10.2/SLES10 SP1
Requires(post): perl-Bootloader
Requires(post): mkinitrd
#!BuildIgnore:  perl-Bootloader mkinitrd

%ifarch ia64
# arch/ia64/scripts/unwcheck.py
BuildRequires:  python
%endif
%ifarch s390 s390x
BuildRequires:  dwarfextract
%endif
%if %build_xen
%ifarch %ix86
Provides:       kernel-xenpae = %version
Obsoletes:      kernel-xenpae <= %version
%endif
#!BuildIgnore:  xen
%endif

Provides:     %name-nongpl
Obsoletes:    %name-nongpl
%if %build_vanilla
# force bzip2 instead of lzma compression to allow install on older dist versions
%define _binary_payload w9.bzdio
%endif
# dead network if installed on SLES10, otherwise it will work (mostly)
Conflicts:    sysfsutils < 2.0
%if ! %build_vanilla
Conflicts:    apparmor-profiles <= 2.1
Conflicts:    apparmor-parser < 2.3
# root-lvm only works with newer udevs
Conflicts:      udev < 118
Conflicts:      lvm2 < 2.02.33
%endif
%ifarch %ix86
Conflicts:      libc.so.6()(64bit)
%endif
Provides:     kernel = %version-%source_rel
@PROVIDES_OBSOLETES@

Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-%srcversion.tar.bz2
Source10:     preun.sh
Source11:     postun.sh
Source12:     pre.sh
Source13:     post.sh
Source20:     series.conf
Source21:     config.conf
Source22:     supported.conf
Source30:     arch-symbols
Source31:     guards
Source32:     config-subst
Source33:     check-for-config-changes
Source34:     check-supported-list
Source40:     build-source-timestamp
Source41:     built-in-where
Source44:     find-provides
Source45:     module-renames
Source46:     modversions
Source47:     symsets.pl
Source100:    config.tar.bz2
Source101:    patches.arch.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.fixes.tar.bz2
Source104:    patches.rpmify.tar.bz2
Source105:    patches.suse.tar.bz2
Source107:    patches.xen.tar.bz2
Source108:    patches.addon.tar.bz2
Source109:    patches.kernel.org.tar.bz2
Source110:    patches.apparmor.tar.bz2
Source111:    patches.rt.tar.bz2
Source112:    patches.trace.tar.bz2
Source113:    patches.kabi.tar.bz2
Source120:    kabi.tar.bz2
%define my_builddir %_builddir/%{name}-%{version}
BuildRoot:    %{_tmppath}/%{name}-%{version}-build
ExclusiveArch: @ARCHS@

# These files are found in the kernel-source package:
NoSource:     0
NoSource:     100
NoSource:     101
NoSource:     102
NoSource:     103
NoSource:     104
NoSource:     105
NoSource:     107
NoSource:     108
NoSource:     109
NoSource:     110
NoSource:     111
NoSource:     120

# The following KMPs have been integrated into the kernel package.
Obsoletes: iwlwifi-kmp
Obsoletes: ipw3945-kmp
Obsoletes: adm8211-kmp
Obsoletes: rt2x00-kmp
Obsoletes: rfswitch-kmp
Obsoletes: uvcvideo-kmp
Obsoletes: atl2-kmp
Obsoletes: wlan-ng-kmp
Obsoletes: et131x-kmp
Obsoletes: ivtv-kmp
Obsoletes: at76_usb-kmp
Obsoletes: pcc-acpi-kmp
Obsoletes: uvcvideo-kmp
Obsoletes: ralink-rt2860-kmp

# Build with bash instead of sh as the shell: this turns on bash
# extensions like <(...).
%define _buildshell /bin/bash

# Provide the exported symbols as "ksym(symbol) = hash"
%define __find_provides %my_builddir/find-provides %name

# Will modules not listed in supported.conf abort the kernel build (0/1)?
%define supported_modules_check 0

%define tolerate_unknown_new_config_options @TOLERATE_UNKNOWN_NEW_CONFIG_OPTIONS@

# kABI change tolerance (default in maintenance should be 4, 6, 8 or 15,
# 31 is the maximum; see scripts/kabi-checks)
%define tolerate_kabi_changes 6

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-%srcversion.tar.bz2 ]; then
    echo "The %name-%version.nosrc.rpm package does not contain the" \
	 "complete sources. Please install kernel-source-%version.src.rpm."
    exit 1
fi

echo "Symbol(s):" %symbols

# Unpack all sources and patches
%setup -q -c -T -a 0 -a 100 -a 101 -a 102 -a 103 -a 104 -a 105 -a 107 -a 108 -a 109 -a 110 -a 111 -a 112 -a 113 -a 120

mkdir -p %kernel_build_dir

supported_conf() {
	%_sourcedir/guards %symbols $* < %_sourcedir/supported.conf | sort -u
}

# Generate the list of modules to be marked as supported
{   supported_conf base
    for how in external; do
	comm -2 -3 <(supported_conf base $how) <(supported_conf base) \
	    | sed -e 's:$: '"$how"':'
    done
} | sed -e 's,.*/,,' -e 's,\.ko$,,' > %kernel_build_dir/Module.supported

# Create grep pattern file for the modules to end up in the base package
comm -2 -3 <(supported_conf base) <(supported_conf) \
    | sed -e 's:.*/::' -e 's:^:\\/:' -e 's:$:\.ko$:' \
    > %my_builddir/grep-for-base-modules

cd linux-%srcversion

# Apply the patches needed for this architecture.
%if ! %build_vanilla
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf); do
    if ! patch -s -F0 -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done
%else
for patch in $(%_sourcedir/guards %symbols < %_sourcedir/series.conf | egrep 'kernel\.org|rpmify'); do
    if ! patch -s -F0 -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done
%endif

cd %kernel_build_dir

if [ -f %_sourcedir/localversion ] ; then
    cat %_sourcedir/localversion > localversion
fi

cat ../config/%cpu_arch_flavor \
| %_sourcedir/config-subst CONFIG_LOCALVERSION '"'-%release_major-%build_flavor'"' \
| %_sourcedir/config-subst CONFIG_SUSE_KERNEL y \
%if 0%{?__debug_package:1}
    | %_sourcedir/config-subst CONFIG_DEBUG_INFO y \
%endif
    > .config

sed 's:^sourcedir=.*:sourcedir="%_sourcedir":;
     s:^builddir=.*:builddir="%my_builddir":' \
     %_sourcedir/find-provides >%my_builddir/find-provides
chmod +x %my_builddir/find-provides

MAKE_ARGS="$MAKE_ARGS -C %build_src_dir O=$PWD"
%if %{tolerate_unknown_new_config_options}
yes '' | make oldconfig $MAKE_ARGS
%else
cp .config .config.orig
make silentoldconfig $MAKE_ARGS < /dev/null
%_sourcedir/check-for-config-changes .config.orig .config
rm .config.orig
%endif

# create *.symref files in the tree
if [ -e ../kabi/%cpu_arch/symtypes-%build_flavor ]; then
    %_sourcedir/modversions --unpack . <../kabi/%cpu_arch/symtypes-%build_flavor
fi

make prepare $MAKE_ARGS
make scripts $MAKE_ARGS
krel=$(make -s kernelrelease $MAKE_ARGS)

if [ "$krel" != "%kernelrelease-%build_flavor" ]; then
    echo "Kernel release mismatch: $krel != %kernelrelease-%build_flavor" >&2
    exit 1
fi

make clean $MAKE_ARGS

rm -f source
find . ! -type d |sed -e 's,^\./,,' > %my_builddir/obj-files

cat > .kernel-binary.spec.buildenv <<EOF
# Override the timestamp 'uname -v' reports with the build
# timestamp.
export KBUILD_BUILD_VERSION="$(grep SHA1_ID %_sourcedir/build-source-timestamp | awk '{ print $2 }')"
export KBUILD_BUILD_TIMESTAMP="$(head -n 1 %_sourcedir/build-source-timestamp)"

# The following branch/timestamp will end up in Oopses.
export OOPS_TIMESTAMP="$(
    echo -n $(sed -ne 's/^GIT Branch: \(.*\)/\1-/p' \
		  %_sourcedir/build-source-timestamp)
    head -n 1 %_sourcedir/build-source-timestamp \
	| tr -dc 0-9)"

export KBUILD_VERBOSE=0
export KBUILD_SYMTYPES=1
export KBUILD_OVERRIDE=1
EOF

%build
cd %kernel_build_dir
source .kernel-binary.spec.buildenv
%if %CONFIG_KMSG_IDS == "y"
    chmod +x scripts/kmsg-doc
    make %{?jobs:-j%jobs} all $MAKE_ARGS CONFIG_DEBUG_SECTION_MISMATCH=y D=2
%else
    make %{?jobs:-j%jobs} all $MAKE_ARGS CONFIG_DEBUG_SECTION_MISMATCH=y
%endif


%install

# get rid of /usr/lib/rpm/brp-strip-debug
# strip removes too much from the vmlinux ELF binary
export NO_BRP_STRIP_DEBUG=true

# /lib/modules/%kernelrelease-%build_flavor/build will be a stale symlink until the
# kernel-source package is installed. Don't check for stale symlinks
# in the brp-symlink check:
export NO_BRP_STALE_LINK_ERROR=yes

cd %kernel_build_dir

mkdir -p %buildroot/boot
# (Could strip out non-public symbols.)
cp -p System.map %buildroot/boot/System.map-%kernelrelease-%build_flavor

add_vmlinux()
{
    local vmlinux=boot/vmlinux-%kernelrelease-%build_flavor
%if 0%{?__debug_package:1}
    local vmlinux_debug=usr/lib/debug/$vmlinux.debug
    mkdir -p $(dirname %buildroot/$vmlinux_debug)
    cp vmlinux %buildroot/$vmlinux
    /usr/lib/rpm/debugedit -b $RPM_BUILD_DIR -d /usr/src/debug \
			   -l vmlinux.sourcefiles %buildroot/$vmlinux
    objcopy --only-keep-debug \
	    %buildroot/$vmlinux \
	    %buildroot/$vmlinux_debug || :
    objcopy --add-gnu-debuglink=%buildroot/$vmlinux_debug \
	    --strip-debug \
	    %buildroot/$vmlinux || :
    mkdir -p %buildroot/usr/src/debug
    LANG=C sort -z -u vmlinux.sourcefiles | grep -z -v "<built-in>" \
	| ( cd %_builddir && cpio -pd0m %buildroot/usr/src/debug )
    find %buildroot/usr/src/debug -type d -print0 | xargs -0 -r chmod 0755
    find %buildroot/usr/src/debug -type f -print0 | xargs -0 -r chmod 0644
%else
    cp vmlinux %buildroot/$vmlinux
%endif
    if [ "$1" = --compressed ]; then
	gzip -9 %buildroot/$vmlinux
        chmod a-x %buildroot/$vmlinux.gz
    fi
}

%if %build_kdump
    add_vmlinux
    chmod 644 %buildroot/boot/vmlinux-%kernelrelease-%build_flavor
    image=vmlinux
%else

# architecture specifics
%ifarch %ix86 x86_64
    add_vmlinux --compressed
%if %build_xen
    image=vmlinuz
%else
    image=bzImage
%endif
    cp -p arch/x86/boot/$image %buildroot/boot/vmlinuz-%kernelrelease-%build_flavor
    image=vmlinuz
%endif
%ifarch alpha
    add_vmlinux --compressed
    cp -p arch/alpha/boot/vmlinux.gz %buildroot/boot/vmlinuz-%kernelrelease-%build_flavor
    image=vmlinuz
%endif
%ifarch ppc ppc64
    add_vmlinux
    chmod 644 %buildroot/boot/vmlinux-%kernelrelease-%build_flavor
    image=vmlinux
%endif
%ifarch ia64
    add_vmlinux --compressed
    mv %buildroot/boot/vmlinux-%kernelrelease-%build_flavor.gz \
       %buildroot/boot/vmlinuz-%kernelrelease-%build_flavor
    image=vmlinuz
%endif
%ifarch s390 s390x
    add_vmlinux --compressed
    cp -p arch/s390/boot/image %buildroot/boot/image-%kernelrelease-%build_flavor
    image=image
    if [ -x "$(which dwarfextract 2>/dev/null)" ] ; then
	dwarfextract vmlinux %buildroot/boot/Kerntypes-%kernelrelease-%build_flavor
    fi
%if %CONFIG_KMSG_IDS == "y"
    mkdir -p %buildroot/usr/share/man/man9
    find man -name '*.9' -exec install -m 644 -D '{}' %buildroot/usr/share/man/man9/ ';'
%endif
%endif
    if [ -e init/kerntypes.o ]; then
	cp init/kerntypes.o %buildroot/boot/Kerntypes-%kernelrelease-%build_flavor
    fi

# end of build_kdump
%endif

for sub in '-base' '' '-extra'; do
%if %split_packages
    if [ "x$sub" = "x-base" ]; then
        base_package=1
    else
        base_package=0
    fi
%else
    base_package=1
%endif
    for script in preun postun pre post devel-pre devel-post; do
        sed -e "s:@KERNELRELEASE@:%kernelrelease:g" \
            -e "s:@IMAGE@:$image:g" \
            -e "s:@FLAVOR""@:%build_flavor:g" \
            -e "s:@SUBPACKAGE@:%name$sub:g" \
            -e "s:@BASE_PACKAGE@:$base_package:g" \
            -e "s:@RPM_VERSION_RELEASE@:%version-%release:g" \
            -e "s:@RPM_TARGET_CPU@:%_target_cpu:g" \
            -e "s:@SRCVARIANT@:%variant:g" \
            %_sourcedir/$script.sh > %my_builddir/$script$sub.sh
    done
done


%if %build_kdump || %build_xen || %build_vanilla || %build_ps3
# keep this -suffix list in sync with post.sh and postun.sh
suffix=-%build_flavor
%endif
ln -s $image$suffix %buildroot/boot/$image$suffix
ln -s initrd$suffix %buildroot/boot/initrd$suffix

cp .config %buildroot/boot/config-%kernelrelease-%build_flavor

%if %install_vdso
# Install the unstripped vdso's that are linked in the kernel image
make vdso_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot
%endif

# Create a dummy initrd with roughly the size the real one will have.
# That way, YaST will know that this package requires some additional
# space in /boot.
dd if=/dev/zero of=%buildroot/boot/initrd-%kernelrelease-%build_flavor \
	bs=1024 seek=2047 count=1

if [ %CONFIG_MODULES = y ]; then
    mkdir -p %rpm_install_dir/%cpu_arch_flavor
    mkdir -p %buildroot/usr/src/linux-obj/%cpu_arch
    ln -s %build_flavor %buildroot/usr/src/linux-obj/%cpu_arch_flavor

    # Figure out where the symbols that vmlinux exports are defined.
    # (We need this information below as well as in find-provides; we "annotate"
    #  the original Module.symvers here to make sure that we are consistent in
    #  both places.)
    %_sourcedir/built-in-where < Module.symvers > Module.symvers.split
    mv Module.symvers.split Module.symvers

    gzip -c9 < Module.symvers > %buildroot/boot/symvers-%kernelrelease-%build_flavor.gz

    make modules_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot

    if ! %_sourcedir/check-supported-list \
	    %_sourcedir %buildroot/lib/modules/%kernelrelease-%build_flavor; then
%if %supported_modules_check
	exit 1
%endif
	echo "Consistency check error: please update supported.conf."
    fi

%ifarch s390 s390x
    if [ -x "$(which dwarfextract 2>/dev/null)" -a \
	-f %buildroot/boot/Kerntypes-%kernelrelease-%build_flavor ] ; then
	find %buildroot -name "*.ko" > kofiles.list
	dwarfextract %buildroot/boot/Kerntypes-%kernelrelease-%build_flavor -C kofiles.list
    fi
%endif

    # Also put the resulting file in %rpm_install_dir/%cpu_arch/%build_flavor
    # so that kernel-source + kernel-%build_flavor is sufficient for building
    # modules that have modversions as well.
    mkdir -p %rpm_install_dir/%cpu_arch/%build_flavor
    cp Module.symvers %rpm_install_dir/%cpu_arch/%build_flavor

    # Table of types used in exported symbols (for modversion debugging).
    %_sourcedir/modversions --pack . > %buildroot/boot/symtypes-%kernelrelease-%build_flavor
    if [ -s %buildroot/boot/symtypes-%kernelrelease-%build_flavor ]; then
	gzip -9 %buildroot/boot/symtypes-%kernelrelease-%build_flavor
    else
	rm -f %buildroot/boot/symtypes-%kernelrelease-%build_flavor
    fi

    # Some architecture's $(uname -m) output is different from the ARCH
    # parameter that needs to be passed to kbuild. Create symlinks from
    # $(uname -m) to the ARCH directory.
    [ -e %rpm_install_dir/%_target_cpu ] \
	|| ln -sf %cpu_arch %rpm_install_dir/%_target_cpu

    # We were building in %my_builddir/linux-%srcversion, but the sources will
    # later be installed in /usr/src/linux-%srcversion-%source_rel. Fix up the
    # build symlink.
    rm -f %buildroot/lib/modules/%kernelrelease-%build_flavor/{source,build}
    ln -s %src_install_dir \
	%buildroot/lib/modules/%kernelrelease-%build_flavor/source
    ln -s %obj_install_dir/%cpu_arch/%build_flavor \
	%buildroot/lib/modules/%kernelrelease-%build_flavor/build

    # Abort if there are any undefined symbols
    msg="$(/sbin/depmod -F %buildroot/boot/System.map-%kernelrelease-%build_flavor \
			-b %buildroot -ae %kernelrelease-%build_flavor 2>&1)"
    if [ $? -ne 0 ] || echo "$msg" | grep  'needs unknown symbol'; then
	exit 1
    fi

%if %split_packages
    # Generate the lists of supported and unsupported modules.
    (   cd %buildroot
	: > %my_builddir/supported-modules
	: > %my_builddir/unsupported-modules
	for module in $(find lib/modules/%kernelrelease-%build_flavor -type f -name '*.ko'); do
	    case "$(/sbin/modinfo -F supported $module)" in
	    (yes|external)
		modname=$(basename $module .ko)
		deps=$(/sbin/modinfo -F depends $module|tr ',' ' ')
		echo "$modname: $deps" >> %my_builddir/Makefile.supported
		echo "/$module" >> %my_builddir/supported-modules
		;;
	    (*)
		echo "/$module" >> %my_builddir/unsupported-modules
		;;
	    esac
	done
    )

    add_dependent_modules() {
	local modules_dep=$1

	xargs -r make -rRs -f <(echo -e '%:\n\t@echo $@' ; cat $modules_dep)
    }

    modules_dep=%buildroot/lib/modules/%kernelrelease-%build_flavor/modules.dep

    # Make sure that no supported modules depend on any unsupported modules.
    dependent_unsupported_modules=$(
	OUT=$(mktemp)
	sed -e 's/:.*//g' < %my_builddir/Makefile.supported | \
		    xargs -r make -rRsk -f %my_builddir/Makefile.supported > $OUT
	sed -ne '/No rule/s/^.*No rule to make target//p' < $OUT | tr -d "\`'"
    )
    if [ -n "$dependent_unsupported_modules" ]; then
	echo "The following unsupported modules are used by supported modules:"
	echo "$dependent_unsupported_modules"
	echo "Please fix supported.conf."
	if [ ! -e %_sourcedir/IGNORE-UNSUPPORTED-DEPS ]; then
		exit 1
	fi
    fi

    # Compute the list of base modules: modules that core modules depend on
    # implicitly are also core modules.
    grep -f %my_builddir/grep-for-base-modules %my_builddir/supported-modules \
    | add_dependent_modules $modules_dep > %my_builddir/base-modules

    # All supported modules which are not core modules belong in %name.
    comm -3 <(sort %my_builddir/supported-modules) \
	    <(sort %my_builddir/base-modules) \
	> %my_builddir/main-modules
%else
    (   cd %buildroot
	find lib/modules/%kernelrelease-%build_flavor -type f -name '*.ko' -printf '/%%p\n'
    ) > %my_builddir/base-modules
%endif

    # check for kabi changes
    KABI=0
    if [ -n "$reference" ]; then
        %_sourcedir/symsets.pl --check-kabi \
            $reference \
            --symvers=Module.symvers \
            --modules=%my_builddir/base-modules-br \
            --modules=%my_builddir/main-modules-br \
            --modules=%my_builddir/unsupported-modules-br \
            --commonsyms=%my_builddir/kabi/commonsyms \
            --usedsyms=%my_builddir/kabi/usedsyms \
            --severities=%my_builddir/kabi/severities \
            --max-badness=%tolerate_kabi_changes || KABI=$?
    fi
    if [ $KABI -ne 0 ]; then
	if [ ! -e %my_builddir/kabi/%cpu_arch/ignore-%build_flavor -a \
	     ! -e %_sourcedir/IGNORE-KABI-BADNESS ]; then
	    echo "Create a file IGNORE-KABI-BADNESS in the kernel-source" \
		 "directory to build this kernel even though its badness is" \
		 "higher than allowed for an official kernel."
	   exit 1
	fi

	# Indicate the ABI badness in build result emails.
	echo "KABI BADNESS $KABI" > %_rpmdir/%_arch/mbuild_subject.tag
    fi

    # Set up some module aliases
    install -d -m 755 %buildroot/etc/modprobe.d/
    install -m 644 %_sourcedir/module-renames \
	%buildroot/etc/modprobe.d/50-module-renames.conf

    tar cf - $(cat %my_builddir/obj-files) | \
	(cd %rpm_install_dir/%cpu_arch_flavor && tar xf -)
fi

add_dirs_to_filelist() {
    local filelist

    filelist=$(cat "$@")
    echo "$filelist"

    # Below, we do this:
    # - remove filelist macros
    # - remove last pathname component
    # - generate all parents and make the list unique
    # - skip directories owned be other packages
    # - add the %dir prefix (double-escaped for find and rpm)

    echo "$filelist" \
    | sed -re 's:%%%%[a-z]+(\([^)]+\))? ?::g' \
    | sed -re 's:/[^/]+$::' \
    | sed -nre ':a; p; s:/[^/]+$::; ta' \
    | sort -u \
    | sed -r -e '\:^(|/boot|/etc|/lib(/modules|/firmware)?|/usr(/src)?)$:d' \
    | sed -e 's:^:%%%%dir :'
}

# Collect the file lists.
shopt -s nullglob
> %my_builddir/kernel-devel.files
for file in %buildroot/boot/vmlinux-*gz %buildroot/boot/sym* ; do
	f=${file##%buildroot}
	echo "$f" >> %my_builddir/kernel-devel.files
done

{   cd %buildroot
    (find boot \
	\( -type l -o -name 'initrd-*' \) -printf '%%%%%%%%ghost /%%p\n' -o \
        -type f -printf '/%%p\n' ; cat %my_builddir/kernel-devel.files) | \
        sort | uniq -u

    # Add the auto-generated (by mkdumprd) kdump initrd to %ghost so that
    # the file gets removed when uninstalling the kernel.
    echo '%%%%ghost /boot/initrd-%kernelrelease-kdump'
    touch $RPM_BUILD_ROOT/boot/initrd-%kernelrelease-kdump

    if [ %CONFIG_MODULES = y ]; then
	find lib/modules/%kernelrelease-%build_flavor \
	    -type d -o \
	    \( -path '*/modules.*' ! -path '*/modules.order' \) \
		-printf '%%%%%%%%ghost /%%p\n' -o \
	    -name '*.ko' -prune -o \
	    -printf '/%%p\n'
	cat %my_builddir/base-modules
	echo '%%%%config /etc/modprobe.d/50-module-renames.conf'
    fi
    test -d lib/firmware/%kernelrelease-%build_flavor && \
    find lib/firmware/%kernelrelease-%build_flavor \
	-type d -o \
	-printf '/%%p\n'
    if [ -e .%_docdir/%name ]; then
	echo "%%%%doc %_docdir/%name"
    fi
} | add_dirs_to_filelist > %my_builddir/kernel-base.files

%if %split_packages
    add_dirs_to_filelist %my_builddir/main-modules > %my_builddir/kernel-main.files
    add_dirs_to_filelist %my_builddir/unsupported-modules > %my_builddir/kernel-extra.files
%endif

# Hardlink duplicate files automatically (from package fdupes): It doesn't save
# much, but it keeps rpmlint from breaking the package build.
%fdupes $RPM_BUILD_ROOT

%preun -f preun.sh
%postun -f postun.sh
%pre -f pre.sh
%post -f post.sh


%if %split_packages
%files -f kernel-main.files
%else
%files -f kernel-base.files
%endif
%defattr(-, root, root)

%package base
Summary: Base kernel package
License:        GPL
Group:          System/Kernel
Url:            http://www.kernel.org/
AutoReqProv:    on
Provides:       %name-base_%_target_cpu = %version-%release
Requires(pre):  coreutils awk
Requires(post): module-init-tools
Requires(post): perl-Bootloader
Requires(post): mkinitrd
%ifarch %ix86
Conflicts:      libc.so.6()(64bit)
%endif

%description base
Dummy description.

%preun base -f preun-base.sh
%postun base -f postun-base.sh
%pre base -f pre-base.sh
%post base -f post-base.sh

%if %split_packages
%files base -f kernel-base.files
%defattr(-, root, root)
%endif

%package extra
Summary: Unsupported kernel modules
License:        GPL
Group:          System/Kernel
Url:            http://www.kernel.org/
AutoReqProv:    on
Provides:       %name-extra_%_target_cpu = %version-%release
Requires:       %{name}_%_target_cpu = %version-%release
Requires(pre):  coreutils awk
Requires(post): module-init-tools
Requires(post): perl-Bootloader
Requires(post): mkinitrd
Supplements:    packageand(product(SUSE_SLED):%{name}_%_target_cpu)
Supplements:    packageand(product(openSUSE):%{name}_%_target_cpu)
%ifarch %ix86
Conflicts:      libc.so.6()(64bit)
%endif

%description extra
Dummy description.

%preun extra -f preun-extra.sh
%postun extra -f postun-extra.sh
%pre extra -f pre-extra.sh
%post extra -f post-extra.sh

%if %split_packages
%files extra -f kernel-extra.files
%defattr(-, root, root)
%endif

%if %CONFIG_KMSG_IDS == "y"
%package man
Summary: The collection of man pages generated by the kmsg script.
Group: System Environment/Kernel

%description man
This package includes the man pages that have been generated from the
kmsg message documentation comments.

%files man
%defattr(-,root,root)
/usr/share/man/man9/*
%endif

%package devel
Summary:        The development environment needed to build KMPs
Group:          Development/Kernel
Requires:	kernel-source%variant = %version-%release
AutoReqProv:    on

%description devel
Dummy description.

%if %CONFIG_MODULES == "y"
%pre devel -f devel-pre.sh
%post devel -f devel-post.sh
%files devel -f kernel-devel.files
%defattr(-,root,root)
%dir %obj_install_dir
%dir %obj_install_dir/%cpu_arch
%dir /usr/src/linux-obj
%dir /usr/src/linux-obj/%cpu_arch
%ghost /usr/src/linux-obj/%cpu_arch_flavor
%obj_install_dir/%cpu_arch_flavor
%if %_target_cpu != %cpu_arch
%obj_install_dir/%_target_cpu
%endif
%endif

%changelog
