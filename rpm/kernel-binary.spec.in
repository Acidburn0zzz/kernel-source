#
# spec file for package @NAME@ (Version @RPMVERSION@)
#
# Copyright (c) 2005 SUSE Linux Products GmbH, Nuernberg, Germany.
# This file and all modifications and additions to the pristine
# package are under the same license as the package itself.
#
# Please submit bugfixes or comments via http://www.suse.de/feedback/
#

# norootforbuild

%define build_kdump %([ @FLAVOR@ != kdump ] ; echo $?)
%define build_xen %([ @FLAVOR@ != xen ] ; echo $?)
%define build_um  %([ @FLAVOR@ != um ] ; echo $?)

Name:         @NAME@
BuildRequires:  gcc-c++ gpg kernel-dummy popt-devel python @EXTRA_NEEDS@
Version:      @RPMVERSION@
Release:      0
Summary:      Dummy summary
License:      core kernel and most modules are GPL, some proprietary
Group:        System/Kernel
%if %build_um
#Conflicts:    kernel
%else
%if !%build_xen
Provides:     kernel = @RPMVERSION@-%release
%endif
%endif
Provides: @NAME@-nongpl
Obsoletes: @NAME@-nongpl
@PROVIDES_OBSOLETES@
%ifarch x86_64
%if "@FLAVOR@" != "default" && "@FLAVOR@" != "kdump"
Requires:     irqbalance
%endif
%endif
Autoreqprov:  on
%define my_builddir %_builddir/%{name}-%{version}
Source0:      http://www.kernel.org/pub/linux/kernel/v2.6/linux-@SRCVERSION@.tar.bz2
Source1:      functions.sh
Source8:      trigger-script.sh.in
Source11:     postun.sh
Source12:     post.sh
Source20:     series.conf
Source21:     config.conf
Source22:     supported.conf
Source30:     arch-symbols
Source31:     guards
Source32:     config-subst
Source33:     check-for-config-changes
Source34:     check-supported-list
Source35:     install-configs
Source40:     build-source-timestamp
Source41:     built-in-where
Source42:     make-symsets
Source43:     find-provides
Source46:     find-types
Source100:    config.tar.bz2
Source101:    patches.arch.tar.bz2
Source102:    patches.drivers.tar.bz2
Source103:    patches.fixes.tar.bz2
Source104:    patches.rpmify.tar.bz2
Source105:    patches.suse.tar.bz2
Source106:    patches.uml.tar.bz2
Source107:    patches.xen.tar.bz2
Source108:    patches.addon.tar.bz2
Source109:    patches.kernel.org.tar.bz2
PreReq:       mkinitrd >= 1.2
PreReq:       /usr/bin/test /bin/df /usr/bin/du /bin/cp /bin/sed /usr/bin/cut /usr/bin/expr /bin/touch
BuildRoot:    %_tmppath/%name-%version-build
ExclusiveArch: @ARCHS@

# These files are found in the kernel-source package:
NoSource:     0
NoSource:     100
NoSource:     101
NoSource:     102
NoSource:     103
NoSource:     104
NoSource:     105
NoSource:     106
NoSource:     107
NoSource:     108
NoSource:     109

# Provide the exported symbols as "ksym(symbol) = hash"
%define __find_provides %_sourcedir/find-provides %name

# Will unknown sybols cause the kernel build to fail (0/1)?
%define unknown_symbol_check 0

# Will modules not listed in supported.conf abort the kernel build (0/1)?
%define supported_modules_check 0

# Are we building with debug symbols enabled?
%define with_debug %(set -- " %optflags "; [ "$1" = "${1/ -g }" ]; echo $? )

%define tolerate_unknown_new_config_options @TOLERATE_UNKNOWN_NEW_CONFIG_OPTIONS@

%(chmod +x %_sourcedir/{arch-symbols,guards,config-subst,check-for-config-changes,check-supported-list,built-in-where,find-provides,make-symsets,find-types})

%description
Dummy description.

%prep
if ! [ -e %_sourcedir/linux-@SRCVERSION@.tar.bz2 ]; then
    echo "The @NAME@-@RPMVERSION@.nosrc.rpm package does not contain the" \
	 "complete sources. Please install kernel-source-@RPMVERSION@.src.rpm."
    exit 1
fi

symbols=$(
    echo @NAME@
    cd %_sourcedir
    PATCH_ARCH=%_target_cpu ./arch-symbols
    ! [ -e extra-symbols ] || cat extra-symbols
)
echo "Architecture symbol(s):" $symbols

# Unpack all sources and patches
%setup -q -c -T -a 0 -a 100 -a 101 -a 102 -a 103 -a 104 -a 105 -a 106 -a 107 -a 108 -a 109

# Generate the list of supported modules
(   %_sourcedir/guards $symbols < %_sourcedir/supported.conf
    for how in external; do
	(   %_sourcedir/guards $symbols < %_sourcedir/supported.conf
	    %_sourcedir/guards $symbols < %_sourcedir/supported.conf
	    %_sourcedir/guards $symbols $how < %_sourcedir/supported.conf \
	) | sort | uniq -u | sed -e 's:$: '"$how"':'
    done
) | sed -e 's,.*/,,' | sort > linux-@SRCVERSION@/Module.supported

cd linux-@SRCVERSION@

# Find out for which architecture to build. We do this here, and use the
# result in the %build and %install sections.
#
# On architectures with a bi-arch or cross compiler, we can compile for
# an architecture different from %arch. The location of the config file
# tells us for which architecture to compile.
set -- $(
    for config in $(%_sourcedir/guards $symbols < %_sourcedir/config.conf) ; do
	[ ${config#*/} = @FLAVOR@ ] && echo $config
    done)
if [ $# -ne 1 ]; then
    echo "$# config files found for this spec file (but one needed)" >&2
    exit 1
fi
subarch=${1%/*}

# Apply the patches needed for this architecture.
for patch in $(%_sourcedir/guards $symbols < %_sourcedir/series.conf); do
    if ! patch -s -E -p1 --no-backup-if-mismatch -i ../$patch; then
	echo "*** Patch $patch failed ***"
	exit 1
    fi
done

%_sourcedir/install-configs %_sourcedir %my_builddir %release
config=arch/$subarch/defconfig.@FLAVOR@
%_sourcedir/config-subst CONFIG_DEBUG_INFO < $config > .config

# We compile for this sub-architecture (i.e., machine architecture):
%if %build_um
cat > ../.rpm-defs <<EOF
ARCH=@FLAVOR@
SUBARCH=$subarch
MAKE_ARGS="ARCH=@FLAVOR@ SUBARCH=$subarch"
EOF
%else
cat > ../.rpm-defs <<EOF
ARCH=$subarch
SUBARCH=$subarch
MAKE_ARGS="ARCH=$subarch"
EOF
%endif

%if %with_debug
cat >> ../.rpm-defs <<EOF
MAKE_ARGS="\$MAKE_ARGS CONFIG_DEBUG_INFO=y"
EOF
%endif

%build
source .rpm-defs

cd linux-@SRCVERSION@
cp .config .config.orig
%if %{tolerate_unknown_new_config_options}
MAKE_ARGS="$MAKE_ARGS -k"
yes '' | make oldconfig $MAKE_ARGS
%else
make silentoldconfig $MAKE_ARGS < /dev/null
%_sourcedir/check-for-config-changes .config.orig .config
rm .config.orig
%endif

KERNELRELEASE=$(make -s kernelrelease)

echo "KERNELRELEASE=$KERNELRELEASE" >> ../.rpm-defs

# Override the timestamp `uname -v' reports with the build
# timestamp.
export BUILD_TIMESTAMP="$(head -n 1 %_sourcedir/build-source-timestamp)"

# The following branch/timestamp will end up in Oopses.
export OOPS_TIMESTAMP="$(
    echo -n $(sed -ne 's/^CVS Branch: \(.*\)/\1-/p' \
		  %_sourcedir/build-source-timestamp)
    head -n 1 %_sourcedir/build-source-timestamp \
	| tr -dc 0-9)"

export KBUILD_VERBOSE=0
export KBUILD_SYMTYPES=1
make %{?jobs:-j%jobs} all $MAKE_ARGS

%install
source .rpm-defs

# get rid of /usr/lib/rpm/brp-strip-debug
# strip removes too much from the vmlinux ELF binary
export NO_BRP_STRIP_DEBUG=true

# /lib/modules/$KERNELRELEASE/build will be a stale symlink until the
# kernel-source package is installed. Don't check for stale symlinks
# in the brp-symlink check:
export NO_BRP_STALE_LINK_ERROR=yes

# Create the scipts for %pre, %post, %preun, %postun
for when in pre preun post postun ; do
    sed -e "s:@KERNELRELEASE@:$KERNELRELEASE:g" \
	-e "s/@WHEN@/$when/g" %_sourcedir/trigger-script.sh.in > $when.sh
done

(   cat %_sourcedir/functions.sh
    sed -e "s:@KERNELRELEASE@:$KERNELRELEASE:g" \
	-e "s:@FLAVOR""@:@FLAVOR@:g" \
        %_sourcedir/post.sh
) >> post.sh

(   cat %_sourcedir/functions.sh
    sed -e "s:@KERNELRELEASE@:$KERNELRELEASE:g" \
	-e "s:@FLAVOR""@:@FLAVOR@:g" \
        %_sourcedir/postun.sh
) >> postun.sh

cd linux-@SRCVERSION@

rm -rf %buildroot
mkdir -p %buildroot/boot
# (Could strip out non-public symbols.)
cp -p System.map %buildroot/boot/System.map-$KERNELRELEASE

add_vmlinux()
{
%if %with_debug
    mkdir -p %buildroot/usr/lib/debug/boot/
    gzip -c9 vmlinux > %buildroot/usr/lib/debug/boot/vmlinux-$KERNELRELEASE.gz
    strip --strip-debug vmlinux
%endif
    gzip -c9 vmlinux > %buildroot/boot/vmlinux-$KERNELRELEASE.gz
}

%if %build_kdump
    strip -o %buildroot/boot/vmlinux-$KERNELRELEASE vmlinux
    image=vmlinux
%else
%if %build_um
    mkdir -p %buildroot/usr/bin
    cp vmlinux %buildroot/usr/bin/linux-$KERNELRELEASE
    ln -s linux-$KERNELRELEASE %buildroot/usr/bin/linux
    cp vmlinux %buildroot/boot/linux-$KERNELRELEASE
    image=linux
%else
%if %build_xen
    add_vmlinux
    cp -p vmlinuz %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%else
%ifarch %ix86 x86_64
    add_vmlinux
    cp -p arch/*/boot/bzImage %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%endif
%endif
%ifarch alpha
    add_vmlinux
    cp -p arch/alpha/boot/vmlinux.gz %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%endif
%ifarch ppc ppc64
    # FIXME: vmlinux is now much bigger. Should we strip it?
    cp -p vmlinux %buildroot/boot/vmlinux-$KERNELRELEASE
    image=vmlinux
%endif
%ifarch ia64
    add_vmlinux
    mv %buildroot/boot/vmlinux-$KERNELRELEASE.gz %buildroot/boot/vmlinuz-$KERNELRELEASE
    image=vmlinuz
%endif
%ifarch s390 s390x
    add_vmlinux
    cp -p arch/s390/boot/image %buildroot/boot/image-$KERNELRELEASE
    image=image
%endif
    if [ -e init/kerntypes.o ]; then
	cp init/kerntypes.o %buildroot/boot/Kerntypes-$KERNELRELEASE
    fi
%endif
# kdump
%endif

%if %build_kdump
suffix=-kdump
%else
%if %build_um
suffix=-um
%else
%if %build_xen
suffix=-xen
%else
suffix=
%endif
%endif
%endif
ln -s $image$suffix %buildroot/boot/$image$suffix
ln -s initrd$suffix %buildroot/boot/initrd$suffix
ln -s $image %buildroot/boot/$image$suffix.previous
ln -s initrd %buildroot/boot/initrd$suffix.previous

cp .config %buildroot/boot/config-$KERNELRELEASE

make modules_install $MAKE_ARGS INSTALL_MOD_PATH=%buildroot

if ! %_sourcedir/check-supported-list \
	%_sourcedir %buildroot/lib/modules/$KERNELRELEASE; then
%if %supported_modules_check
    exit 1
%endif
    echo "Consistency check error: please update supported.conf."
fi

gzip -c9 < Module.symvers > %buildroot/boot/symvers-$KERNELRELEASE.gz
# Group the exported symbols listed in symvers.gz by directory, and
# create a database of sets. Preserve exports from previous kernels
# (stored in old-symsets.tar.gz) when possible.
old_symsets=%_sourcedir/symsets-$SUBARCH-@FLAVOR@.tar.gz
[ -e $old_symsets ] || old_symsets=
(   grep -v $'\tvmlinux$' Module.symvers
    # Find out in which built-in.o files the exported symbols that ended
    # up in vmlinux were defined.
    grep $'\tvmlinux$' Module.symvers | %_sourcedir/built-in-where
) | %_sourcedir/make-symsets \
    %buildroot/boot/symsets-$KERNELRELEASE.tar.gz \
    $old_symsets

# Also put the resulting file in $obj_dir/$SUBARCH/@FLAVOR@
# so that kernel-source + kernel-@FLAVOR@ is sufficient for building
# modules that have modversions as well.
obj_dir=usr/src/linux-${KERNELRELEASE%%-@FLAVOR@}-obj
mkdir -p %buildroot/$obj_dir/$SUBARCH/@FLAVOR@
cp Module.symvers %buildroot/$obj_dir/$SUBARCH/@FLAVOR@

# Table of types used in exported symbols (for modversion debugging).
%_sourcedir/find-types > %buildroot/boot/symtypes-$KERNELRELEASE
if [ -s %buildroot/boot/symtypes-$KERNELRELEASE ]; then
    gzip -9 %buildroot/boot/symtypes-$KERNELRELEASE
else
    rm -f %buildroot/boot/symtypes-$KERNELRELEASE
fi

# Some architecture's $(uname -m) output is different from the ARCH
# parameter that needs to be passed to kbuild. Create symlinks from
# $(uname -m) to the ARCH directory.
if [ ! -e %buildroot/$obj_dir/%_target_cpu ]; then
    ln -sf $SUBARCH %buildroot/$obj_dir/%_target_cpu
fi

# We were building in %my_builddir/linux-@SRCVERSION@, but the sources will
# later be installed in /usr/src/linux-@SRCVERSION@-%release. Fix up the
# build symlink.
rm -f %buildroot/lib/modules/$KERNELRELEASE/{source,build}
ln -s /usr/src/linux-${KERNELRELEASE%%-@FLAVOR@} \
    %buildroot/lib/modules/$KERNELRELEASE/source
ln -s /$obj_dir/$SUBARCH/@FLAVOR@ \
    %buildroot/lib/modules/$KERNELRELEASE/build

mkdir -p %buildroot/lib/modules/scripts
mkdir -p %buildroot/lib/modules/precompiled
/sbin/depmod -b %buildroot -ae -F %buildroot/boot/System.map-$KERNELRELEASE \
    $KERNELRELEASE 2>&1 \
| awk '
    /needs unknown symbol/  { fail=FAIL }
			    { print }
    END			    { exit fail }
' FAIL=%unknown_symbol_check

# Create a dummy initrd with roughly the size the real one will have.
# That way, YaST will know that this package requires some additional
# space in /boot.
dd if=/dev/zero of=%buildroot/boot/initrd-$KERNELRELEASE \
    bs=1024 seek=2047 count=1

# Collect the file list.
(   cd %buildroot
    echo "%%defattr(-, root, root)"
    find boot \
	\( -type l -o -name 'initrd-*' \) -printf '%%%%ghost /%%p\n' -o \
	-type f -printf '/%%p\n'
    find lib/modules/$KERNELRELEASE \
	-type d -printf '%%%%dir /%%p\n' -o \
	-path '*/modules.*' -printf '%%%%ghost /%%p\n' -o \
	-printf '/%%p\n'
    find $obj_dir \
	-type d -printf '%%%%dir /%%p\n' -o \
	-printf '/%%p\n'
    echo /lib/modules/scripts
    echo /lib/modules/precompiled
    if [ -e .%_docdir/%name ]; then
	echo "%%doc %_docdir/%name"
    fi
) > %my_builddir/kernel.files

%pre -f pre.sh

%preun -f preun.sh

%post -f post.sh

%postun -f postun.sh

%files -f kernel.files

%if %build_um
%package -n um-host-kernel
Summary:      Dummy summary
Group:        System/Kernel

%description -n um-host-kernel
Dummy description.

%files -n um-host-kernel
%defattr(-, root, root)
/usr/bin/linux-*
/usr/bin/linux
%endif
