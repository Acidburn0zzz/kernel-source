#!/usr/bin/perl

use strict;
use warnings;

use File::Copy;
use Data::Dumper;

my $dir = ".";
my %templates;
my $patchversion;
my $rpmversion;
my $changelog;
# config.sh variables
my ($srcversion, $variant);
# arch -> [supported flavors]
my %arch_flavors;
# flavor -> [supported archs]
my %flavor_archs;


# read config.conf into %arch_flavors and %flavor_archs
for my $arch (split(/\s+/, `$dir/arch-symbols --list`)) {
	my @fl = `$dir/guards $arch < $dir/config.conf`;
	next if @fl == 0;
	chomp @fl;
	@fl = map { s/.*\///; $_ } @fl;
	$arch_flavors{$arch} = [@fl];
	for my $flavor (@fl) {
		$flavor_archs{$flavor} ||= [];
		push(@{$flavor_archs{$flavor}}, $arch);
	}
}

# read spec file templates into %templates
for my $template qw(binary source syms) {
	xopen(my $fh, '<', "$dir/kernel-$template.spec.in");
	my @lines = <$fh>;
	$templates{$template} = join("", @lines);
	close($fh);
}

# read config.sh
{
	my %vars;
	xopen(my $fh, '<', "$dir/config.sh");
	while (<$fh>) {
		chomp;
		if (/^\s*([A-Z_]+)=(.*)/) {
			$vars{$1} = $2;
		}
	}
	close($fh);
	$variant = $vars{'VARIANT'};
	$srcversion = $vars{'SRCVERSION'};
}

# convert kernel-source.changes and store into %changelog
$changelog = "\%changelog\n";
my $changesfile = "$dir/kernel-source$variant.changes";
if (-e $changesfile) {
	if (-x "/usr/lib/build/changelog2spec") {
		$changelog .= `/usr/lib/build/changelog2spec $changesfile`;
	} elsif (-x "/work/src/bin/tools/convert_changes_to_rpm_changelog") {
		$changelog .= `/work/src/bin/tools/convert_changes_to_rpm_changelog $changesfile`;
	}
}
chomp $changelog;

$patchversion = `$dir/compute-PATCHVERSION.sh`;
chomp $patchversion;
$rpmversion = $patchversion;
$rpmversion =~ s/-.*//g;


my %macros = (
	VARIANT => $variant,
	SRCVERSION => $srcversion,
	PATCHVERSION => $patchversion,
	RPMVERSION => $rpmversion,
	RELEASE => 0,
	# TODO
	TOLERATE_UNKNOWN_NEW_CONFIG_OPTIONS => 0,
);
# binary spec files
for my $flavor (sort keys(%flavor_archs)) {
	$flavor_archs{$flavor} = [sort @{$flavor_archs{$flavor}}];

	do_spec('binary', "kernel-$flavor.spec", %macros,
		FLAVOR => $flavor,
		ARCHS => join(" ", arch2rpm(@{$flavor_archs{$flavor}})),
		PROVIDES_OBSOLETES => provides_obsoletes($flavor, @{$flavor_archs{$flavor}}),
	);
}
# kernel-source.spec
{
	my $binary_specs = "";
	my $i = 60;
	for my $flavor ("syms", sort keys(%flavor_archs)) {
		$binary_specs .= "Source$i:     kernel-$flavor.spec\n";
		$i++;
	}
	chomp $binary_specs;
	do_spec('source', "kernel-source$variant.spec", %macros,
		BINARY_SPEC_FILES => $binary_specs);
}
# kernel-syms.spec
{
	my $requires = "";
	for my $flavor (sort keys(%flavor_archs)) {
		next if $flavor eq "vanilla";
		my @archs = arch2rpm(@{$flavor_archs{$flavor}});
		$requires .= "%ifarch @archs\n";
		$requires .= "Requires: kernel-$flavor-devel = \%version-\%release\n";
		$requires .= "%endif\n";
	}
	chomp $requires;
	do_spec('syms', "kernel-syms$variant.spec", %macros,
		REQUIRES => $requires);
}

sub arch2rpm {
	if (wantarray) {
		return map { _arch2rpm($_) } @_;
	}
	return _arch2rpm($_[0]);
}
sub _arch2rpm {
	my $arch = shift;
	return "\%ix86" if $arch eq "i386";
	return $arch;
}

sub append_changelog {
	my $changelog = $_[1];
	if ($_[0] =~ s/\%changelog$/$changelog/) {
		return;
	}
	$_[0] .= $changelog;
}

sub provides_obsoletes {
	my $flavor = shift;
	my @archs = @_;
	my $res = "";

	for my $arch (@archs) {
		my @packs = `$dir/guards $arch $flavor <$dir/old-packages.conf`;
		chomp @packs;
		next if (!@packs);
		my $rpmarch = arch2rpm($arch);
		chomp $rpmarch;
		$res .= "\%ifarch $rpmarch\n";
		$res .= "Provides:     @packs\n";
		$res .= "Obsoletes:    @packs\n";
		$res .= "\%endif\n";
	}
	chomp $res;
	return $res;
}

sub do_spec {
	my $template = shift;
	my $specfile = shift;
	my %macros = @_;

	my $text = $templates{$template};
	for my $m (keys %macros) {
		$text =~ s/\@$m\@/$macros{$m}/g;
	}
	append_changelog($text, $changelog);
	print "$specfile\n";
	xopen(my $fh, '>', "$dir/$specfile");
	print $fh $text;
	close($fh);

	return if $specfile eq "kernel-source$variant.spec";
	my $changesfile = $specfile;
	$changesfile =~ s/\.spec$//;
	$changesfile .= ".changes";
	copy("$dir/kernel-source$variant.changes", $changesfile);
}

sub xopen {
        open($_[0], $_[1], $_[2]) or die "$_[2]: $!\n";
}

