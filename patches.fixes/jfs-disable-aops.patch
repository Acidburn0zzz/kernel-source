Subject: jfs breaks when using readahead
References: 67328
From: Dave Kleikamp <shaggy@austin.ibm.com>

jfs no longer uses a directory inode's address space.  Clean up the
code by removing aops for directories altogether
This fixes the jfs read-only remounting when using readahead.

Signed-off-by: Dave Kleikamp <shaggy@austin.ibm.com>
Acked-by: Hannes Reinecke <hare@suse.de>

diff -urp linux-2.6.11/fs/jfs/inode.c linux/fs/jfs/inode.c
--- linux-2.6.11/fs/jfs/inode.c	2005-03-24 08:14:27.000000000 -0600
+++ linux/fs/jfs/inode.c	2005-03-24 08:16:14.000000000 -0600
@@ -52,8 +52,6 @@ void jfs_read_inode(struct inode *inode)
 	} else if (S_ISDIR(inode->i_mode)) {
 		inode->i_op = &jfs_dir_inode_operations;
 		inode->i_fop = &jfs_dir_operations;
-		inode->i_mapping->a_ops = &jfs_aops;
-		mapping_set_gfp_mask(inode->i_mapping, GFP_NOFS);
 	} else if (S_ISLNK(inode->i_mode)) {
 		if (inode->i_size >= IDATASIZE) {
 			inode->i_op = &page_symlink_inode_operations;
@@ -176,7 +174,6 @@ jfs_get_blocks(struct inode *ip, sector_
 			struct buffer_head *bh_result, int create)
 {
 	s64 lblock64 = lblock;
-	int no_size_check = 0;
 	int rc = 0;
 	int take_locks;
 	xad_t xad;
@@ -188,8 +185,8 @@ jfs_get_blocks(struct inode *ip, sector_
 	 * If this is a special inode (imap, dmap) or directory,
 	 * the lock should already be taken
 	 */
-	take_locks = ((JFS_IP(ip)->fileset != AGGREGATE_I) &&
-		      !S_ISDIR(ip->i_mode));
+	take_locks = (JFS_IP(ip)->fileset != AGGREGATE_I);
+
 	/*
 	 * Take appropriate lock on inode
 	 */
@@ -200,16 +197,8 @@ jfs_get_blocks(struct inode *ip, sector_
 			IREAD_LOCK(ip);
 	}
 
-	/*
-	 * A directory's "data" is the inode index table, but i_size is the
-	 * size of the d-tree, so don't check the offset against i_size
-	 */
-	if (S_ISDIR(ip->i_mode))
-		no_size_check = 1;
-
-	if ((no_size_check ||
-	     ((lblock64 << ip->i_sb->s_blocksize_bits) < ip->i_size)) &&
-	    (xtLookup(ip, lblock64, max_blocks, &xflag, &xaddr, &xlen, no_size_check)
+	if (((lblock64 << ip->i_sb->s_blocksize_bits) < ip->i_size) &&
+	    (xtLookup(ip, lblock64, max_blocks, &xflag, &xaddr, &xlen, 0)
 	     == 0) && xlen) {
 		if (xflag & XAD_NOTRECORDED) {
 			if (!create)
diff -urp linux-2.6.11/fs/jfs/namei.c linux/fs/jfs/namei.c
--- linux-2.6.11/fs/jfs/namei.c	2005-03-24 08:14:27.000000000 -0600
+++ linux/fs/jfs/namei.c	2005-03-24 08:16:23.000000000 -0600
@@ -262,8 +262,6 @@ static int jfs_mkdir(struct inode *dip, 
 	ip->i_nlink = 2;	/* for '.' */
 	ip->i_op = &jfs_dir_inode_operations;
 	ip->i_fop = &jfs_dir_operations;
-	ip->i_mapping->a_ops = &jfs_aops;
-	mapping_set_gfp_mask(ip->i_mapping, GFP_NOFS);
 
 	insert_inode_hash(ip);
 	mark_inode_dirty(ip);
