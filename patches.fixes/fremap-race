--- sles-ref/mm/fremap.c	2004-06-05 14:39:08.314151480 +0200
+++ sles/mm/fremap.c	2004-06-05 14:35:59.388872488 +0200
@@ -154,6 +154,7 @@
 	unsigned long end = start + size;
 	struct vm_area_struct *vma;
 	int err;
+	int has_write_lock = 0;
 
 	err = -EPERM;
 	if (!can_do_mlock())
@@ -178,7 +179,8 @@
 #endif
 
 	/* We need down_write() to change vma->vm_flags. */
-	down_write(&mm->mmap_sem);
+	down_read(&mm->mmap_sem);
+ retry:
 	vma = find_vma(mm, start);
 
 	/*
@@ -194,7 +196,13 @@
 		linear_pgoff = vma->vm_pgoff;
 		linear_pgoff +=  ((start - vma->vm_start) >> PAGE_SHIFT);
 		/* Must set VM_NONLINEAR before any pages are populated. */
-		if (pgoff != linear_pgoff && !(vma->vm_flags & VM_NONLINEAR)) {
+		if (unlikely(pgoff != linear_pgoff && !(vma->vm_flags & VM_NONLINEAR))) {
+			if (!has_write_lock) {
+				up_read(&mm->mmap_sem);
+				down_write(&mm->mmap_sem);
+				has_write_lock = 1;
+				goto retry;
+			}
 			mapping = vma->vm_file->f_mapping;
 			down(&mapping->i_shared_sem);
 			vma->vm_flags |= VM_NONLINEAR;
@@ -205,8 +213,6 @@
 			up(&mapping->i_shared_sem);
 		}
 
-		/* ->populate can take a long time, so downgrade the lock. */
-		downgrade_write(&mm->mmap_sem);
 		err = vma->vm_ops->populate(vma, start, size,
 					    vma->vm_page_prot,
 					    pgoff, flags & MAP_NONBLOCK);
@@ -216,10 +222,11 @@
 		 * it after ->populate completes, and that would prevent
 		 * downgrading the lock.  (Locks can't be upgraded).
 		 */
+	}
+	if (likely(!has_write_lock))
 		up_read(&mm->mmap_sem);
-	} else {
+	else
 		up_write(&mm->mmap_sem);
-	}
 
 	return err;
 }
