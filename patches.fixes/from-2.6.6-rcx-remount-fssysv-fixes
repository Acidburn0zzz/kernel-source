#date: 2004-04-16
#id: 1.1371.714.1
#tag: other
#time: 14:26:34
#title: remount: fs/sysv fixes
#who: viro@www.linux.org.uk[torvalds]
#
# ChangeSet
#   1.1371.714.1 04/04/16 14:26:34 viro@www.linux.org.uk[torvalds] +3 -0
#   [PATCH] remount: fs/sysv fixes
#   
#    - several variants of sysv fs are supported only r/o.  Driver does
#      force r/o on mount, but doesn't do anything on remount.  As the
#      result, one can remount them r/w and results are Not Pretty(tm).
#      Missing checks added, code cleaned up. 
#   
#    - we had double-brelse() in v7fs - if sanity checks on root inode will
#      succeed, but allocation of root dentry fails, we brelse() the same
#      buffer_head twice.  Fixed.
#
# fs/sysv/sysv.h +1 -0
# fs/sysv/super.c +5 -3
# fs/sysv/inode.c +11 -0
#
diff -Nru a/fs/sysv/inode.c b/fs/sysv/inode.c
--- a/fs/sysv/inode.c	Wed Apr 28 00:46:42 2004
+++ b/fs/sysv/inode.c	Wed Apr 28 00:46:42 2004
@@ -57,6 +57,16 @@
 	unlock_kernel();
 }
 
+static int sysv_remount(struct super_block *sb, int *flags, char *data)
+{
+	struct sysv_sb_info *sbi = SYSV_SB(sb);
+	if (sbi->s_forced_ro)
+		*flags |= MS_RDONLY;
+	if (!(*flags & MS_RDONLY))
+		sb->s_dirt = 1;
+	return 0;
+}
+
 static void sysv_put_super(struct super_block *sb)
 {
 	struct sysv_sb_info *sbi = SYSV_SB(sb);
@@ -321,6 +331,7 @@
 	.delete_inode	= sysv_delete_inode,
 	.put_super	= sysv_put_super,
 	.write_super	= sysv_write_super,
+	.remount_fs	= sysv_remount,
 	.statfs		= sysv_statfs,
 };
 
diff -Nru a/fs/sysv/super.c b/fs/sysv/super.c
--- a/fs/sysv/super.c	Wed Apr 28 00:46:42 2004
+++ b/fs/sysv/super.c	Wed Apr 28 00:46:42 2004
@@ -206,11 +206,11 @@
  
  	if (fs16_to_cpu(sbi, sbd->s_nfree) == 0xffff) {
  		sbi->s_type = FSTYPE_AFS;
+		sbi->s_forced_ro = 1;
  		if (!(sb->s_flags & MS_RDONLY)) {
  			printk("SysV FS: SCO EAFS on %s detected, " 
  				"forcing read-only mode.\n", 
  				sb->s_id);
- 			sb->s_flags |= MS_RDONLY;
  		}
  		return sbd->s_type;
  	}
@@ -234,7 +234,7 @@
 	if (sbd->s_type >= 0x10) {
 		printk("SysV FS: can't handle long file names on %s, "
 		       "forcing read-only mode.\n", sb->s_id);
-		sb->s_flags |= MS_RDONLY;
+		sbi->s_forced_ro = 1;
 	}
 
 	sbi->s_type = FSTYPE_SYSV4;
@@ -335,9 +335,10 @@
 		printk("SysV FS: get root dentry failed\n");
 		return 0;
 	}
+	if (sbi->s_forced_ro)
+		sb->s_flags |= MS_RDONLY;
 	if (sbi->s_truncate)
 		sb->s_root->d_op = &sysv_dentry_operations;
-	sb->s_flags |= MS_RDONLY;
 	sb->s_dirt = 1;
 	return 1;
 }
@@ -481,6 +482,7 @@
 	    (fs32_to_cpu(sbi, v7i->i_size) & 017) != 0)
 		goto failed;
 	brelse(bh2);
+	bh2 = NULL;
 
 	sbi->s_bh1 = bh;
 	sbi->s_bh2 = bh;
diff -Nru a/fs/sysv/sysv.h b/fs/sysv/sysv.h
--- a/fs/sysv/sysv.h	Wed Apr 28 00:46:42 2004
+++ b/fs/sysv/sysv.h	Wed Apr 28 00:46:42 2004
@@ -54,6 +54,7 @@
 	u32            s_ndatazones;	/* total number of data zones */
 	u32            s_nzones;	/* same as s_sbd->s_fsize */
 	u16	       s_namelen;       /* max length of dir entry */
+	int	       s_forced_ro;
 };
 
 /*
