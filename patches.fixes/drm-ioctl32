From: sndirsch@suse.de
Subject: x86-64: fix possible root hole in DRM code
Patch-mainline: no
References: 76863

x86-64: fix possible root hole in DRM code

Acked-by: sndirsch@suse.de
 
diff -urNp linux-2.6.11/drivers/char/drm/drm_ioctl32.c linux-2.6.11.SUSE/drivers/char/drm/drm_ioctl32.c
--- linux-2.6.11/drivers/char/drm/drm_ioctl32.c	2005-05-17 15:57:54.381620331 +0200
+++ linux-2.6.11.SUSE/drivers/char/drm/drm_ioctl32.c	2005-05-17 15:58:08.485358264 +0200
@@ -254,11 +254,11 @@ drm_version_32_64(unsigned int fd, unsig
     GET_USER(version_minor);
     GET_USER(version_patchlevel);
     GET_USER(name_len);
-    GET_USER_P(name);
+    GET_USER_P_ACC(name,VERIFY_WRITE,arg64.name_len);
     GET_USER(date_len);
-    GET_USER_P(date);
+    GET_USER_P_ACC(date,VERIFY_WRITE,arg64.date_len);
     GET_USER(desc_len);
-    GET_USER_P(desc);
+    GET_USER_P_ACC(desc,VERIFY_WRITE,arg64.desc_len);
 
     if (err) return -EFAULT;
     
@@ -291,7 +291,7 @@ drm_unique_wr_32_64(unsigned int fd, uns
 
     DEBUG("drm_unique_wr_32_64");
     GET_USER(unique_len);
-    GET_USER_P(unique);
+    GET_USER_P_ACC(unique,VERIFY_WRITE,arg64.unique_len);
     
     if (err) return -EFAULT;
     
@@ -316,7 +316,7 @@ drm_unique_w_32_64(unsigned int fd, unsi
 
     DEBUG("drm_unique_w_32_64");
     GET_USER(unique_len);
-    GET_USER_P(unique);
+    GET_USER_P_ACC(unique,VERIFY_WRITE,arg64.unique_len);
     
     if (err) return -EFAULT;
     
@@ -326,7 +326,7 @@ drm_unique_w_32_64(unsigned int fd, unsi
 }
 
 static int
-drm_map_rw_32_64(unsigned int fd, unsigned int cmd, 
+drm_addmap_rw_32_64(unsigned int fd, unsigned int cmd, 
 		 unsigned long arg, struct file *file)
 {
     drm32_map_t *arg32 = (drm32_map_t *) arg;
@@ -335,7 +335,7 @@ drm_map_rw_32_64(unsigned int fd, unsign
     int err = 0;
 //  u64 dummy;
 
-    DEBUG("drm_map_rw_32_64");
+    DEBUG("drm_addmap_rw_32_64");
     GET_USER(offset);
     GET_USER(size);
     GET_USER(type);
@@ -349,6 +349,31 @@ drm_map_rw_32_64(unsigned int fd, unsign
 
     if (err) return err;
     
+    PUT_USER(pub_handle);
+
+    DEBUG("done");
+    return err ? -EFAULT : 0;
+}
+
+static int
+drm_getmap_rw_32_64(unsigned int fd, unsigned int cmd, 
+		 unsigned long arg, struct file *file)
+{
+    drm32_map_t *arg32 = (drm32_map_t *) arg;
+    drm_map_t arg64;
+    mm_segment_t old_fs;
+    int err = 0;
+//  u64 dummy;
+
+    DEBUG("drm_getmap_rw_32_64");
+    GET_USER(offset);
+
+    if (err) return -EFAULT;
+    
+    SYS_IOCTL;
+
+    if (err) return err;
+    
     ASSERT32(offset);
     PUT_USER(offset);
     ASSERT32(size);
@@ -377,7 +402,7 @@ drm_map_w_32_64(unsigned int fd, unsigne
     GET_USER(size);
     GET_USER(type);
     GET_USER(flags);
-//  GET_USER_P(handle);
+//  GET_USER(handle);
     GET_USER(mtrr);
 
     if (err) return -EFAULT;
@@ -456,7 +481,6 @@ drm_ctx_priv_map_wr_32_64(unsigned int f
     drm_ctx_priv_map_t arg64;
     mm_segment_t old_fs;
     int err = 0;
-    u64 dummy;
 
     DEBUG("drm_ctx_priv_map_wr_32_64");
     GET_USER(ctx_id);
@@ -482,7 +506,6 @@ drm_ctx_priv_map_w_32_64(unsigned int fd
     drm_ctx_priv_map_t arg64;
     mm_segment_t old_fs;
     int err = 0;
-    u64 dummy;
 
     DEBUG("drm_ctx_priv_map_w_32_64");
     GET_USER(ctx_id);
@@ -508,7 +531,7 @@ drm_ctx_res_32_64(unsigned int fd, unsig
 
     DEBUG("drm_ctx_res_32_64");
     GET_USER(count);
-    GET_USER_P(contexts);
+    GET_USER_P_ACC(contexts,VERIFY_WRITE, arg64.count*sizeof(drm_ctx_t));
 
     if (err) return -EFAULT;
     
@@ -536,13 +559,15 @@ drm_dma_32_64(unsigned int fd, unsigned 
     DEBUG("drm_dma_32_64");
     GET_USER(context);
     GET_USER(send_count);
-    GET_USER_P(send_indices);
-    GET_USER_P(send_sizes);
+    GET_USER_P_ACC(send_indices, VERIFY_READ, arg64.send_count * sizeof(int));
+    GET_USER_P_ACC(send_sizes, VERIFY_READ, arg64.send_count * sizeof(int));
     GET_USER(flags);
     GET_USER(request_count);
     GET_USER(request_size);
-    GET_USER_P(request_indices);
-    GET_USER_P(request_sizes);
+    GET_USER_P_ACC(request_indices, VERIFY_WRITE, 
+		   arg64.request_count * sizeof(int));
+    GET_USER_P_ACC(request_sizes, VERIFY_WRITE, 
+		   arg64.request_count * sizeof(int));
     GET_USER(granted_count);
 
     if (err) return -EFAULT;
@@ -633,23 +658,20 @@ drm_buf_info_32_64(unsigned int fd, unsi
     int err = 0;
     drm32_buf_desc_t *list32 = (drm32_buf_desc_t*)(u64)arg32->list;
     drm_buf_desc_t *list64;
-    int i;
-    
+    int i, num;
+
+    if (arg32->count < 0) return -EFAULT;
+
+    num = arg32->count < DRM_MAX_ORDER + 1 ? arg32->count 
+	: DRM_MAX_ORDER + 1;
+
     DEBUG("drm_buf_info_32_64");
-    list64 = K_ALLOC(arg32->count * sizeof (drm_buf_desc_t));
+    list64 = K_ALLOC(num * sizeof (drm_buf_desc_t));
     if (!list64) return -EFAULT;
     
     GET_USER(count);
     arg64.list = list64;
     
-    for (i = 0 ; i < arg32->count; i ++) {
-	err |= get_user(list64[i].count,&list32[i].count);
-	err |= get_user(list64[i].size,&list32[i].size);
-	err |= get_user(list64[i].high_mark,&list32[i].low_mark);
-	err |= get_user(list64[i].flags,&list32[i].flags);
-	err |= get_user(list64[i].agp_start,&list32[i].agp_start);
-    }
-    
     if (err) {
 	K_FREE(list64);
 	return -EFAULT;
@@ -661,14 +683,15 @@ drm_buf_info_32_64(unsigned int fd, unsi
 	return err;
     }
     
-    
-    for (i = 0 ; i < arg32->count; i ++) {
-	err |= put_user(list64[i].count,&list32[i].count);
-	err |= put_user(list64[i].size,&list32[i].size);
-	err |= put_user(list64[i].low_mark,&list32[i].low_mark);
-	err |= put_user(list64[i].high_mark,&list32[i].high_mark);
-	err |= put_user(list64[i].flags,&list32[i].flags);
+    if (num > arg64.count) {
+	for (i = 0 ; i < arg64.count; i ++) {
+	    err |= put_user(list64[i].count,&list32[i].count);
+	    err |= put_user(list64[i].size,&list32[i].size);
+	    err |= put_user(list64[i].low_mark,&list32[i].low_mark);
+	    err |= put_user(list64[i].high_mark,&list32[i].high_mark);
+	    err |= put_user(list64[i].flags,&list32[i].flags);
 //	err |= put_user(list64[i].agp_start,&list32[i].agp_start);
+	}
     }
     PUT_USER(count);
 
@@ -689,40 +712,35 @@ drm_buf_map_32_64(unsigned int fd, unsig
     int err = 0;
     drm32_buf_pub_t *list32 = (drm32_buf_pub_t*)(unsigned long)arg32->list;
     drm_buf_pub_t *list64;
-    int count, i;
+    int i, count;
     u64 dummy;
     
     DEBUG("drm_buf_map_32_64");
-    list64 = K_ALLOC(arg32->count * sizeof (drm_buf_pub_t));
-    if (!list64) return -EFAULT;
-    
+
     GET_USER(count);
-    GET_USER_P(virtual);
+    if (arg64.count < 0) return -EFAULT;
+    count = arg64.count;
+
+    list64 = K_ALLOC(arg64.count * sizeof (drm_buf_pub_t));
+    if (!list64) return -EFAULT;
     arg64.list = list64;
-#if 0
-    for (i = 0 ; i < arg32->count; i ++) {
-	err |= get_user(list64[i].idx,&list32[i].idx);
-	err |= get_user(list64[i].total,&list32[i].total);
-	err |= get_user(list64[i].used,&list32[i].used);
-	err |= get_user(dummy,&list32[i].address);
-	list64[i].address = (void *)dummy;
-    }
-#endif
+
     if (err) {
 	K_FREE(list64);
 	return -EFAULT;
     }
-    
+
     SYS_IOCTL;    
     if (err) {
 	K_FREE(list64);
 	return err;
     }
     
-    count = arg32->count < arg64.count ? arg32->count : arg64.count;
     PUT_USER(count);
     PUT_USER_P(virtual);
 
+    if (count > arg64.count) count = arg64.count;
+
     for (i = 0 ; i < count; i ++) {
 	err |= put_user(list64[i].idx,&list32[i].idx);
 	err |= put_user(list64[i].total,&list32[i].total);
@@ -743,14 +761,11 @@ drm_buf_free_w_32_64(unsigned int fd, un
     drm_buf_free_t arg64;
     mm_segment_t old_fs;
     int err = 0;
-    int i;
-    int *list32 = (int *)(unsigned long)arg32->list;
+    u64 dummy;
 
     DEBUG("drm_buf_free_w_32_64");
     GET_USER(count);
-    for (i = 0; i < arg32->count; i++)
-	err |= get_user(arg64.list[i],&list32[i]);
-	
+    GET_USER_P_ACC(list, VERIFY_READ, arg64.count * sizeof(int));
     
     if (err) return -EFAULT;
     
@@ -943,11 +958,11 @@ drm_register_ioctl32(void)
     int err;
     REG_IOCTL32(DRM_IOCTL_VERSION_32,drm_version_32_64);
     REG_IOCTL32(DRM_IOCTL_GET_UNIQUE_32,drm_unique_wr_32_64);
-    REG_IOCTL32(DRM_IOCTL_GET_MAP_32,drm_map_rw_32_64);
+    REG_IOCTL32(DRM_IOCTL_GET_MAP_32,drm_getmap_rw_32_64);
     REG_IOCTL32(DRM_IOCTL_GET_CLIENT_32,drm_client_32_64);
     REG_IOCTL32(DRM_IOCTL_GET_STATS_32,drm_stats_32_64);
     REG_IOCTL32(DRM_IOCTL_SET_UNIQUE_32,drm_unique_w_32_64);
-    REG_IOCTL32(DRM_IOCTL_ADD_MAP_32,drm_map_rw_32_64);
+    REG_IOCTL32(DRM_IOCTL_ADD_MAP_32,drm_addmap_rw_32_64);
     REG_IOCTL32(DRM_IOCTL_ADD_BUFS_32,drm_buf_desc_wr_32_64);
     REG_IOCTL32(DRM_IOCTL_MARK_BUFS_32,drm_buf_desc_w_32_64);
     REG_IOCTL32(DRM_IOCTL_INFO_BUFS_32,drm_buf_info_32_64);
diff -urNp linux-2.6.11/drivers/char/drm/drm_ioctl32.h linux-2.6.11.SUSE/drivers/char/drm/drm_ioctl32.h
--- linux-2.6.11/drivers/char/drm/drm_ioctl32.h	2005-05-17 15:57:54.296633962 +0200
+++ linux-2.6.11.SUSE/drivers/char/drm/drm_ioctl32.h	2005-05-17 15:58:08.485358264 +0200
@@ -45,7 +45,14 @@
     err |= put_user((u32)dummy,&x32->elem); \
 } while (0);
 
-#  define GET_USER_P(elem) GET_USER_P_ARGS(arg32,arg64,elem)
+#  define GET_USER_P_ACC(elem,acc,size) \
+    if (size ==  0 || access_ok(acc,(void __user *)&arg32->elem, size)) \
+        GET_USER_P_ARGS(arg32,arg64,elem) \
+    else \
+        err |= -EFAULT;
+
+#  define GET_USER_P(elem,acc)  GET_USER_P_ARGS(arg32,arg64,elem);
+
 #  define PUT_USER_P(elem) PUT_USER_P_ARGS(arg32,arg64,elem)
 
 #  define SYS_IOCTL do { \
@@ -57,6 +64,9 @@
     set_fs(old_fs); \
     } while (0);
 
+#define DEBUG_IOCTL32(nr) \
+  printk(KERN_WARNING "Registering IOCTL32: %lx\n",nr);
+
 #  define REG_IOCTL32(nr,c_func) \
   err = register_ioctl32_conversion(nr,c_func); \
   if (err)  goto failed; 
diff -urNp linux-2.6.11/drivers/char/drm/mga_ioctl32.c linux-2.6.11.SUSE/drivers/char/drm/mga_ioctl32.c
--- linux-2.6.11/drivers/char/drm/mga_ioctl32.c	2005-05-17 15:57:54.298633641 +0200
+++ linux-2.6.11.SUSE/drivers/char/drm/mga_ioctl32.c	2005-05-17 15:58:08.485358264 +0200
@@ -133,7 +133,7 @@ mga_getparam_wr_32_64(unsigned int fd, u
     
     DEBUG("mga_getparam_wr_32_64");
     GET_USER(param);
-    GET_USER_P(value);
+    GET_USER_P_ACC(value, VERIFY_WRITE, sizeof(int));
 
     if (err) return -EFAULT;
     
diff -urNp linux-2.6.11/drivers/char/drm/r128_ioctl32.c linux-2.6.11.SUSE/drivers/char/drm/r128_ioctl32.c
--- linux-2.6.11/drivers/char/drm/r128_ioctl32.c	2005-05-17 15:57:54.382620171 +0200
+++ linux-2.6.11.SUSE/drivers/char/drm/r128_ioctl32.c	2005-05-17 15:58:08.486358104 +0200
@@ -142,15 +142,22 @@ drm_128_depth_32_64(unsigned int fd, uns
     mm_segment_t old_fs;
     int err = 0;
     u64 dummy;
+    int buffer_size = 0, mask_size = 0;
 
     DEBUG("r128_depth_32_64");
 
     GET_USER(func);
     GET_USER(n);
-    GET_USER_P(x);
-    GET_USER_P(y);
-    GET_USER_P(buffer);
-    GET_USER_P(mask);
+    GET_USER_P_ACC(x, VERIFY_READ, arg64.n * sizeof(*arg64.x));
+    GET_USER_P_ACC(y, VERIFY_READ, arg64.n * sizeof(*arg64.y));
+    switch (arg64.func) {
+	case R128_WRITE_SPAN:
+	case R128_WRITE_PIXELS:
+	    buffer_size = arg64.n * sizeof(u32);
+	    mask_size = arg64.n * sizeof(u8);
+    }
+    GET_USER_P_ACC(buffer,VERIFY_READ,buffer_size);
+    GET_USER_P_ACC(mask,VERIFY_READ,mask_size);
 
     if (err) return -EFAULT;
     
@@ -170,7 +177,7 @@ drm_128_stipple_32_64(unsigned int fd, u
 
     DEBUG("r128_stipple_32_64");
 
-    GET_USER_P(mask);
+    GET_USER_P_ACC(mask, VERIFY_READ, 32 * sizeof(u32));
 
     if (err) return -EFAULT;
     
@@ -190,7 +197,7 @@ drm_128_getparam_32_64(unsigned int fd, 
     
     DEBUG("r128_getparam_wr_32_64");
     GET_USER(param);
-    GET_USER_P(value);
+    GET_USER_P_ACC(value, VERIFY_WRITE, sizeof(int));
 
     if (err) return -EFAULT;
     
@@ -242,7 +249,7 @@ r128_unregister_ioctl32(void)
     UNREG_IOCTL32(DRM_IOCTL_R128_INIT32);
     UNREG_IOCTL32(DRM_IOCTL_R128_DEPTH32);
     UNREG_IOCTL32(DRM_IOCTL_R128_STIPPLE32);
-    UNREG_IOCTL32(DRM_IOCTL_R128_GETPARAM);
+    UNREG_IOCTL32(DRM_IOCTL_R128_GETPARAM32);
 
     UNREG_IOCTL32(DRM_IOCTL_R128_CCE_START);
     UNREG_IOCTL32(DRM_IOCTL_R128_CCE_STOP);
diff -urNp linux-2.6.11/drivers/char/drm/radeon_ioctl32.c linux-2.6.11.SUSE/drivers/char/drm/radeon_ioctl32.c
--- linux-2.6.11/drivers/char/drm/radeon_ioctl32.c	2005-05-17 15:57:54.301633160 +0200
+++ linux-2.6.11.SUSE/drivers/char/drm/radeon_ioctl32.c	2005-05-17 15:58:08.486358104 +0200
@@ -42,7 +42,9 @@
 
 #include <asm/ioctl32.h>
 #include "drm.h"
+#include "drmP.h"
 #include "radeon_drm.h"
+#include "radeon_drv.h"
 #define IOCTL32_PRIVATE
 #include "drm_ioctl32.h"
 
@@ -160,13 +162,20 @@ drm_clear_w_32_64(unsigned int fd, unsig
     int err = 0;
     u64 dummy;
 
+    drm_file_t	*priv	= file->private_data;
+    drm_device_t *dev	= priv->dev;
+    drm_radeon_private_t *dev_priv = dev->dev_private;
+    drm_radeon_sarea_t *sarea_priv = dev_priv->sarea_priv;
+    int num = (sarea_priv->nbox > RADEON_NR_SAREA_CLIPRECTS 
+	       ? RADEON_NR_SAREA_CLIPRECTS : sarea_priv->nbox);
+	
     DEBUG("drm_clear_w_32_64");
     GET_USER(flags);
     GET_USER(clear_color);
     GET_USER(clear_depth);
     GET_USER(color_mask);
     GET_USER(depth_mask);
-    GET_USER_P(depth_boxes);
+    GET_USER_P_ACC(depth_boxes, VERIFY_READ, num * sizeof(*arg64.depth_boxes));
 
     if (err) return -EFAULT;
     
@@ -185,7 +194,7 @@ drm_stipple_w_32_64(unsigned int fd, uns
     u64 dummy;
 
     DEBUG("drm_stipple_w_32_64");
-    GET_USER_P(mask);
+    GET_USER_P_ACC(mask, VERIFY_READ, 32 * sizeof(u32));
 
     if (err) return -EFAULT;
     
@@ -202,7 +211,7 @@ drm_texture_32_64(unsigned int fd, unsig
     drm32_radeon_tex_image_t *image32;
     drm_radeon_tex_image_t image64;
     mm_segment_t old_fs;
-    int err = 0, err_tmp = 0;
+    int err = 0;
     u64 dummy;
 
     DEBUG("drm_texture_32_64");
@@ -217,28 +226,32 @@ drm_texture_32_64(unsigned int fd, unsig
     err |= get_user(image64.y,&image32->y);
     err |= get_user(image64.width,&image32->width);
     err |= get_user(image64.height,&image32->height);
-    err |= get_user(dummy,&image32->data);
-    image64.data = (void *)dummy;
+    {
+        int n;
+        switch (arg64.format) {
+            case RADEON_TXFORMAT_ARGB8888:
+            case RADEON_TXFORMAT_RGBA8888:
+                n = 4;
+                break;
+            case RADEON_TXFORMAT_I8:
+            case RADEON_TXFORMAT_RGB332:
+                n = 1;
+                break;
+            default:
+                n = 1;
+        }
+	if (!access_ok(dummy,VERIFY_READ,image32->width * image32->height * n))
+	    err |= -EFAULT;
+	err |= get_user(dummy,&image32->data);
+	image64.data = (void *)dummy;
+    }
+
     
     if (err) return -EFAULT;
     
     SYS_IOCTL;
-    err_tmp = err;
-    err = 0;
 
-    PUT_USER(offset);
-    PUT_USER(pitch);
-    PUT_USER(format);
-    PUT_USER(width);
-    PUT_USER(height);
-    err |= put_user(image64.x,&image32->x);
-    err |= put_user(image64.y,&image32->y);
-    err |= put_user(image64.width,&image32->width);
-    err |= put_user(image64.height,&image32->height);
-    dummy = (u64)image64.data;
-
-    err |= put_user((u32)dummy,&image32->data);
-    return err ? -EFAULT : err_tmp;
+    return err;
 }
 
 static int
@@ -250,15 +263,20 @@ drm_vertex2_32_64(unsigned int fd, unsig
     mm_segment_t old_fs;
     u64 dummy;
     int err = 0;
-    
+    int i, max_state = 0;
+
     DEBUG("drm_vertex2_32_64");
 
     GET_USER(idx);
     GET_USER(discard);
-    GET_USER(nr_states);
-    GET_USER_P(state);
     GET_USER(nr_prims);
-    GET_USER_P(prim);
+    GET_USER_P_ACC(prim, VERIFY_READ, arg32->nr_prims * sizeof(*arg64.prim));
+    GET_USER(nr_states);
+    for (i = 0; i < arg64.nr_prims; i++) {
+	if (max_state < arg64.prim[i].stateidx)
+	    max_state = arg64.prim[i].stateidx;
+    }
+    GET_USER_P_ACC(state, VERIFY_READ, max_state * sizeof(*arg64.state));
 
     if (err) 
 	return -EFAULT;
@@ -320,9 +338,9 @@ drm_radeon_cmd_buffer_32_64(unsigned int
     DEBUG("radeon_cmd_buffer_32_64");
 
     GET_USER(bufsz);
-    GET_USER_P(buf);
+    GET_USER_P_ACC(buf,VERIFY_READ, arg64.bufsz * sizeof(*arg64.buf));
     GET_USER(nbox);
-    GET_USER_P(boxes);
+    GET_USER_P_ACC(boxes, VERIFY_READ, arg64.nbox * sizeof(*arg64.boxes));
 
     if (err) return -EFAULT;
     
@@ -345,7 +363,7 @@ drm_radeon_mem_alloc_32_64(unsigned int 
     GET_USER(region);
     GET_USER(alignment);
     GET_USER(size);
-    GET_USER_P(region_offset);
+    GET_USER_P_ACC(region_offset, VERIFY_WRITE, sizeof(int));
 
     if (err) return -EFAULT;
     
@@ -365,7 +383,7 @@ drm_radeon_irq_emit_32_64(unsigned int f
 
     DEBUG("radeon_irq_emit_32_64");
 
-    GET_USER_P(irq_seq);
+    GET_USER_P_ACC(irq_seq, VERIFY_WRITE, sizeof(int));
 
     if (err) return -EFAULT;
     
@@ -386,7 +404,7 @@ drm_radeon_getparam_32_64(unsigned int f
     DEBUG("radeon_getpram_32_64");
 
     GET_USER(param);
-    GET_USER_P(value);
+    GET_USER_P_ACC(value, VERIFY_WRITE, sizeof(int));
 
     if (err) return -EFAULT;
     
