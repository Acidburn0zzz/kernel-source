diff -urNp linux-2.6.5/fs/cifs/file.c linux-2.6.5.SUSE/fs/cifs/file.c
--- linux-2.6.5/fs/cifs/file.c	2004-04-13 15:57:34.000000000 +0200
+++ linux-2.6.5.SUSE/fs/cifs/file.c	2004-04-13 15:58:26.000000000 +0200
@@ -923,8 +923,8 @@ static void cifs_copy_cache_pages(struct
 		if(list_empty(pages))
 			break;
 
-		page = list_entry(pages->prev, struct page, list);
-		list_del(&page->list);
+		page = list_entry(pages->prev, struct page, lru);
+		list_del(&page->lru);
 
 		if (add_to_page_cache(page, mapping, page->index, GFP_KERNEL)) {
 			page_cache_release(page);
@@ -994,13 +994,13 @@ cifs_readpages(struct file *file, struct
 		if(list_empty(page_list)) {
 			break;
 		}
-		page = list_entry(page_list->prev, struct page, list);
+		page = list_entry(page_list->prev, struct page, lru);
 		offset = (loff_t)page->index << PAGE_CACHE_SHIFT;
 
 		/* count adjacent pages that we will read into */
 		contig_pages = 0;
-		expected_index = list_entry(page_list->prev,struct page,list)->index;
-		list_for_each_entry_reverse(tmp_page,page_list,list) {
+		expected_index = list_entry(page_list->prev,struct page,lru)->index;
+		list_for_each_entry_reverse(tmp_page,page_list,lru) {
 			if(tmp_page->index == expected_index) {
 				contig_pages++;
 				expected_index++;
@@ -1036,8 +1036,8 @@ cifs_readpages(struct file *file, struct
 			cERROR(1,("Read error in readpages: %d",rc)); 
 			/* clean up remaing pages off list */            
 			while (!list_empty(page_list) && (i < num_pages)) {
-				page = list_entry(page_list->prev, struct page, list);
-				list_del(&page->list);
+				page = list_entry(page_list->prev, struct page, lru);
+				list_del(&page->lru);
 				page_cache_release(page);
 			}
 			break;
@@ -1069,8 +1069,8 @@ cifs_readpages(struct file *file, struct
 			cFYI(1,("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list",bytes_read,offset)); 
 			/* BB turn off caching and do new lookup on file size at server? */
 			while (!list_empty(page_list) && (i < num_pages)) {
-				page = list_entry(page_list->prev, struct page, list);
-				list_del(&page->list);
+				page = list_entry(page_list->prev, struct page, lru);
+				list_del(&page->lru);
 				page_cache_release(page); /* BB removeme - replace with zero of page? */
 			}
 			break;
diff -urNp linux-2.6.5/fs/mpage.c linux-2.6.5.SUSE/fs/mpage.c
--- linux-2.6.5/fs/mpage.c	2004-04-13 15:57:34.000000000 +0200
+++ linux-2.6.5.SUSE/fs/mpage.c	2004-04-13 15:57:53.000000000 +0200
@@ -329,10 +329,10 @@ mpage_readpages(struct address_space *ma
 
 	pagevec_init(&lru_pvec, 0);
 	for (page_idx = 0; page_idx < nr_pages; page_idx++) {
-		struct page *page = list_entry(pages->prev, struct page, list);
+		struct page *page = list_entry(pages->prev, struct page, lru);
 
 		prefetchw(&page->flags);
-		list_del(&page->list);
+		list_del(&page->lru);
 		if (!add_to_page_cache(page, mapping,
 					page->index, GFP_KERNEL)) {
 			bio = do_mpage_readpage(bio, page,
diff -urNp linux-2.6.5/mm/readahead.c linux-2.6.5.SUSE/mm/readahead.c
--- linux-2.6.5/mm/readahead.c	2004-04-13 15:57:34.000000000 +0200
+++ linux-2.6.5.SUSE/mm/readahead.c	2004-04-13 15:57:53.000000000 +0200
@@ -54,7 +54,7 @@ static inline unsigned long get_min_read
 	return (VM_MIN_READAHEAD * 1024) / PAGE_CACHE_SIZE;
 }
 
-#define list_to_page(head) (list_entry((head)->prev, struct page, list))
+#define list_to_page(head) (list_entry((head)->prev, struct page, lru))
 
 /**
  * read_cache_pages - populate an address space with some pages, and
@@ -78,7 +78,7 @@ int read_cache_pages(struct address_spac
 
 	while (!list_empty(pages)) {
 		page = list_to_page(pages);
-		list_del(&page->list);
+		list_del(&page->lru);
 		if (add_to_page_cache(page, mapping, page->index, GFP_KERNEL)) {
 			page_cache_release(page);
 			continue;
@@ -91,7 +91,7 @@ int read_cache_pages(struct address_spac
 				struct page *victim;
 
 				victim = list_to_page(pages);
-				list_del(&victim->list);
+				list_del(&victim->lru);
 				page_cache_release(victim);
 			}
 			break;
@@ -118,7 +118,7 @@ static int read_pages(struct address_spa
 	pagevec_init(&lru_pvec, 0);
 	for (page_idx = 0; page_idx < nr_pages; page_idx++) {
 		struct page *page = list_to_page(pages);
-		list_del(&page->list);
+		list_del(&page->lru);
 		if (!add_to_page_cache(page, mapping,
 					page->index, GFP_KERNEL)) {
 			mapping->a_ops->readpage(filp, page);
@@ -253,7 +253,7 @@ __do_page_cache_readahead(struct address
 		if (!page)
 			break;
 		page->index = page_offset;
-		list_add(&page->list, &page_pool);
+		list_add(&page->lru, &page_pool);
 		ret++;
 	}
 	spin_unlock_irq(&mapping->tree_lock);
