diff -urp linux.orig/fs/jfs/jfs_btree.h linux/fs/jfs/jfs_btree.h
--- linux.orig/fs/jfs/jfs_btree.h	2004-06-01 16:17:29.000000000 -0500
+++ linux/fs/jfs/jfs_btree.h	2004-06-01 16:18:41.000000000 -0500
@@ -108,7 +108,6 @@ struct btpage {
  * record the path traversed during the search;
  * top frame record the leaf page/entry selected.
  */
-#define	MAXTREEHEIGHT		10
 struct btframe {	/* stack frame */
 	s64 bn;			/* 8: */
 	s16 index;		/* 2: */
diff -urp linux.orig/fs/jfs/jfs_dtree.c linux/fs/jfs/jfs_dtree.c
--- linux.orig/fs/jfs/jfs_dtree.c	2004-06-01 13:22:49.000000000 -0500
+++ linux/fs/jfs/jfs_dtree.c	2004-06-01 13:24:04.000000000 -0500
@@ -978,8 +978,10 @@ static int dtSplitUp(tid_t tid,
 		n -= DTROOTMAXSLOT - sp->header.freecnt; /* header + entries */
 		if (n <= split->nslot)
 			xlen++;
-		if ((rc = dbAlloc(ip, 0, (s64) xlen, &xaddr)))
+		if ((rc = dbAlloc(ip, 0, (s64) xlen, &xaddr))) {
+			DT_PUTPAGE(smp);
 			goto freeKeyName;
+		}
 
 		pxdlist.maxnpxd = 1;
 		pxdlist.npxd = 0;
diff -urp linux.orig/fs/jfs/jfs_txnmgr.c linux/fs/jfs/jfs_txnmgr.c
--- linux.orig/fs/jfs/jfs_txnmgr.c	2004-06-01 22:07:06.000000000 -0500
+++ linux/fs/jfs/jfs_txnmgr.c	2004-06-01 22:08:37.000000000 -0500
@@ -1916,25 +1916,18 @@ static void xtLog(struct jfs_log * log, 
 		/*
 		 *      write log records
 		 */
-		/*
-		 * allocate entries XAD[lwm:next]:
+		/* log after-image for logredo():
+		 *
+		 * logredo() will update bmap for alloc of new/extended
+		 * extents (XAD_NEW|XAD_EXTEND) of XAD[lwm:next) from
+		 * after-image of XADlist;
+		 * logredo() resets (XAD_NEW|XAD_EXTEND) flag when
+		 * applying the after-image to the meta-data page.
 		 */
-		if (lwm < next) {
-			/* log after-image for logredo():
-			 * logredo() will update bmap for alloc of new/extended
-			 * extents (XAD_NEW|XAD_EXTEND) of XAD[lwm:next) from
-			 * after-image of XADlist;
-			 * logredo() resets (XAD_NEW|XAD_EXTEND) flag when
-			 * applying the after-image to the meta-data page.
-			 */
-			lrd->type = cpu_to_le16(LOG_REDOPAGE);
-			PXDaddress(pxd, mp->index);
-			PXDlength(pxd,
-				  mp->logical_size >> tblk->sb->
-				  s_blocksize_bits);
-			lrd->backchain =
-			    cpu_to_le32(lmLog(log, tblk, lrd, tlck));
-		}
+		lrd->type = cpu_to_le16(LOG_REDOPAGE);
+		PXDaddress(pxd, mp->index);
+		PXDlength(pxd, mp->logical_size >> tblk->sb->s_blocksize_bits);
+		lrd->backchain = cpu_to_le32(lmLog(log, tblk, lrd, tlck));
 
 		/*
 		 * truncate entry XAD[twm == next - 1]:
diff -urp linux.orig/fs/jfs/jfs_types.h linux/fs/jfs/jfs_types.h
--- linux.orig/fs/jfs/jfs_types.h	2004-06-01 16:15:55.000000000 -0500
+++ linux/fs/jfs/jfs_types.h	2004-06-01 16:18:35.000000000 -0500
@@ -113,11 +113,12 @@ typedef struct {
 #define	addressPXD(pxd)\
 	( ((s64)((pxd)->addr1)) << 32 | __le32_to_cpu((pxd)->addr2))
 
+#define	MAXTREEHEIGHT		10
 /* pxd list */
 struct pxdlist {
 	s16 maxnpxd;
 	s16 npxd;
-	pxd_t pxd[8];
+	pxd_t pxd[MAXTREEHEIGHT];
 };
 
 
diff -urp linux.orig/fs/jfs/namei.c linux/fs/jfs/namei.c
--- linux.orig/fs/jfs/namei.c	2004-06-01 20:55:42.000000000 -0500
+++ linux/fs/jfs/namei.c	2004-06-02 09:22:59.000000000 -0500
@@ -997,20 +997,11 @@ static int jfs_symlink(struct inode *dip
 	down(&JFS_IP(dip)->commit_sem);
 	down(&JFS_IP(ip)->commit_sem);
 
-	if ((rc = dtSearch(dip, &dname, &ino, &btstack, JFS_CREATE)))
-		goto out3;
-
 	tblk = tid_to_tblock(tid);
 	tblk->xflag |= COMMIT_CREATE;
 	tblk->ino = ip->i_ino;
 	tblk->u.ixpxd = JFS_IP(ip)->ixpxd;
 
-	/*
-	 * create entry for symbolic link in parent directory
-	 */
-
-	ino = ip->i_ino;
-
 	/* fix symlink access permission
 	 * (dir_create() ANDs in the u.u_cmask, 
 	 * but symlinks really need to be 777 access)
@@ -1090,8 +1081,15 @@ static int jfs_symlink(struct inode *dip
 		ip->i_blocks = LBLK2PBLK(sb, xlen);
 	}
 
-	if ((rc = dtInsert(tid, dip, &dname, &ino, &btstack))) {
-		jfs_err("jfs_symlink: dtInsert returned %d", rc);
+	/*
+	 * create entry for symbolic link in parent directory
+	 */
+	rc = dtSearch(dip, &dname, &ino, &btstack, JFS_CREATE);
+	if (rc == 0) {
+		ino = ip->i_ino;
+		rc = dtInsert(tid, dip, &dname, &ino, &btstack);
+	}
+	if (rc) {
 		if (xlen)
 			dbFree(ip, extent, xlen);
 		txAbort(tid, 0);
@@ -1329,7 +1327,7 @@ static int jfs_rename(struct inode *old_
 			/* Linelock header of dtree */
 			tlck = txLock(tid, old_ip,
 				    (struct metapage *) &JFS_IP(old_ip)->bxflag,
-				      tlckDTREE | tlckBTROOT);
+				      tlckDTREE | tlckBTROOT | tlckRELINK);
 			dtlck = (struct dt_lock *) & tlck->lock;
 			ASSERT(dtlck->index == 0);
 			lv = & dtlck->lv[0];
