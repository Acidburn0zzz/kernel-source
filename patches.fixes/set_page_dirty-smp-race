--- sles/fs/buffer.c.~1~	2004-05-19 03:02:40.000000000 +0200
+++ sles/fs/buffer.c	2004-05-19 06:10:56.112301408 +0200
@@ -924,13 +924,10 @@ EXPORT_SYMBOL(mark_buffer_dirty_inode);
  */
 int __set_page_dirty_buffers(struct page *page)
 {
-	struct address_space * const mapping = page_mapping(page);
-	int ret = 0;
+	struct address_space * const mapping = page->mapping;
 
-	if (mapping == NULL) {
-		SetPageDirty(page);
-		goto out;
-	}
+	BUG_ON(!mapping);
+	BUG_ON(PageSwapCache(page));
 
 	spin_lock(&mapping->private_lock);
 	if (page_has_buffers(page)) {
@@ -952,18 +949,17 @@ int __set_page_dirty_buffers(struct page
 
 	if (!TestSetPageDirty(page)) {
 		spin_lock_irq(&mapping->tree_lock);
-		if (page_mapping(page)) {	/* Race with truncate? */
+		if (page->mapping) {	/* Race with truncate? */
 			if (!mapping->backing_dev_info->memory_backed)
 				inc_page_state(nr_dirty);
-			radix_tree_tag_set(&mapping->page_tree, !PageSwapCache(page) ? page->index : page->private,
+			radix_tree_tag_set(&mapping->page_tree, page->index,
 						PAGECACHE_TAG_DIRTY);
 		}
 		spin_unlock_irq(&mapping->tree_lock);
 		__mark_inode_dirty(mapping->host, I_DIRTY_PAGES);
 	}
 	
-out:
-	return ret;
+	return 0;
 }
 EXPORT_SYMBOL(__set_page_dirty_buffers);
 
--- sles/mm/page-writeback.c.~1~	2004-05-19 03:02:25.000000000 +0200
+++ sles/mm/page-writeback.c	2004-05-19 06:09:17.592278728 +0200
@@ -559,7 +559,8 @@ int __set_page_dirty_nobuffers(struct pa
 						   PAGECACHE_TAG_DIRTY);
 			}
 			spin_unlock_irq(&mapping->tree_lock);
-			if (!PageSwapCache(page))
+			/* swapcache has null mapping->host */
+			if (mapping->host)
 				__mark_inode_dirty(mapping->host,
 							I_DIRTY_PAGES);
 		}
@@ -577,14 +578,15 @@ EXPORT_SYMBOL(__set_page_dirty_nobuffers
  */
 int fastcall set_page_dirty(struct page *page)
 {
-	if (page_mapping(page)) {
-		int (*spd)(struct page *);
+	struct address_space *mapping = page_mapping(page);
 
-		spd = page_mapping(page)->a_ops->set_page_dirty;
+	if (likely(mapping)) {
+		int (*spd)(struct page *) = mapping->a_ops->set_page_dirty;
 		if (spd)
 			return (*spd)(page);
+		return __set_page_dirty_buffers(page);
 	}
-	return __set_page_dirty_buffers(page);
+	return TestSetPageDirty(page);
 }
 EXPORT_SYMBOL(set_page_dirty);
 
