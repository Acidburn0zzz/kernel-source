From: olh@suse.de
Subject: Ignore disabled ROM resources at setup


 revert this change with pcirom=1, leave it as is with pcirom=0


Ignore disabled ROM resources at setup

Writing even a disabled value seems to mess up some matrox graphics
cards.  It may be a card-related issue, but we may also be writing
reserved low bits in the result.

This was a fall-out of switching x86 over to the generic PCI resource
allocation code, and needs more debugging.  In particular, the old x86
code defaulted to not doing any resource allocations at all for ROM
resources.

In the meantime, this has been reported to make X happier by Helge
Hafting <helgehaf@aitel.hist.no>.

Signed-off-by: Linus Torvalds <torvalds@osdl.org>

 drivers/pci/setup-res.c |   15 +++++++++++++++
 1 files changed, 15 insertions(+)

Index: linux-2.6.13-pcirom/drivers/pci/setup-res.c
===================================================================
--- linux-2.6.13-pcirom.orig/drivers/pci/setup-res.c
+++ linux-2.6.13-pcirom/drivers/pci/setup-res.c
@@ -25,6 +25,18 @@
 #include <linux/slab.h>
 #include "pci.h"
 
+/* aty128fb and radeonfb crash when calling pci_map_rom */
+#ifdef __powerpc__
+static int pci_rom_disable = 1;
+#else
+static int pci_rom_disable;
+#endif
+static int __init pci_rom_disable_setup(char *str)
+{
+	pci_rom_disable = simple_strtoul(str, NULL, 0);
+	return 1;
+}
+__setup("pcirom=", pci_rom_disable_setup);
 
 static void
 pci_update_resource(struct pci_dev *dev, struct resource *res, int resno)
@@ -53,9 +65,12 @@ pci_update_resource(struct pci_dev *dev,
 	if (resno < 6) {
 		reg = PCI_BASE_ADDRESS_0 + 4 * resno;
 	} else if (resno == PCI_ROM_RESOURCE) {
+		if (!pci_rom_disable) {
 		if (!(res->flags & IORESOURCE_ROM_ENABLE))
 			return;
 		new |= PCI_ROM_ADDRESS_ENABLE;
+		} else
+			new |= res->flags & IORESOURCE_ROM_ENABLE;
 		reg = dev->rom_base_reg;
 	} else {
 		/* Hmm, non-standard resource. */
