diff -u linux/fs/xfs/linux/xfs_aops.c-o linux/fs/xfs/linux/xfs_aops.c
--- linux/fs/xfs/linux/xfs_aops.c-o	2004-06-12 03:38:18.000000000 +0200
+++ linux/fs/xfs/linux/xfs_aops.c	2004-06-13 22:42:46.000000000 +0200
@@ -681,13 +681,12 @@
 	xfs_iomap_t		*iomapp,
 	struct writeback_control *wbc,
 	int			startio,
-	int			all_bh)
+	int			all_bh,
+	pgoff_t			tlast)
 {
-	pgoff_t			tlast;
 	struct page		*page;
 
-	tlast = (iomapp->iomap_offset + iomapp->iomap_bsize) >> PAGE_CACHE_SHIFT;
-	for (; tindex < tlast; tindex++) {
+	for (; tindex <= tlast; tindex++) {
 		page = xfs_probe_delalloc_page(inode, tindex);
 		if (!page)
 			break;
@@ -726,16 +725,17 @@
 	struct buffer_head	*bh_arr[MAX_BUF_PER_PAGE], *bh, *head;
 	xfs_iomap_t		*iomp, iomap;
 	unsigned long		p_offset = 0;
-	pgoff_t			end_index;
+	pgoff_t			end_index, last_index, tlast;
 	loff_t			offset;
 	unsigned long long	end_offset;
 	int			len, err, i, cnt = 0, uptodate = 1;
 	int			flags = startio ? 0 : BMAPI_TRYLOCK;
 	int			page_dirty = 1;
-
+	int			delalloc = 0;
 
 	/* Are we off the end of the file ? */
 	end_index = i_size_read(inode) >> PAGE_CACHE_SHIFT;
+	last_index = (i_size_read(inode) - 1) >> PAGE_CACHE_SHIFT;
 	if (page->index >= end_index) {
 		if ((page->index >= end_index + 1) ||
 		    !(i_size_read(inode) & (PAGE_CACHE_SIZE - 1))) {
@@ -770,6 +770,7 @@
 		 */
 		if (buffer_unwritten(bh)) {
 			if (!iomp) {
+				delalloc = 1;
 				err = xfs_map_blocks(inode, offset, len, &iomap,
 						BMAPI_READ|BMAPI_IGNSTATE);
 				if (err) {
@@ -871,8 +872,12 @@
 		xfs_submit_page(page, bh_arr, cnt);
 
 	if (iomp) {
+		tlast = (iomp->iomap_offset + iomp->iomap_bsize - 1) >> PAGE_CACHE_SHIFT;
+		if (delalloc && (tlast > last_index)) {
+			tlast = last_index;
+		}
 		xfs_cluster_write(inode, page->index + 1, iomp, wbc,
-				startio, unmapped);
+				startio, unmapped, tlast);
 	}
 
 	return page_dirty;
