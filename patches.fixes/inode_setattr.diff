ext2_setattr() drops the inode_setattr() return value on the floor.
This is very bad - I/O errors during truncate are lost.

The patch changes ext2_setattr() so that we no longer call
ext2_acl_chmod() if inode_setattr(), which is what ext3 does.

* reiserfs() is also dropping inode_setattr() retvals on the floor.
* jfs is dropping inode_setattr()'s return value.
* CIFS is failing to propagate the inode_setattr() return value.
* ncpfs is failing to propagate the inode_setattr return value.
* affs is failing to propagate the inode_setattr() return value.

Signed-off-by: Andrew Morton <akpm@osdl.org>

Index: linux-2.6.5/fs/ext2/inode.c
===================================================================
--- linux-2.6.5.orig/fs/ext2/inode.c
+++ linux-2.6.5/fs/ext2/inode.c
@@ -1276,8 +1276,8 @@ int ext2_setattr(struct dentry *dentry, 
 		if (error)
 			return error;
 	}
-	inode_setattr(inode, iattr);
-	if (iattr->ia_valid & ATTR_MODE)
+	error = inode_setattr(inode, iattr);
+	if (!error && (iattr->ia_valid & ATTR_MODE))
 		error = ext2_acl_chmod(inode);
 	return error;
 }
Index: linux-2.6.5/fs/reiserfs/inode.c
===================================================================
--- linux-2.6.5.orig/fs/reiserfs/inode.c
+++ linux-2.6.5/fs/reiserfs/inode.c
@@ -2806,7 +2806,7 @@ int reiserfs_setattr(struct dentry *dent
                     error = DQUOT_TRANSFER(inode, attr) ? -EDQUOT : 0;
         }
         if (!error)
-            inode_setattr(inode, attr) ;
+            error = inode_setattr(inode, attr) ;
     }
 
  
Index: linux-2.6.5/fs/cifs/inode.c
===================================================================
--- linux-2.6.5.orig/fs/cifs/inode.c
+++ linux-2.6.5/fs/cifs/inode.c
@@ -948,7 +948,8 @@ cifs_setattr(struct dentry *direntry, st
 	}
 
 	/* do not  need local check to inode_check_ok since the server does that */
-	inode_setattr(direntry->d_inode, attrs);
+	if (!rc)
+		rc = inode_setattr(direntry->d_inode, attrs);
 	if (full_path)
 		kfree(full_path);
 	FreeXid(xid);
Index: linux-2.6.5/fs/ncpfs/inode.c
===================================================================
--- linux-2.6.5.orig/fs/ncpfs/inode.c
+++ linux-2.6.5/fs/ncpfs/inode.c
@@ -866,7 +866,9 @@ int ncp_notify_change(struct dentry *den
 				tmpattr.ia_valid = ATTR_MODE;
 				tmpattr.ia_mode = attr->ia_mode;
 
-				inode_setattr(inode, &tmpattr);
+				result = inode_setattr(inode, &tmpattr);
+				if (result)
+					goto out;
 			}
 		}
 #endif
@@ -892,13 +894,17 @@ int ncp_notify_change(struct dentry *den
 		   closing the file */
 		ncp_inode_close(inode);
 		result = ncp_make_closed(inode);
+		if (result)
+			goto out;
 		{
 			struct iattr tmpattr;
 			
 			tmpattr.ia_valid = ATTR_SIZE;
 			tmpattr.ia_size = attr->ia_size;
 			
-			inode_setattr(inode, &tmpattr);
+			result = inode_setattr(inode, &tmpattr);
+			if (result)
+				goto out;
 		}
 	}
 	if ((attr->ia_valid & ATTR_CTIME) != 0) {
@@ -944,7 +950,7 @@ int ncp_notify_change(struct dentry *den
 #endif
 	}
 	if (!result)
-		inode_setattr(inode, attr);
+		result = inode_setattr(inode, attr);
 out:
 	unlock_kernel();
 	return result;
Index: linux-2.6.5/fs/affs/inode.c
===================================================================
--- linux-2.6.5.orig/fs/affs/inode.c
+++ linux-2.6.5/fs/affs/inode.c
@@ -249,7 +249,7 @@ affs_notify_change(struct dentry *dentry
 		goto out;
 	}
 
-	inode_setattr(inode, attr);
+	error = inode_setattr(inode, attr);
 	if (!error && (attr->ia_valid & ATTR_MODE))
 		mode_to_prot(inode);
 out:
Index: linux-2.6.5/fs/jfs/file.c
===================================================================
--- linux-2.6.5.orig/fs/jfs/file.c
+++ linux-2.6.5/fs/jfs/file.c
@@ -121,7 +121,9 @@ int jfs_setattr(struct dentry *dentry, s
 	}
 #endif
 	
-	inode_setattr(inode, iattr);
+	rc = inode_setattr(inode, iattr);
+	if (rc)
+		return rc;
 
 #ifdef CONFIG_JFS_POSIX_ACL
 	if (iattr->ia_valid & ATTR_MODE)
