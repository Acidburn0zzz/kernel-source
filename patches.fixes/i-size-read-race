andrea@suse.de

Bugfix for 42748

i_size can change under us and while that's no real problem, we should
better make sure that the value we use in mpage_writepage() is
consistent.

diff -uNrp linux-2.6.5/fs/mpage.c linux-2.6.5.isize/fs/mpage.c
--- linux-2.6.5/fs/mpage.c	2004-07-12 22:58:40.805522661 +0200
+++ linux-2.6.5.isize/fs/mpage.c	2004-07-12 23:05:43.000836546 +0200
@@ -404,6 +404,7 @@ mpage_writepage(struct bio *bio, struct 
 	struct block_device *boundary_bdev = NULL;
 	int length;
 	struct buffer_head map_bh;
+	loff_t i_size = i_size_read(inode);
 
 	if (page_has_buffers(page)) {
 		struct buffer_head *head = page_buffers(page);
@@ -460,7 +461,7 @@ mpage_writepage(struct bio *bio, struct 
 	 */
 	BUG_ON(!PageUptodate(page));
 	block_in_file = page->index << (PAGE_CACHE_SHIFT - blkbits);
-	last_block = (i_size_read(inode) - 1) >> blkbits;
+	last_block = (i_size - 1) >> blkbits;
 	map_bh.b_page = page;
 	for (page_block = 0; page_block < blocks_per_page; ) {
 
@@ -492,9 +493,9 @@ mpage_writepage(struct bio *bio, struct 
 
 page_is_mapped:
 
-	end_index = i_size_read(inode) >> PAGE_CACHE_SHIFT;
+	end_index = i_size >> PAGE_CACHE_SHIFT;
 	if (page->index >= end_index) {
-		unsigned offset = i_size_read(inode) & (PAGE_CACHE_SIZE - 1);
+		unsigned offset = i_size & (PAGE_CACHE_SIZE - 1);
 		char *kaddr;
 
 		if (page->index > end_index || !offset)
