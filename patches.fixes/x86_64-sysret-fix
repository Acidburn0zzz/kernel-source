From: ak@suse.de
Subject: fix AMD64 sysret local DoS
Patch-mainline: no
References: 73701

fix AMD64 sysret local DoS

Acked-by: ak@suse.de

diff -urNp linux-2.6.11/include/asm-x86_64/page.h linux-2.6.11.SUSE/include/asm-x86_64/page.h
--- linux-2.6.11/include/asm-x86_64/page.h	2005-03-02 08:37:47.000000000 +0100
+++ linux-2.6.11.SUSE/include/asm-x86_64/page.h	2005-05-13 17:14:44.264459576 +0200
@@ -69,12 +69,12 @@ extern unsigned long vm_force_exec32;
 
 #define __START_KERNEL		0xffffffff80100000UL
 #define __START_KERNEL_map	0xffffffff80000000UL
-#define __PAGE_OFFSET           0xffff810000000000UL
+#define __PAGE_OFFSET           (0xffff810000000000UL - 4096)
 
 #else
 #define __START_KERNEL		0xffffffff80100000
 #define __START_KERNEL_map	0xffffffff80000000
-#define __PAGE_OFFSET           0xffff810000000000
+#define __PAGE_OFFSET           (0xffff810000000000 - PAGE_SIZE)
 #endif /* !__ASSEMBLY__ */
 
 /* to align the pointer to the (next) page boundary */
diff -urNp linux-2.6.11/include/asm-x86_64/pgtable.h linux-2.6.11.SUSE/include/asm-x86_64/pgtable.h
--- linux-2.6.11/include/asm-x86_64/pgtable.h	2005-03-02 08:38:17.000000000 +0100
+++ linux-2.6.11.SUSE/include/asm-x86_64/pgtable.h	2005-05-13 17:14:44.264459576 +0200
@@ -335,6 +335,7 @@ static inline pud_t *__pud_offset_k(pud_
 #define pmd_pfn(x)  ((pmd_val(x) >> PAGE_SHIFT) & __PHYSICAL_MASK)
 
 #define pte_to_pgoff(pte) ((pte_val(pte) & PHYSICAL_PAGE_MASK) >> PAGE_SHIFT)
+#define pte_bad(pte)    (pte_val(pte) & ~(PHYSICAL_PAGE_MASK|_PAGE_NX|0x1ff))
 #define pgoff_to_pte(off) ((pte_t) { ((off) << PAGE_SHIFT) | _PAGE_FILE })
 #define PTE_FILE_MAX_BITS __PHYSICAL_MASK_SHIFT
 
diff -urNp linux-2.6.11/include/asm-x86_64/processor.h linux-2.6.11.SUSE/include/asm-x86_64/processor.h
--- linux-2.6.11/include/asm-x86_64/processor.h	2005-05-13 17:14:14.078048608 +0200
+++ linux-2.6.11.SUSE/include/asm-x86_64/processor.h	2005-05-13 17:14:44.265459424 +0200
@@ -160,9 +160,9 @@ static inline void clear_in_cr4 (unsigne
 
 
 /*
- * User space process size. 47bits.
+ * User space process size. 47bits minus one guard page
  */
-#define TASK_SIZE	(0x800000000000UL)
+#define TASK_SIZE	(0x800000000000UL - 4096)
 
 /* This decides where the kernel will search for a free chunk of vm
  * space during mmap's.
