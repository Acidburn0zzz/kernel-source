From: olh@suse.de
Subject: 2.6.11-rc2-bk8

 -- www.kernel.org/pub/linux/kernel/v2.6/snapshots/patch-2.6.11-rc2-bk7.log	2005-01-29 13:52:00.000000000 +0100
 ++ www.kernel.org/pub/linux/kernel/v2.6/snapshots/patch-2.6.11-rc2-bk8.log	2005-01-30 14:04:17.000000000 +0100
 ChangeSet@1.1990, 2005-01-29 09:24:47-08:00, axboe@suse.de
   [PATCH] cfq-iosched: in_driver accounting bug
   
   Yet another accounting bug, this time hits on requeue. It is possible
   for ->accounted to be set with ->in_flight, so don't nest the
   cfq_account_completion() inside the ->in_flight check.
   
   Signed-off-by: Jens Axboe <axboe@suse.de>
   Signed-off-by: Linus Torvalds <torvalds@osdl.org>
 
 ChangeSet@1.1989, 2005-01-29 09:24:34-08:00, ak@suse.de
   [PATCH] x86-64: Fix empty nodes handling with SRAT
   
   Handle empty nodes in SRAT parsing. Avoids an oops at boot time.
   
   Signed-off-by: Andi Kleen <ak@suse.de>
   Signed-off-by: Linus Torvalds <torvalds@osdl.org>
 
 ChangeSet@1.1988, 2005-01-29 09:24:19-08:00, ak@suse.de
   [PATCH] x86-64: Fix missing TLB flushes in change_page_attr
   
   Fix bug in change_page_attr - with multiple pages it would not flush
   correctly. Also add a small optimization of not flushing when not needed.
   
   Found and fixed by Andrea. 
   
   Signed-off-by: Andi Kleen <ak@suse.de>
   Signed-off-by: Linus Torvalds <torvalds@osdl.org>
 
 ChangeSet@1.1986.1.1, 2005-01-29 13:08:30+00:00, rmk@flint.arm.linux.org.uk
   [ARM] [2/4] Introduce inv_entry macro to contain common entry code
   
   This is the second of 4 patches which factor out common code in
   the ARM exception entry assembly code, aiming towards a reduction
   in the size of the changes required here for SMP support.  These
   patches are low impact, and will be merged over the coarse of the
   next 3 days.
   
   This patch addresses the code handling exception entry from
   invalid (irq, fiq, abort) modes.  However, in converting to a
   macro, a minor bug has been fixed which would merely cause a
   misleading register dump.
 
 ChangeSet@1.1987, 2005-01-28 22:29:02-05:00, mkrikis@yahoo.com
   [PATCH] fix an oops in ata_to_sense_error
   
   Signed-off-by: Jeff Garzik <jgarzik@pobox.com>
 
diff -purN linux-2.6.11-rc2-bk7/Makefile linux-2.6.11-rc2-bk8/Makefile
--- linux-2.6.11-rc2-bk7/Makefile	2005-01-30 15:36:51.269519524 +0100
+++ linux-2.6.11-rc2-bk8/Makefile	2005-01-30 15:36:59.405451276 +0100
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 6
 SUBLEVEL = 11
-EXTRAVERSION = -rc2-bk7
+EXTRAVERSION = -rc2-bk8
 NAME=Woozy Numbat
 
 # *DOCUMENTATION*
diff -purN linux-2.6.11-rc2-bk7/arch/arm/kernel/entry-armv.S linux-2.6.11-rc2-bk8/arch/arm/kernel/entry-armv.S
--- linux-2.6.11-rc2-bk7/arch/arm/kernel/entry-armv.S	2005-01-30 15:36:51.282517499 +0100
+++ linux-2.6.11-rc2-bk8/arch/arm/kernel/entry-armv.S	2005-01-30 15:36:59.418449251 +0100
@@ -26,28 +26,27 @@
 /*
  * Invalid mode handlers
  */
-__pabt_invalid:	sub	sp, sp, #S_FRAME_SIZE		@ Allocate frame size in one go
-		stmia	sp, {r0 - lr}			@ Save XXX r0 - lr
-		ldr	r4, .LCabt
-		mov	r1, #BAD_PREFETCH
+	.macro	inv_entry, sym, reason
+	sub	sp, sp, #S_FRAME_SIZE		@ Allocate frame size in one go
+	stmia	sp, {r0 - lr}			@ Save XXX r0 - lr
+	ldr	r4, .LC\sym
+	mov	r1, #\reason
+	.endm
+
+__pabt_invalid:
+		inv_entry abt, BAD_PREFETCH
 		b	1f
 
-__dabt_invalid:	sub	sp, sp, #S_FRAME_SIZE
-		stmia	sp, {r0 - lr}			@ Save SVC r0 - lr [lr *should* be intact]
-		ldr	r4, .LCabt
-		mov	r1, #BAD_DATA
+__dabt_invalid:
+		inv_entry abt, BAD_DATA
 		b	1f
 
-__irq_invalid:	sub	sp, sp, #S_FRAME_SIZE		@ Allocate space on stack for frame
-		stmfd	sp, {r0 - lr}			@ Save r0 - lr
-		ldr	r4, .LCirq
-		mov	r1, #BAD_IRQ
+__irq_invalid:
+		inv_entry irq, BAD_IRQ
 		b	1f
 
-__und_invalid:	sub	sp, sp, #S_FRAME_SIZE
-		stmia	sp, {r0 - lr}
-		ldr	r4, .LCund
-		mov	r1, #BAD_UNDEFINSTR		@ int reason
+__und_invalid:
+		inv_entry und, BAD_UNDEFINSTR
 
 1:		zero_fp
 		ldmia	r4, {r5 - r7}			@ Get XXX pc, cpsr, old_r0
diff -purN linux-2.6.11-rc2-bk7/arch/x86_64/mm/numa.c linux-2.6.11-rc2-bk8/arch/x86_64/mm/numa.c
--- linux-2.6.11-rc2-bk7/arch/x86_64/mm/numa.c	2005-01-22 02:48:48.000000000 +0100
+++ linux-2.6.11-rc2-bk8/arch/x86_64/mm/numa.c	2005-01-30 15:36:59.610419347 +0100
@@ -28,7 +28,6 @@ bootmem_data_t plat_node_bdata[MAX_NUMNO
 int memnode_shift;
 u8  memnodemap[NODEMAPSIZE];
 
-#define NUMA_NO_NODE 0xff
 unsigned char cpu_to_node[NR_CPUS] = { [0 ... NR_CPUS-1] = NUMA_NO_NODE };
 cpumask_t     node_to_cpumask[MAX_NUMNODES];
 
diff -purN linux-2.6.11-rc2-bk7/arch/x86_64/mm/pageattr.c linux-2.6.11-rc2-bk8/arch/x86_64/mm/pageattr.c
--- linux-2.6.11-rc2-bk7/arch/x86_64/mm/pageattr.c	2005-01-22 02:48:01.000000000 +0100
+++ linux-2.6.11-rc2-bk8/arch/x86_64/mm/pageattr.c	2005-01-30 15:36:59.611419191 +0100
@@ -65,7 +65,10 @@ static void flush_kernel_map(void *addre
 			asm volatile("clflush (%0)" :: "r" (address + i)); 
 	} else
 		asm volatile("wbinvd":::"memory"); 
-	__flush_tlb_one(address);
+	if (address)
+		__flush_tlb_one(address);
+	else
+		__flush_tlb_all();
 }
 
 
@@ -217,6 +220,8 @@ void global_flush_tlb(void)
 	down_read(&init_mm.mmap_sem);
 	df = xchg(&df_list, NULL);
 	up_read(&init_mm.mmap_sem);
+	if (!df)
+		return;
 	flush_map((df && !df->next) ? df->address : 0);
 	for (; df; df = next_df) { 
 		next_df = df->next;
diff -purN linux-2.6.11-rc2-bk7/arch/x86_64/mm/srat.c linux-2.6.11-rc2-bk8/arch/x86_64/mm/srat.c
--- linux-2.6.11-rc2-bk7/arch/x86_64/mm/srat.c	2005-01-22 02:48:00.000000000 +0100
+++ linux-2.6.11-rc2-bk8/arch/x86_64/mm/srat.c	2005-01-30 15:36:59.612419035 +0100
@@ -177,10 +177,18 @@ int __init acpi_scan_nodes(unsigned long
 		if (!node_isset(i, nodes_parsed))
 			continue;
 		cutoff_node(i, start, end);
-		if (nodes[i].start == nodes[i].end)
+		if (nodes[i].start == nodes[i].end) { 
+			node_clear(i, nodes_parsed);
 			continue;
+		}
 		setup_node_bootmem(i, nodes[i].start, nodes[i].end);
 	}
+	for (i = 0; i < NR_CPUS; i++) { 
+		if (cpu_to_node[i] == NUMA_NO_NODE)
+			continue;
+		if (!node_isset(cpu_to_node[i], nodes_parsed))
+			cpu_to_node[i] = NUMA_NO_NODE; 
+	}
 	numa_init_array();
 	return 0;
 }
diff -purN linux-2.6.11-rc2-bk7/drivers/block/cfq-iosched.c linux-2.6.11-rc2-bk8/drivers/block/cfq-iosched.c
--- linux-2.6.11-rc2-bk7/drivers/block/cfq-iosched.c	2005-01-22 02:48:28.000000000 +0100
+++ linux-2.6.11-rc2-bk8/drivers/block/cfq-iosched.c	2005-01-30 15:36:59.624417166 +0100
@@ -1285,19 +1285,19 @@ static int cfq_queue_empty(request_queue
 static void cfq_completed_request(request_queue_t *q, struct request *rq)
 {
 	struct cfq_rq *crq = RQ_DATA(rq);
+	struct cfq_queue *cfqq;
 
 	if (unlikely(!blk_fs_request(rq)))
 		return;
 
-	if (crq->in_flight) {
-		struct cfq_queue *cfqq = crq->cfq_queue;
+	cfqq = crq->cfq_queue;
 
+	if (crq->in_flight) {
 		WARN_ON(!cfqq->in_flight);
 		cfqq->in_flight--;
-
-		cfq_account_completion(cfqq, crq);
 	}
 
+	cfq_account_completion(cfqq, crq);
 }
 
 static struct request *
diff -purN linux-2.6.11-rc2-bk7/drivers/scsi/libata-scsi.c linux-2.6.11-rc2-bk8/drivers/scsi/libata-scsi.c
--- linux-2.6.11-rc2-bk7/drivers/scsi/libata-scsi.c	2005-01-22 02:47:49.000000000 +0100
+++ linux-2.6.11-rc2-bk8/drivers/scsi/libata-scsi.c	2005-01-30 15:37:00.159467277 +0100
@@ -282,7 +282,8 @@ void ata_to_sense_error(struct ata_queue
 	/* No immediate match */
 	if(err)
 		printk(KERN_DEBUG "ata%u: no sense translation for 0x%02x\n", qc->ap->id, err);
-	
+
+	i = 0;
 	/* Fall back to interpreting status bits */
 	while(stat_table[i][0] != 0xFF)
 	{
diff -purN linux-2.6.11-rc2-bk7/include/asm-x86_64/numa.h linux-2.6.11-rc2-bk8/include/asm-x86_64/numa.h
--- linux-2.6.11-rc2-bk7/include/asm-x86_64/numa.h	2005-01-22 02:46:45.000000000 +0100
+++ linux-2.6.11-rc2-bk8/include/asm-x86_64/numa.h	2005-01-30 15:37:00.409428339 +0100
@@ -16,4 +16,6 @@ extern void numa_add_cpu(int cpu);
 extern void numa_init_array(void);
 extern int numa_off;
 
+#define NUMA_NO_NODE 0xff
+
 #endif
