Subject: [PATCH] Fix up compiler inefficiencies
X-BK-ChangeSetKey: viro@parcelfarce.linux.theplanet.co.uk[torvalds]|ChangeSet|20050107015816|48178
Date:	Fri, 07 Jan 2005 03:40:44 +0000
Patch-mainline: yes
From: olh@suse.de


ChangeSet 1.2247, 2005/01/06 17:58:16-08:00, viro@parcelfarce.linux.theplanet.co.uk

	[PATCH] Fix up compiler inefficiencies
	
	Oh, bugger...
	
	The recent mmzone.h change triggered some very, very ugly things in
	next_zone(), is_highmem(), is_normal() and zone_idx() because it changed
	the size of "struct zone" subtly.
	
	Pointer subtraction is no fun when sizeof of object gets weird and poor
	gcc blows its brains out trying to optimize that...  This slowed down an
	ARM cross-build by a factor of 2.5. 
	
	Turn the pointer subtraction tests into pointer addition tests instead
	where possible, making them trivial to deal with (and gets better code,
	in addition to faster compile).
	
	zone_idx() still does a subtraction.



 mmzone.h |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)


diff -Nru a/include/linux/mmzone.h b/include/linux/mmzone.h
--- a/include/linux/mmzone.h	2005-01-06 19:16:18 -08:00
+++ b/include/linux/mmzone.h	2005-01-06 19:16:18 -08:00
@@ -311,7 +311,7 @@
 {
 	pg_data_t *pgdat = zone->zone_pgdat;
 
-	if (zone - pgdat->node_zones < MAX_NR_ZONES - 1)
+	if (zone < pgdat->node_zones + MAX_NR_ZONES - 1)
 		zone++;
 	else if (pgdat->pgdat_next) {
 		pgdat = pgdat->pgdat_next;
@@ -357,12 +357,12 @@
  */
 static inline int is_highmem(struct zone *zone)
 {
-	return (is_highmem_idx(zone - zone->zone_pgdat->node_zones));
+	return zone == zone->zone_pgdat->node_zones + ZONE_HIGHMEM;
 }
 
 static inline int is_normal(struct zone *zone)
 {
-	return (is_normal_idx(zone - zone->zone_pgdat->node_zones));
+	return zone == zone->zone_pgdat->node_zones + ZONE_NORMAL;
 }
 
 /* These two functions are used to setup the per zone pages min values */
-
To unsubscribe from this list: send the line "unsubscribe bk-commits-head" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

