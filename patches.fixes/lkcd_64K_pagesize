diff -urNp linux-2.6.5-7.69/arch/ia64/Kconfig linux-2.6.5-7.69-64k-pagesize/arch/ia64/Kconfig
--- linux-2.6.5-7.69/arch/ia64/Kconfig	2004-06-09 22:36:56.002643627 -0700
+++ linux-2.6.5-7.69-64k-pagesize/arch/ia64/Kconfig	2004-06-09 22:44:43.652051961 -0700
@@ -467,6 +467,8 @@ config CRASH_DUMP_COMPRESS_RLE
 
 config CRASH_DUMP_COMPRESS_GZIP
        tristate "Crash dump GZIP compression"
+       select ZLIB_INFLATE
+       select ZLIB_DEFLATE
        depends on CRASH_DUMP
        help
          Say Y to allow saving dumps with Gnu Zip compression.
diff -urNp linux-2.6.5-7.69/drivers/dump/dump_gzip.c linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_gzip.c
--- linux-2.6.5-7.69/drivers/dump/dump_gzip.c	2004-06-09 22:37:00.988971691 -0700
+++ linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_gzip.c	2004-06-09 22:00:07.000000000 -0700
@@ -27,8 +27,8 @@ static unsigned long workspace_paddr[2];
  * Func: Compress a DUMP_PAGE_SIZE page using gzip-style algorithms (the.
  *       deflate functions similar to what's used in PPP).
  */
-static u16
-dump_compress_gzip(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+static u32
+dump_compress_gzip(const u8 *old, u32 oldsize, u8 *new, u32 newsize,
 		unsigned long loc)
 {
 	/* error code and dump stream */
diff -urNp linux-2.6.5-7.69/drivers/dump/dump_methods.h linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_methods.h
--- linux-2.6.5-7.69/drivers/dump/dump_methods.h	2004-06-09 22:37:00.989948253 -0700
+++ linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_methods.h	2004-06-09 21:54:46.000000000 -0700
@@ -334,14 +334,7 @@ static inline void dumper_reset(void)
  */
 static inline void *dump_alloc_mem(unsigned long size)
 {
-#if defined(CONFIG_IA64) && defined(CONFIG_IA64_PAGE_SIZE_64KB)
-	/*
-	 * Ok, kmalloc does not allow more than 128K. 
-	 */
 	return (void *) __get_free_pages(GFP_KERNEL, get_order(size));
-#else
-	return kmalloc(size, GFP_KERNEL);
-#endif
 }
 
 static inline void dump_free_mem(void *buf)
@@ -353,15 +346,11 @@ static inline void dump_free_mem(void *b
 		if (PageReserved(page))
 			return;
 	}
-#if defined(CONFIG_IA64) && defined(CONFIG_IA64_PAGE_SIZE_64KB)
 	/*
 	 * Allocated using __get_free_pages().
 	 */
 	free_pages((unsigned long)buf, 
 		get_order(DUMP_BUFFER_SIZE + 3 * DUMP_PAGE_SIZE));
-#else
-	kfree(buf);
-#endif
 }
 
 
diff -urNp linux-2.6.5-7.69/drivers/dump/dump_rle.c linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_rle.c
--- linux-2.6.5-7.69/drivers/dump/dump_rle.c	2004-06-09 22:37:00.991901378 -0700
+++ linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_rle.c	2004-06-09 22:01:24.000000000 -0700
@@ -21,8 +21,8 @@
  * Func: Compress a DUMP_PAGE_SIZE (hardware) page down to something more
  *       reasonable, if possible.  This is the same routine we use in IRIX.
  */
-static u16
-dump_compress_rle(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+static u32
+dump_compress_rle(const u8 *old, u32 oldsize, u8 *new, u32 newsize,
 		unsigned long loc)
 {
 	u16 ri, wi, count = 0;
diff -urNp linux-2.6.5-7.69/drivers/dump/dump_setup.c linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_setup.c
--- linux-2.6.5-7.69/drivers/dump/dump_setup.c	2004-06-09 22:37:00.993854503 -0700
+++ linux-2.6.5-7.69-64k-pagesize/drivers/dump/dump_setup.c	2004-06-09 21:57:40.000000000 -0700
@@ -150,7 +150,7 @@ extern struct __dump_header dump_header;
 struct dump_dev *dump_dev = NULL;  /* Active dump device                   */
 static int dump_compress = 0;
 
-static u16 dump_compress_none(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+static u32 dump_compress_none(const u8 *old, u32 oldsize, u8 *new, u32 newsize,
 				unsigned long loc);
 struct __dump_compress dump_none_compression = {
 	.compress_type	= DUMP_COMPRESS_NONE,
@@ -285,8 +285,8 @@ static struct ctl_table_header *sysctl_h
  * Name: dump_compress_none()
  * Func: Don't do any compression, period.
  */
-static u16
-dump_compress_none(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+static u32
+dump_compress_none(const u8 *old, u32 oldsize, u8 *new, u32 newsize,
 		unsigned long loc)
 {
 	/* just return the old size */
diff -urNp linux-2.6.5-7.69/include/linux/dump.h linux-2.6.5-7.69-64k-pagesize/include/linux/dump.h
--- linux-2.6.5-7.69/include/linux/dump.h	2004-06-09 22:37:15.342487140 -0700
+++ linux-2.6.5-7.69-64k-pagesize/include/linux/dump.h	2004-06-09 21:56:59.000000000 -0700
@@ -76,8 +76,16 @@
  *
  *	1. the dump header (padded to fill the complete buffer)
  *	2. the possibly compressed page headers and data
+ *   
+ *  = 256k for page size >= 64k
+ *  = 64k  for page size < 64k
  */
+#if (PAGE_SHIFT >= 16)
+#define DUMP_BUFFER_SIZE	(256 * 1024)  /* size of dump buffer         */
+#else
 #define DUMP_BUFFER_SIZE	(64 * 1024)  /* size of dump buffer         */
+#endif
+
 #define DUMP_HEADER_SIZE	DUMP_BUFFER_SIZE
 
 /* standard header definitions */
@@ -292,7 +300,7 @@ struct __dump_compress {
 	const char *compress_name;
 
 	/* the compression function to call */
-	u16 (*compress_func)(const u8 *, u16, u8 *, u16, unsigned long);
+	u32 (*compress_func)(const u8 *, u32, u8 *, u32, unsigned long);
 };
 
 /* functions for dump compression registration */
