can somebody apply the below patch? It fixes a lockup with some unlikely
to happen hugetlbfs truncate, now it has been also reviewed by other VM
developers and they agreed it's correct.

thanks.

On Fri, May 07, 2004 at 07:57:25PM +0200, Andrea Arcangeli wrote:
> this patch fixes a prio-tree bug for the truncation of hugetlbfs files
> with mappings still enstablished, I'm not aware of apps triggering this
> path and infact nobody reproduced it so far, it should hang the machine
> (DoS) but hugetlbfs is normally available only to privilegied users, so
> it is a low priority problem.
> 
> please apply to both sl9.1 and sles9 cvs (it's untested at the moment
> but I will ask for review and it will not be worse than what the
> previous code was doing at the very least, see the "continue" without
> updating the vma).
> 
--- 2.6.5-aa3/fs/hugetlbfs/inode.c.~1~	2004-04-14 11:51:32.000000000 +0200
+++ 2.6.5-aa3/fs/hugetlbfs/inode.c	2004-05-07 11:47:37.710558008 +0200
@@ -287,14 +287,14 @@ hugetlb_vmtruncate_list(struct prio_tree
 		 */
 		if (h_vm_pgoff >= h_pgoff) {
 			zap_hugepage_range(vma, vma->vm_start, v_length);
-			continue;
+			goto next;
 		}
 
 		/*
 		 * Is this VMA fully inside the truncaton point?
 		 */
 		if (h_vm_pgoff + (v_length >> HPAGE_SHIFT) <= h_pgoff)
-			continue;
+			  goto next;
 
 		/*
 		 * The VMA straddles the truncation point.  v_offset is the
@@ -304,6 +304,7 @@ hugetlb_vmtruncate_list(struct prio_tree
 				vma->vm_start + v_offset,
 				v_length - v_offset);
 
+	next:
 		vma = __vma_prio_tree_next(vma, root, &iter, h_pgoff, ULONG_MAX);
 	}
 }

