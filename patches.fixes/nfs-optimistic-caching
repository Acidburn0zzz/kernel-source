Cache permissions optimistically in nfs: The equivalent of
access("file", R_OK), followed by access("file", W_OK), followed by
access("file", R_OK) etc. is a common pattern. Without this patch,
this leads to trashing of the cached permissions in each call.

This patch tries to expand the cached permissions: If access("file",
R_OK) is seen followed by access("file", W_OK), nfs will instead try
access("file", R_OK | W_OK), etc. If this succeeds, access("file", W_OK)
is satisfied as well, otherwise nfs tries access("file", W_OK) as
before.


Andreas Gruenbacher <agruen@suse.de>, SuSE Labs


--- linux-2.6.0-test11/fs/nfs/dir.c.nfs-optimistic	2003-12-16 16:28:42.000000000 +0100
+++ linux-2.6.0-test11/fs/nfs/dir.c	2003-12-16 16:30:46.000000000 +0100
@@ -1327,6 +1327,13 @@
 			/* Is the mask a subset of an accepted mask? */
 			if ((cache->mask & mask) == mask)
 				goto out;
+			/* Try with expanded credentials. */
+			res = NFS_PROTO(inode)->access(inode, cred,
+					mask | cache->mask);
+			if (!res || !cache->mask) {
+				mask |= cache->mask;
+				goto rpc_done;
+			}
 		} else {
 			/* ...or is it a superset of a rejected mask? */
 			if ((cache->mask & mask) == cache->mask)
@@ -1335,6 +1342,7 @@
 	}
 
 	res = NFS_PROTO(inode)->access(inode, cred, mask);
+rpc_done:
 	if (!res || res == -EACCES)
 		goto add_cache;
 out:
