From: Dave Kleikamp <shaggy@austin.imb.com> (supposedly, via
	Glen Johnson <gjohnson@austin.ibm.com>)

The problem was that we ran off the end of our dtstack, which I've
always trusted was large enough, although I don't know why.

I'm now running with this patch and the latest patch for bug 9024.  This
patch increases the size of the dtstack from 8 levels to 10, and prints
out a dump of the stack if we exceed 10 levels.

diff -urp linux-2.6.5-7.61/fs/jfs/jfs_btree.h linux/fs/jfs/jfs_btree.h
--- linux-2.6.5-7.61/fs/jfs/jfs_btree.h	2004-05-30 15:54:32.000000000 -0500
+++ linux/fs/jfs/jfs_btree.h	2004-05-31 18:38:49.923888024 -0500
@@ -108,13 +108,13 @@ struct btpage {
  * record the path traversed during the search;
  * top frame record the leaf page/entry selected.
  */
-#define	MAXTREEHEIGHT		8
+#define	MAXTREEHEIGHT		10
 struct btframe {	/* stack frame */
 	s64 bn;			/* 8: */
 	s16 index;		/* 2: */
-	s16 lastindex;		/* 2: */
-	struct metapage *mp;	/* 4: */
-};				/* (16) */
+	s16 lastindex;		/* 2: unused */
+	struct metapage *mp;	/* 4/8: */
+};				/* (16/24) */
 
 struct btstack {
 	struct btframe *top;
@@ -125,12 +125,15 @@ struct btstack {
 #define BT_CLR(btstack)\
 	(btstack)->top = (btstack)->stack
 
+#define BT_STACK_FULL(btstack)\
+	( (btstack)->top == &((btstack)->stack[MAXTREEHEIGHT]))
+
 #define BT_PUSH(BTSTACK, BN, INDEX)\
 {\
 	(BTSTACK)->top->bn = BN;\
 	(BTSTACK)->top->index = INDEX;\
 	++(BTSTACK)->top;\
-	assert((BTSTACK)->top != &((BTSTACK)->stack[MAXTREEHEIGHT]));\
+	assert(!BT_STACK_FULL(BTSTACK));\
 }
 
 #define BT_POP(btstack)\
@@ -139,6 +142,16 @@ struct btstack {
 #define BT_STACK(btstack)\
 	( (btstack)->top == (btstack)->stack ? NULL : (btstack)->top )
 
+static inline void BT_STACK_DUMP(struct btstack *btstack)
+{
+	int i;
+	printk("btstack dump:\n");
+	for (i = 0; i < MAXTREEHEIGHT; i++)
+		printk(KERN_ERR "bn = %Lx, index = %d\n",
+		       btstack->stack[i].bn,
+		       btstack->stack[i].index);
+}
+
 /* retrieve search results */
 #define BT_GETSEARCH(IP, LEAF, BN, MP, TYPE, P, INDEX, ROOT)\
 {\
diff -urp linux-2.6.5-7.61/fs/jfs/jfs_dtree.c linux/fs/jfs/jfs_dtree.c
--- linux-2.6.5-7.61/fs/jfs/jfs_dtree.c	2004-05-30 15:54:32.000000000 -0500
+++ linux/fs/jfs/jfs_dtree.c	2004-05-31 18:24:09.900671888 -0500
@@ -764,11 +764,12 @@ int dtSearch(struct inode *ip, struct co
 		 */
 	      getChild:
 		/* update max. number of pages to split */
-		if (btstack->nsplit >= 8) {
+		if (BT_STACK_FULL(btstack)) {
 			/* Something's corrupted, mark filesytem dirty so
 			 * chkdsk will fix it.
 			 */
 			jfs_error(sb, "stack overrun in dtSearch!");
+			BT_STACK_DUMP(btstack);
 			rc = -EIO;
 			goto out;
 		}
@@ -3342,6 +3343,12 @@ static int dtReadFirst(struct inode *ip,
 		/*
 		 * descend down to leftmost child page
 		 */
+		if (BT_STACK_FULL(btstack)) {
+			DT_PUTPAGE(mp);
+			jfs_error(ip->i_sb, "dtReadFirst: btstack overrun");
+			BT_STACK_DUMP(btstack);
+			return -EIO;
+		}
 		/* push (bn, index) of the parent page/entry */
 		BT_PUSH(btstack, bn, 0);
 
