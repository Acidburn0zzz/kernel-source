diff -u linux-2.6.7/fs/xfs/linux-2.6/xfs_lrw.c-o linux-2.6.7/fs/xfs/linux-2.6/xfs_lrw.c
--- linux-2.6.7/fs/xfs/linux-2.6/xfs_lrw.c-o	2004-06-16 07:18:37.000000000 +0200
+++ linux-2.6.7/fs/xfs/linux-2.6/xfs_lrw.c	2004-08-10 14:42:55.747393869 +0200
@@ -225,12 +225,15 @@
 	int		write,
 	int		relock)
 {
+#if 0
 	xfs_mount_t	*mp;
+#endif
 
 	if (!VN_CACHED(vp)) {
 		return;
 	}
 
+#if 0
 	mp = io->io_mount;
 
 	/*
@@ -253,12 +256,15 @@
 		}
 		XFS_IUNLOCK(mp, io, XFS_ILOCK_EXCL|XFS_EXTSIZE_RD);
 	}
+#endif
 
 	xfs_inval_cached_trace(io, offset, -1, ctooff(offtoct(offset)), -1);
 	VOP_FLUSHINVAL_PAGES(vp, ctooff(offtoct(offset)), -1, FI_REMAPF_LOCKED);
+#if 0
 	if (relock) {
 		XFS_ILOCK_DEMOTE(mp, io, XFS_IOLOCK_EXCL);
 	}
+#endif
 }
 
 ssize_t			/* bytes read, or (-)  error */
@@ -695,12 +701,18 @@
 		    (size & target->pbr_smask)) {
 			return XFS_ERROR(-EINVAL);
 		}
+#if 0
 		iolock = XFS_IOLOCK_SHARED;
 		locktype = VRWLOCK_WRITE_DIRECT;
 	} else {
 		iolock = XFS_IOLOCK_EXCL;
 		locktype = VRWLOCK_WRITE;
+#endif
 	}
+#if 1
+	iolock = XFS_IOLOCK_EXCL;
+	locktype = VRWLOCK_WRITE;
+#endif
 
 	xfs_ilock(xip, XFS_ILOCK_EXCL|iolock);
 
@@ -773,7 +785,7 @@
 	 * to zero it out up to the new size.
 	 */
 
-	if (!(ioflags & IO_ISDIRECT) && (*offset > isize && isize)) {
+	if ((0 && !(ioflags & IO_ISDIRECT)) && (*offset > isize && isize)) {
 		error = xfs_zero_eof(BHV_TO_VNODE(bdp), io, *offset,
 			isize, *offset + size);
 		if (error) {
diff -u linux-2.6.7/fs/xfs/linux-2.6/xfs_file.c-o linux-2.6.7/fs/xfs/linux-2.6/xfs_file.c
--- linux-2.6.7/fs/xfs/linux-2.6/xfs_file.c-o	2004-08-10 14:36:15.000000000 +0200
+++ linux-2.6.7/fs/xfs/linux-2.6/xfs_file.c	2004-08-10 14:42:59.040854479 +0200
@@ -116,7 +116,8 @@
 	ssize_t		rval;
 
 	BUG_ON(iocb->ki_pos != pos);
-	if (unlikely(file->f_flags & O_DIRECT)) {
+	/* Kludge for now - unlocked O_DIRECT is still unsafe */
+	if (0 && unlikely(file->f_flags & O_DIRECT)) {
 		ioflags |= IO_ISDIRECT;
 		VOP_WRITE(vp, iocb, &iov, 1, &iocb->ki_pos,
 				ioflags, NULL, rval);
@@ -214,7 +215,8 @@
 
 	init_sync_kiocb(&kiocb, file);
 	kiocb.ki_pos = *ppos;
-	if (unlikely(file->f_flags & O_DIRECT)) {
+	/* kludge for now - unlocked O_DIRECT is still unsafe */
+	if (0 && unlikely(file->f_flags & O_DIRECT)) {
 		ioflags |= IO_ISDIRECT;
 		VOP_WRITE(vp, &kiocb, iov, nr_segs, &kiocb.ki_pos,
 				ioflags, NULL, rval);
