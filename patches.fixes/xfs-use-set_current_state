# Date: Wed, 19 May 2004 16:46:50 +1000 (EST)
# From: Nathan Scott <nathans@snort.melbourne.sgi.com>
# Subject: TAKE 914706 - use set_current_state
# 
# Use set_current_state instead of direct current->state assignment,
# it has added memory barrier goodness.
# 
# Date:  Tue May 18 23:45:45 PDT 2004
# Workarea:  snort.melbourne.sgi.com:/home/nathans/ultra-clean-xfs-linux
# Inspected by:  hch@lst.de,kaos@sgi.com
# 
# The following file(s) were checked into:
#   bonnie.engr.sgi.com:/isms/xfs-kern/xfs-linux

Index: linux-2.6.5/fs/xfs/linux/time.h
===================================================================
--- linux-2.6.5.orig/fs/xfs/linux/time.h
+++ linux-2.6.5/fs/xfs/linux/time.h
@@ -39,7 +39,7 @@ typedef struct timespec timespec_t;
 
 static inline void delay(long ticks)
 {
-	current->state = TASK_UNINTERRUPTIBLE;
+	set_current_state(TASK_UNINTERRUPTIBLE);
 	schedule_timeout(ticks);
 }
 
Index: linux-2.6.5/fs/xfs/linux/xfs_buf.c
===================================================================
--- linux-2.6.5.orig/fs/xfs/linux/xfs_buf.c
+++ linux-2.6.5/fs/xfs/linux/xfs_buf.c
@@ -386,7 +386,7 @@ _pagebuf_lookup_pages(
 
 			XFS_STATS_INC(pb_page_retries);
 			pagebuf_daemon_wakeup();
-			current->state = TASK_UNINTERRUPTIBLE;
+			set_current_state(TASK_UNINTERRUPTIBLE);
 			schedule_timeout(10);
 			goto retry;
 		}
@@ -1061,7 +1061,7 @@ _pagebuf_wait_unpin(
 
 	add_wait_queue(&pb->pb_waiters, &wait);
 	for (;;) {
-		current->state = TASK_UNINTERRUPTIBLE;
+		set_current_state(TASK_UNINTERRUPTIBLE);
 		if (atomic_read(&pb->pb_pin_count) == 0)
 			break;
 		if (atomic_read(&pb->pb_io_remaining))
@@ -1069,7 +1069,7 @@ _pagebuf_wait_unpin(
 		schedule();
 	}
 	remove_wait_queue(&pb->pb_waiters, &wait);
-	current->state = TASK_RUNNING;
+	set_current_state(TASK_RUNNING);
 }
 
 /*
