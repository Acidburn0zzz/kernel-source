diff -X /home/johnrose/tmp/diffignore.txt -urpN sles9-rc1-vanilla/drivers/pci/hotplug/rpadlpar_core.c sles9-rc1/drivers/pci/hotplug/rpadlpar_core.c
--- sles9-rc1-vanilla/drivers/pci/hotplug/rpadlpar_core.c	2004-06-07 15:45:55.000000000 -0500
+++ sles9-rc1/drivers/pci/hotplug/rpadlpar_core.c	2004-06-07 16:34:51.000000000 -0500
@@ -24,18 +24,6 @@
 
 static DECLARE_MUTEX(rpadlpar_sem);
 
-static char *get_node_drc_name(struct device_node *dn)
-{
-	char *ptr = NULL;
-	int *drc_names;
-
-	drc_names = (int *) get_property(dn, "ibm,drc-names", NULL);
-	if (drc_names)
-		ptr = (char *) &drc_names[1];
-
-	return ptr;
-}
-
 static struct device_node *find_php_slot_vio_node(char *drc_name)
 {
 	struct device_node *child;
@@ -45,7 +33,7 @@ static struct device_node *find_php_slot
 	if (!parent)
 		return NULL;
 
-	for (child = of_get_next_child(parent, NULL);	
+	for (child = of_get_next_child(parent, NULL);
 	     child; child = of_get_next_child(parent, child)) {
 		loc_code = get_property(child, "ibm,loc-code", NULL);
 		if (loc_code && !strncmp(loc_code, drc_name, strlen(drc_name)))
@@ -62,7 +50,7 @@ static struct device_node *find_php_slot
 
 	while ((np = of_find_node_by_type(np, "pci")))
 		if (is_hotplug_capable(np)) {
-			name = get_node_drc_name(np);
+			name = rpaphp_get_drc_name(np);
 			if (name && (!strcmp(drc_name, name)))
 				break;
 		}
@@ -255,7 +243,6 @@ int dlpar_add_slot(char *drc_name)
 	}
 
 	/* Add hotplug slot for new VIOA or PCI */
-	
 	if (!rc && rpaphp_add_slot(dn)) {
 		printk(KERN_ERR "%s: unable to add hotplug slot %s\n",
 			__FUNCTION__, drc_name);
@@ -347,7 +334,7 @@ int dlpar_remove_slot(char *drc_name)
 
 	if (down_interruptible(&rpadlpar_sem))
 		return -ERESTARTSYS;
-	
+
 	if (!find_php_slot_vio_node(drc_name) &&
 	    !find_php_slot_pci_node(drc_name)) {
 		rc = -ENODEV;
@@ -359,7 +346,7 @@ int dlpar_remove_slot(char *drc_name)
 		rc = -EINVAL;
 		goto exit;
 	}
-	
+
 	switch (slot->dev_type) {
 		case PCI_DEV:
 			rc = dlpar_remove_pci_slot(slot, drc_name);
diff -X /home/johnrose/tmp/diffignore.txt -urpN sles9-rc1-vanilla/drivers/pci/hotplug/rpaphp.h sles9-rc1/drivers/pci/hotplug/rpaphp.h
--- sles9-rc1-vanilla/drivers/pci/hotplug/rpaphp.h	2004-06-07 15:45:55.000000000 -0500
+++ sles9-rc1/drivers/pci/hotplug/rpaphp.h	2004-06-07 15:42:51.000000000 -0500
@@ -129,6 +129,7 @@ extern struct hotplug_slot *rpaphp_find_
 /* rpaphp_core.c */
 extern int rpaphp_add_slot(struct device_node *dn);
 extern int rpaphp_remove_slot(struct slot *slot);
+extern char *rpaphp_get_drc_name(struct device_node *dn);
 
 /* rpaphp_vio.c */
 extern int rpaphp_get_vio_adapter_status(struct slot *slot, int is_init, u8 * value);
diff -X /home/johnrose/tmp/diffignore.txt -urpN sles9-rc1-vanilla/drivers/pci/hotplug/rpaphp_core.c sles9-rc1/drivers/pci/hotplug/rpaphp_core.c
--- sles9-rc1-vanilla/drivers/pci/hotplug/rpaphp_core.c	2004-06-07 15:45:55.000000000 -0500
+++ sles9-rc1/drivers/pci/hotplug/rpaphp_core.c	2004-06-07 16:41:14.000000000 -0500
@@ -278,6 +278,36 @@ static int is_dr_dn(struct device_node *
 	return get_dn_properties(dn->parent, indexes, names, types, power_domains);
 }
 
+char *rpaphp_get_drc_name(struct device_node *dn)
+{
+        char *name, *ptr = NULL;
+        int *drc_names, *drc_indexes, i;
+	struct device_node *parent = dn->parent;
+	u32 *my_drc_index;
+
+	my_drc_index = (u32 *) get_property(dn, "ibm,my-drc-index", NULL);
+	if (!my_drc_index)
+		return NULL;
+
+	if (!parent)
+		return NULL;
+
+        drc_names = (int *) get_property(parent, "ibm,drc-names", NULL);
+        drc_indexes = (int *) get_property(parent, "ibm,drc-indexes", NULL);
+        if (!drc_names || !drc_indexes)
+		return NULL;
+
+	name = (char *) &drc_names[1];
+	for (i = 0; i < drc_indexes[0]; i++, name += (strlen(name) + 1)) {
+		if (drc_indexes[i + 1] == *my_drc_index) {
+                	ptr = (char *) name;
+			break;
+		}
+	}
+
+        return ptr;
+}
+
 static inline int is_vdevice_root(struct device_node *dn)
 {
 	return !strcmp(dn->name, "vdevice");
@@ -479,3 +509,4 @@ module_exit(rpaphp_exit);
 EXPORT_SYMBOL_GPL(rpaphp_add_slot);
 EXPORT_SYMBOL_GPL(rpaphp_remove_slot);
 EXPORT_SYMBOL_GPL(rpaphp_slot_head);
+EXPORT_SYMBOL_GPL(rpaphp_get_drc_name);
diff -X /home/johnrose/tmp/diffignore.txt -urpN sles9-rc1-vanilla/drivers/pci/hotplug/rpaphp_vio.c sles9-rc1/drivers/pci/hotplug/rpaphp_vio.c
--- sles9-rc1-vanilla/drivers/pci/hotplug/rpaphp_vio.c	2004-06-07 15:45:55.000000000 -0500
+++ sles9-rc1/drivers/pci/hotplug/rpaphp_vio.c	2004-06-07 15:41:09.000000000 -0500
@@ -67,31 +67,6 @@ static int setup_vio_hotplug_slot_info(s
 	return 0;
 }
 
-static char *get_my_drc_name(struct device_node *dn, u32 my_drc_index)
-{
-        char *name, *ptr = NULL;
-        int *drc_names, *drc_indexes, i;
-	struct device_node *parent = dn->parent;	
-	
-	if (!parent)
-		return ptr;
-	
-        drc_names = (int *) get_property(parent, "ibm,drc-names", NULL);
-        drc_indexes = (int *) get_property(parent, "ibm,drc-indexes", NULL);
-        if (!drc_names || !drc_indexes)
-		return ptr;
-
-	name = (char *) &drc_names[1];
-	for (i = 0; i < drc_indexes[0]; i++, name += (strlen(name) + 1)) {
-		if (drc_indexes[i + 1] == my_drc_index) {
-                	ptr = (char *) name;
-			break;
-		}
-	}
-
-        return ptr;
-}
-
 int register_vio_slot(struct device_node *dn)
 {
 	u32 *index;
@@ -99,12 +74,12 @@ int register_vio_slot(struct device_node
 	int rc = 1;
 	struct slot *slot = NULL;
 	
+	name = rpaphp_get_drc_name(dn);
+	if (!name)
+		goto exit_rc;
 	index = (u32 *) get_property(dn, "ibm,my-drc-index", NULL);
 	if (!index)
 		goto exit_rc;
-	name = get_my_drc_name(dn, *index);
-	if (!name)
-		goto exit_rc;
 	if (!(slot = alloc_slot_struct(dn, *index, name, 0))) {
 		rc = -ENOMEM;
 		goto exit_rc;
