diff -purN linux-2.6.0-test11/arch/i386/mm/fault.c linux-2.5/arch/i386/mm/fault.c
--- linux-2.6.0-test11/arch/i386/mm/fault.c	2003-11-26 20:42:46.000000000 +0000
+++ linux-2.5/arch/i386/mm/fault.c	2003-12-03 02:41:44.000000000 +0000
@@ -359,7 +359,8 @@ bad_area_nosemaphore:
 			return;
 
 		tsk->thread.cr2 = address;
-		tsk->thread.error_code = error_code;
+		/* Kernel addresses are always protection faults */
+		tsk->thread.error_code = error_code | (address >= TASK_SIZE);
 		tsk->thread.trap_no = 14;
 		info.si_signo = SIGSEGV;
 		info.si_errno = 0;
diff -purN linux-2.6.0-test11/drivers/scsi/ide-scsi.c linux-2.5/drivers/scsi/ide-scsi.c
--- linux-2.6.0-test11/drivers/scsi/ide-scsi.c	2003-11-26 20:44:34.000000000 +0000
+++ linux-2.5/drivers/scsi/ide-scsi.c	2003-12-03 03:03:55.000000000 +0000
@@ -517,6 +517,7 @@ static ide_startstop_t idescsi_issue_pc 
 	pc->current_position=pc->buffer;
 	bcount.all = IDE_MIN(pc->request_transfer, 63 * 1024);		/* Request to transfer the entire buffer at once */
 
+	feature.all = 0;
 	if (drive->using_dma && rq->bio) {
 		if (test_bit(PC_WRITING, &pc->flags))
 			feature.b.dma = !HWIF(drive)->ide_dma_write(drive);
diff -purN linux-2.6.0-test11/kernel/sched.c linux-2.5/kernel/sched.c
--- linux-2.6.0-test11/kernel/sched.c	2003-11-26 20:45:17.000000000 +0000
+++ linux-2.5/kernel/sched.c	2003-12-02 00:00:00.000000000 +0000
@@ -646,7 +646,7 @@ repeat_lock_task:
 				 */
 				p->activated = -1;
 			}
-			if (sync)
+			if (sync && (task_cpu(p) == smp_processor_id()))
 				__activate_task(p, rq);
 			else {
 				activate_task(p, rq);
diff -purN linux-2.6.0-test11/net/ipv4/tcp_ipv4.c linux-2.5/net/ipv4/tcp_ipv4.c
--- linux-2.6.0-test11/net/ipv4/tcp_ipv4.c	2003-11-26 20:43:32.000000000 +0000
+++ linux-2.5/net/ipv4/tcp_ipv4.c	2003-11-28 15:52:28.000000000 +0000
@@ -2356,6 +2356,7 @@ static void *tcp_get_idx(struct seq_file
 static void *tcp_seq_start(struct seq_file *seq, loff_t *pos)
 {
 	struct tcp_iter_state* st = seq->private;
+	st->state = TCP_SEQ_STATE_LISTENING;
 	st->num = 0;
 	return *pos ? tcp_get_idx(seq, *pos - 1) : SEQ_START_TOKEN;
 }
