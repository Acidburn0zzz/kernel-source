diff -purN linux-2.6.0-test11/arch/i386/mm/fault.c linux-2.5/arch/i386/mm/fault.c
--- linux-2.6.0-test11/arch/i386/mm/fault.c	2003-11-26 20:42:46.000000000 +0000
+++ linux-2.5/arch/i386/mm/fault.c	2003-12-03 02:41:44.000000000 +0000
@@ -359,7 +359,8 @@ bad_area_nosemaphore:
 			return;
 
 		tsk->thread.cr2 = address;
-		tsk->thread.error_code = error_code;
+		/* Kernel addresses are always protection faults */
+		tsk->thread.error_code = error_code | (address >= TASK_SIZE);
 		tsk->thread.trap_no = 14;
 		info.si_signo = SIGSEGV;
 		info.si_errno = 0;
diff -purN linux-2.6.0-test11/drivers/scsi/ide-scsi.c linux-2.5/drivers/scsi/ide-scsi.c
--- linux-2.6.0-test11/drivers/scsi/ide-scsi.c	2003-11-26 20:44:34.000000000 +0000
+++ linux-2.5/drivers/scsi/ide-scsi.c	2003-12-03 03:03:55.000000000 +0000
@@ -517,6 +517,7 @@ static ide_startstop_t idescsi_issue_pc 
 	pc->current_position=pc->buffer;
 	bcount.all = IDE_MIN(pc->request_transfer, 63 * 1024);		/* Request to transfer the entire buffer at once */
 
+	feature.all = 0;
 	if (drive->using_dma && rq->bio) {
 		if (test_bit(PC_WRITING, &pc->flags))
 			feature.b.dma = !HWIF(drive)->ide_dma_write(drive);
diff -purN linux-2.6.0-test11/fs/proc/base.c linux-2.5/fs/proc/base.c
--- linux-2.6.0-test11/fs/proc/base.c	2003-11-26 20:44:31.000000000 +0000
+++ linux-2.5/fs/proc/base.c	2003-12-03 00:00:00.000000000 +0000
@@ -1666,10 +1666,14 @@ static int get_tid_list(int index, unsig
 
 	index -= 2;
 	read_lock(&tasklist_lock);
-	do {
+	/*
+	 * The starting point task (leader_task) might be an already
+	 * unlinked task, which cannot be used to access the task-list
+	 * via next_thread().
+	 */
+	if (pid_alive(task)) do {
 		int tid = task->pid;
-		if (!pid_alive(task))
-			continue;
+
 		if (--index >= 0)
 			continue;
 		tids[nr_tids] = tid;
diff -purN linux-2.6.0-test11/include/linux/rtnetlink.h linux-2.5/include/linux/rtnetlink.h
--- linux-2.6.0-test11/include/linux/rtnetlink.h	2003-11-26 20:45:11.000000000 +0000
+++ linux-2.5/include/linux/rtnetlink.h	2003-12-03 19:57:28.000000000 +0000
@@ -138,6 +138,7 @@ enum
 #define RTPROT_ZEBRA	11	/* Zebra */
 #define RTPROT_BIRD	12	/* BIRD */
 #define RTPROT_DNROUTED	13	/* DECnet routing daemon */
+#define RTPROT_XORP	14	/* XORP */
 
 /* rtm_scope
 
diff -purN linux-2.6.0-test11/kernel/sched.c linux-2.5/kernel/sched.c
--- linux-2.6.0-test11/kernel/sched.c	2003-11-26 20:45:17.000000000 +0000
+++ linux-2.5/kernel/sched.c	2003-12-02 00:00:00.000000000 +0000
@@ -646,7 +646,7 @@ repeat_lock_task:
 				 */
 				p->activated = -1;
 			}
-			if (sync)
+			if (sync && (task_cpu(p) == smp_processor_id()))
 				__activate_task(p, rq);
 			else {
 				activate_task(p, rq);
diff -purN linux-2.6.0-test11/net/ipv4/netfilter/ip_conntrack_proto_tcp.c linux-2.5/net/ipv4/netfilter/ip_conntrack_proto_tcp.c
--- linux-2.6.0-test11/net/ipv4/netfilter/ip_conntrack_proto_tcp.c	2003-11-26 20:45:53.000000000 +0000
+++ linux-2.5/net/ipv4/netfilter/ip_conntrack_proto_tcp.c	2003-12-03 19:56:54.000000000 +0000
@@ -53,7 +53,7 @@ unsigned long ip_ct_tcp_timeout_syn_sent
 unsigned long ip_ct_tcp_timeout_syn_recv =     60 SECS;
 unsigned long ip_ct_tcp_timeout_established =   5 DAYS;
 unsigned long ip_ct_tcp_timeout_fin_wait =      2 MINS;
-unsigned long ip_ct_tcp_timeout_close_wait =    3 DAYS;
+unsigned long ip_ct_tcp_timeout_close_wait =   60 SECS;
 unsigned long ip_ct_tcp_timeout_last_ack =     30 SECS;
 unsigned long ip_ct_tcp_timeout_time_wait =     2 MINS;
 unsigned long ip_ct_tcp_timeout_close =        10 SECS;
diff -purN linux-2.6.0-test11/net/ipv4/tcp_ipv4.c linux-2.5/net/ipv4/tcp_ipv4.c
--- linux-2.6.0-test11/net/ipv4/tcp_ipv4.c	2003-11-26 20:43:32.000000000 +0000
+++ linux-2.5/net/ipv4/tcp_ipv4.c	2003-11-28 15:52:28.000000000 +0000
@@ -2356,6 +2356,7 @@ static void *tcp_get_idx(struct seq_file
 static void *tcp_seq_start(struct seq_file *seq, loff_t *pos)
 {
 	struct tcp_iter_state* st = seq->private;
+	st->state = TCP_SEQ_STATE_LISTENING;
 	st->num = 0;
 	return *pos ? tcp_get_idx(seq, *pos - 1) : SEQ_START_TOKEN;
 }
diff -purN linux-2.6.0-test11/net/ipv6/udp.c linux-2.5/net/ipv6/udp.c
--- linux-2.6.0-test11/net/ipv6/udp.c	2003-11-26 20:45:21.000000000 +0000
+++ linux-2.5/net/ipv6/udp.c	2003-12-03 19:54:18.000000000 +0000
@@ -825,7 +825,7 @@ static int udpv6_sendmsg(struct kiocb *i
 			struct sockaddr_in sin;
 			sin.sin_family = AF_INET;
 			sin.sin_port = sin6 ? sin6->sin6_port : inet->dport;
-			sin.sin_addr.s_addr = daddr->s6_addr[3];
+			sin.sin_addr.s_addr = daddr->s6_addr32[3];
 			msg->msg_name = &sin;
 			msg->msg_namelen = sizeof(sin);
 do_udp_sendmsg:
