diff -purN linux-2.6.5-7.5-05/include/asm-i386/mman.h linux-2.6.5-7.5-06/include/asm-i386/mman.h
--- linux-2.6.5-7.5-05/include/asm-i386/mman.h	2004-04-23 12:12:15.000000000 -0700
+++ linux-2.6.5-7.5-06/include/asm-i386/mman.h	2004-04-28 14:18:45.736662312 -0700
@@ -16,6 +16,7 @@
 #define MAP_ANONYMOUS	0x20		/* don't use a file */
 
 #define MAP_GROWSDOWN	0x0100		/* stack-like segment */
+#define MAP_HUGETLB	0x0400		/* Backed by hugetlb pages */
 #define MAP_DENYWRITE	0x0800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x1000		/* mark it as an executable */
 #define MAP_LOCKED	0x2000		/* pages are locked */
diff -purN linux-2.6.5-7.5-05/include/asm-ia64/mman.h linux-2.6.5-7.5-06/include/asm-ia64/mman.h
--- linux-2.6.5-7.5-05/include/asm-ia64/mman.h	2004-04-23 12:12:15.000000000 -0700
+++ linux-2.6.5-7.5-06/include/asm-ia64/mman.h	2004-04-28 14:18:45.736662312 -0700
@@ -24,6 +24,7 @@
 
 #define MAP_GROWSDOWN	0x00100		/* stack-like segment */
 #define MAP_GROWSUP	0x00200		/* register stack-like segment */
+#define MAP_HUGETLB	0x00400		/* Backed with hugetlb pages */
 #define MAP_DENYWRITE	0x00800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x01000		/* mark it as an executable */
 #define MAP_LOCKED	0x02000		/* pages are locked */
diff -purN linux-2.6.5-7.5-05/include/asm-ppc64/mman.h linux-2.6.5-7.5-06/include/asm-ppc64/mman.h
--- linux-2.6.5-7.5-05/include/asm-ppc64/mman.h	2004-04-23 12:12:20.000000000 -0700
+++ linux-2.6.5-7.5-06/include/asm-ppc64/mman.h	2004-04-28 14:18:45.737662160 -0700
@@ -26,6 +26,7 @@
 #define MAP_LOCKED	0x80
 
 #define MAP_GROWSDOWN	0x0100		/* stack-like segment */
+#define MAP_HUGETLB	0x0400		/* Backed with hugetlb pages */
 #define MAP_DENYWRITE	0x0800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x1000		/* mark it as an executable */
 
diff -purN linux-2.6.5-7.5-05/include/asm-sh/mman.h linux-2.6.5-7.5-06/include/asm-sh/mman.h
--- linux-2.6.5-7.5-05/include/asm-sh/mman.h	2004-04-23 12:12:20.000000000 -0700
+++ linux-2.6.5-7.5-06/include/asm-sh/mman.h	2004-04-28 14:18:45.737662160 -0700
@@ -16,6 +16,7 @@
 #define MAP_ANONYMOUS	0x20		/* don't use a file */
 
 #define MAP_GROWSDOWN	0x0100		/* stack-like segment */
+#define MAP_HUGETLB	0x0400		/* Backed with hugetlb pages */
 #define MAP_DENYWRITE	0x0800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x1000		/* mark it as an executable */
 #define MAP_LOCKED	0x2000		/* pages are locked */
diff -purN linux-2.6.5-7.5-05/include/asm-sparc64/mman.h linux-2.6.5-7.5-06/include/asm-sparc64/mman.h
--- linux-2.6.5-7.5-05/include/asm-sparc64/mman.h	2004-04-23 12:12:20.000000000 -0700
+++ linux-2.6.5-7.5-06/include/asm-sparc64/mman.h	2004-04-28 14:18:45.738662008 -0700
@@ -24,6 +24,7 @@
 #define _MAP_NEW        0x80000000      /* Binary compatibility is fun... */
 
 #define MAP_GROWSDOWN	0x0200		/* stack-like segment */
+#define MAP_HUGETLB	0x0400		/* Backed with hugetlb pages */
 #define MAP_DENYWRITE	0x0800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x1000		/* mark it as an executable */
 
diff -purN linux-2.6.5-7.5-05/include/asm-x86_64/mman.h linux-2.6.5-7.5-06/include/asm-x86_64/mman.h
--- linux-2.6.5-7.5-05/include/asm-x86_64/mman.h	2004-04-23 12:12:21.000000000 -0700
+++ linux-2.6.5-7.5-06/include/asm-x86_64/mman.h	2004-04-28 14:18:45.739661856 -0700
@@ -17,6 +17,7 @@
 #define MAP_32BIT	0x40		/* only give out 32bit addresses */
 
 #define MAP_GROWSDOWN	0x0100		/* stack-like segment */
+#define MAP_HUGETLB	0x0400		/* Backed with hugetlb pages */
 #define MAP_DENYWRITE	0x0800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x1000		/* mark it as an executable */
 #define MAP_LOCKED	0x2000		/* pages are locked */
diff -purN linux-2.6.5-7.5-05/include/linux/mman.h linux-2.6.5-7.5-06/include/linux/mman.h
--- linux-2.6.5-7.5-05/include/linux/mman.h	2004-04-23 12:12:21.000000000 -0700
+++ linux-2.6.5-7.5-06/include/linux/mman.h	2004-04-28 14:18:45.741661552 -0700
@@ -58,6 +58,9 @@ calc_vm_flag_bits(unsigned long flags)
 	return _calc_vm_trans(flags, MAP_GROWSDOWN,  VM_GROWSDOWN ) |
 	       _calc_vm_trans(flags, MAP_DENYWRITE,  VM_DENYWRITE ) |
 	       _calc_vm_trans(flags, MAP_EXECUTABLE, VM_EXECUTABLE) |
+#ifdef CONFIG_HUGETLB_PAGE
+               _calc_vm_trans(flags, MAP_HUGETLB,    VM_HUGETLB   ) |
+#endif
 	       _calc_vm_trans(flags, MAP_LOCKED,     VM_LOCKED    );
 }
 
diff -purN linux-2.6.5-7.5-05/mm/mmap.c linux-2.6.5-7.5-06/mm/mmap.c
--- linux-2.6.5-7.5-05/mm/mmap.c	2004-04-23 12:12:25.000000000 -0700
+++ linux-2.6.5-7.5-06/mm/mmap.c	2004-04-28 14:29:02.062966472 -0700
@@ -33,6 +33,7 @@
 #include <linux/mount.h>
 #include <linux/objrmap.h>
 #include <linux/audit.h>
+#include <linux/err.h>
 
 #include <asm/uaccess.h>
 #include <asm/pgalloc.h>
@@ -74,6 +75,9 @@ EXPORT_SYMBOL(sysctl_overcommit_ratio);
 EXPORT_SYMBOL(sysctl_max_map_count);
 EXPORT_SYMBOL(vm_committed_space);
 
+int mmap_use_hugepages = 0;
+int mmap_hugepages_map_sz = 256;
+
 /*
  * Requires inode->i_mapping->i_shared_sem
  */
@@ -535,7 +539,7 @@ static int vma_merge(struct mm_struct *m
  * The caller must hold down_write(current->mm->mmap_sem).
  */
 
-unsigned long __do_mmap_pgoff(struct mm_struct *mm, struct file * file, 
+unsigned long __finish_do_mmap_pgoff(struct mm_struct *mm, struct file * file, 
 			    unsigned long addr, unsigned long len,
 			    unsigned long prot, unsigned long flags,
 			    unsigned long pgoff)
@@ -550,40 +554,19 @@ unsigned long __do_mmap_pgoff(struct mm_
 	unsigned long charged = 0;
 	anon_vma_t * anon_vma_cache;
 
-	if (file) {
-		if (is_file_hugepages(file))
-			accountable = 0;
-
-		if (!file->f_op || !file->f_op->mmap)
-			return -ENODEV;
-
-		if ((prot & PROT_EXEC) && (file->f_vfsmnt->mnt_flags & MNT_NOEXEC))
-			return -EPERM;
-	}
-
-	if (!len)
-		return addr;
-
-	/* Careful about overflows.. */
-	len = PAGE_ALIGN(len);
-	if (!len || len > TASK_SIZE)
-		return -EINVAL;
-
-	/* offset overflow? */
-	if ((pgoff + (len >> PAGE_SHIFT)) < pgoff)
-		return -EINVAL;
-
-	/* Too many mappings? */
-	if (mm->map_count > sysctl_max_map_count)
-		return -ENOMEM;
-
-	/* Obtain the address to map to. we verify (or select) it and ensure
-	 * that it represents a valid section of the address space.
+	/* Obtain the address to map to. we verify (or select) it and
+	 * ensure that it represents a valid section of the address
+	 * space.  VM_HUGETLB will never appear in vm_flags when
+	 * CONFIG_HUGETLB is unset.
 	 */
 	addr = get_unmapped_area(file, addr, len, pgoff, flags);
 	if (addr & ~PAGE_MASK)
 		return addr;
 
+	/* Huge pages aren't accounted for here */
+	if (file && is_file_hugepages(file))
+		accountable = 0;
+
 	/* Do simple checking here so the lower-level routines won't have
 	 * to. we assume access permissions have been handled by the open
 	 * of the memory object, so we don't do any here.
@@ -786,11 +769,17 @@ out:	
 unmap_and_free_vma:
 	if (correct_wcount)
 		atomic_inc(&inode->i_writecount);
-	vma->vm_file = NULL;
-	fput(file);
 
-	/* Undo any partial mapping done by a device driver. */
+	/*
+	 * Undo any partial mapping done by a device driver.  
+	 * hugetlb wants to know the vma's file etc. so nuke  
+	 * the file afterward.                                
+	 */                                                   
 	zap_page_range(vma, vma->vm_start, vma->vm_end - vma->vm_start);
+
+	if (file)
+		fput(vma->vm_file); 
+
 free_vma:
 	kmem_cache_free(vm_area_cachep, vma);
 unacct_error:
@@ -799,6 +788,62 @@ unacct_error:
 	return error;
 }
 
+/*
+ * The caller must hold down_write(current->mm->mmap_sem).
+ */
+unsigned long __do_mmap_pgoff(struct mm_struct *mm, 
+		struct file * file, unsigned long addr,
+		unsigned long len, unsigned long prot,
+		unsigned long flags, unsigned long pgoff)
+{
+	struct file *hugetlb_file = NULL;
+	unsigned long result;
+
+	if (file) {
+		if ((flags & MAP_HUGETLB) && !is_file_hugepages(file))
+			return -EINVAL;
+
+		if (!file->f_op || !file->f_op->mmap)
+			return -ENODEV;
+
+		if ((prot & PROT_EXEC) && (file->f_vfsmnt->mnt_flags & MNT_NOEXEC))
+			return -EPERM;
+	}
+
+	if (!len)
+		return addr;
+
+	/* Careful about overflows.. */
+	len = PAGE_ALIGN(len);
+	if (!len || len > TASK_SIZE)
+		return -EINVAL;
+
+	/* offset overflow? */
+	if ((pgoff + (len >> PAGE_SHIFT)) < pgoff)
+		return -EINVAL;
+
+	/* Too many mappings? */
+	if (current->mm->map_count > sysctl_max_map_count)
+		return -ENOMEM;
+
+	/* Create an implicit hugetlb file if necessary */
+	if (!file && (flags & MAP_HUGETLB)) {
+		file = hugetlb_file = hugetlb_zero_setup(len);
+		if (IS_ERR(file))
+			return PTR_ERR(file);
+	}
+
+	result = __finish_do_mmap_pgoff(mm, file, addr, len, prot, flags, pgoff);
+
+	/* Drop reference to implicit hugetlb file, it's already been
+	 * "gotten" in __finish_do_mmap_pgoff in case of success
+	 */
+	if (hugetlb_file)
+		fput(hugetlb_file);
+
+	return result;
+}
+
 EXPORT_SYMBOL(__do_mmap_pgoff);
 
 /* Get an address range which is currently unmapped.
