From: Mike Anderson <andmike@us.ibm.com>
Subject: dm-netlink opps fix and sync with maintainers patch series
Patch-Mainline: yes
References: LTC22531 - #159280

It addresses an oops issue and sets VLD_PATHS.

Signed-off-by: Mike Anderson <andmike@us.ibm.com>
Signed-off-by: Hannes Reinecke <hare@suse.de>

 drivers/md/dm-mpath.c      |    4 +--
 drivers/md/dm-netlink.c    |   54 ++++++++++++++++++++++++++++-----------------
 drivers/md/dm-netlink.h    |    8 ++++--
 include/linux/dm-netlink.h |    1 
 4 files changed, 42 insertions(+), 25 deletions(-)

Index: linux-2.6.16-rc5-git9-2-patched/drivers/md/dm-mpath.c
===================================================================
--- linux-2.6.16-rc5-git9-2-patched.orig/drivers/md/dm-mpath.c	2006-03-21 10:34:21.000000000 -0800
+++ linux-2.6.16-rc5-git9-2-patched/drivers/md/dm-mpath.c	2006-03-21 11:16:50.000000000 -0800
@@ -836,7 +836,7 @@ static int __fail_path(struct pgpath *pg
 		m->current_pgpath = NULL;
 
 	/* Get error data from bio when available */
-	evt = dm_path_fail_evt(pgpath->path.dev->name, 0);
+	evt = dm_path_fail_evt(pgpath->path.dev->name, m->nr_valid_paths);
 	if (evt)
 		list_add(&evt->elist, &m->evt_list);
 	queue_work(kmultipathd, &m->trigger_event);
@@ -884,7 +884,7 @@ static int reinstate_path(struct pgpath 
 	if (!m->nr_valid_paths++ && m->queue_size)
 		queue_work(kmultipathd, &m->process_queued_ios);
 
-	evt = dm_path_reinstate_evt(pgpath->path.dev->name);
+	evt = dm_path_reinstate_evt(pgpath->path.dev->name, m->nr_valid_paths);
 	if (evt)
 		list_add(&evt->elist, &m->evt_list);
 
Index: linux-2.6.16-rc5-git9-2-patched/drivers/md/dm-netlink.c
===================================================================
--- linux-2.6.16-rc5-git9-2-patched.orig/drivers/md/dm-netlink.c	2006-03-21 10:34:21.000000000 -0800
+++ linux-2.6.16-rc5-git9-2-patched/drivers/md/dm-netlink.c	2006-03-21 11:45:06.000000000 -0800
@@ -77,24 +77,39 @@ static void mp_zone_free_dm_evt(void *el
 }
 
 static void
-mp_zone_complete(struct mp_zone *zone, int release_all)
+mp_zone_complete(struct mp_zone *zone, int release_pid)
 {
 	unsigned long flags;
 	struct dm_evt *evt, *n;
+	struct sk_buff *skb;
+	struct nlmsghdr *nlh;
 
 	spin_lock_irqsave(&zone->freelock, flags);
 	if (zone->allocated) {
 		list_for_each_entry_safe(evt, n, &zone->freequeue, zlist) {
-			if (skb_shared(evt->skb)) {
-				if (release_all)
-					kfree_skb(evt->skb);
-				else
-					continue;
+			skb = evt->skb;
+
+			if (release_pid) {
+				nlh = (struct nlmsghdr *)skb->data;
+				if (nlh->nlmsg_pid == release_pid) {
+					if (skb->next && skb->sk)
+						skb_unlink(skb,
+						  &skb->sk->sk_receive_queue);
+					atomic_set(&skb->users, 1);
+				}
 			}
 
-			list_del(&evt->zlist);
-			mempool_free(evt, zone->pool);
-			--zone->allocated;
+			if (!skb_shared(skb)) {
+				list_del(&evt->zlist);
+				--zone->allocated;
+				skb_orphan(skb);
+
+				/* Init in case sent to pool */
+				skb->len = 0;
+				skb->tail = skb->head;
+
+				mempool_free(evt, zone->pool);
+			}
 		}
 	}
 	spin_unlock_irqrestore(&zone->freelock, flags);
@@ -144,7 +159,7 @@ static u64 dm_evt_seqnum;
 static DEFINE_SPINLOCK(sequence_lock);
 
 static struct dm_evt *dm_nl_build_path_msg(char* dm_name, int type,
-					     int blk_err)
+					     int nr_valid_paths)
 {
 	struct dm_evt *evt;
 	struct nlmsghdr	*nlh;
@@ -179,9 +194,7 @@ static struct dm_evt *dm_nl_build_path_m
 	NLA_PUT_U64(evt->skb, DM_E_ATTR_TSSEC, tv.tv_sec);
 	NLA_PUT_U64(evt->skb, DM_E_ATTR_TSUSEC, tv.tv_usec);
 	NLA_PUT_STRING(evt->skb, DM_E_ATTR_DMNAME, dm_name);
-
-	if (blk_err)
-		NLA_PUT_U32(evt->skb, DM_E_ATTR_BLKERR, blk_err);
+	NLA_PUT_U32(evt->skb, DM_E_ATTR_VLDPTHS, nr_valid_paths);
 
 	nlmsg_end(evt->skb, nlh);
 
@@ -190,8 +203,8 @@ static struct dm_evt *dm_nl_build_path_m
 nla_put_failure:
 	printk(KERN_ERR "%s: nla_put_failure\n",
 	       __FUNCTION__);
-	/* reduce skb users so zone_complete can free */
-	kfree_skb(evt->skb);
+	/* Set skb users so zone_complete can free */
+	atomic_set(&evt->skb->users, 1);
 	mp_zone_complete(&z_dm_evt, 0);
 out:
 	return ERR_PTR(err);
@@ -212,20 +225,21 @@ void dm_send_evt(struct dm_evt *evt)
 }
 EXPORT_SYMBOL(dm_send_evt);
 
-struct dm_evt *dm_path_fail_evt(char* dm_name, int blk_err)
+struct dm_evt *dm_path_fail_evt(char* dm_name, int nr_valid_paths)
 {
 	struct dm_evt *evt;
-	evt = dm_nl_build_path_msg(dm_name, DM_EVT_FAIL_PATH, blk_err);
+	evt = dm_nl_build_path_msg(dm_name, DM_EVT_FAIL_PATH, nr_valid_paths);
 
 	return evt;
 }
 
 EXPORT_SYMBOL(dm_path_fail_evt);
 
-struct dm_evt *dm_path_reinstate_evt(char* dm_name)
+struct dm_evt *dm_path_reinstate_evt(char* dm_name, int nr_valid_paths)
 {
 	struct dm_evt *evt;
-	evt = dm_nl_build_path_msg(dm_name, DM_EVT_REINSTATE_PATH, 0);
+	evt = dm_nl_build_path_msg(dm_name, DM_EVT_REINSTATE_PATH,
+				   nr_valid_paths);
 
 	return evt;
 }
@@ -283,9 +297,9 @@ static int dm_nl_rcv_nl_event(struct not
 	if (event == NETLINK_URELEASE &&
 	    n->protocol == NETLINK_DM && n->pid) {
 		if ( n->pid == dm_nl_daemon_pid  ) {
+			mp_zone_complete(&z_dm_evt, dm_nl_daemon_pid);
 			dm_nl_daemon_pid = 0;
 		}
-		mp_zone_complete(&z_dm_evt, 1);
 	}
 
 	return NOTIFY_DONE;
Index: linux-2.6.16-rc5-git9-2-patched/drivers/md/dm-netlink.h
===================================================================
--- linux-2.6.16-rc5-git9-2-patched.orig/drivers/md/dm-netlink.h	2006-03-21 10:34:21.000000000 -0800
+++ linux-2.6.16-rc5-git9-2-patched/drivers/md/dm-netlink.h	2006-03-21 11:18:59.000000000 -0800
@@ -31,18 +31,20 @@ struct dm_evt {
 #ifdef CONFIG_DM_NL_EVT
 void dm_send_evt(struct dm_evt *);
 struct dm_evt *dm_path_fail_evt(char*, int);
-struct dm_evt *dm_path_reinstate_evt(char*);
+struct dm_evt *dm_path_reinstate_evt(char*, int);
 int dm_nl_init(void);
 void dm_nl_exit(void);
 #else
 static inline void dm_send_evt(struct dm_evt *evt)
 {
 }
-static inline struct dm_evt *dm_path_fail_evt(char* dm_name, int blk_err)
+static inline struct dm_evt *dm_path_fail_evt(char* dm_name, int
+					      nr_valid_paths)
 {
 	return NULL;
 }
-static inline struct dm_evt *dm_path_reinstate_evt(char* dm_name)
+static inline struct dm_evt *dm_path_reinstate_evt(char* dm_name, int
+						   nr_valid_paths)
 {
 	return NULL;
 }
Index: linux-2.6.16-rc5-git9-2-patched/include/linux/dm-netlink.h
===================================================================
--- linux-2.6.16-rc5-git9-2-patched.orig/include/linux/dm-netlink.h	2006-03-21 10:34:21.000000000 -0800
+++ linux-2.6.16-rc5-git9-2-patched/include/linux/dm-netlink.h	2006-03-21 11:03:36.000000000 -0800
@@ -28,6 +28,7 @@ enum dm_evt_attr {
 	DM_E_ATTR_TSUSEC	= 3,
 	DM_E_ATTR_DMNAME	= 4,
 	DM_E_ATTR_BLKERR	= 5,
+	DM_E_ATTR_VLDPTHS	= 6,
 	DM_E_ATTR_MAX,
 };
 
