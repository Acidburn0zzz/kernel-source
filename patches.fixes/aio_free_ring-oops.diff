From: Linus Torvalds <torvalds@osdl.org>
Subject: Oops in aio_free_ring on 2.6.9
References: 48021

> From: Darrick J. Wong <djwong@us.ibm.com> 
> Subject: [PATCH] Oops in aio_free_ring on 2.6.9 
> Date:         Fri, 05 Nov 2004 11:34:20 -0800    
> Hi, 
> 
> In pounding on various i386 machines with a random syscall generator, I 
> uncovered a situation in which the kernel oopses: 
> 
> 1. Use mmap() to map out as much of the process address 
>    space as possible.  This is about 2047M on i386. 
> 2. Call io_setup with the first argument set to a 
>    large (~65000) value. 
> 
> (These notes reference the mainline 2.6.9 source.) 
> 
> What happens is that the number of pages required to service the 
> io_setup request is larger than the block of internally allocated page 
> pointers (fs/aio.c:126), so aio_setup_ring kmalloc's a blob of struct 
> page pointers, and initializes these pointers to NULL. (fs/aio.c:130) 
> 
> Next, the aio_setup_ring function tries to mmap a bunch of pages and 
> fails, because in step 1 we used up all the address space. 
> aio_setup_ring then calls aio_free_ring to tear all of this down. 
> (fs/aio.c:143) 
> 
> aio_free_ring sees the block of struct page pointers and calls free_page 
> (fs/aio.c:88) on the pointers without checking that they're not NULL. 
> Unfortunately, they _are_ NULL and *oops*!  [...]

I don't disagree with the bug, but I disagree with the fix. 
  
In my opinion, the problem is that "info->nr_pages" is  wrong . It's wrong 
because it has been initialized to a bogus value. 

I'd much prefer this alternate appended patch. Can you verify that it also 
fixes the problem (we can drop the bogus info->nr_pages initialization, 
because the context - including the info part - has been cleared when it 
was allocated, so nr_pages should already have the  correct  value of zero 
at this point). 

		Linus 

Signed-off-by: Andrea Arcangeli <andrea@suse.de>

Index: linux-2.6.5/fs/aio.c
===================================================================
--- linux-2.6.5.orig/fs/aio.c
+++ linux-2.6.5/fs/aio.c
@@ -121,8 +121,6 @@ static int aio_setup_ring(struct kioctx 
 	if (nr_pages < 0)
 		return -EINVAL;
 
-	info->nr_pages = nr_pages;
-
 	nr_events = (PAGE_SIZE * nr_pages - sizeof(struct aio_ring)) / sizeof(struct io_event);
 
 	info->nr = 0;
