ChangeSet
  1.1616 04/05/04 12:30:47 torvalds@ppc970.osdl.org +2 -0
  Be more careful about waking up rwsem waiters
  
  Get a reference count on the the sleeper, so that
  it can't possibly go away before we've sent it the
  wakeup event.
  
  Noted by Nick Piggin <nickpiggin@yahoo.com.au>
           David Howells <dhowells@redhat.com>

  lib/rwsem.c
    1.13 04/05/04 12:30:41 torvalds@ppc970.osdl.org +5 -2
    Be more careful about waking up rwsem waiters
    
    Get a reference count on the the sleeper, so that
    it can't possibly go away before we've sent it the
    wakeup event.
    
    Noted by Nick Piggin <nickpiggin@yahoo.com.au>
             David Howells <dhowells@redhat.com>

  lib/rwsem-spinlock.c
    1.6 04/05/04 12:30:41 torvalds@ppc970.osdl.org +8 -3
    Be more careful about waking up rwsem waiters
    
    Get a reference count on the the sleeper, so that
    it can't possibly go away before we've sent it the
    wakeup event.
    
    Noted by Nick Piggin <nickpiggin@yahoo.com.au>
             David Howells <dhowells@redhat.com>

.........................................................................
diff -Nru a/lib/rwsem-spinlock.c b/lib/rwsem-spinlock.c
--- a/lib/rwsem-spinlock.c	Wed May  5 06:28:01 2004
+++ b/lib/rwsem-spinlock.c	Wed May  5 06:28:01 2004
@@ -71,10 +71,11 @@
 	if (waiter->flags & RWSEM_WAITING_FOR_WRITE) {
 		sem->activity = -1;
 		list_del(&waiter->list);
-		mb();
 		tsk = waiter->task;
+		mb();
 		waiter->task = NULL;
 		wake_up_process(tsk);
+		put_task_struct(tsk);
 		goto out;
 	}
 
@@ -85,10 +86,11 @@
 		struct list_head *next = waiter->list.next;
 
 		list_del(&waiter->list);
-		mb();
 		tsk = waiter->task;
+		mb();
 		waiter->task = NULL;
 		wake_up_process(tsk);
+		put_task_struct(tsk);
 		woken++;
 		if (list_empty(&sem->wait_list))
 			break;
@@ -115,10 +117,11 @@
 	waiter = list_entry(sem->wait_list.next,struct rwsem_waiter,list);
 	list_del(&waiter->list);
 
-	mb();
 	tsk = waiter->task;
+	mb();
 	waiter->task = NULL;
 	wake_up_process(tsk);
+	put_task_struct(tsk);
 	return sem;
 }
 
@@ -147,6 +150,7 @@
 	/* set up my own style of waitqueue */
 	waiter.task = tsk;
 	waiter.flags = RWSEM_WAITING_FOR_READ;
+	get_task_struct(tsk);
 
 	list_add_tail(&waiter.list,&sem->wait_list);
 
@@ -215,6 +219,7 @@
 	/* set up my own style of waitqueue */
 	waiter.task = tsk;
 	waiter.flags = RWSEM_WAITING_FOR_WRITE;
+	get_task_struct(tsk);
 
 	list_add_tail(&waiter.list,&sem->wait_list);
 
diff -Nru a/lib/rwsem.c b/lib/rwsem.c
--- a/lib/rwsem.c	Wed May  5 06:28:01 2004
+++ b/lib/rwsem.c	Wed May  5 06:28:01 2004
@@ -65,10 +65,11 @@
 		goto readers_only;
 
 	list_del(&waiter->list);
-	mb();
 	tsk = waiter->task;
+	mb();
 	waiter->task = NULL;
 	wake_up_process(tsk);
+	put_task_struct(tsk);
 	goto out;
 
 	/* don't want to wake any writers */
@@ -102,10 +103,11 @@
 	for (; loop>0; loop--) {
 		waiter = list_entry(next,struct rwsem_waiter,list);
 		next = waiter->list.next;
-		mb();
 		tsk = waiter->task;
+		mb();
 		waiter->task = NULL;
 		wake_up_process(tsk);
+		put_task_struct(tsk);
 	}
 
 	sem->wait_list.next = next;
@@ -137,6 +139,7 @@
 	/* set up my own style of waitqueue */
 	spin_lock(&sem->wait_lock);
 	waiter->task = tsk;
+	get_task_struct(tsk);
 
 	list_add_tail(&waiter->list,&sem->wait_list);
 
.........................................................................
# vim: syntax=diff

