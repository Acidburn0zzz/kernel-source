--- linux-2.6.0-test7/drivers/macintosh/macserial.c.~1~	2003-10-08 21:24:51.000000000 +0200
+++ linux-2.6.0-test7/drivers/macintosh/macserial.c	2003-10-14 14:53:44.000000000 +0200
@@ -2722,12 +2722,6 @@ static void serial_console_write(struct 
 	write_zsreg(info->zs_channel, R5, info->curregs[5] | TxENAB | RTS | DTR);
 
 	for (i=0; i<count; i++) {
-		/* Wait for the transmit buffer to empty. */
-		while ((read_zsreg(info->zs_channel, 0) & Tx_BUF_EMP) == 0) {
-			eieio();
-		}
-
-		write_zsdata(info->zs_channel, s[i]);
 		if (s[i] == 10) {
 			while ((read_zsreg(info->zs_channel, 0) & Tx_BUF_EMP)
                                 == 0)
@@ -2735,6 +2729,12 @@ static void serial_console_write(struct 
 
 			write_zsdata(info->zs_channel, 13);
 		}
+		/* Wait for the transmit buffer to empty. */
+		while ((read_zsreg(info->zs_channel, 0) & Tx_BUF_EMP) == 0) {
+			eieio();
+		}
+
+		write_zsdata(info->zs_channel, s[i]);
 	}
 
 	/* Restore the values in the registers. */
--- linux-2.6.0-test7/drivers/serial/21285.c.~1~	2003-10-08 21:24:26.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/21285.c	2003-10-14 14:40:01.000000000 +0200
@@ -409,14 +409,14 @@ serial21285_console_write(struct console
 	int i;
 
 	for (i = 0; i < count; i++) {
-		while (*CSR_UARTFLG & 0x20)
-			barrier();
-		*CSR_UARTDR = s[i];
 		if (s[i] == '\n') {
 			while (*CSR_UARTFLG & 0x20)
 				barrier();
 			*CSR_UARTDR = '\r';
 		}
+		while (*CSR_UARTFLG & 0x20)
+			barrier();
+		*CSR_UARTDR = s[i];
 	}
 }
 
--- linux-2.6.0-test7/drivers/serial/68360serial.c.~1~	2003-10-08 21:24:51.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/68360serial.c	2003-10-14 14:53:02.000000000 +0200
@@ -2213,6 +2213,22 @@ static void my_console_write(int idx, co
 	 * buffer, but we would just wait longer between accesses......
 	 */
 	for (i = 0; i < count; i++, s++) {
+		/* if a LF, also do CR... */
+		if (*s == 10) {
+			while (bdp->status & BD_SC_READY);
+			/* cp = __va(bdp->buf); */
+			cp = bdp->buf;
+			*cp = 13;
+			bdp->length = 1;
+			bdp->status |= BD_SC_READY;
+
+			if (bdp->status & BD_SC_WRAP) {
+				bdp = bdbase;
+			}
+			else {
+				bdp++;
+			}
+		}
 		/* Wait for transmitter fifo to empty.
 		 * Ready indicates output is ready, and xmt is doing
 		 * that, not that it is ready for us to send.
@@ -2232,22 +2248,6 @@ static void my_console_write(int idx, co
 		else
 			bdp++;
 
-		/* if a LF, also do CR... */
-		if (*s == 10) {
-			while (bdp->status & BD_SC_READY);
-			/* cp = __va(bdp->buf); */
-			cp = bdp->buf;
-			*cp = 13;
-			bdp->length = 1;
-			bdp->status |= BD_SC_READY;
-
-			if (bdp->status & BD_SC_WRAP) {
-				bdp = bdbase;
-			}
-			else {
-				bdp++;
-			}
-		}
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/8250.c.~1~	2003-10-08 21:24:01.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/8250.c	2003-10-14 14:47:02.000000000 +0200
@@ -1946,17 +1946,16 @@ serial8250_console_write(struct console 
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++, s++) {
-		wait_for_xmitr(up);
-
 		/*
 		 *	Send the character out.
 		 *	If a LF, also do CR...
 		 */
-		serial_out(up, UART_TX, *s);
 		if (*s == 10) {
 			wait_for_xmitr(up);
 			serial_out(up, UART_TX, 13);
 		}
+		wait_for_xmitr(up);
+		serial_out(up, UART_TX, *s);
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/amba.c.~1~	2003-10-08 21:24:02.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/amba.c	2003-10-14 14:44:05.000000000 +0200
@@ -620,16 +620,16 @@ ambauart_console_write(struct console *c
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++) {
-		do {
-			status = UART_GET_FR(port);
-		} while (!UART_TX_READY(status));
-		UART_PUT_CHAR(port, s[i]);
 		if (s[i] == '\n') {
 			do {
 				status = UART_GET_FR(port);
 			} while (!UART_TX_READY(status));
 			UART_PUT_CHAR(port, '\r');
 		}
+		do {
+			status = UART_GET_FR(port);
+		} while (!UART_TX_READY(status));
+		UART_PUT_CHAR(port, s[i]);
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/anakin.c.~1~	2003-10-08 21:24:02.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/anakin.c	2003-10-14 14:50:42.000000000 +0200
@@ -411,16 +411,10 @@ anakin_console_write(struct console *co,
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++, s++) {
-		while (!(anakin_in(port, 0x10) & TXEMPTY))
-			barrier();
-
 		/*
 		 *	Send the character out.
 		 *	If a LF, also do CR...
 		 */
-		anakin_out(port, 0x14, *s);
-		anakin_out(port, 0x18, anakin_in(port, 0x18) | SENDREQUEST);
-
 		if (*s == 10) {
 			while (!(anakin_in(port, 0x10) & TXEMPTY))
 				barrier();
@@ -428,6 +422,10 @@ anakin_console_write(struct console *co,
 			anakin_out(port, 0x18, anakin_in(port, 0x18)
 					| SENDREQUEST);
 		}
+		while (!(anakin_in(port, 0x10) & TXEMPTY))
+			barrier();
+		anakin_out(port, 0x14, *s);
+		anakin_out(port, 0x18, anakin_in(port, 0x18) | SENDREQUEST);
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/clps711x.c.~1~	2003-10-08 21:24:03.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/clps711x.c	2003-10-14 14:41:02.000000000 +0200
@@ -482,16 +482,16 @@ clps711xuart_console_write(struct consol
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++) {
-		do {
-			status = clps_readl(SYSFLG(port));
-		} while (status & SYSFLG_UTXFF);
-		clps_writel(s[i], UARTDR(port));
 		if (s[i] == '\n') {
 			do {
 				status = clps_readl(SYSFLG(port));
 			} while (status & SYSFLG_UTXFF);
 			clps_writel('\r', UARTDR(port));
 		}
+		do {
+			status = clps_readl(SYSFLG(port));
+		} while (status & SYSFLG_UTXFF);
+		clps_writel(s[i], UARTDR(port));
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/pmac_zilog.c.~1~	2003-10-08 21:24:01.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/pmac_zilog.c	2003-10-14 14:42:46.000000000 +0200
@@ -1538,15 +1538,15 @@ static void pmz_console_write(struct con
 	write_zsreg(up, R5, up->curregs[5] | TxENABLE | RTS | DTR);
 
 	for (i = 0; i < count; i++) {
-		/* Wait for the transmit buffer to empty. */
-		while ((read_zsreg(up, R0) & Tx_BUF_EMP) == 0)
-			udelay(5);
-		write_zsdata(up, s[i]);
 		if (s[i] == 10) {
 			while ((read_zsreg(up, R0) & Tx_BUF_EMP) == 0)
 				udelay(5);
 			write_zsdata(up, R13);
 		}
+		/* Wait for the transmit buffer to empty. */
+		while ((read_zsreg(up, R0) & Tx_BUF_EMP) == 0)
+			udelay(5);
+		write_zsdata(up, s[i]);
 	}
 
 	/* Restore the values in the registers. */
--- linux-2.6.0-test7/drivers/serial/sa1100.c.~1~	2003-10-08 21:24:02.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/sa1100.c	2003-10-14 14:41:48.000000000 +0200
@@ -740,16 +740,16 @@ sa1100_console_write(struct console *co,
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++) {
-		do {
-			status = UART_GET_UTSR1(sport);
-		} while (!(status & UTSR1_TNF));
-		UART_PUT_CHAR(sport, s[i]);
 		if (s[i] == '\n') {
 			do {
 				status = UART_GET_UTSR1(sport);
 			} while (!(status & UTSR1_TNF));
 			UART_PUT_CHAR(sport, '\r');
 		}
+		do {
+			status = UART_GET_UTSR1(sport);
+		} while (!(status & UTSR1_TNF));
+		UART_PUT_CHAR(sport, s[i]);
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/serial98.c.~1~	2003-10-08 21:24:17.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/serial98.c	2003-10-14 14:46:07.000000000 +0200
@@ -963,17 +963,16 @@ serial98_console_write(struct console *c
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++, s++) {
-		wait_for_xmitr(port);
-
 		/*
 		 *	Send the character out.
 		 *	If a LF, also do CR...
 		 */
-		outb(*s, PORT.iobase);
 		if (*s == 10) {
 			wait_for_xmitr(port);
 			outb(13, PORT.iobase);
 		}
+		wait_for_xmitr(port);
+		outb(*s, PORT.iobase);
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/sunsu.c.~1~	2003-10-08 21:24:02.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/sunsu.c	2003-10-14 14:45:13.000000000 +0200
@@ -1402,17 +1402,16 @@ static void sunsu_console_write(struct c
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++, s++) {
-		wait_for_xmitr(up);
-
 		/*
 		 *	Send the character out.
 		 *	If a LF, also do CR...
 		 */
-		serial_out(up, UART_TX, *s);
 		if (*s == 10) {
 			wait_for_xmitr(up);
 			serial_out(up, UART_TX, 13);
 		}
+		wait_for_xmitr(up);
+		serial_out(up, UART_TX, *s);
 	}
 
 	/*
--- linux-2.6.0-test7/drivers/serial/sunzilog.c.~1~	2003-10-08 21:24:51.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/sunzilog.c	2003-10-14 14:47:36.000000000 +0200
@@ -1350,9 +1350,9 @@ sunzilog_console_write(struct console *c
 
 	spin_lock_irqsave(&up->port.lock, flags);
 	for (i = 0; i < count; i++, s++) {
-		sunzilog_put_char(channel, *s);
 		if (*s == 10)
 			sunzilog_put_char(channel, 13);
+		sunzilog_put_char(channel, *s);
 	}
 	udelay(2);
 	spin_unlock_irqrestore(&up->port.lock, flags);
--- linux-2.6.0-test7/drivers/serial/uart00.c.~1~	2003-10-08 21:24:04.000000000 +0200
+++ linux-2.6.0-test7/drivers/serial/uart00.c	2003-10-14 14:43:30.000000000 +0200
@@ -553,16 +553,16 @@ static void uart00_console_write(struct 
 	 *	Now, do each character
 	 */
 	for (i = 0; i < count; i++) {
-		do {
-			status = UART_GET_TSR(port);
-		} while (!UART_TX_READY(status));
-		UART_PUT_CHAR(port, s[i]);
 		if (s[i] == '\n') {
 			do {
 				status = UART_GET_TSR(port);
 			} while (!UART_TX_READY(status));
 			UART_PUT_CHAR(port, '\r');
 		}
+		do {
+			status = UART_GET_TSR(port);
+		} while (!UART_TX_READY(status));
+		UART_PUT_CHAR(port, s[i]);
 	}
 
 	/*
--- linux-2.6.0-test7/kernel/printk.c.~1~	2003-10-14 12:10:12.000000000 +0200
+++ linux-2.6.0-test7/kernel/printk.c	2003-10-14 15:52:26.000000000 +0200
@@ -825,13 +825,16 @@ static void early_printk_uart(const char
 
 	while (len-- > 0) {
 		c = *str++;
+		if (c == '\n') {
+			while ((readb(uart + UART_LSR) & UART_LSR_TEMT) == 0)
+				cpu_relax(); /* spin */
+			writeb('\r', uart + UART_TX);
+		}
+
 		while ((readb(uart + UART_LSR) & UART_LSR_TEMT) == 0)
 			cpu_relax(); /* spin */
 
 		writeb(c, uart + UART_TX);
-
-		if (c == '\n')
-			writeb('\r', uart + UART_TX);
 	}
 }
 
