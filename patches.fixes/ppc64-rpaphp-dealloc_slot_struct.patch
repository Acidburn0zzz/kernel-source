diff -uprN -X dontdiff linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_pci.c linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_pci.c
--- linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_pci.c	1970-01-04 18:02:14.727940376 -0600
+++ linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_pci.c	1970-01-04 16:25:23.000000000 -0600
@@ -32,17 +32,10 @@ struct pci_dev *rpaphp_find_pci_dev(stru
 {
 	struct pci_dev *retval_dev = NULL, *dev = NULL;
 	char bus_id[BUS_ID_SIZE];
-	int *vendor_id, *device_id, vid = PCI_ANY_ID, did = PCI_ANY_ID;
 
 	sprintf(bus_id, "%04x:%02x:%02x.%d",dn->phb->global_number,
 		dn->busno, PCI_SLOT(dn->devfn), PCI_FUNC(dn->devfn));
-	vendor_id = (int *) get_property(dn, "vendor-id", NULL);
-	device_id = (int *) get_property(dn, "device-id", NULL);
-	if (vendor_id) 
-		vid = *vendor_id;
-	if (device_id) 
-		did = *device_id;
-	while ((dev = pci_find_device(vid, did, dev)) != NULL) {
+	while ((dev = pci_find_device(PCI_ANY_ID, PCI_ANY_ID, dev)) != NULL) {
 		if (!strcmp(pci_name(dev), bus_id)) {
 			retval_dev = dev;
 			break;
@@ -418,10 +411,9 @@ static int setup_pci_slot(struct slot *s
 	slot->bridge = rpaphp_find_bridge_pdev(slot);
 	if (!slot->bridge) {	/* slot being added doesn't have pci_dev yet */
 		err("%s: no pci_dev for bridge dn %s\n", __FUNCTION__, slot->name);
-		dealloc_slot_struct(slot);
-		return 1;
+		goto exit_rc;
 	}
-
+	dbg("%s set slot->name to %s\n",  __FUNCTION__, pci_name(slot->bridge));
 	strcpy(slot->name, pci_name(slot->bridge));
 
 	/* find slot's pci_dev if it's not empty */
@@ -433,13 +425,11 @@ static int setup_pci_slot(struct slot *s
 			/* non-empty slot has to have child */
 			err("%s: slot[%s]'s device_node doesn't have child for adapter\n", 
 				__FUNCTION__, slot->name);
-			dealloc_slot_struct(slot);
-			return 1;
+			goto exit_rc;
 		}
 		if (init_slot_pci_funcs(slot)) {
 			err("%s: init_slot_pci_funcs failed\n", __FUNCTION__);
-			dealloc_slot_struct(slot);
-			return 1;		
+			goto exit_rc;
 		}
 #ifdef DEBUG
 		print_slot_pci_funcs(slot);
@@ -454,6 +444,9 @@ static int setup_pci_slot(struct slot *s
 		}
 	}
 	return 0;
+exit_rc:
+	dealloc_slot_struct(slot);
+	return 1;
 }
 
 int register_pci_slot(struct slot *slot)
@@ -472,8 +465,6 @@ int register_pci_slot(struct slot *slot)
 		goto exit_rc;
 	rc = register_slot(slot);
 exit_rc:
-	if (rc)
-		dealloc_slot_struct(slot);
 	return rc;
 }
 
diff -uprN -X dontdiff linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_slot.c linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_slot.c
--- linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_slot.c	1970-01-04 18:02:14.727940376 -0600
+++ linux-2.6.5-7.61/drivers/pci/hotplug/rpaphp_slot.c	1970-01-04 12:23:12.000000000 -0600
@@ -229,7 +229,7 @@ int rpaphp_get_power_status(struct slot 
 		rc = rtas_get_power_level(slot->power_domain, (int *) value);
 		if (rc)
 			err("failed to get power-level for slot(%s), rc=0x%x\n",
-		    		slot->name, rc);
+		    		slot->location, rc);
 	}
 
 	return rc;
