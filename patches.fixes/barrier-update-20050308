From: Jens Axboe <axboe@suse.de>
Subject: Deactivate real request on barrier issue
Patch-mainline: 
References: 

Deactivate the real request, when we start a barrier flush. This
essentially works as a requeue of the request in that it tells the
io scheduler that the real request isn't active at this point in time,
but it doesn't readd the request to the internal lists.

Acked-by: 
Signed-off-by: 

diff -urp -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.6.11/drivers/block/as-iosched.c linux-2.6.11/drivers/block/as-iosched.c
--- /opt/kernel/linux-2.6.11/drivers/block/as-iosched.c	2005-03-08 10:01:54.000000000 +0100
+++ linux-2.6.11/drivers/block/as-iosched.c	2005-03-08 10:01:03.000000000 +0100
@@ -1463,11 +1463,7 @@ static void as_add_request(struct as_dat
 	arq->state = AS_RQ_QUEUED;
 }
 
-/*
- * requeue the request. The request has not been completed, nor is it a
- * new request, so don't touch accounting.
- */
-static void as_requeue_request(request_queue_t *q, struct request *rq)
+static void as_deactivate_request(request_queue_t *q, struct request *rq)
 {
 	struct as_data *ad = q->elevator->elevator_data;
 	struct as_rq *arq = RQ_DATA(rq);
@@ -1485,13 +1481,21 @@ static void as_requeue_request(request_q
 		WARN_ON(blk_fs_request(rq)
 			&& (!(rq->flags & (REQ_HARDBARRIER|REQ_SOFTBARRIER))) );
 
-	list_add(&rq->queuelist, ad->dispatch);
-
 	/* Stop anticipating - let this request get through */
 	as_antic_stop(ad);
 }
 
 /*
+ * requeue the request. The request has not been completed, nor is it a
+ * new request, so don't touch accounting.
+ */
+static void as_requeue_request(request_queue_t *q, struct request *rq)
+{
+	as_deactivate_request(q, rq);
+	list_add(&rq->queuelist, &q->queue_head);
+}
+
+/*
  * Account a request that is inserted directly onto the dispatch queue.
  * arq->io_context->aic->nr_dispatched should not need to be incremented
  * because only new requests should come through here: requeues go through
@@ -2081,6 +2085,7 @@ static struct elevator_type iosched_as =
 		.elevator_add_req_fn =		as_insert_request,
 		.elevator_remove_req_fn =	as_remove_request,
 		.elevator_requeue_req_fn = 	as_requeue_request,
+		.elevator_deactivate_req_fn = 	as_deactivate_request,
 		.elevator_queue_empty_fn =	as_queue_empty,
 		.elevator_completed_req_fn =	as_completed_request,
 		.elevator_former_req_fn =	as_former_request,
diff -urp -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.6.11/drivers/block/cfq-iosched.c linux-2.6.11/drivers/block/cfq-iosched.c
--- /opt/kernel/linux-2.6.11/drivers/block/cfq-iosched.c	2005-03-08 10:01:54.000000000 +0100
+++ linux-2.6.11/drivers/block/cfq-iosched.c	2005-03-08 10:03:29.000000000 +0100
@@ -592,11 +592,7 @@ out:
 	return NULL;
 }
 
-/*
- * make sure the service time gets corrected on reissue of this request
- */
-static void cfq_enqueue(struct cfq_data *cfqd, struct request *rq);
-static void cfq_requeue_request(request_queue_t *q, struct request *rq)
+static void cfq_deactivate_request(request_queue_t *q, struct request *rq)
 {
 	struct cfq_data *cfqd = q->elevator->elevator_data;
 	struct cfq_rq *crq = RQ_DATA(rq);
@@ -616,7 +612,14 @@ static void cfq_requeue_request(request_
 		}
 		crq->requeued = 1;
 	}
+}
 
+/*
+ * make sure the service time gets corrected on reissue of this request
+ */
+static void cfq_requeue_request(request_queue_t *q, struct request *rq)
+{
+	cfq_deactivate_request(q, rq);
 	list_add(&rq->queuelist, &q->queue_head);
 }
 
@@ -2357,6 +2360,7 @@ static struct cfq_fs_entry cfq_max_depth
 	.show = cfq_max_depth_show,
 	.store = cfq_max_depth_store,
 };
+
 static struct attribute *default_attrs[] = {
 	&cfq_quantum_entry.attr,
 	&cfq_queued_entry.attr,
@@ -2418,6 +2422,7 @@ static struct elevator_type iosched_cfq 
 		.elevator_add_req_fn =		cfq_insert_request,
 		.elevator_remove_req_fn =	cfq_remove_request,
 		.elevator_requeue_req_fn =	cfq_requeue_request,
+		.elevator_deactivate_req_fn =	cfq_deactivate_request,
 		.elevator_queue_empty_fn =	cfq_queue_empty,
 		.elevator_completed_req_fn =	cfq_completed_request,
 		.elevator_former_req_fn =	cfq_former_request,
diff -urp -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.6.11/drivers/block/elevator.c linux-2.6.11/drivers/block/elevator.c
--- /opt/kernel/linux-2.6.11/drivers/block/elevator.c	2005-03-08 10:01:54.000000000 +0100
+++ linux-2.6.11/drivers/block/elevator.c	2005-03-08 10:04:16.000000000 +0100
@@ -255,8 +255,10 @@ void elv_merge_requests(request_queue_t 
 		e->ops->elevator_merge_req_fn(q, rq, next);
 }
 
-void elv_requeue_request(request_queue_t *q, struct request *rq)
+void elv_deactivate_request(request_queue_t *q, struct request *rq)
 {
+	elevator_t *e = q->elevator;
+
 	/*
 	 * it already went through dequeue, we need to decrement the
 	 * in_flight count again
@@ -264,6 +266,16 @@ void elv_requeue_request(request_queue_t
 	if (blk_account_rq(rq))
 		q->in_flight--;
 
+	rq->flags &= ~REQ_STARTED;
+
+	if (e->ops->elevator_deactivate_req_fn)
+		e->ops->elevator_deactivate_req_fn(q, rq);
+}
+
+void elv_requeue_request(request_queue_t *q, struct request *rq)
+{
+	elv_deactivate_request(q, rq);
+
 	/*
 	 * if this is the flush, requeue the original instead and drop the flush
 	 */
diff -urp -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.6.11/drivers/block/ll_rw_blk.c linux-2.6.11/drivers/block/ll_rw_blk.c
--- /opt/kernel/linux-2.6.11/drivers/block/ll_rw_blk.c	2005-03-08 10:01:54.000000000 +0100
+++ linux-2.6.11/drivers/block/ll_rw_blk.c	2005-03-08 10:07:11.000000000 +0100
@@ -407,6 +407,8 @@ struct request *blk_start_pre_flush(requ
 	if (!list_empty(&rq->queuelist))
 		blkdev_dequeue_request(rq);
 
+	elv_deactivate_request(q, rq);
+
 	flush_rq->end_io_data = rq;
 	flush_rq->end_io = blk_pre_flush_end_io;
 
diff -urp -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.6.11/include/linux/elevator.h linux-2.6.11/include/linux/elevator.h
--- /opt/kernel/linux-2.6.11/include/linux/elevator.h	2005-03-08 10:01:54.000000000 +0100
+++ linux-2.6.11/include/linux/elevator.h	2005-03-08 09:19:58.000000000 +0100
@@ -20,6 +20,7 @@ typedef int (elevator_may_queue_fn) (req
 
 typedef int (elevator_set_req_fn) (request_queue_t *, struct request *, struct bio *, int);
 typedef void (elevator_put_req_fn) (request_queue_t *, struct request *);
+typedef void (elevator_deactivate_req_fn) (request_queue_t *, struct request *);
 
 typedef int (elevator_init_fn) (request_queue_t *, elevator_t *);
 typedef void (elevator_exit_fn) (elevator_t *);
@@ -34,6 +35,7 @@ struct elevator_ops
 	elevator_add_req_fn *elevator_add_req_fn;
 	elevator_remove_req_fn *elevator_remove_req_fn;
 	elevator_requeue_req_fn *elevator_requeue_req_fn;
+	elevator_deactivate_req_fn *elevator_deactivate_req_fn;
 
 	elevator_queue_empty_fn *elevator_queue_empty_fn;
 	elevator_completed_req_fn *elevator_completed_req_fn;
@@ -87,6 +89,7 @@ extern void elv_merge_requests(request_q
 extern void elv_merged_request(request_queue_t *, struct request *);
 extern void elv_remove_request(request_queue_t *, struct request *);
 extern void elv_requeue_request(request_queue_t *, struct request *);
+extern void elv_deactivate_request(request_queue_t *, struct request *);
 extern int elv_queue_empty(request_queue_t *);
 extern struct request *elv_next_request(struct request_queue *q);
 extern struct request *elv_former_request(request_queue_t *, struct request *);
