From: Arnd Bergmann (arnd@arndb.de)
Subject: Do not use static DEFINE_PER_CPU
References: 38820

From Arnd Bergmann (arnd@arndb.de):
The problem is percpu relocations to local variables. The compiler 
makes this a 32 bit PC relative relocation because it expects the 
section to be inside of the same compilation unit. 
However, modules are loaded at a virtual location near the end of the 
available memory, while the per-cpu area is at the beginning. 
When these two are more than 4GB apart, an incorrect address will be 
generated. A solution for this particular instance is the patch below. 

Acked-by: hare@suse.de

--- linux-2.6.5/net/ipv4/icmp.c.orig	2004-04-27 08:14:54.036373414 +0200
+++ linux-2.6.5/net/ipv4/icmp.c	2004-04-27 08:15:02.178225512 +0200
@@ -228,7 +228,7 @@
  *
  *	On SMP we have one ICMP socket per-cpu.
  */
-static DEFINE_PER_CPU(struct socket *, __icmp_socket) = NULL;
+DEFINE_PER_CPU(struct socket *, __icmp_socket) = NULL;
 #define icmp_socket	__get_cpu_var(__icmp_socket)
 
 static __inline__ int icmp_xmit_lock(void)
--- linux-2.6.5/net/ipv6/icmp.c.orig	2004-04-27 08:14:05.193258830 +0200
+++ linux-2.6.5/net/ipv6/icmp.c	2004-04-27 08:14:27.010503148 +0200
@@ -78,7 +78,7 @@
  *
  *	On SMP we have one ICMP socket per-cpu.
  */
-static DEFINE_PER_CPU(struct socket *, __icmpv6_socket) = NULL;
+DEFINE_PER_CPU(struct socket *, __icmpv6_socket) = NULL;
 #define icmpv6_socket	__get_cpu_var(__icmpv6_socket)
 
 static int icmpv6_rcv(struct sk_buff **pskb, unsigned int *nhoffp);
--- linux-2.6.5/drivers/char/random.c.orig	2004-04-27 09:50:53.510192157 +0200
+++ linux-2.6.5/drivers/char/random.c	2004-04-27 09:51:11.753386717 +0200
@@ -288,7 +288,7 @@
 
 static int trickle_thresh = DEFAULT_POOL_SIZE * 7;
 
-static DEFINE_PER_CPU(int, trickle_count) = 0;
+DEFINE_PER_CPU(int, trickle_count) = 0;
 
 /*
  * A pool of size .poolwords is stirred with a primitive polynomial
--- linux-2.6.5/drivers/scsi/scsi.c.orig	2004-04-27 09:50:14.208544584 +0200
+++ linux-2.6.5/drivers/scsi/scsi.c	2004-04-27 09:50:32.961604853 +0200
@@ -672,7 +672,7 @@
 /*
  * Per-CPU I/O completion queue.
  */
-static DEFINE_PER_CPU(struct list_head, scsi_done_q);
+DEFINE_PER_CPU(struct list_head, scsi_done_q);
 
 /**
  * scsi_done - Enqueue the finished SCSI command into the done queue.
