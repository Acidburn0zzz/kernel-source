#date: 2004-04-11
#id: 1.1371.694.10
#tag: nfs+rpc
#time: 11:23:05
#title: NFSv2/v3/v4: Fix a slowdown of O_SYNC and O_DIRECT writes that resulted
#who: trond.myklebust@fys.uio.no
#
# ChangeSet
#   1.1371.694.10 04/04/11 11:23:05 trond.myklebust@fys.uio.no +4 -0
#   NFSv2/v3/v4: Fix a slowdown of O_SYNC and O_DIRECT writes that resulted
#   from over-aggressive attribute cache revalidation.
#
# include/linux/nfs_fs.h +1 -0
# fs/nfs/write.c +2 -2
# fs/nfs/inode.c +23 -0
# fs/nfs/direct.c +1 -6
#   NFSv2/v3/v4: Fix a slowdown of O_SYNC and O_DIRECT writes that resulted
#     from over-aggressive attribute cache revalidation.
#
Index: linux-2.6.5/fs/nfs/direct.c
===================================================================
--- linux-2.6.5.orig/fs/nfs/direct.c	2004-05-17 19:47:28.000000000 +0200
+++ linux-2.6.5/fs/nfs/direct.c	2004-05-17 19:48:19.000000000 +0200
@@ -338,8 +338,7 @@
 	result = tot_bytes;
 
 out:
-	nfs_end_data_update(inode);
-	NFS_FLAGS(inode) |= NFS_INO_INVALID_DATA;
+	nfs_end_data_update_defer(inode);
 	return result;
 
 sync_retry:
@@ -397,10 +396,6 @@
 		if (result < size)
 			break;
 	}
-	/* Zap the page cache if we managed to write */
-	if (tot_bytes > 0)
-		invalidate_remote_inode(inode);
-
 	return tot_bytes;
 }
 
Index: linux-2.6.5/fs/nfs/inode.c
===================================================================
--- linux-2.6.5.orig/fs/nfs/inode.c	2004-05-17 19:47:28.000000000 +0200
+++ linux-2.6.5/fs/nfs/inode.c	2004-05-17 19:47:40.000000000 +0200
@@ -1069,6 +1069,8 @@
  * nfs_end_data_update
  * @inode - pointer to inode
  * Declare end of the operations that will update file data
+ * This will mark the inode as immediately needing revalidation
+ * of its attribute cache.
  */
 void nfs_end_data_update(struct inode *inode)
 {
@@ -1084,6 +1086,27 @@
 }
 
 /**
+ * nfs_end_data_update_defer
+ * @inode - pointer to inode
+ * Declare end of the operations that will update file data
+ * This will defer marking the inode as needing revalidation
+ * unless there are no other pending updates.
+ */
+void nfs_end_data_update_defer(struct inode *inode)
+{
+	struct nfs_inode *nfsi = NFS_I(inode);
+
+	if (atomic_dec_and_test(&nfsi->data_updates)) {
+		/* Mark the attribute cache for revalidation */
+		nfsi->flags |= NFS_INO_INVALID_ATTR;
+		/* Directories and symlinks: invalidate page cache too */
+		if (S_ISDIR(inode->i_mode) || S_ISLNK(inode->i_mode))
+			nfsi->flags |= NFS_INO_INVALID_DATA;
+		nfsi->cache_change_attribute ++;
+	}
+}
+
+/**
  * nfs_refresh_inode - verify consistency of the inode attribute cache
  * @inode - pointer to inode
  * @fattr - updated attributes
Index: linux-2.6.5/fs/nfs/write.c
===================================================================
--- linux-2.6.5.orig/fs/nfs/write.c	2004-05-17 19:47:28.000000000 +0200
+++ linux-2.6.5/fs/nfs/write.c	2004-05-17 19:47:40.000000000 +0200
@@ -233,7 +233,7 @@
 		ClearPageError(page);
 
 io_error:
-	nfs_end_data_update(inode);
+	nfs_end_data_update_defer(inode);
 	if (wdata.cred)
 		put_rpccred(wdata.cred);
 
@@ -379,7 +379,7 @@
 	nfsi->npages--;
 	if (!nfsi->npages) {
 		spin_unlock(&nfs_wreq_lock);
-		nfs_end_data_update(inode);
+		nfs_end_data_update_defer(inode);
 		iput(inode);
 	} else
 		spin_unlock(&nfs_wreq_lock);
Index: linux-2.6.5/include/linux/nfs_fs.h
===================================================================
--- linux-2.6.5.orig/include/linux/nfs_fs.h	2004-05-17 19:47:28.000000000 +0200
+++ linux-2.6.5/include/linux/nfs_fs.h	2004-05-17 19:47:40.000000000 +0200
@@ -275,6 +275,7 @@
 extern void nfs_end_attr_update(struct inode *);
 extern void nfs_begin_data_update(struct inode *);
 extern void nfs_end_data_update(struct inode *);
+extern void nfs_end_data_update_defer(struct inode *);
 
 /* linux/net/ipv4/ipconfig.c: trims ip addr off front of name, too. */
 extern u32 root_nfs_parse_addr(char *name); /*__init*/
