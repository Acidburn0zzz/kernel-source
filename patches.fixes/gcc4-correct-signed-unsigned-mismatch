From: Hannes Reinecke <hare@suse.de>
Subject: Fix signed/unsigned mismatches

sumversion.c, kallsyms.c and conmakehash.c have quite a few
signed/unsigned mismatches due to the sometimes bogus use of 'signed char'.
This causes gcc-4 to barf.
Correct this with either removing the offending type declarations or
using explicit casts.

--- linux-2.6.12/scripts/kallsyms.c.orig	2005-07-05 09:05:39.000000000 +0200
+++ linux-2.6.12/scripts/kallsyms.c	2005-07-05 09:10:34.000000000 +0200
@@ -160,8 +160,8 @@ read_symbol(FILE *in, struct sym_entry *
 	/* include the type field in the symbol name, so that it gets
 	 * compressed together */
 	s->len = strlen(str) + 1;
-	s->sym = (char *) malloc(s->len + 1);
-	strcpy(s->sym + 1, str);
+	s->sym = (unsigned char *) malloc(s->len + 1);
+	strcpy((char *)s->sym + 1, str);
 	s->sym[0] = s->type;
 
 	return 0;
@@ -207,18 +207,18 @@ symbol_valid(struct sym_entry *s)
 		 * move then they may get dropped in pass 2, which breaks the
 		 * kallsyms rules.
 		 */
-		if ((s->addr == _etext && strcmp(s->sym + offset, "_etext")) ||
-		    (s->addr == _einittext && strcmp(s->sym + offset, "_einittext")) ||
-		    (s->addr == _eextratext && strcmp(s->sym + offset, "_eextratext")))
+		if ((s->addr == _etext && strcmp((char *)(s->sym + offset), "_etext")) ||
+		    (s->addr == _einittext && strcmp((char *)(s->sym + offset), "_einittext")) ||
+		    (s->addr == _eextratext && strcmp((char *)(s->sym + offset), "_eextratext")))
 			return 0;
 	}
 
 	/* Exclude symbols which vary between passes. */
-	if (strstr(s->sym + offset, "_compiled."))
+	if (strstr((char *)(s->sym + offset), "_compiled."))
 		return 0;
 
 	for (i = 0; special_symbols[i]; i++)
-		if( strcmp(s->sym + offset, special_symbols[i]) == 0 )
+		if( strcmp((char *)(s->sym + offset), special_symbols[i]) == 0 )
 			return 0;
 
 	return 1;
--- linux-2.6.12/scripts/conmakehash.c.orig	2005-07-05 09:10:52.000000000 +0200
+++ linux-2.6.12/scripts/conmakehash.c	2005-07-05 09:12:51.000000000 +0200
@@ -33,7 +33,7 @@ void usage(char *argv0)
 
 int getunicode(char **p0)
 {
-  unsigned char *p = *p0;
+  unsigned char *p = *((unsigned char **)p0);
 
   while (*p == ' ' || *p == '\t')
     p++;
@@ -41,8 +41,8 @@ int getunicode(char **p0)
       !isxdigit(p[2]) || !isxdigit(p[3]) || !isxdigit(p[4]) ||
       !isxdigit(p[5]) || isxdigit(p[6]))
     return -1;
-  *p0 = p+6;
-  return strtol(p+2,0,16);
+  *p0 = (char *)(p+6);
+  return strtol((char *)(p+2),0,16);
 }
 
 unicode unitable[MAX_FONTLEN][255];
--- linux-2.6.12/scripts/mod/sumversion.c.orig	2005-07-05 08:58:35.000000000 +0200
+++ linux-2.6.12/scripts/mod/sumversion.c	2005-07-05 09:30:46.000000000 +0200
@@ -252,7 +252,7 @@ static int parse_comment(const char *fil
 }
 
 /* FIXME: Handle .s files differently (eg. # starts comments) --RR */
-static int parse_file(const signed char *fname, struct md4_ctx *md)
+static int parse_file(const char *fname, struct md4_ctx *md)
 {
 	signed char *file;
 	unsigned long i, len;
@@ -332,7 +332,7 @@ static int parse_source_files(const char
 	   Sum all files in the same dir or subdirs.
 	*/
 	while ((line = get_next_line(&pos, file, flen)) != NULL) {
-		signed char* p = line;
+		char* p = line;
 		if (strncmp(line, "deps_", sizeof("deps_")-1) == 0) {
 			check_files = 1;
 			continue;
@@ -458,7 +458,7 @@ out:
 	close(fd);
 }
 
-static int strip_rcs_crap(signed char *version)
+static int strip_rcs_crap(char *version)
 {
 	unsigned int len, full_len;
 
