From: Tony Luck <tony.luck@intel.com>
Subject: check insert_vm_struct failures with malicious vmas
Patch-mainline: 2.6.10
References: 48493

# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/11/25 16:00:28-08:00 nanhai.zou@intel.com 
#   [PATCH] ia64/x86_64/s390 overlapping vma fix
#   
#   IA64 is also vulnerable to the huge-vma-in-executable bug in 64 bit elf
#   support, it just insert a vma of zero page without checking overlap, so user
#   can construct a elf with section begin from 0x0 to trigger this BUGON().
#   
#   However, I think it's safe to check overlap before we actually insert a vma
#   into vma list.  And I also feel check vma overlap everywhere is unnecessary,
#   because invert_vm_struct will check it again, so the check is duplicated.
#   It's better to have invert_vm_struct return a value then let caller check if
#   it successes.  Here is a patch against 2.6.10.rc2-mm3 I have tested it on
#   i386, x86_64 and ia64 machines.
#   
#   Signed-off-by: Tony Luck <tony.luck@intel.com>
#   Signed-off-by: Zou Nan hai <Nanhai.zou@intel.com>
#   Signed-off-by: Andrew Morton <akpm@osdl.org>
#   Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 
# arch/ia64/ia32/binfmt_elf32.c
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +21 -5
#   ia64/x86_64/s390 overlapping vma fix
# 
# arch/ia64/mm/init.c
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +14 -2
#   ia64/x86_64/s390 overlapping vma fix
# 
# arch/s390/kernel/compat_exec.c
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +6 -2
#   ia64/x86_64/s390 overlapping vma fix
# 
# arch/x86_64/ia32/ia32_binfmt.c
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +6 -2
#   ia64/x86_64/s390 overlapping vma fix
# 
# fs/exec.c
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +3 -6
#   ia64/x86_64/s390 overlapping vma fix
# 
# include/linux/mm.h
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +1 -1
#   ia64/x86_64/s390 overlapping vma fix
# 
# mm/mmap.c
#   2004/11/24 22:42:43-08:00 nanhai.zou@intel.com +3 -2
#   ia64/x86_64/s390 overlapping vma fix
# 

Signed-off-by: Tony Luck <tony.luck@intel.com>
Signed-off-by: Zou Nan hai <Nanhai.zou@intel.com>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Linus Torvalds <torvalds@osdl.org>
Acked-by: Andrea Arcangeli <andrea@suse.de>

--- SL9.2/arch/ia64/ia32/binfmt_elf32.c.orig	2004-12-04 05:24:30.447632472 +0100
+++ SL9.2/arch/ia64/ia32/binfmt_elf32.c	2004-12-04 05:53:07.732565480 +0100
@@ -84,7 +84,11 @@ ia64_elf32_init (struct pt_regs *regs)
 		vma->vm_ops = &ia32_shared_page_vm_ops;
 		down_write(&current->mm->mmap_sem);
 		{
-			insert_vm_struct(current->mm, vma);
+			if (insert_vm_struct(current->mm, vma)) {
+				kmem_cache_free(vm_area_cachep, vma);
+				up_write(&current->mm->mmap_sem);
+				return;
+			}
 		}
 		up_write(&current->mm->mmap_sem);
 	}
@@ -103,7 +107,11 @@ ia64_elf32_init (struct pt_regs *regs)
 		vma->vm_flags = VM_READ|VM_WRITE|VM_MAYREAD|VM_MAYWRITE;
 		down_write(&current->mm->mmap_sem);
 		{
-			insert_vm_struct(current->mm, vma);
+			if (insert_vm_struct(current->mm, vma)) {
+				kmem_cache_free(vm_area_cachep, vma);
+				up_write(&current->mm->mmap_sem);
+				return;
+			}
 		}
 		up_write(&current->mm->mmap_sem);
 	}
@@ -151,7 +159,7 @@ ia32_setup_arg_pages (struct linux_binpr
 	unsigned long stack_base;
 	struct vm_area_struct *mpnt;
 	struct mm_struct *mm = current->mm;
-	int i;
+	int i, ret;
 
 	stack_base = IA32_STACK_TOP - MAX_ARG_PAGES*PAGE_SIZE;
 	mm->arg_start = bprm->p + stack_base;
@@ -186,7 +194,11 @@ ia32_setup_arg_pages (struct linux_binpr
 			mpnt->vm_flags = VM_STACK_FLAGS;
 		mpnt->vm_page_prot = (mpnt->vm_flags & VM_EXEC)?
 					PAGE_COPY_EXEC: PAGE_COPY;
-		insert_vm_struct(current->mm, mpnt);
+		if ((ret = insert_vm_struct(current->mm, mpnt))) {
+			up_write(&current->mm->mmap_sem);
+			kmem_cache_free(vm_area_cachep, mpnt);
+			return ret;
+		}
 		current->mm->stack_vm = current->mm->total_vm = vma_pages(mpnt);
 	}
 
--- SL9.2/arch/ia64/mm/init.c.orig	2004-12-04 05:24:30.480627456 +0100
+++ SL9.2/arch/ia64/mm/init.c	2004-12-04 05:53:07.746563352 +0100
@@ -131,7 +131,13 @@ ia64_init_addr_space (void)
 		vma->vm_end = vma->vm_start + PAGE_SIZE;
 		vma->vm_page_prot = protection_map[VM_DATA_DEFAULT_FLAGS & 0x7];
 		vma->vm_flags = VM_DATA_DEFAULT_FLAGS | VM_GROWSUP;
-		insert_vm_struct(current->mm, vma);
+		down_write(&current->mm->mmap_sem);
+		if (insert_vm_struct(current->mm, vma)) {
+			up_write(&current->mm->mmap_sem);
+			kmem_cache_free(vm_area_cachep, vma);
+			return;
+		}
+		up_write(&current->mm->mmap_sem);
 	}
 
 	/* map NaT-page at address zero to speed up speculative dereferencing of NULL: */
@@ -143,7 +149,13 @@ ia64_init_addr_space (void)
 			vma->vm_end = PAGE_SIZE;
 			vma->vm_page_prot = __pgprot(pgprot_val(PAGE_READONLY) | _PAGE_MA_NAT);
 			vma->vm_flags = VM_READ | VM_MAYREAD | VM_IO | VM_RESERVED;
-			insert_vm_struct(current->mm, vma);
+			down_write(&current->mm->mmap_sem);
+			if (insert_vm_struct(current->mm, vma)) {
+				up_write(&current->mm->mmap_sem);
+				kmem_cache_free(vm_area_cachep, vma);
+				return;
+			}
+			up_write(&current->mm->mmap_sem);
 		}
 	}
 }
--- SL9.2/arch/s390/kernel/compat_exec.c.orig	2004-12-04 05:24:30.722590672 +0100
+++ SL9.2/arch/s390/kernel/compat_exec.c	2004-12-04 05:53:07.754562136 +0100
@@ -39,7 +39,7 @@ int setup_arg_pages32(struct linux_binpr
 	unsigned long stack_base;
 	struct vm_area_struct *mpnt;
 	struct mm_struct *mm = current->mm;
-	int i;
+	int i, ret;
 
 	stack_base = STACK_TOP - MAX_ARG_PAGES*PAGE_SIZE;
 	mm->arg_start = bprm->p + stack_base;
@@ -68,7 +68,11 @@ int setup_arg_pages32(struct linux_binpr
 		/* executable stack setting would be applied here */
 		mpnt->vm_page_prot = PAGE_COPY;
 		mpnt->vm_flags = VM_STACK_FLAGS;
-		insert_vm_struct(mm, mpnt);
+		if ((ret = insert_vm_struct(mm, mpnt))) {
+			up_write(&mm->mmap_sem);
+			kmem_cache_free(vm_area_cachep, mpnt);
+			return ret;
+		}
 		mm->stack_vm = mm->total_vm = vma_pages(mpnt);
 	} 
 
--- SL9.2/arch/x86_64/ia32/ia32_binfmt.c.orig	2004-12-04 05:24:30.963554040 +0100
+++ SL9.2/arch/x86_64/ia32/ia32_binfmt.c	2004-12-04 05:53:07.762560920 +0100
@@ -333,7 +333,7 @@ int setup_arg_pages(struct linux_binprm 
 	unsigned long stack_base;
 	struct vm_area_struct *mpnt;
 	struct mm_struct *mm = current->mm;
-	int i;
+	int i, ret;
 
 	stack_base = IA32_STACK_TOP - MAX_ARG_PAGES * PAGE_SIZE;
 	mm->arg_start = bprm->p + stack_base;
@@ -367,7 +367,11 @@ int setup_arg_pages(struct linux_binprm 
 			mpnt->vm_flags = vm_stack_flags32;
  		mpnt->vm_page_prot = (mpnt->vm_flags & VM_EXEC) ? 
  			PAGE_COPY_EXEC : PAGE_COPY;
-		insert_vm_struct(mm, mpnt);
+		if ((ret = insert_vm_struct(mm, mpnt))) {
+			up_write(&mm->mmap_sem);
+			kmem_cache_free(vm_area_cachep, mpnt);
+			return ret;
+		}
 		mm->stack_vm = mm->total_vm = vma_pages(mpnt);
 	} 
 
--- SL9.2/fs/exec.c.orig	2004-12-04 05:25:03.509606288 +0100
+++ SL9.2/fs/exec.c	2004-12-04 05:54:19.530650512 +0100
@@ -341,7 +341,7 @@ int setup_arg_pages(struct linux_binprm 
 	unsigned long stack_base;
 	struct vm_area_struct *mpnt;
 	struct mm_struct *mm = current->mm;
-	int i;
+	int i, ret;
 	long arg_size;
 
 #ifdef CONFIG_STACK_GROWSUP
@@ -432,7 +432,11 @@ int setup_arg_pages(struct linux_binprm 
 			mpnt->vm_flags = VM_STACK_FLAGS;
 		mpnt->vm_flags |= mm->def_flags;
 		mpnt->vm_page_prot = protection_map[mpnt->vm_flags & 0x7];
-		insert_vm_struct(mm, mpnt);
+		if ((ret = insert_vm_struct(mm, mpnt))) {
+			up_write(&mm->mmap_sem);
+			kmem_cache_free(vm_area_cachep, mpnt);
+			return ret;
+		}
 		mm->stack_vm = mm->total_vm = vma_pages(mpnt);
 	}
 
--- SL9.2/include/linux/mm.h.orig	2004-12-04 05:25:05.493304720 +0100
+++ SL9.2/include/linux/mm.h	2004-12-04 05:53:07.813553168 +0100
@@ -677,7 +677,7 @@ extern struct vm_area_struct *vma_merge(
 extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
 extern int split_vma(struct mm_struct *,
 	struct vm_area_struct *, unsigned long addr, int new_below);
-extern void insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
+extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
 extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 	struct rb_node **, struct rb_node *);
 extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
--- SL9.2/mm/mmap.c.orig	2004-12-04 05:25:05.500303656 +0100
+++ SL9.2/mm/mmap.c	2004-12-04 05:53:07.822551800 +0100
@@ -1883,7 +1883,7 @@ void exit_mmap(struct mm_struct *mm)
  * and into the inode's i_mmap tree.  If vm_file is non-NULL
  * then i_mmap_lock is taken here.
  */
-void insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)
+int insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)
 {
 	struct vm_area_struct * __vma, * prev;
 	struct rb_node ** rb_link, * rb_parent;
@@ -1906,8 +1906,9 @@ void insert_vm_struct(struct mm_struct *
 	}
 	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	if (__vma && __vma->vm_start < vma->vm_end)
-		BUG();
+		return -ENOMEM;
 	vma_link(mm, vma, prev, rb_link, rb_parent);
+	return 0;
 }
 
 /*
