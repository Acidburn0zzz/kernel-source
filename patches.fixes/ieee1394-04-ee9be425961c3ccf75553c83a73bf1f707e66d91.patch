commit ee9be425961c3ccf75553c83a73bf1f707e66d91
tree 0ffcc2409744d3e3710478594b1e04e406bd6eb2
parent 6552731a058a4facefd921b0b45a9a5392baa5ea
author Petr Vandrovec <petr@vandrovec.name> 1178504087 +0200
committer Stefan Richter <stefanr@s5r6.in-berlin.de> 1184018857 +0200

    ieee1394: raw1394: Fix read() for 32bit userland on 64bit kernel
    
    read() always failed with -EFAULT.  This was happening due to
    raw1394_compat_read copying data to wrong location - access_ok always
    failed as 'r' is kernel address, not user.  Whole function just tried to
    copy data from 'r' to 'r', which is not good.
    
    Signed-off-by: Petr Vandrovec <petr@vandrovec.name>
    Acked-by: Dan Dennedy <dan@dennedy.org>
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de> (split into 3 patches)

diff --git a/drivers/ieee1394/raw1394.c b/drivers/ieee1394/raw1394.c
index f1d05ee..858fd9b 100644
--- a/drivers/ieee1394/raw1394.c
+++ b/drivers/ieee1394/raw1394.c
@@ -459,7 +459,7 @@ static const char __user *raw1394_compat
 static int
 raw1394_compat_read(const char __user *buf, struct raw1394_request *r)
 {
-	struct compat_raw1394_req __user *cr = (typeof(cr)) r;
+	struct compat_raw1394_req __user *cr = (typeof(cr)) buf;
 	if (!access_ok(VERIFY_WRITE, cr, sizeof(struct compat_raw1394_req)) ||
 	    P(type) ||
 	    P(error) ||
