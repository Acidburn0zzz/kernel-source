diff -uNrp linux-2.6.5-rc2/drivers/char/tty_io.c linux-2.6.5-rc2-revchardev2/drivers/char/tty_io.c
--- linux-2.6.5-rc2/drivers/char/tty_io.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/char/tty_io.c	2004-03-25 04:04:29.000000000 +0100
@@ -2195,6 +2195,8 @@ void tty_unregister_device(struct tty_dr
 EXPORT_SYMBOL(tty_register_device);
 EXPORT_SYMBOL(tty_unregister_device);
 
+static struct kobject tty_kobj = {.name = "tty"};
+
 struct tty_driver *alloc_tty_driver(int lines)
 {
 	struct tty_driver *driver;
@@ -2254,6 +2256,7 @@ int tty_register_driver(struct tty_drive
 	int error;
         int i;
 	dev_t dev;
+	char *s;
 	void **p = NULL;
 
 	if (driver->flags & TTY_DRIVER_INSTALLED)
@@ -2293,11 +2296,15 @@ int tty_register_driver(struct tty_drive
 		driver->termios_locked = NULL;
 	}
 
+	driver->cdev.kobj.parent = &tty_kobj;
+	strcpy(driver->cdev.kobj.name, driver->name);
+	for (s = strchr(driver->cdev.kobj.name, '/'); s; s = strchr(s, '/'))
+		*s = '!';
 	cdev_init(&driver->cdev, &tty_fops);
 	driver->cdev.owner = driver->owner;
 	error = cdev_add(&driver->cdev, dev, driver->num);
 	if (error) {
-		cdev_del(&driver->cdev);
+		kobject_del(&driver->cdev.kobj);
 		unregister_chrdev_region(dev, driver->num);
 		driver->ttys = NULL;
 		driver->termios = driver->termios_locked = NULL;
@@ -2413,9 +2420,7 @@ static int __init tty_class_init(void)
 }
 
 postcore_initcall(tty_class_init);
-
-/* 3/2004 jmc: why do these devices exist? */
-
+ 
 static struct cdev tty_cdev, console_cdev;
 #ifdef CONFIG_UNIX98_PTYS
 static struct cdev ptmx_cdev;
@@ -2430,6 +2435,7 @@ static struct cdev vc0_cdev;
  */
 static int __init tty_init(void)
 {
+	strcpy(tty_cdev.kobj.name, "dev.tty");
 	cdev_init(&tty_cdev, &tty_fops);
 	if (cdev_add(&tty_cdev, MKDEV(TTYAUX_MAJOR, 0), 1) ||
 	    register_chrdev_region(MKDEV(TTYAUX_MAJOR, 0), 1, "/dev/tty") < 0)
@@ -2437,6 +2443,7 @@ static int __init tty_init(void)
 	devfs_mk_cdev(MKDEV(TTYAUX_MAJOR, 0), S_IFCHR|S_IRUGO|S_IWUGO, "tty");
 	class_simple_device_add(tty_class, MKDEV(TTYAUX_MAJOR, 0), NULL, "tty");
 
+	strcpy(console_cdev.kobj.name, "dev.console");
 	cdev_init(&console_cdev, &console_fops);
 	if (cdev_add(&console_cdev, MKDEV(TTYAUX_MAJOR, 1), 1) ||
 	    register_chrdev_region(MKDEV(TTYAUX_MAJOR, 1), 1, "/dev/console") < 0)
@@ -2444,7 +2451,11 @@ static int __init tty_init(void)
 	devfs_mk_cdev(MKDEV(TTYAUX_MAJOR, 1), S_IFCHR|S_IRUSR|S_IWUSR, "console");
 	class_simple_device_add(tty_class, MKDEV(TTYAUX_MAJOR, 1), NULL, "console");
 
+	tty_kobj.kset = tty_cdev.kobj.kset;
+	kobject_register(&tty_kobj);
+
 #ifdef CONFIG_UNIX98_PTYS
+	strcpy(ptmx_cdev.kobj.name, "dev.ptmx");
 	cdev_init(&ptmx_cdev, &tty_fops);
 	if (cdev_add(&ptmx_cdev, MKDEV(TTYAUX_MAJOR, 2), 1) ||
 	    register_chrdev_region(MKDEV(TTYAUX_MAJOR, 2), 1, "/dev/ptmx") < 0)
@@ -2454,6 +2465,7 @@ static int __init tty_init(void)
 #endif
 
 #ifdef CONFIG_VT
+	strcpy(vc0_cdev.kobj.name, "dev.vc0");
 	cdev_init(&vc0_cdev, &console_fops);
 	if (cdev_add(&vc0_cdev, MKDEV(TTY_MAJOR, 0), 1) ||
 	    register_chrdev_region(MKDEV(TTY_MAJOR, 0), 1, "/dev/vc/0") < 0)
diff -uNrp linux-2.6.5-rc2/drivers/ieee1394/amdtp.c linux-2.6.5-rc2-revchardev2/drivers/ieee1394/amdtp.c
--- linux-2.6.5-rc2/drivers/ieee1394/amdtp.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/ieee1394/amdtp.c	2004-03-25 04:04:29.000000000 +0100
@@ -1266,6 +1266,7 @@ static int __init amdtp_init_module (voi
 {
 	cdev_init(&amdtp_cdev, &amdtp_fops);
 	amdtp_cdev.owner = THIS_MODULE;
+	kobject_set_name(&amdtp_cdev.kobj, "amdtp");
 	if (cdev_add(&amdtp_cdev, IEEE1394_AMDTP_DEV, 16)) {
 		HPSB_ERR("amdtp: unable to add char device");
  		return -EIO;
diff -uNrp linux-2.6.5-rc2/drivers/ieee1394/dv1394.c linux-2.6.5-rc2-revchardev2/drivers/ieee1394/dv1394.c
--- linux-2.6.5-rc2/drivers/ieee1394/dv1394.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/ieee1394/dv1394.c	2004-03-25 04:04:29.000000000 +0100
@@ -2616,6 +2616,7 @@ static int __init dv1394_init_module(voi
 
 	cdev_init(&dv1394_cdev, &dv1394_fops);
 	dv1394_cdev.owner = THIS_MODULE;
+	kobject_set_name(&dv1394_cdev.kobj, "dv1394");
 	ret = cdev_add(&dv1394_cdev, IEEE1394_DV1394_DEV, 16);
 	if (ret) {
 		printk(KERN_ERR "dv1394: unable to register character device\n");
diff -uNrp linux-2.6.5-rc2/drivers/ieee1394/raw1394.c linux-2.6.5-rc2-revchardev2/drivers/ieee1394/raw1394.c
--- linux-2.6.5-rc2/drivers/ieee1394/raw1394.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/ieee1394/raw1394.c	2004-03-25 04:04:29.000000000 +0100
@@ -2746,9 +2746,9 @@ static int __init init_raw1394(void)
 
 	cdev_init(&raw1394_cdev, &raw1394_fops);
 	raw1394_cdev.owner = THIS_MODULE;
+	kobject_set_name(&raw1394_cdev.kobj, RAW1394_DEVICE_NAME);
 	ret = cdev_add(&raw1394_cdev, IEEE1394_RAW1394_DEV, 1);
 	if (ret) {
-		/* jmc: leaves reference to (static) raw1394_cdev */
                 HPSB_ERR("raw1394 failed to register minor device block");
                 devfs_remove(RAW1394_DEVICE_NAME);
                 hpsb_unregister_highlevel(&raw1394_highlevel);
diff -uNrp linux-2.6.5-rc2/drivers/ieee1394/video1394.c linux-2.6.5-rc2-revchardev2/drivers/ieee1394/video1394.c
--- linux-2.6.5-rc2/drivers/ieee1394/video1394.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/ieee1394/video1394.c	2004-03-25 04:04:29.000000000 +0100
@@ -1457,6 +1457,7 @@ static int __init video1394_init_module 
 
 	cdev_init(&video1394_cdev, &video1394_fops);
 	video1394_cdev.owner = THIS_MODULE;
+	kobject_set_name(&video1394_cdev.kobj, VIDEO1394_DRIVER_NAME);
 	ret = cdev_add(&video1394_cdev, IEEE1394_VIDEO1394_DEV, 16);
 	if (ret) {
 		PRINT_G(KERN_ERR, "video1394: unable to get minor device block");
diff -uNrp linux-2.6.5-rc2/drivers/scsi/sg.c linux-2.6.5-rc2-revchardev2/drivers/scsi/sg.c
--- linux-2.6.5-rc2/drivers/scsi/sg.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/scsi/sg.c	2004-03-25 04:04:29.000000000 +0100
@@ -1409,6 +1409,7 @@ find_empty_slot:
 	SCSI_LOG_TIMEOUT(3, printk("sg_add: dev=%d \n", k));
 	memset(sdp, 0, sizeof(*sdp));
 	sprintf(disk->disk_name, "sg%d", k);
+	strncpy(cdev->kobj.name, disk->disk_name, KOBJ_NAME_LEN);
 	cdev->owner = THIS_MODULE;
 	cdev->ops = &sg_fops;
 	disk->major = SCSI_GENERIC_MAJOR;
@@ -1461,7 +1462,7 @@ find_empty_slot:
 out:
 	put_disk(disk);
 	if (cdev)
-		cdev_del(cdev);
+		kobject_put(&cdev->kobj);
 	return error;
 }
 
diff -uNrp linux-2.6.5-rc2/drivers/scsi/st.c linux-2.6.5-rc2-revchardev2/drivers/scsi/st.c
--- linux-2.6.5-rc2/drivers/scsi/st.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/drivers/scsi/st.c	2004-03-25 04:04:29.000000000 +0100
@@ -3954,7 +3954,7 @@ out_free_tape:
 		}
 	}
 	if (cdev)
-		cdev_del(cdev);
+		kobject_put(&cdev->kobj);
 	write_lock(&st_dev_arr_lock);
 	scsi_tapes[dev_num] = NULL;
 	st_nr_dev--;
diff -uNrp linux-2.6.5-rc2/fs/char_dev.c linux-2.6.5-rc2-revchardev2/fs/char_dev.c
--- linux-2.6.5-rc2/fs/char_dev.c	2004-03-24 11:42:03.000000000 +0100
+++ linux-2.6.5-rc2-revchardev2/fs/char_dev.c	2004-03-25 04:04:29.000000000 +0100
@@ -340,9 +340,15 @@ static int exact_lock(dev_t dev, void *d
 
 int cdev_add(struct cdev *p, dev_t dev, unsigned count)
 {
+	int err = kobject_add(&p->kobj);
+	if (err)
+		return err;
+	err = kobj_map(cdev_map, dev, count, NULL, exact_match, exact_lock, p);
+	if (err)
+		kobject_del(&p->kobj);
 	p->dev = dev;
 	p->count = count;
-	return kobj_map(cdev_map, dev, count, NULL, exact_match, exact_lock, p);
+	return err;
 }
 
 static void cdev_unmap(dev_t dev, unsigned count)
@@ -353,6 +359,7 @@ static void cdev_unmap(dev_t dev, unsign
 void cdev_del(struct cdev *p)
 {
 	cdev_unmap(p->dev, p->count);
+	kobject_del(&p->kobj);
 	kobject_put(&p->kobj);
 }
 
@@ -400,12 +407,18 @@ static struct kobj_type ktype_cdev_dynam
 	.release	= cdev_dynamic_release,
 };
 
+static struct kset kset_dynamic = {
+	.subsys = &cdev_subsys,
+	.kobj = {.name = "major",},
+	.ktype = &ktype_cdev_dynamic,
+};
+
 struct cdev *cdev_alloc(void)
 {
 	struct cdev *p = kmalloc(sizeof(struct cdev), GFP_KERNEL);
 	if (p) {
 		memset(p, 0, sizeof(struct cdev));
-		p->kobj.ktype = &ktype_cdev_dynamic;
+		p->kobj.kset = &kset_dynamic;
 		INIT_LIST_HEAD(&p->list);
 		kobject_init(&p->kobj);
 	}
@@ -415,6 +428,7 @@ struct cdev *cdev_alloc(void)
 void cdev_init(struct cdev *cdev, struct file_operations *fops)
 {
 	INIT_LIST_HEAD(&cdev->list);
+	kobj_set_kset_s(cdev, cdev_subsys);
 	cdev->kobj.ktype = &ktype_cdev_default;
 	kobject_init(&cdev->kobj);
 	cdev->ops = fops;
@@ -430,12 +444,8 @@ static struct kobject *base_probe(dev_t 
 
 void __init chrdev_init(void)
 {
-/*
- * Keep cdev_subsys around because (and only because) the kobj_map code
- * depends on the rwsem it contains.  We don't make it public in sysfs,
- * however.
- */
-	subsystem_init(&cdev_subsys);
+	subsystem_register(&cdev_subsys);
+	kset_register(&kset_dynamic);
 	cdev_map = kobj_map_init(base_probe, &cdev_subsys);
 }
 
