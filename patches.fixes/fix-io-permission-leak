# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/05/07 09:35:35-07:00 stsp@aknet.ru 
#   [PATCH] Fix IO bitmap invalidate
#   
#   There is a bug where if any process that obtained an IO access
#   permissions via ioperm() does not explicitly "drop" that permissions,
#   the IO permissions don't get properly invalidated on process exit.
#   
#   The cause is that exit_thread() only invalidates the per-thread
#   io_bitmap pointer, but doesn't invalidate the per-TSS io_bitmap pointer
#   as well. 
#   
#   As the per-thread pointer is invalidated, __switch_to() doesn't take
#   care of that one either, so the per-TSS pointer stays valid as long as
#   some other process does ioperm().
#   
#   This fixes the problem - it invalidates the per-TSS io_bitmap pointer
#   and the problem goes away. 
# 
# arch/i386/kernel/process.c
#   2004/05/07 03:54:13-07:00 stsp@aknet.ru +4 -0
#   Fix IO bitmap invalidate
# 
diff -Nru a/arch/i386/kernel/process.c b/arch/i386/kernel/process.c
--- a/arch/i386/kernel/process.c	Mon May 10 07:09:37 2004
+++ b/arch/i386/kernel/process.c	Mon May 10 07:09:37 2004
@@ -293,8 +293,12 @@
 
 	/* The process may have allocated an io port bitmap... nuke it. */
 	if (unlikely(NULL != tsk->thread.io_bitmap_ptr)) {
+		int cpu = get_cpu();
+		struct tss_struct *tss = init_tss + cpu;
 		kfree(tsk->thread.io_bitmap_ptr);
 		tsk->thread.io_bitmap_ptr = NULL;
+		tss->io_bitmap_base = INVALID_IO_BITMAP_OFFSET;
+		put_cpu();
 	}
 }
 
