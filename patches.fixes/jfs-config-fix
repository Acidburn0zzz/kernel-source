On Tue, 2004-05-18 at 08:53, Andreas Gruenbacher wrote:
[] If you have CONFIG_JFS_POSIX_ACL disabled, the return value of getxattr
[] is indeed determined by the file permissions -- which is wrong.

I get it.  This is just a problem trying to read acls when
CONFIG_JFS_POSIX_ACL is not configured.  We shouldn't be return -EPERM.

[] Dave, how about the attached patch? I think jfs should call permission()
[] instead of jfs_permission directly; permission() also does the lsm check
[] in addition.

The patch looks good.  I'll push it to Linus.  I think a while back
there were some locking issues (permission & getxattr both grabbed
i_sem?) that we needed to avoid, which is why we called jfs_permission
directly.  This is no longer the case.

-- 
David Kleikamp
IBM Linux Technology Center

Index: linux-2.6.5/fs/jfs/xattr.c
===================================================================
--- linux-2.6.5.orig/fs/jfs/xattr.c
+++ linux-2.6.5/fs/jfs/xattr.c
@@ -746,11 +746,7 @@ static int can_set_xattr(struct inode *i
 	    (!S_ISDIR(inode->i_mode) || inode->i_mode &S_ISVTX))
 		return -EPERM;
 
-#ifdef CONFIG_JFS_POSIX_ACL
-	return jfs_permission(inode, MAY_WRITE, NULL);
-#else
 	return permission(inode, MAY_WRITE, NULL);
-#endif
 }
 
 int __jfs_setxattr(struct inode *inode, const char *name, const void *value,
@@ -916,13 +912,10 @@ int jfs_setxattr(struct dentry *dentry, 
 
 static int can_get_xattr(struct inode *inode, const char *name)
 {
-#ifdef CONFIG_JFS_POSIX_ACL
 	if(strncmp(name, XATTR_SYSTEM_PREFIX, XATTR_SYSTEM_PREFIX_LEN) == 0)
 		return 0;
-	return jfs_permission(inode, MAY_READ, NULL);
-#else
+
 	return permission(inode, MAY_READ, NULL);
-#endif
 }
 
 ssize_t __jfs_getxattr(struct inode *inode, const char *name, void *data,
