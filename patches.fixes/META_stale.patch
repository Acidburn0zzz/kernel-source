From: gjohnson@austin.ibm.com (Glen Johnson)
Subject: JFS: Simplify stale metapage handing so that mp->count isn't
         held above zero by multiple threads.
Patch-mainline: No
References: SUSE50045

Simplify stale metapage handing so that mp->count isn't held above zero by
multiple threads.

Acked-by: mason@suse.com

diff -Nurp linux-2.6.5-7.137/fs/jfs/jfs_metapage.c linux/fs/jfs/jfs_metapage.c
--- linux-2.6.5-7.137/fs/jfs/jfs_metapage.c	2005-01-11 16:32:07.682838672 -0600
+++ linux/fs/jfs/jfs_metapage.c	2005-01-11 16:32:23.548426736 -0600
@@ -242,14 +242,14 @@ again:
 	mp = search_hash(hash_ptr, mapping, lblock);
 	if (mp) {
 	      page_found:
-		mp->count++;
-		lock_metapage(mp);
-		spin_unlock(&meta_lock);
 		if (test_bit(META_stale, &mp->flag)) {
-			release_metapage(mp);
-			yield();	/* Let other waiters release it, too */
+			spin_unlock(&meta_lock);
+			yield();
 			goto again;
 		}
+		mp->count++;
+		lock_metapage(mp);
+		spin_unlock(&meta_lock);
 		if (test_bit(META_discard, &mp->flag)) {
 			if (!new) {
 				jfs_error(inode->i_sb,
@@ -469,7 +469,6 @@ void release_metapage(struct metapage * 
 	}
 
 	if (mp->page) {
-		/* Releasing spinlock, we have to check mp->count later */
 		set_bit(META_stale, &mp->flag);
 		spin_unlock(&meta_lock);
 		kunmap(mp->page);
@@ -506,12 +505,6 @@ void release_metapage(struct metapage * 
 		list_del(&mp->synclist);
 		LOGSYNC_UNLOCK(log);
 	}
-	if (mp->count) {
-		/* Someone else is trying to get this metpage */
-		unlock_metapage(mp);
-		spin_unlock(&meta_lock);
-		return;
-	}
 	remove_from_hash(mp, meta_hash(mp->mapping, mp->index));
 	spin_unlock(&meta_lock);
 
@@ -540,12 +533,8 @@ again:
 		mp = search_hash(hash_ptr, mapping, lblock);
 		if (mp) {
 			if (test_bit(META_stale, &mp->flag)) {
-				/* Racing with release_metapage */
-				mp->count++;
-				lock_metapage(mp);
 				spin_unlock(&meta_lock);
-				/* racing release_metapage should be done now */
-				release_metapage(mp);
+				yield();
 				goto again;
 			}
 

