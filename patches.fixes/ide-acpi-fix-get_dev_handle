From: Hannes Reinecke <hare@suse.de>
Subject: ide_get_dev_handle failed
References: 169832

I'm getting the following failure message while booting an rx2620 (with
montecitos) and sles10b10:

Probing IDE interface ide0...
hda: HL-DT-ST DVD+RW GCA-4040N, ATAPI CD/DVD-ROM drive
ide0 at 0xd18-0xd1f,0xd26 on irq 52
ide_acpi_hwif_get_handle: ENTER: device ide0
ide_get_dev_handle: ENTER: pci 00:02.0
ide_get_dev_handle: get_object_info for parent has wrong  bus: 0, should be 0
ide_acpi_hwif_get_handle: ide_get_dev_handle failed (-19)
ide_acpi_init: no ACPI object for ide0 found
Probing IDE interface ide1...

The original code tried to verify the PCI devices' parent object (ie
the PCI bus) by checking the _ADR object. However, the ACPI spec
mandates the _ADR object for PCI devices _only_; the bus has to be
inferred from other objects.
This in turn means the even for valid ACPI information we won't be
able to correctly execute the ACPI startup code.

To verify an ACPI object associated with a PCI device it should be
sufficient to check the _ADR object of the device itself; we'll rely
on the ACPI interpreter to assign it to the correct bus.

Signed-off-by: Hannes Reinecke <hare@suse.de>

diff --git a/drivers/ide/ide-acpi.c b/drivers/ide/ide-acpi.c
index 2a04e73..9515019 100644
--- a/drivers/ide/ide-acpi.c
+++ b/drivers/ide/ide-acpi.c
@@ -81,7 +81,7 @@ static int ide_get_dev_handle(struct dev
 	struct pci_dev *pdev = to_pci_dev(dev);
 	unsigned int bus, devnum, func;
 	acpi_integer addr;
-	acpi_handle dev_handle, parent_handle;
+	acpi_handle dev_handle;
 	struct acpi_buffer buffer = {.length = ACPI_ALLOCATE_BUFFER,
 					.pointer = NULL};
 	acpi_status status;
@@ -91,37 +91,37 @@ static int ide_get_dev_handle(struct dev
 	bus = pdev->bus->number;
 	devnum = PCI_SLOT(pdev->devfn);
 	func = PCI_FUNC(pdev->devfn);
+	/* ACPI _ADR encoding for PCI bus: */
+	addr = (acpi_integer)(devnum << 16 | func);
 
 	DEBPRINT("ENTER: pci %02x:%02x.%01x\n", bus, devnum, func);
 
 	dev_handle = DEVICE_ACPI_HANDLE(dev);
-	parent_handle = DEVICE_ACPI_HANDLE(dev->parent);
+	if (!dev_handle) {
+		DEBPRINT("no acpi handle for device\n");
+		goto err;
+	}
 
-	status = acpi_get_object_info(parent_handle, &buffer);
+	status = acpi_get_object_info(dev_handle, &buffer);
 	if (ACPI_FAILURE(status)) {
-		DEBPRINT("get_object_info for parent failed\n");
+		DEBPRINT("get_object_info for device failed\n");
 		goto err;
 	}
 	dinfo = buffer.pointer;
 	if (dinfo && (dinfo->valid & ACPI_VALID_ADR) &&
-	    dinfo->address == bus) {
-		/* ACPI spec for _ADR for PCI bus: */
-		addr = (acpi_integer)(devnum << 16 | func);
+	    dinfo->address == addr) {
 		*pcidevfn = addr;
 		*handle = dev_handle;
 	} else {
-		DEBPRINT("get_object_info for parent has wrong "
-			" bus: %llu, should be %d\n",
+		DEBPRINT("get_object_info for device has wrong "
+			" address: %llu, should be %u\n",
 			dinfo ? (unsigned long long)dinfo->address : -1ULL,
-			bus);
+			(unsigned int)addr);
 		goto err;
 	}
 
-	DEBPRINT("for dev=0x%x.%x, addr=0x%llx, parent=0x%p, *handle=0x%p\n",
-		 devnum, func, (unsigned long long)addr,
-		 dev->parent, *handle);
-	if (!*handle)
-		goto err;
+	DEBPRINT("for dev=0x%x.%x, addr=0x%llx, *handle=0x%p\n",
+		 devnum, func, (unsigned long long)addr, *handle);
 	ret = 0;
 err:
 	acpi_os_free(dinfo);
