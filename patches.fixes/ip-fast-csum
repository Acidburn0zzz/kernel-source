
This patch fixes a mis-compilation that happens with gcc 3.3.2.
In ip_fragment(), gcc will inline ip_send_check:

	iph->check = 0;
	iph->check = ip_fast_csum((unsigned char *) iph, iph->ihl);

In some situations, gcc will optimize iph->check = -1; away and
create incorrect code.

--- linux-2.6.0-test8/include/asm-i386/checksum.h	2003-10-17 23:43:24.000000000 +0200
+++ new/include/asm-i386/checksum.h	2003-10-23 14:53:21.000000000 +0200
@@ -83,7 +83,8 @@
 	   are modified, we must also specify them as outputs, or gcc
 	   will assume they contain their original values. */
 	: "=r" (sum), "=r" (iph), "=r" (ihl)
-	: "1" (iph), "2" (ihl));
+	: "1" (iph), "2" (ihl)
+	: "memory");
 	return(sum);
 }
 
--- linux-2.6.0-test9/include/asm-s390/checksum.h.orig	2003-10-25 20:42:46.000000000 +0200
+++ linux-2.6.0-test9/include/asm-s390/checksum.h	2003-10-31 11:18:29.000000000 +0100
@@ -165,7 +165,7 @@
 		"    sr   %0,%0\n"   /* set sum to zero */
                 "0:  cksm %0,%1\n"   /* do checksum on longs */
                 "    jo   0b\n"
-                : "=&d" (sum), "+&a" (rp) : : "cc" );
+                : "=&d" (sum), "+&a" (rp) : : "cc", "memory" );
 #else /* __s390x__ */
         __asm__ __volatile__ (
 		"    slgr %0,%0\n"   /* set sum to zero */
@@ -175,7 +175,7 @@
                 "    jo   0b\n"
                 : "=&d" (sum)
                 : "d" (iph), "d" (ihl*4)
-                : "cc", "2", "3" );
+                : "cc", "2", "3", "memory" );
 #endif /* __s390x__ */
         return csum_fold(sum);
 }
