From htejun@gmail.com  Tue Aug  7 14:47:49 2007
Return-Path: <htejun@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.1.7-deb (2006-10-05) on htj.dyndns.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.0 required=5.0 tests=AWL,BAYES_00,NO_RELAYS 
	autolearn=ham version=3.1.7-deb
X-Original-To: tj@localhost
Delivered-To: tj@localhost
Received: by htj.dyndns.org (Postfix, from userid 1000)
	id 58CEF23D4B83; Tue,  7 Aug 2007 14:42:50 +0900 (KST)
Date: Tue, 7 Aug 2007 14:42:50 +0900
From: Tejun Heo <htejun@gmail.com>
To: Jeff Garzik <jeff@garzik.org>, linux-ide@vger.kernel.org,
	stable@kernel.org, kelk1@comcast.net, lcapitulino@mandriva.com.br
Subject: [PATCH] libata: implement BROKEN_HPA horkage and apply it to HDS724040KLSA80
Message-ID: <20070807054250.GQ13674@htj.dyndns.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.13 (2006-08-11)

HDS724040KLSA80 reports that it supports HPA && LBA48 but craps itself
on READ_NATIVE_MAX_EXT.  Implement BROKEN_HPA horkage and apply it to
the drive.  If the horkage is set, all HPA operations are skipped.

While at it, make HPA test a bit more reliable by also checking
ata_id_has_hpa().

Signed-off-by: Tejun Heo <htejun@gmail.com>
Cc: Quel Qun <kelk1@comcast.net>
Cc: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
---
The drive worked fine before HPA support was added and thus this is a
regression fix.  Please consider for -stable.

Thanks.

 drivers/ata/libata-core.c |    4 +++-
 include/linux/libata.h    |    1 +
 2 files changed, 4 insertions(+), 1 deletion(-)

--- a/drivers/ata/libata-core.c	2007-08-27 14:01:23.000000000 -0400
+++ b/drivers/ata/libata-core.c	2007-08-27 14:03:02.000000000 -0400
@@ -1937,7 +1937,8 @@ int ata_dev_configure(struct ata_device 
 					dev->flags |= ATA_DFLAG_FLUSH_EXT;
 			}
 
-			if (ata_id_hpa_enabled(dev->id))
+			if (!(dev->horkage & ATA_HORKAGE_BROKEN_HPA) &&
+			    ata_id_has_hpa(id) && ata_id_hpa_enabled(dev->id))
 				dev->n_sectors = ata_hpa_resize(dev);
 
 			/* config NCQ */
@@ -3840,6 +3841,7 @@ static const struct ata_blacklist_entry 
 	{ "WDC WD740ADFD-00NLR1", NULL,		ATA_HORKAGE_NONCQ, },
 	{ "FUJITSU MHV2080BH",	"00840028",	ATA_HORKAGE_NONCQ, },
 	{ "ST9160821AS",	"3.CLF",	ATA_HORKAGE_NONCQ, },
+	{ "HDS724040KLSA80",	"KFAOA20N",	ATA_HORKAGE_BROKEN_HPA, },
 
 	/* Devices with NCQ limits */
 
--- a/include/linux/libata.h	2007-08-27 14:01:23.000000000 -0400
+++ b/include/linux/libata.h	2007-08-27 14:01:23.000000000 -0400
@@ -326,6 +326,7 @@ enum {
 	ATA_HORKAGE_NONCQ	= (1 << 2),	/* Don't use NCQ */
 	ATA_HORKAGE_MAX_SEC_128	= (1 << 3),	/* Limit max sects to 128 */
 	ATA_HORKAGE_SKIP_PM	= (1 << 4),	/* Skip PM operations */
+	ATA_HORKAGE_BROKEN_HPA	= (1 << 5),	/* Broken HPA */
 };
 
 enum hsm_task_states {
