From: Albert Lee <albertcc@tw.ibm.com>
Subject: libata handle the case when device returns/needs extra data
Patch-mainline: 
References: 

Sometimes the device returns/needs extra data than expected.

Modify __atapi_pio_bytes() to handle the case where device returns/needs
extra data:
	- for read case, discard trailing data from the device
	- for write case, padding zero data to the device

Acked-by: Jens Axboe <axboe@suse.de>
Signed-off-by: 

--- linux-2.6.13/drivers/scsi/libata-core.c~	2005-09-06 11:35:22.000000000 +0200
+++ linux-2.6.13/drivers/scsi/libata-core.c	2005-09-06 11:36:28.000000000 +0200
@@ -2760,10 +2760,33 @@
 	unsigned char *buf;
 	unsigned int offset, count;
 
-	if (qc->curbytes == qc->nbytes - bytes)
+	if (qc->curbytes + bytes >= qc->nbytes)
 		ap->pio_task_state = PIO_ST_LAST;
 
 next_sg:
+	if (unlikely(qc->cursg >= qc->n_elem)) {
+		/* 
+		 * The end of qc->sg is reached and the device expects
+		 * more data to transfer. In order not to overrun qc->sg
+		 * and fulfill length specified in the byte count register,
+		 *    - for read case, discard trailing data from the device
+		 *    - for write case, padding zero data to the device
+		 */
+		u16 pad_buf[1] = { 0 };
+		unsigned int words = bytes >> 1;
+		unsigned int i;
+
+		if (words) /* warning if bytes > 1 */
+			printk(KERN_WARNING "ata%u: %u bytes trailing data\n", 
+			       ap->id, bytes);
+
+		for (i = 0; i < words; i++)
+			ata_data_xfer(ap, (unsigned char*)pad_buf, 2, do_write);
+
+		ap->pio_task_state = PIO_ST_LAST;
+		return;
+	}
+
 	sg = &qc->sg[qc->cursg];
 
 	page = sg->page;
@@ -2797,9 +2820,8 @@
 
 	kunmap(page);
 
-	if (bytes) {
+	if (bytes)
 		goto next_sg;
-	}
 }
 
 /**
