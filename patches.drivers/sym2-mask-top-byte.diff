From: Matthew Wilcox <matthew.wilcox@hp.com>
Subject: sym53c8xx_2 cannot handle IGNORE WIDE RESIDUE message from target
References: 91631
Is-Mainline: Yes

The problem comes right at the beginning of sym_evaluate_dp():

        if (pm) {
                dp_scr  = scr_to_cpu(pm->ret);
                dp_ofs -= scr_to_cpu(pm->sg.size);
        }

Tracking sg.size back through the SCRIPTS indicates it comes from:

        SCR_STORE_REL (rbc, 4),
                offsetof(struct sym_ccb, phys.pm0.sg.size),

The chip documentation says:

This register contains the byte count that remains for the
BMOV that was executing when the phase mismatch
occurred. In the case of Direct or Indirect BMOV
instructions, the upper byte of this register also contains
the opcode of the BMOV that was executing. In the case
of a Table Indirect BMOV instruction, the upper byte
contains the upper byte of the Table Indirect entry that
was fetched.

Signed-off-by: Hannes Reinecke <hare@suse.de>

diff -urp linux-2.6.16-rc2/drivers/scsi/sym53c8xx_2/sym_hipd.c linux-2.6.16-willy/drivers/scsi/sym53c8xx_2/sym_hipd.c
--- linux-2.6.16-rc2/drivers/scsi/sym53c8xx_2/sym_hipd.c	2006-02-10 12:12:44.000000000 -0700
+++ linux-2.6.16-willy/drivers/scsi/sym53c8xx_2/sym_hipd.c	2006-02-10 11:17:08.000000000 -0700
@@ -3588,7 +3588,7 @@ static int sym_evaluate_dp(struct sym_hc
 
 	if (pm) {
 		dp_scr  = scr_to_cpu(pm->ret);
-		dp_ofs -= scr_to_cpu(pm->sg.size);
+		dp_ofs -= (scr_to_cpu(pm->sg.size) & 0xffffff);
 	}
 
 	/*
