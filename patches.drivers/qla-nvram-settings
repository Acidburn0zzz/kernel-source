Andrew Vasquez wrote:

On Wednesday, May 19, 2004 11:39 PM, Jeremy Higdon wrote:

>> On Wed, May 19, 2004 at 05:38:20PM -0700, Andrew Vasquez wrote:
>
>>> > 
>>> > Hmm, this setting looks suspicious -- could you try the attached
>>> > patch to a vanilla 8.00.00b12 driver.  It seems the irix driver
>>> > forces the connection mode to 'loop preferred, else
>>> > point-to-point', whereas the qla2xxx driver is honoring the nvram
>>> > setting and configuring the firmware for 'point-to-point
>>> > preferred, else loop' (which was always a sketchy setting). 
>>> > 
>>> > -- Andrew
>
>> 
>> I was able to try this with your patch to an otherwise unmodified
>> driver, and it works fine. 
>> 
>> So our NVRAM settings are wrong, I guess.  Not surprising, as we
>> have never used them before (our driver only uses the node and port
>> name). 
>> 
>> This could be a problem for us . . . .
>> 


The question of NVRAM-settings validity is always going to be of
concern to the driver; one can take the obvious extremes -- a
defensive posture (trusting none, overriding all), or trusting all and
modifying none.  It seems the only safe ground (even then you cannot
appease all), is to override those settings that are known to be
'bad'.  In this case, p-to-p preferred, else loop, is a known problem
setting, typically in the negociation phase with storage, but as was
seen here, there are obvious firmware bugs which seem to manifest
themselves as a result of this setting.

Here's my solution to this problem -- if the connection mode is p-to-p
preferred, else loop, then force to loop preferred, else p-to-p.  The
relevant patch which will be in my next drop to linux-scsi as well as
the various distributors follows.

--
Andrew

Index: linux/drivers/scsi/qla2xxx/qla_init.c
===================================================================
--- linux.orig/drivers/scsi/qla2xxx/qla_init.c	2004-05-20 09:52:57.000000000 -0500
+++ linux/drivers/scsi/qla2xxx/qla_init.c	2004-05-20 13:26:54.000000000 -0500
@@ -1177,7 +1177,7 @@
 		} else if (IS_QLA2200(ha)) {
 			nv->firmware_options[0] = BIT_2 | BIT_1;
 			nv->firmware_options[1] = BIT_7 | BIT_5;
-			nv->add_firmware_options[0] = BIT_5 | BIT_4;
+			nv->add_firmware_options[0] = BIT_5;
 			nv->add_firmware_options[1] = BIT_5 | BIT_4;
 			nv->frame_payload_size = __constant_cpu_to_le16(1024);
 		} else if (IS_QLA2100(ha)) {
@@ -1275,6 +1275,16 @@
 		}
 	} else if (IS_QLA2200(ha)) {
 		nv->firmware_options[0] |= BIT_2;
+		/*
+		 * 'Point-to-point preferred, else loop' is not a safe
+		 * connection mode setting.
+		 */
+		if ((nv->add_firmware_options[0] & (BIT_6 | BIT_5 | BIT_4)) ==
+		    (BIT_5 | BIT_4)) {
+			/* Force 'loop preferred, else point-to-point'. */
+			nv->add_firmware_options[0] &= ~(BIT_6 | BIT_5 | BIT_4);
+			nv->add_firmware_options[0] = BIT_5;
+		}
 		strcpy(ha->model_number, "QLA22xx");
 	} else /*if (IS_QLA2100(ha))*/ {
 		strcpy(ha->model_number, "QLA2100");
