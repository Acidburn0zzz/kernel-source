From: Hannes Reinecke <hare@suse.de>
Date: Wed May 31 09:33:30 2006 +0200
Subject: [PATCH] iscsitarget: update to svn r33
References: 179557

This updates merges fixes from upstream.

Signed-off-by: Hannes Reinecke <hare@suse.de>

---

 drivers/scsi/iscsitarget/config.c      |    1 
 drivers/scsi/iscsitarget/file-io.c     |    8 ++--
 drivers/scsi/iscsitarget/iet_u.h       |    2 -
 drivers/scsi/iscsitarget/iscsi.c       |   73 +++++++++++++++++++-------------
 drivers/scsi/iscsitarget/iscsi.h       |    1 
 drivers/scsi/iscsitarget/target_disk.c |   13 +++---
 6 files changed, 58 insertions(+), 40 deletions(-)

9d823d03d7fc3c164dd47538467811fed60b5417
diff --git a/drivers/scsi/iscsitarget/config.c b/drivers/scsi/iscsitarget/config.c
index f476020..1b21d68 100644
--- a/drivers/scsi/iscsitarget/config.c
+++ b/drivers/scsi/iscsitarget/config.c
@@ -310,4 +310,5 @@ done:
 struct file_operations ctr_fops = {
 	.owner		= THIS_MODULE,
 	.unlocked_ioctl	= ioctl,
+	.compat_ioctl	= ioctl,
 };
diff --git a/drivers/scsi/iscsitarget/file-io.c b/drivers/scsi/iscsitarget/file-io.c
index 9bf6b6c..d2257fc 100644
--- a/drivers/scsi/iscsitarget/file-io.c
+++ b/drivers/scsi/iscsitarget/file-io.c
@@ -26,7 +26,7 @@ static int fileio_make_request(struct ie
 	u32 offset, size;
 	loff_t ppos, count;
 	char *buf;
-	int i;
+	int i, err = 0;
 	ssize_t ret;
 
 	assert(p);
@@ -58,15 +58,17 @@ static int fileio_make_request(struct ie
 
 		set_fs(oldfs);
 
-		if (ret != count)
+		if (ret != count) {
 			eprintk("I/O error %lld, %ld\n", count, (long) ret);
+			err = -EIO;
+		}
 
 		size -= count;
 		offset = 0;
 	}
 	assert(!size);
 
-	return 0;
+	return err;
 }
 
 static int fileio_sync(struct iet_volume *lu, struct tio *tio)
diff --git a/drivers/scsi/iscsitarget/iet_u.h b/drivers/scsi/iscsitarget/iet_u.h
index 23af4d5..a69a232 100644
--- a/drivers/scsi/iscsitarget/iet_u.h
+++ b/drivers/scsi/iscsitarget/iet_u.h
@@ -1,7 +1,7 @@
 #ifndef _IET_U_H
 #define _IET_U_H
 
-#define IET_VERSION_STRING	"0.4.12"
+#define IET_VERSION_STRING	"0.4.13"
 
 /* The maximum length of 223 bytes in the RFC. */
 #define ISCSI_NAME_LEN	256
diff --git a/drivers/scsi/iscsitarget/iscsi.c b/drivers/scsi/iscsitarget/iscsi.c
index a280375..255ef2b 100644
--- a/drivers/scsi/iscsitarget/iscsi.c
+++ b/drivers/scsi/iscsitarget/iscsi.c
@@ -223,10 +223,10 @@ static void iscsi_cmnd_init_write(struct
 	LIST_HEAD(head);
 
 	if (!list_empty(&cmnd->list)) {
-		eprintk("%x %x %x %x %lx %lx %u %u %u %u %u %u %u %d %d\n",
+		eprintk("%x %x %x %x %lx %u %u %u %u %u %u %u %d %d\n",
 			cmnd_itt(cmnd), cmnd_ttt(cmnd), cmnd_opcode(cmnd),
-			cmnd_scsicode(cmnd), cmnd->state, cmnd->flags,
-			cmnd->r2t_sn, cmnd->r2t_length, cmnd->is_unsolicited_data,
+			cmnd_scsicode(cmnd), cmnd->flags, cmnd->r2t_sn,
+			cmnd->r2t_length, cmnd->is_unsolicited_data,
 			cmnd->target_task_tag, cmnd->outstanding_r2t,
 			cmnd->hdigest, cmnd->ddigest,
 			list_empty(&cmnd->pdu_list), list_empty(&cmnd->hash_list));
@@ -315,25 +315,6 @@ static struct iscsi_cmnd *create_scsi_rs
 	return rsp;
 }
 
-void send_scsi_rsp(struct iscsi_cmnd *req, int (*func)(struct iscsi_cmnd *))
-{
-	struct iscsi_cmnd *rsp;
-	struct iscsi_cmd_rsp *rsp_hdr;
-	u32 size;
-
-	rsp = create_scsi_rsp(req);
-	rsp_hdr = (struct iscsi_cmd_rsp *) &rsp->pdu.bhs;
-	if ((size = cmnd_read_size(req)) != 0) {
-		rsp_hdr->flags |= ISCSI_FLAG_CMD_UNDERFLOW;
-		rsp_hdr->residual_count = cpu_to_be32(size);
-	}
-
-	if (func(req) < 0)
-		eprintk("%x\n", cmnd_opcode(req));
-
-	iscsi_cmnd_init_write(rsp);
-}
-
 static struct iscsi_cmnd *create_sense_rsp(struct iscsi_cmnd *req,
 					   u8 sense_key, u8 asc, u8 ascq)
 {
@@ -369,15 +350,47 @@ static struct iscsi_cmnd *create_sense_r
 	return rsp;
 }
 
-void send_data_rsp(struct iscsi_cmnd *req, int (*func)(struct iscsi_cmnd *))
+void send_scsi_rsp(struct iscsi_cmnd *req, int (*func)(struct iscsi_cmnd *))
 {
 	struct iscsi_cmnd *rsp;
+	struct iscsi_cmd_rsp *rsp_hdr;
+	u32 size;
 
-	if (func(req) < 0) {
+	switch (func(req)) {
+	case 0:
+		rsp = create_scsi_rsp(req);
+		rsp_hdr = (struct iscsi_cmd_rsp *) &rsp->pdu.bhs;
+		if ((size = cmnd_read_size(req)) != 0) {
+			rsp_hdr->flags |= ISCSI_FLAG_CMD_UNDERFLOW;
+			rsp_hdr->residual_count = cpu_to_be32(size);
+		}
+		break;
+	case -EIO:
+		/* Medium Error/Write Fault */
+		rsp = create_sense_rsp(req, MEDIUM_ERROR, 0x03, 0x0);
+		break;
+	default:
 		rsp = create_sense_rsp(req, ILLEGAL_REQUEST, 0x24, 0x0);
-		iscsi_cmnd_init_write(rsp);
-	} else
+	}
+	iscsi_cmnd_init_write(rsp);
+}
+
+void send_data_rsp(struct iscsi_cmnd *req, int (*func)(struct iscsi_cmnd *))
+{
+	struct iscsi_cmnd *rsp;
+
+	switch (func(req)) {
+	case 0:
 		do_send_data_rsp(req);
+		return;
+	case -EIO:
+		/* Medium Error/Unrecovered Read Error */
+		rsp = create_sense_rsp(req, MEDIUM_ERROR, 0x11, 0x0);
+		break;
+	default:
+		rsp = create_sense_rsp(req, ILLEGAL_REQUEST, 0x24, 0x0);
+	}
+	iscsi_cmnd_init_write(rsp);
 }
 
 /**
@@ -401,10 +414,11 @@ void iscsi_cmnd_remove(struct iscsi_cmnd
 	if (!list_empty(&cmnd->list)) {
 		struct iscsi_cmd *req = cmnd_hdr(cmnd);
 
-		eprintk("cmnd %p still on some list?, %x, %x, %x, %x, %x, %x, %x %lx %lx\n",
+		eprintk("cmnd %p still on some list?, %x, %x, %x, %x, %x, %x, %x %lx\n",
 			cmnd, req->opcode, req->cdb[0], req->flags, req->itt,
 			ntoh24(req->dlength),
-			req->cmdsn, be32_to_cpu(cmnd->pdu.datasize), cmnd->state, conn->state);
+			req->cmdsn, be32_to_cpu(cmnd->pdu.datasize),
+			conn->state);
 
 		if (cmnd->req) {
 			struct iscsi_cmd *req = cmnd_hdr(cmnd->req);
@@ -941,6 +955,7 @@ static void scsi_cmnd_start(struct iscsi
 			eprintk("%x %x\n", cmnd_itt(req), req_hdr->cdb[0]);
 			create_sense_rsp(req, ABORTED_COMMAND, 0xc, 0xc);
 			cmnd_skip_data(req);
+			break;
 		}
 
 		set_offset_and_length(req->lun, req_hdr->cdb, &offset, &length);
@@ -1548,7 +1563,7 @@ static int check_segment_length(struct i
 	struct iscsi_sess_param *param = &conn->session->param;
 
 	if (cmnd->pdu.datasize > param->max_recv_data_length) {
-		eprintk("too lond data %x %u %u\n", cmnd_itt(cmnd),
+		eprintk("data too long %x %u %u\n", cmnd_itt(cmnd),
 			cmnd->pdu.datasize, param->max_recv_data_length);
 
 		if (get_pgcnt(cmnd->pdu.datasize, 0) > ISCSI_CONN_IOV_MAX) {
diff --git a/drivers/scsi/iscsitarget/iscsi.h b/drivers/scsi/iscsitarget/iscsi.h
index d953ba1..958d266 100644
--- a/drivers/scsi/iscsitarget/iscsi.h
+++ b/drivers/scsi/iscsitarget/iscsi.h
@@ -231,7 +231,6 @@ typedef void (iet_show_info_t)(struct se
 struct iscsi_cmnd {
 	struct list_head list;
 	struct list_head conn_list;
-	unsigned long state;
 	unsigned long flags;
 	struct iscsi_conn *conn;
 	struct iet_volume *lun;
diff --git a/drivers/scsi/iscsitarget/target_disk.c b/drivers/scsi/iscsitarget/target_disk.c
index b4b1d94..11b8194 100644
--- a/drivers/scsi/iscsitarget/target_disk.c
+++ b/drivers/scsi/iscsitarget/target_disk.c
@@ -23,7 +23,7 @@ static int insert_disconnect_pg(u8 *ptr)
 
 static int insert_caching_pg(u8 *ptr)
 {
-	unsigned char caching_pg[] = {0x08, 0x12, 0x14, 0x00, 0xff, 0xff, 0x00, 0x00,
+	unsigned char caching_pg[] = {0x08, 0x12, 0x10, 0x00, 0xff, 0xff, 0x00, 0x00,
 				      0xff, 0xff, 0xff, 0xff, 0x80, 0x14, 0x00, 0x00,
 				      0x00, 0x00, 0x00, 0x00};
 
@@ -329,13 +329,13 @@ static int build_read_response(struct is
 
 	assert(tio);
 	assert(cmnd->lun);
-	tio_read(cmnd->lun, tio);
 
-	return 0;
+	return tio_read(cmnd->lun, tio);
 }
 
 static int build_write_response(struct iscsi_cmnd *cmnd)
 {
+	int err;
 	struct tio *tio = cmnd->tio;
 
 	assert(cmnd);
@@ -343,10 +343,11 @@ static int build_write_response(struct i
 	assert(cmnd->lun);
 
 	list_del_init(&cmnd->list);
-	tio_write(cmnd->lun, tio);
-	tio_sync(cmnd->lun, tio);
+	err = tio_write(cmnd->lun, tio);
+	if (!err)
+		err = tio_sync(cmnd->lun, tio);
 
-	return 0;
+	return err;
 }
 
 static int build_generic_response(struct iscsi_cmnd *cmnd)
-- 
1.3.1

