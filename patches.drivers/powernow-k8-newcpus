diff -u linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.c-PN linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.c
--- linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.c-PN	2004-05-12 20:12:32.000000000 +0200
+++ linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.c	2004-05-12 20:15:08.000000000 +0200
@@ -434,14 +434,11 @@
 		goto out;
 
 	eax = cpuid_eax(CPUID_PROCESSOR_SIGNATURE);
-	if ((eax & CPUID_XFAM_MOD) == ATHLON64_XFAM_MOD) {
-		dprintk(KERN_DEBUG PFX "AMD Althon 64 Processor found\n");
-	} else if ((eax & CPUID_XFAM_MOD) == OPTERON_XFAM_MOD) {
-		dprintk(KERN_DEBUG PFX "AMD Opteron Processor found\n");
-	} else {
-		printk(KERN_INFO PFX
-		       "AMD Athlon 64 or AMD Opteron processor required\n");
-		goto out;
+	if (((eax & CPUID_USE_XFAM_XMOD) != CPUID_USE_XFAM_XMOD) ||
+	    ((eax & CPUID_XFAM) != CPUID_XFAM_K8) ||
+	    ((eax & CPUID_XMOD) > CPUID_XMOD_REV_E)) {
+		printk(KERN_INFO PFX "Processor cpuid %x not supported\n", eax);
+ 		goto out;
 	}
 
 	eax = cpuid_eax(CPUID_GET_MAX_CAPABILITIES);
@@ -687,6 +684,13 @@
 			continue;
 		}
 
+		/* verify voltage is OK - BIOSs are using "off" to indicate invalid */
+		if (vid == 0x1f) {
+			dprintk(KERN_INFO PFX "invalid vid %u, ignoring\n", vid);
+ 			powernow_table[i].frequency = CPUFREQ_ENTRY_INVALID;
+ 			continue;
+ 		}
+
 		if (powernow_table[i].frequency != (data->acpi_data.states[i].core_frequency * 1000)) {
 			printk(KERN_INFO PFX "invalid freq entries %u kHz vs. %u kHz\n", 
 			       powernow_table[i].frequency, 
diff -u linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.h-PN linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.h
--- linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.h-PN	2004-05-12 20:12:32.000000000 +0200
+++ linux/arch/i386/kernel/cpu/cpufreq/powernow-k8.h	2004-05-12 20:12:40.000000000 +0200
@@ -42,9 +42,11 @@
 
 /* processor's cpuid instruction support */
 #define CPUID_PROCESSOR_SIGNATURE             1	/* function 1 */
-#define CPUID_XFAM_MOD               0x0ff00ff0	/* extended fam, fam + model */
-#define ATHLON64_XFAM_MOD            0x00000f40	/* extended fam, fam + model */
-#define OPTERON_XFAM_MOD             0x00000f50	/* extended fam, fam + model */
+#define CPUID_XFAM                   0x0ff00000	/* extended family */
+#define CPUID_XFAM_K8                0
+#define CPUID_XMOD                   0x000f0000	/* extended model */
+#define CPUID_XMOD_REV_E             0x00020000
+#define CPUID_USE_XFAM_XMOD          0x00000f00
 #define CPUID_GET_MAX_CAPABILITIES   0x80000000
 #define CPUID_FREQ_VOLT_CAPABILITIES 0x80000007
 #define P_STATE_TRANSITION_CAPABLE            6
