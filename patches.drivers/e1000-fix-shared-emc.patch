Subject: e1000: fix bug with shared interrupt during reset
From: jesse.brandeburg@intel.com
Acked-by: Karsten Keil <kkeil@novell.com>
Reference: bnc#396687


A nasty bug was found where an MTU change (or anything else that caused
a reset) could race with the interrupt code.  The interrupt code was
entered by a shared interrupt during the MTU change.

This change prevents the interrupt code from running while the driver
is in the middle of its reset path.

Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
---

 drivers/net/e1000/e1000_main.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

Index: linux-2.6.27/drivers/net/e1000/e1000_main.c
===================================================================
--- linux-2.6.27.orig/drivers/net/e1000/e1000_main.c
+++ linux-2.6.27/drivers/net/e1000/e1000_main.c
@@ -31,7 +31,7 @@
 
 char e1000_driver_name[] = "e1000";
 static char e1000_driver_string[] = "Intel(R) PRO/1000 Network Driver";
-#define DRV_VERSION "7.3.20-k3-NAPI"
+#define DRV_VERSION "7.3.21-k3-NAPI"
 const char e1000_driver_version[] = DRV_VERSION;
 static const char e1000_copyright[] = "Copyright (c) 1999-2006 Intel Corporation.";
 
@@ -3835,7 +3835,7 @@ static irqreturn_t e1000_intr(int irq, v
 	struct e1000_hw *hw = &adapter->hw;
 	u32 rctl, icr = er32(ICR);
 
-	if (unlikely(!icr))
+	if (unlikely((!icr) || test_bit(__E1000_RESETTING, &adapter->flags)))
 		return IRQ_NONE;  /* Not our interrupt */
 
 	/* IMS will not auto-mask if INT_ASSERTED is not set, and if it is
