From: Andrew Patterson <andrew.patterson@hp.com>
Subject: Optionally disable QAS in MPT Fusion SPI
References: 180100
Patch-Mainline: yes

The MPT Fusion driver used with LSI 1030 can sometimes hang during
error recovery when traversing the SCSI mid-layer unjam_host()
routines (task abort, device reset, bus reset, host reset). This
happens more frequently when QAS is enabled, but can also occure with
marginally performing disk drivers.
This patch optionally disables QAS to handle errror recovery better.

Signed-off-by: Eric Moore <emoore@lsil.com>
Signed-off-by: Hannes Reinecke <hare@suse.de>

Index: linux-2.6.16.16-1.6/drivers/message/fusion/mptscsih.h
===================================================================
--- linux-2.6.16.16-1.6.orig/drivers/message/fusion/mptscsih.h	2006-06-01 14:11:09.000000000 -0600
+++ linux-2.6.16.16-1.6/drivers/message/fusion/mptscsih.h	2006-06-01 14:11:11.000000000 -0600
@@ -66,6 +66,7 @@
 #define MPTSCSIH_DOMAIN_VALIDATION      1
 #define MPTSCSIH_MAX_WIDTH              1
 #define MPTSCSIH_MIN_SYNC               0x08
+#define MPTSCSIH_QAS                    1
 #define MPTSCSIH_SAF_TE                 0
 #define MPTSCSIH_PT_CLEAR               0
 
Index: linux-2.6.16.16-1.6/drivers/message/fusion/mptspi.c
===================================================================
--- linux-2.6.16.16-1.6.orig/drivers/message/fusion/mptspi.c	2006-06-01 14:11:09.000000000 -0600
+++ linux-2.6.16.16-1.6/drivers/message/fusion/mptspi.c	2006-06-01 14:18:29.000000000 -0600
@@ -87,6 +87,10 @@ static int mpt_pq_filter = 0;
 module_param(mpt_pq_filter, int, 0);
 MODULE_PARM_DESC(mpt_pq_filter, " Enable peripheral qualifier filter: enable=1  (default=0)");
 
+static int mpt_qas = MPTSCSIH_QAS;
+module_param(mpt_qas, int, 1);
+MODULE_PARM_DESC(mpt_qas, " Quick Arbitration and Selection (QAS) enabled=1, disabled=0 (default=MPTSCSIH_QAS=1)");
+
 static void mptspi_write_offset(struct scsi_target *, int);
 static void mptspi_write_width(struct scsi_target *, int);
 static int mptspi_write_spi_device_pg1(struct scsi_target *,
@@ -608,7 +612,8 @@ static void mptspi_write_qas(struct scsi
 	VirtTarget *vtarget = starget->hostdata;
 	u32 nego;
 
-	if ((vtarget->negoFlags & MPT_TARGET_NO_NEGO_QAS) ||
+	if (!mpt_qas ||
+	    (vtarget->negoFlags & MPT_TARGET_NO_NEGO_QAS) ||
 	    hd->ioc->spi_data.noQas)
 		spi_qas(starget) = 0;
 	else
@@ -1053,7 +1058,7 @@ mptspi_probe(struct pci_dev *pdev, const
 		ioc->name,
 		mpt_saf_te,
 		mpt_pq_filter));
-	ioc->spi_data.noQas = 0;
+	ioc->spi_data.noQas = mpt_qas ? 0 : MPT_TARGET_NO_NEGO_QAS;
 
 	init_waitqueue_head(&hd->scandv_waitq);
 	hd->scandv_wait_done = 0;
