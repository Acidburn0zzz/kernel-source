Subject: display last accessed sysfs file on kernel panic message
From: Andrew Morton <akpm@osdl.org>
Patch-mainline: never

Display the most-recently-opened sysfs file's name when oopsing.

From: Adrian Bunk <bunk@stusta.de>

  Build fix

From: Greg Kroah-Hartman <gregkh@suse.de>

  Modified to make the api call cleaner, and available to all arches if
  need be.  Also added it to x86-64's crash dump message.


Signed-off-by: Adrian Bunk <bunk@stusta.de>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 arch/i386/kernel/traps.c   |    1 +
 arch/x86_64/kernel/traps.c |    1 +
 fs/sysfs/file.c            |   12 ++++++++++++
 include/linux/sysfs.h      |    7 +++++++
 4 files changed, 21 insertions(+)

--- a/arch/i386/kernel/traps.c	2007-10-31 17:43:24.000000000 -0400
+++ b/arch/i386/kernel/traps.c	2007-10-31 17:44:54.000000000 -0400
@@ -425,6 +425,7 @@ void die(const char * str, struct pt_reg
 #endif
 		if (nl)
 			printk("\n");
+		sysfs_printk_last_file();
 		if (notify_die(DIE_OOPS, str, regs, err,
 					current->thread.trap_no, SIGSEGV) !=
 				NOTIFY_STOP) {
--- a/arch/x86_64/kernel/traps.c	2007-10-31 17:43:24.000000000 -0400
+++ b/arch/x86_64/kernel/traps.c	2007-10-31 17:44:54.000000000 -0400
@@ -521,6 +521,7 @@ void __kprobes __die(const char * str, s
 	printk("DEBUG_PAGEALLOC");
 #endif
 	printk("\n");
+	sysfs_printk_last_file();
 	notify_die(DIE_OOPS, str, regs, err, current->thread.trap_no, SIGSEGV);
 	show_registers(regs);
 	add_taint(TAINT_DIE);
--- a/fs/sysfs/file.c	2007-10-31 17:43:24.000000000 -0400
+++ b/fs/sysfs/file.c	2007-10-31 17:44:54.000000000 -0400
@@ -6,6 +6,7 @@
 #include <linux/fsnotify.h>
 #include <linux/kobject.h>
 #include <linux/namei.h>
+#include <linux/limits.h>
 #include <linux/poll.h>
 #include <linux/list.h>
 #include <asm/uaccess.h>
@@ -15,6 +16,9 @@
 
 #define to_sattr(a) container_of(a,struct subsys_attribute, attr)
 
+/* used in crash dumps to help with debugging */
+static char last_sysfs_file[PATH_MAX];
+
 /*
  * Subsystem file operations.
  * These operations allow subsystems to have files that can be 
@@ -245,6 +249,9 @@ static int sysfs_open_file(struct inode 
 	struct sysfs_buffer * buffer;
 	struct sysfs_ops * ops = NULL;
 	int error;
+	char *p = d_path(file->f_dentry, sysfs_mount, last_sysfs_file, sizeof(last_sysfs_file));
+	if (p)
+		memmove(last_sysfs_file, p, strlen(p) + 1);
 
 	/* need attr_sd for attr and ops, its parent for kobj */
 	if (!sysfs_get_active_two(attr_sd))
@@ -309,6 +316,11 @@ static int sysfs_open_file(struct inode 
 	return error;
 }
 
+void sysfs_printk_last_file(void)
+{
+	printk(KERN_EMERG "last sysfs file: %s\n", last_sysfs_file);
+}
+
 static int sysfs_release(struct inode * inode, struct file * filp)
 {
 	struct sysfs_dirent *attr_sd = filp->f_path.dentry->d_fsdata;
--- a/include/linux/sysfs.h	2007-10-31 17:43:24.000000000 -0400
+++ b/include/linux/sysfs.h	2007-10-31 17:44:54.000000000 -0400
@@ -146,6 +146,8 @@ extern void sysfs_remove_shadow_dir(stru
 
 extern int __must_check sysfs_init(void);
 
+void sysfs_printk_last_file(void);
+
 #else /* CONFIG_SYSFS */
 
 static inline int sysfs_schedule_callback(struct kobject *kobj,
@@ -253,6 +255,11 @@ static inline int __must_check sysfs_ini
 	return 0;
 }
 
+static inline void sysfs_printk_last_file(void)
+{
+	;
+}
+
 #endif /* CONFIG_SYSFS */
 
 #endif /* _SYSFS_H_ */
