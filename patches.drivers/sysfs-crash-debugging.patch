Subject: display last accessed sysfs file on kernel panic message
From: Andrew Morton <akpm@osdl.org>
Patch-mainline: never

Display the most-recently-opened sysfs file's name when oopsing.

From: Adrian Bunk <bunk@stusta.de>

  Build fix

From: Greg Kroah-Hartman <gregkh@suse.de>

  Modified to make the api call cleaner, and available to all arches if
  need be.  Also added it to x86-64's crash dump message.


Signed-off-by: Adrian Bunk <bunk@stusta.de>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 arch/x86/kernel/traps_32.c |    1 +
 arch/x86/kernel/traps_64.c |    1 +
 fs/sysfs/file.c            |   13 +++++++++++++
 fs/sysfs/mount.c           |    2 +-
 include/linux/sysfs.h      |    7 +++++++
 5 files changed, 23 insertions(+), 1 deletion(-)

--- a/arch/x86/kernel/traps_32.c	2007-11-02 18:43:04.000000000 -0400
+++ b/arch/x86/kernel/traps_32.c	2007-11-02 18:43:06.000000000 -0400
@@ -396,6 +396,7 @@ void die(const char * str, struct pt_reg
 #endif
 		printk("\n");
 
+		sysfs_printk_last_file();
 		if (notify_die(DIE_OOPS, str, regs, err,
 					current->thread.trap_no, SIGSEGV) !=
 				NOTIFY_STOP) {
--- a/arch/x86/kernel/traps_64.c	2007-11-02 18:43:04.000000000 -0400
+++ b/arch/x86/kernel/traps_64.c	2007-11-02 18:43:06.000000000 -0400
@@ -517,6 +517,7 @@ void __kprobes __die(const char * str, s
 	printk("DEBUG_PAGEALLOC");
 #endif
 	printk("\n");
+	sysfs_printk_last_file();
 	notify_die(DIE_OOPS, str, regs, err, current->thread.trap_no, SIGSEGV);
 	show_registers(regs);
 	add_taint(TAINT_DIE);
--- a/fs/sysfs/file.c	2007-11-02 18:43:04.000000000 -0400
+++ b/fs/sysfs/file.c	2007-11-02 18:43:22.000000000 -0400
@@ -13,6 +13,7 @@
 #include <linux/module.h>
 #include <linux/kobject.h>
 #include <linux/namei.h>
+#include <linux/limits.h>
 #include <linux/poll.h>
 #include <linux/list.h>
 #include <linux/mutex.h>
@@ -22,6 +23,9 @@
 
 #define to_sattr(a) container_of(a,struct subsys_attribute, attr)
 
+/* used in crash dumps to help with debugging */
+static char last_sysfs_file[PATH_MAX];
+
 /*
  * Subsystem file operations.
  * These operations allow subsystems to have files that can be 
@@ -353,6 +357,10 @@ static int sysfs_open_file(struct inode 
 	struct sysfs_buffer * buffer;
 	struct sysfs_ops * ops = NULL;
 	int error;
+	extern struct vfsmount *sysfs_mount;
+	char *p = d_path(file->f_dentry, sysfs_mount, last_sysfs_file, sizeof(last_sysfs_file));
+	if (p)
+		memmove(last_sysfs_file, p, strlen(p) + 1);
 
 	/* need attr_sd for attr and ops, its parent for kobj */
 	if (!sysfs_get_active_two(attr_sd))
@@ -423,6 +431,11 @@ static int sysfs_open_file(struct inode 
 	return error;
 }
 
+void sysfs_printk_last_file(void)
+{
+	printk(KERN_EMERG "last sysfs file: %s\n", last_sysfs_file);
+}
+
 static int sysfs_release(struct inode *inode, struct file *filp)
 {
 	struct sysfs_dirent *sd = filp->f_path.dentry->d_fsdata;
--- a/fs/sysfs/mount.c	2007-11-02 17:44:36.000000000 -0400
+++ b/fs/sysfs/mount.c	2007-11-02 18:43:33.000000000 -0400
@@ -22,7 +22,7 @@
 /* Random magic number */
 #define SYSFS_MAGIC 0x62656572
 
-static struct vfsmount *sysfs_mount;
+struct vfsmount *sysfs_mount;
 struct super_block * sysfs_sb = NULL;
 struct kmem_cache *sysfs_dir_cachep;
 
--- a/include/linux/sysfs.h	2007-11-02 18:43:04.000000000 -0400
+++ b/include/linux/sysfs.h	2007-11-02 18:43:06.000000000 -0400
@@ -114,6 +114,8 @@ void sysfs_notify(struct kobject *kobj, 
 
 extern int __must_check sysfs_init(void);
 
+void sysfs_printk_last_file(void);
+
 #else /* CONFIG_SYSFS */
 
 static inline int sysfs_schedule_callback(struct kobject *kobj,
@@ -216,6 +218,11 @@ static inline int __must_check sysfs_ini
 	return 0;
 }
 
+static inline void sysfs_printk_last_file(void)
+{
+	;
+}
+
 #endif /* CONFIG_SYSFS */
 
 #endif /* _SYSFS_H_ */
