prevent direct device access when looking for device info via sysfs.
a few devices may provide different data when read multiple times,
this patch will only keep the first version.

Signed-off-by: Olaf Hering <olh@suse.de>

diff -purNX /suse/olh/kernel/kernel_exclude.txt ../linux-2.6.8-rc3.orig/drivers/usb/core/hub.c ./drivers/usb/core/hub.c
--- ../linux-2.6.8-rc3.orig/drivers/usb/core/hub.c	2004-08-05 12:05:52.000000000 +0000
+++ ./drivers/usb/core/hub.c	2004-08-05 13:05:11.968808427 +0000
@@ -957,6 +957,10 @@ void usb_disconnect(struct usb_device **
 	*pdev = NULL;
 	spin_unlock_irq(&device_state_lock);
 
+	kfree(udev->static_vendor);
+	kfree(udev->static_product);
+	kfree(udev->static_serial);
+
 	up(&udev->serialize);
 	if (!udev->parent)
 		up(&usb_bus_list_lock);
@@ -997,8 +1001,7 @@ static int choose_configuration(struct u
 	return c;
 }
 
-#ifdef DEBUG
-static void show_string(struct usb_device *udev, char *id, int index)
+static void show_string(struct usb_device *udev, char *id, char **info, int index)
 {
 	char *buf;
 
@@ -1007,15 +1010,9 @@ static void show_string(struct usb_devic
 	if (!(buf = kmalloc(256, GFP_KERNEL)))
 		return;
 	if (usb_string(udev, index, buf, 256) > 0)
-		dev_printk(KERN_INFO, &udev->dev, "%s: %s\n", id, buf);
-	kfree(buf);
+		dev_printk(KERN_INFO, &udev->dev, "%s: %s\n", id, *info = buf);
 }
 
-#else
-static inline void show_string(struct usb_device *udev, char *id, int index)
-{}
-#endif
-
 /**
  * usb_new_device - perform initial device setup (usbcore-internal)
  * @udev: newly addressed device (in ADDRESS state)
@@ -1057,12 +1054,15 @@ int usb_new_device(struct usb_device *ud
 
 	if (udev->descriptor.iProduct)
 		show_string(udev, "Product",
+				&udev->static_product,
 				udev->descriptor.iProduct);
 	if (udev->descriptor.iManufacturer)
 		show_string(udev, "Manufacturer",
+				&udev->static_vendor,
 				udev->descriptor.iManufacturer);
 	if (udev->descriptor.iSerialNumber)
 		show_string(udev, "SerialNumber",
+				&udev->static_serial,
 				udev->descriptor.iSerialNumber);
 
 	/* put device-specific files into sysfs */
diff -purNX /suse/olh/kernel/kernel_exclude.txt ../linux-2.6.8-rc3.orig/drivers/usb/core/sysfs.c ./drivers/usb/core/sysfs.c
--- ../linux-2.6.8-rc3.orig/drivers/usb/core/sysfs.c	2004-08-05 12:05:52.000000000 +0000
+++ ./drivers/usb/core/sysfs.c	2004-08-05 12:11:10.798839338 +0000
@@ -72,7 +72,9 @@ static ssize_t  show_##name(struct devic
 	int len;							\
 									\
 	udev = to_usb_device (dev);					\
-	len = usb_string(udev, udev->descriptor.field, buf, PAGE_SIZE);	\
+	if (!udev->field)						\
+		return 0;						\
+	len = snprintf(buf, 256, "%s", udev->field);			\
 	if (len < 0)							\
 		return 0;						\
 	buf[len] = '\n';						\
@@ -81,9 +83,9 @@ static ssize_t  show_##name(struct devic
 }									\
 static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL);
 
-usb_string_attr(product, iProduct);
-usb_string_attr(manufacturer, iManufacturer);
-usb_string_attr(serial, iSerialNumber);
+usb_string_attr(product, static_product);     /* iProduct */
+usb_string_attr(manufacturer, static_vendor); /* iManufacturer */
+usb_string_attr(serial, static_serial);       /* iSerialNumber */
 
 static ssize_t
 show_speed (struct device *dev, char *buf)
diff -purNX /suse/olh/kernel/kernel_exclude.txt ../linux-2.6.8-rc3.orig/include/linux/usb.h ./include/linux/usb.h
--- ../linux-2.6.8-rc3.orig/include/linux/usb.h	2004-08-05 12:05:56.000000000 +0000
+++ ./include/linux/usb.h	2004-08-05 12:13:30.035495430 +0000
@@ -329,6 +329,9 @@ struct usb_device {
 
 	int maxchild;			/* Number of ports if hub */
 	struct usb_device *children[USB_MAXCHILDREN];
+	char *static_vendor;
+	char *static_product;
+	char *static_serial;
 };
 #define	to_usb_device(d) container_of(d, struct usb_device, dev)
 
