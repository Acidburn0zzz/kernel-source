From: Jeff Mahoney <jeffm@suse.com>
Subject: [PATCH] apparmor: work around new should_remove_suid() case.
Patch-mainline: never

 This patch is a workaround and shouldn't see mainline. It's here just so the
 update to 2.6.22-rc2-git7 still works properly.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>

---
 fs/namei.c         |    5 ++++-
 fs/open.c          |   14 +++++++++-----
 include/linux/fs.h |    2 +-
 3 files changed, 14 insertions(+), 7 deletions(-)

--- a/fs/namei.c	2007-05-25 14:27:43.000000000 -0400
+++ b/fs/namei.c	2007-05-25 14:29:43.000000000 -0400
@@ -1596,9 +1596,12 @@ int may_open(struct nameidata *nd, int a
 		 */
 		error = locks_verify_locked(inode);
 		if (!error) {
+			struct path path = { .mnt = nd->mnt,
+			                     .dentry = dentry };
 			DQUOT_INIT(inode);
 			
-			error = do_truncate(dentry, 0, ATTR_MTIME|ATTR_CTIME, NULL);
+			error = do_truncate(&path, 0, ATTR_MTIME|ATTR_CTIME,
+			                    NULL);
 		}
 		put_write_access(inode);
 		if (error)
--- a/fs/open.c	2007-05-25 14:27:43.000000000 -0400
+++ b/fs/open.c	2007-05-25 14:29:43.000000000 -0400
@@ -193,11 +193,12 @@ out:
 	return error;
 }
 
-int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
+int do_truncate(struct path *path, loff_t length, unsigned int time_attrs,
 	struct file *filp)
 {
 	int err;
 	struct iattr newattrs;
+	struct dentry *dentry = path->dentry;
 
 	/* Not pretty: "inode->i_size" shouldn't really be signed. But it is. */
 	if (length < 0)
@@ -211,7 +212,7 @@ int do_truncate(struct dentry *dentry, l
 	}
 
 	/* Remove suid/sgid on truncate too */
-	newattrs.ia_valid |= should_remove_suid(dentry);
+	newattrs.ia_valid |= should_remove_suid(path);
 
 	mutex_lock(&dentry->d_inode->i_mutex);
 	err = notify_change(dentry, &newattrs);
@@ -268,8 +269,9 @@ static long do_sys_truncate(const char _
 
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
+		struct path path = { .mnt = nd.mnt, .dentry = nd.dentry };
 		DQUOT_INIT(inode);
-		error = do_truncate(nd.dentry, length, 0, NULL);
+		error = do_truncate(&path, length, 0, NULL);
 	}
 	put_write_access(inode);
 
@@ -320,8 +322,10 @@ static long do_sys_ftruncate(unsigned in
 		goto out_putf;
 
 	error = locks_verify_truncate(inode, file, length);
-	if (!error)
-		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
+	if (!error) {
+		error = do_truncate(&file->f_path, length,
+		                    ATTR_MTIME|ATTR_CTIME, file);
+	}
 out_putf:
 	fput(file);
 out:
--- a/include/linux/fs.h	2007-05-25 14:29:42.000000000 -0400
+++ b/include/linux/fs.h	2007-05-25 14:29:51.000000000 -0400
@@ -1470,7 +1470,7 @@ static inline int break_lease(struct ino
 
 /* fs/open.c */
 
-extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
+extern int do_truncate(struct path *, loff_t start, unsigned int time_attrs,
 		       struct file *filp);
 extern long do_sys_open(int fdf, const char __user *filename, int flags,
 			int mode);
