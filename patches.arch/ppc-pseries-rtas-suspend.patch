Subject: Panic during ibm,suspend-me RTAS call
From: boutcher@us.ibm.com
References: 171016 - LTC23499

This patch adds and additional firmware call before the suspend-me call that
check whether the firmware state is suspendable.  The problem was that we were
making suspend-me calls when the firware was still cleaning up from the last
suspend, and things were going seriously bad.

Signed-off-by: Olaf Hering <olh@suse.de>
---
 arch/powerpc/kernel/rtas.c   |   22 ++++++++++++++++++++++
 include/asm-powerpc/hvcall.h |   10 ++++++++++
 2 files changed, 32 insertions(+)

Index: linux-2.6.16/arch/powerpc/kernel/rtas.c
===================================================================
--- linux-2.6.16.orig/arch/powerpc/kernel/rtas.c
+++ linux-2.6.16/arch/powerpc/kernel/rtas.c
@@ -606,9 +606,31 @@ out:
 static int rtas_ibm_suspend_me(struct rtas_args *args)
 {
 	int i;
+	long state;
+	long rc;
+	unsigned long dummy;
 
 	struct rtas_suspend_me_data data;
 
+	/* Make sure the state is valid */
+	rc = plpar_hcall(H_VASI_STATE,
+			 ((u64)args->args[0] << 32) | args->args[1],
+			 0, 0, 0,
+			 &state, &dummy, &dummy);
+
+	if (rc) {
+		printk(KERN_ERR "rtas_ibm_suspend_me: vasi_state returned %ld\n",rc);
+		return rc;
+	} else if (state == H_VASI_ENABLED) {
+		args->args[args->nargs] = -9004; /* architected value to userland */
+		return 0;
+	} else if (state != H_VASI_SUSPENDING) {
+		printk(KERN_ERR "rtas_ibm_suspend_me: vasi_state returned state %ld\n",
+		       state);
+		args->args[args->nargs] = -1;
+		return 0;
+	}
+
 	data.waiting = 1;
 	data.args = args;
 
Index: linux-2.6.16/include/asm-powerpc/hvcall.h
===================================================================
--- linux-2.6.16.orig/include/asm-powerpc/hvcall.h
+++ linux-2.6.16/include/asm-powerpc/hvcall.h
@@ -60,6 +60,15 @@
 #define H_PP1			(1UL<<(63-62))
 #define H_PP2			(1UL<<(63-63))
 
+/* VASI States */
+#define H_VASI_INVALID          0
+#define H_VASI_ENABLED          1
+#define H_VASI_ABORTED          2
+#define H_VASI_SUSPENDING       3
+#define H_VASI_SUSPENDED        4
+#define H_VASI_RESUMED          5
+#define H_VASI_COMPLETED        6
+
 /* DABRX flags */
 #define H_DABRX_HYPERVISOR	(1UL<<(63-61))
 #define H_DABRX_KERNEL		(1UL<<(63-62))
@@ -118,6 +127,7 @@
 #define H_FREE_VTERM		0x158
 #define H_POLL_PENDING	        0x1D8
 #define H_JOIN			0x298
+#define H_VASI_STATE            0x2A4
 #define H_ENABLE_CRQ		0x2B0
 
 #ifndef __ASSEMBLY__
