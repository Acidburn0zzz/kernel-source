From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: IBM Codedrop 2006-01-09 - linux-2.6.15-s390-base-14-october2005.diff

[patch] kerntypes.

s390 core changes:
 - Remove rule to generate kernel listing.
 - Add code to generate kerntypes for use with the lkcd utils.

Acked-by: Hannes Reinecke <hare@suse.de>

---

 arch/s390/Makefile         |    4 +--
 arch/s390/boot/Makefile    |   18 +++++++++----
 arch/s390/boot/kerntypes.c |   58 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 72 insertions(+), 8 deletions(-)

diff -urpN linux-2.6/arch/s390/boot/kerntypes.c linux-2.6-patched/arch/s390/boot/kerntypes.c
--- linux-2.6/arch/s390/boot/kerntypes.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6-patched/arch/s390/boot/kerntypes.c	2006-01-09 15:25:41.000000000 +0100
@@ -0,0 +1,58 @@
+/*
+ * kerntypes.c
+ *
+ * Dummy module that includes headers for all kernel types of interest.
+ * The kernel type information is used by the lcrash utility when
+ * analyzing system crash dumps or the live system. Using the type
+ * information for the running system, rather than kernel header files,
+ * makes for a more flexible and robust analysis tool.
+ *
+ * This source code is released under the GNU GPL.
+ */
+
+/* generate version for this file */
+typedef char *COMPILE_VERSION;
+
+/* General linux types */
+
+#include <linux/autoconf.h>
+#include <linux/compile.h>
+#include <linux/config.h>
+#include <linux/utsname.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+
+#include <asm/lowcore.h>
+#include <asm/debug.h>
+#include <asm/ccwdev.h>
+#include <asm/ccwgroup.h>
+#include <asm/qdio.h>
+
+/* channel subsystem driver */
+#include "drivers/s390/cio/cio.h"
+#include "drivers/s390/cio/chsc.h"
+#include "drivers/s390/cio/css.h"
+#include "drivers/s390/cio/device.h"
+#include "drivers/s390/cio/qdio.h"
+
+/* dasd device driver */
+#include "drivers/s390/block/dasd_int.h"
+#include "drivers/s390/block/dasd_diag.h"
+#include "drivers/s390/block/dasd_eckd.h"
+#include "drivers/s390/block/dasd_fba.h"
+
+/* networking drivers */
+#include "drivers/s390/net/fsm.h"
+#include "drivers/s390/net/iucv.h"
+#include "drivers/s390/net/lcs.h"
+
+/* zfcp device driver */
+#include "drivers/s390/scsi/zfcp_def.h"
+#include "drivers/s390/scsi/zfcp_fsf.h"
+
+/* include sched.c for types:
+ *    - struct prio_array
+ *    - struct runqueue
+ */
+#include "kernel/sched.c"
diff -urpN linux-2.6/arch/s390/boot/Makefile linux-2.6-patched/arch/s390/boot/Makefile
--- linux-2.6/arch/s390/boot/Makefile	2006-01-03 04:21:10.000000000 +0100
+++ linux-2.6-patched/arch/s390/boot/Makefile	2006-01-09 15:25:41.000000000 +0100
@@ -2,17 +2,23 @@
 # Makefile for the linux s390-specific parts of the memory manager.
 #
 
-COMPILE_VERSION := __linux_compile_version_id__`hostname |  \
-			tr -c '[0-9A-Za-z]' '_'`__`date | \
-			tr -c '[0-9A-Za-z]' '_'`_t
+COMPILE_VERSION := __linux_compile_version_id__$(shell hostname |  \
+			tr -c '[0-9A-Za-z]' '_')__$(shell date | \
+			tr -c '[0-9A-Za-z]' '_')_t
 
-EXTRA_CFLAGS  := -DCOMPILE_VERSION=$(COMPILE_VERSION) -gstabs -I.
 
-targets := image
+chk-option = $(shell if $(CC) $(CFLAGS) $(1) -S -o /dev/null -xc /dev/null \
+             > /dev/null 2>&1; then echo "$(1)"; fi ;)
+EXTRA_CFLAGS  := -DCOMPILE_VERSION=$(COMPILE_VERSION) -g -I.
+# Assume we don't need the flag if the compiler doesn't know about it
+EXTRA_CFLAGS  += $(call chk-option,-fno-eliminate-unused-debug-types)
+
+
+targets := image kerntypes.o
 
 $(obj)/image: vmlinux FORCE
 	$(call if_changed,objcopy)
 
 install: $(CONFIGURE) $(obj)/image
 	sh -x  $(srctree)/$(obj)/install.sh $(KERNELRELEASE) $(obj)/image \
-	      System.map Kerntypes "$(INSTALL_PATH)"
+	      System.map "$(INSTALL_PATH)"
diff -urpN linux-2.6/arch/s390/Makefile linux-2.6-patched/arch/s390/Makefile
--- linux-2.6/arch/s390/Makefile	2006-01-03 04:21:10.000000000 +0100
+++ linux-2.6-patched/arch/s390/Makefile	2006-01-09 15:25:41.000000000 +0100
@@ -89,12 +89,12 @@ drivers-$(CONFIG_OPROFILE)	+= arch/s390/
 
 boot		:= arch/$(ARCH)/boot
 
-all: image
+all: image kerntypes.o
 
 install: vmlinux
 	$(Q)$(MAKE) $(build)=$(boot) $@
 
-image: vmlinux
+image kerntypes.o: vmlinux
 	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
 
 archclean:
