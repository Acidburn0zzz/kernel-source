From: Julian Wiedmann <jwi@linux.ibm.com>
Subject: s390/qeth: invoke softirqs after napi_schedule()
Patch-mainline: v4.20-rc1
Git-commit: 4d19db777a2f32c9b76f6fd517ed8960576cb43e
References: FATE#326377, LTC#169210, bsc#1115382

Summary:        qeth: Full-blown TCP Segmentation Offload
Description:    As of now, qeth only supports TCP Segmentation Offload (TSO)
                for IPv4 in Layer3 devices. This feature extends the existing
                support to IPv6, and adds support for TSO in both IP variants
                for Layer2.

                To cleanly pull in all the necessary changes to the transmit
                code, update the qeth driver to the current 4.20 level.


Upstream-Description:

             s390/qeth: invoke softirqs after napi_schedule()

             Calling napi_schedule() from process context does not ensure that the
             NET_RX softirq is run in a timely fashion. So trigger it manually.

             This is no big issue with current code. A call to ndo_open() is usually
             followed by a ndo_set_rx_mode() call, and for qeth this contains a
             spin_unlock_bh(). Except for OSN, where qeth_l2_set_rx_mode() bails out
             early.
             Nevertheless it's best to not depend on this behaviour, and just fix
             the issue at its source like all other drivers do. For instance see
             commit 83a0c6e58901 ("i40e: Invoke softirqs after napi_reschedule").

             Fixes: a1c3ed4c9ca0 ("qeth: NAPI support for l2 and l3 discipline")
             Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
             Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/s390/net/qeth_l2_main.c |    3 +++
 drivers/s390/net/qeth_l3_main.c |    3 +++
 2 files changed, 6 insertions(+)

--- a/drivers/s390/net/qeth_l2_main.c
+++ b/drivers/s390/net/qeth_l2_main.c
@@ -755,7 +755,10 @@ static int __qeth_l2_open(struct net_dev
 
 	if (qdio_stop_irq(card->data.ccwdev, 0) >= 0) {
 		napi_enable(&card->napi);
+		local_bh_disable();
 		napi_schedule(&card->napi);
+		/* kick-start the NAPI softirq: */
+		local_bh_enable();
 	} else
 		rc = -EIO;
 	return rc;
--- a/drivers/s390/net/qeth_l3_main.c
+++ b/drivers/s390/net/qeth_l3_main.c
@@ -2299,7 +2299,10 @@ static int __qeth_l3_open(struct net_dev
 
 	if (qdio_stop_irq(card->data.ccwdev, 0) >= 0) {
 		napi_enable(&card->napi);
+		local_bh_disable();
 		napi_schedule(&card->napi);
+		/* kick-start the NAPI softirq: */
+		local_bh_enable();
 	} else
 		rc = -EIO;
 	return rc;
