Date: Thu, 29 Apr 2004 18:58:46 +1000
From: Anton Blanchard <anton@samba.org>
To: olh@suse.de
Subject: # 7754


Hi,

We have been looking at optimising our SLB reload path, its being hit
very heavily in some benchmarks. There are a few patches on that bug but
there are only 2 things I feel comfortable merging at this point.

The patch below removes naca->slb_size, its hardcoded everywhere so the
variable just slows us down.

Anton

---

diff -puN arch/ppc64/kernel/asm-offsets.c~remove_slb_size arch/ppc64/kernel/asm-offsets.c
--- linux-2.6.5/arch/ppc64/kernel/asm-offsets.c~remove_slb_size	2004-04-29 01:00:26.494856915 -0500
+++ linux-2.6.5-anton/arch/ppc64/kernel/asm-offsets.c	2004-04-29 01:00:26.570844867 -0500
@@ -73,7 +73,6 @@ int main(void)
         DEFINE(ICACHEL1LINESIZE, offsetof(struct systemcfg, iCacheL1LineSize));
         DEFINE(ICACHEL1LOGLINESIZE, offsetof(struct naca_struct, iCacheL1LogLineSize));
         DEFINE(ICACHEL1LINESPERPAGE, offsetof(struct naca_struct, iCacheL1LinesPerPage));
-	DEFINE(SLBSIZE, offsetof(struct naca_struct, slb_size));
 	DEFINE(PLATFORM, offsetof(struct systemcfg, platform));
 
 	/* paca */
diff -puN arch/ppc64/kernel/head.S~remove_slb_size arch/ppc64/kernel/head.S
--- linux-2.6.5/arch/ppc64/kernel/head.S~remove_slb_size	2004-04-29 01:00:26.505855171 -0500
+++ linux-2.6.5-anton/arch/ppc64/kernel/head.S	2004-04-29 01:00:26.576843915 -0500
@@ -1120,8 +1120,6 @@ _GLOBAL(do_slb_bolted)
 	 */
 
 	/* r20 = paca */
-	/* use a cpu feature mask if we ever change our slb size */
-SLB_NUM_ENTRIES = 64
 1:	ld	r22,PACASTABRR(r20)
 	addi	r21,r22,1
 	cmpdi	r21,SLB_NUM_ENTRIES
diff -puN arch/ppc64/kernel/iSeries_setup.c~remove_slb_size arch/ppc64/kernel/iSeries_setup.c
--- linux-2.6.5/arch/ppc64/kernel/iSeries_setup.c~remove_slb_size	2004-04-29 01:00:26.520852793 -0500
+++ linux-2.6.5-anton/arch/ppc64/kernel/iSeries_setup.c	2004-04-29 01:00:26.600840111 -0500
@@ -562,11 +562,6 @@ static void __init build_iSeries_Memory_
 	lmb_add(0, systemcfg->physicalMemorySize);
 	lmb_analyze();	/* ?? */
 	lmb_reserve(0, __pa(klimit));
-
-	/* 
-	 * Hardcode to GP size.  I am not sure where to get this info. DRENG
-	 */
-	naca->slb_size = 64;
 }
 
 /*
diff -puN arch/ppc64/kernel/prom.c~remove_slb_size arch/ppc64/kernel/prom.c
--- linux-2.6.5/arch/ppc64/kernel/prom.c~remove_slb_size	2004-04-29 01:00:26.536850257 -0500
+++ linux-2.6.5-anton/arch/ppc64/kernel/prom.c	2004-04-29 01:00:26.588842013 -0500
@@ -458,13 +458,6 @@ static void __init prom_initialize_naca(
 		PROM_BUG();
 	}
 
-	/* 
-	 * Hardcode to GP size.  I am not sure where to get this info
-	 * in general, as there does not appear to be a slb-size OF
-	 * entry.  At least in Condor and earlier.  DRENG 
-	 */
-	_naca->slb_size = 64;
-
 	/* Add an eye catcher and the systemcfg layout version number */
 	strcpy(_systemcfg->eye_catcher, RELOC("SYSTEMCFG:PPC64"));
 	_systemcfg->version.major = SYSTEMCFG_MAJOR;
diff -puN arch/ppc64/kernel/stab.c~remove_slb_size arch/ppc64/kernel/stab.c
--- linux-2.6.5/arch/ppc64/kernel/stab.c~remove_slb_size	2004-04-29 01:00:26.541849464 -0500
+++ linux-2.6.5-anton/arch/ppc64/kernel/stab.c	2004-04-29 01:00:43.214735391 -0500
@@ -347,7 +347,7 @@ static void make_slbe(unsigned long esid
 	do {
 		entry = castout_entry;
 		castout_entry++; 
-		if (castout_entry >= naca->slb_size)
+		if (castout_entry >= SLB_NUM_ENTRIES)
 			castout_entry = 1; 
 		asm volatile("slbmfee  %0,%1" : "=r" (esid_data) : "r" (entry));
 	} while (esid_data.data.v &&
diff -puN arch/ppc64/xmon/xmon.c~remove_slb_size arch/ppc64/xmon/xmon.c
--- linux-2.6.5/arch/ppc64/xmon/xmon.c~remove_slb_size	2004-04-29 01:00:26.552847720 -0500
+++ linux-2.6.5-anton/arch/ppc64/xmon/xmon.c	2004-04-29 01:00:26.604839476 -0500
@@ -2071,7 +2071,7 @@ static void dump_slb(void)
 
 	printf("SLB contents of cpu %d\n", smp_processor_id());
 
-	for (i = 0; i < naca->slb_size; i++) {
+	for (i = 0; i < SLB_NUM_ENTRIES; i++) {
 		asm volatile("slbmfee  %0,%1" : "=r" (tmp) : "r" (i));
 		printf("%02d %016lx ", i, tmp);
 
diff -puN include/asm-ppc64/naca.h~remove_slb_size include/asm-ppc64/naca.h
--- linux-2.6.5/include/asm-ppc64/naca.h~remove_slb_size	2004-04-29 01:00:26.557846927 -0500
+++ linux-2.6.5-anton/include/asm-ppc64/naca.h	2004-04-29 01:00:26.595840903 -0500
@@ -30,7 +30,7 @@ struct naca_struct {
 	u64 log;                        /* Ptr to log buffer         0x30 */
 	u64 serialPortAddr;		/* Phy addr of serial port   0x38 */
 	u64 interrupt_controller;	/* Type of int controller    0x40 */ 
-	u64 slb_size;			/* SLB size in entries       0x48 */
+	u64 unused1;			/* was SLB size in entries   0x48 */
 	u64 pftSize;			/* Log 2 of page table size  0x50 */
 	void *systemcfg;		/* Pointer to systemcfg data 0x58 */
 	u32 dCacheL1LogLineSize;	/* L1 d-cache line size Log2 0x60 */
diff -puN include/asm-ppc64/processor.h~remove_slb_size include/asm-ppc64/processor.h
--- linux-2.6.5/include/asm-ppc64/processor.h~remove_slb_size	2004-04-29 01:00:26.562846135 -0500
+++ linux-2.6.5-anton/include/asm-ppc64/processor.h	2004-04-29 01:00:26.597840586 -0500
@@ -635,4 +635,10 @@ static inline void prefetchw(const void 
 
 #endif /* ASSEMBLY */
 
+/* 
+ * Number of entries in the SLB. If this ever changes we should handle
+ * it with a use a cpu feature fixup.
+ */
+#define SLB_NUM_ENTRIES 64
+
 #endif /* __ASM_PPC64_PROCESSOR_H */

_

