diff -u -r1.5 statistic.h
--- linux/include/linux/statistic.h	8 Dec 2005 16:31:36 -0000	1.5
+++ linux/include/linux/statistic.h	15 Feb 2006 12:53:08 -0000
@@ -36,6 +36,7 @@
 
 #define STATISTIC_FILENAME_DATA	"data"
 #define STATISTIC_FILENAME_DEF	"definition"
+#define STATISTIC_FILENAME_DISCLAIMER "DISCLAIMER"
 
 #define STATISTIC_NAME_SIZE	64
 
@@ -194,6 +195,7 @@
 	struct dentry		*root_dir;
 	struct list_head	interface_lh;
 	struct semaphore	sem;
+	struct dentry		*disclaimer;
 };
 
 #ifdef CONFIG_STATISTICS
diff -u -r1.6 statistic.c
--- linux/lib/statistic.c	12 Jan 2006 03:13:14 -0000	1.6
+++ linux/lib/statistic.c	15 Feb 2006 12:53:08 -0000
@@ -153,6 +153,8 @@
 
 static int statistic_interface_data_open(struct inode *, struct file *);
 
+static int statistic_interface_disclaimer_open(struct inode *, struct file *);
+
 struct file_operations statistic_def_file_ops = {
 	.owner		= THIS_MODULE,
 	.read		= statistic_interface_generic_read,
@@ -168,6 +170,13 @@
 	.release	= statistic_interface_generic_close,
 };
 
+struct file_operations statistic_disclaimer_file_ops = {
+	.owner		= THIS_MODULE,
+	.read		= statistic_interface_generic_read,
+	.open		= statistic_interface_disclaimer_open,
+	.release	= statistic_interface_generic_close,
+};
+
 /*
  * FIXME:
  * Is there any way to get rid of statistic_strings by merging it somehow into
@@ -238,6 +247,12 @@
 	sema_init(&statistic_globals.sem, 1);
 	INIT_LIST_HEAD(&statistic_globals.interface_lh);
 	statistic_globals.root_dir = debugfs_create_dir(STATISTIC_ROOT_DIR, NULL);
+	statistic_globals.disclaimer = debugfs_create_file(
+					STATISTIC_FILENAME_DISCLAIMER,
+					S_IFREG | S_IRUSR,
+					statistic_globals.root_dir,
+					NULL,
+					&statistic_disclaimer_file_ops);
 	return 0;
 }
 
@@ -247,6 +262,7 @@
 	 * FIXME: any need to cleanup any statistic possibly still allocated?
 	 * (would only concern leftovers of exploiters - someone elses problem?)
 	 */
+	debugfs_remove(statistic_globals.disclaimer);
 	debugfs_remove(statistic_globals.root_dir);
 }
 
@@ -1722,7 +1738,6 @@
 		struct statistic_file_private **private)
 {
 	*interface = (struct statistic_interface *) inode->u.generic_ip;
-	BUG_ON(!interface);
 
 	*private = kmalloc(sizeof(struct statistic_file_private), GFP_KERNEL);
 	if (!(*private))
@@ -2165,6 +2180,27 @@
 	statistic_unlock(interface, flags);
 
 	return retval;
+}
+
+static int statistic_interface_disclaimer_open(struct inode *inode, struct file *file)
+{
+	struct statistic_interface *interface;
+	struct statistic_file_private *private;
+	int retval;
+	struct sgrb_seg *seg;
+
+	retval = statistic_interface_generic_open(
+			inode, file, &interface, &private);
+	if (retval)
+		return retval;
+	seg = sgrb_seg_find(&private->read_seg_lh, 256, GFP_KERNEL);
+	if (!seg)
+		return -ENOMEM;
+	seg->offset += sprintf(seg->address + seg->offset,
+		"Usage and content of this interface are preliminary. "
+		"It is subject to further development. "
+		"Future changes are likely.\n");
+	return 0;
 }
 
 postcore_initcall(statistic_init);
