Subject: PS3: Fix storage probe logic

With the current PS3 storage probe logic there is a chance that device
regions may appear in the repository some time after the device appears.
Add a check to return -EAGAIN when a device is found in the repository
with no regions.

To make this more robust, the probe could cycle through the bus devices
until no changes are found.  The current logic waits on each device until
it finds some regions, then goes to the next device.  This will loop
endlessly on the device if no regions ever appear for that device, and
also will only register the regions found at the time the first region
is found.  Seems to work OK though.

CC: Geert Uytterhoeven <Geert.Uytterhoeven@sonycom.com>
Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
---
 arch/powerpc/platforms/ps3/device-init.c |   36 +++++++++++++++++++------------
 1 file changed, 23 insertions(+), 13 deletions(-)

--- a/arch/powerpc/platforms/ps3/device-init.c	2007-10-31 17:44:05.000000000 -0400
+++ b/arch/powerpc/platforms/ps3/device-init.c	2007-10-31 17:44:05.000000000 -0400
@@ -423,6 +423,9 @@ static int ps3_setup_storage_dev(const s
 		 repo->dev_index, repo->dev_type, port, blk_size, num_blocks,
 		 num_regions);
 
+	if (!num_regions)
+		return -EAGAIN;
+
 	p = kzalloc(sizeof(struct ps3_storage_device) +
 		    num_regions * sizeof(struct ps3_storage_region),
 		    GFP_KERNEL);
@@ -624,32 +627,28 @@ static int ps3_register_repository_devic
 	case PS3_DEV_TYPE_STOR_DISK:
 		result = ps3_setup_storage_dev(repo, PS3_MATCH_ID_STOR_DISK);
 
-		/* Some devices are not accessable from the Other OS lpar. */
-		if (result == -ENODEV) {
-			result = 0;
-			pr_debug("%s:%u: not accessable\n", __func__,
+		if (result == -EAGAIN)
+			pr_debug("%s:%u: device not ready\n", __func__,
 				 __LINE__);
-		}
-
-		if (result)
+		else if (result)
 			pr_debug("%s:%u ps3_setup_storage_dev failed\n",
 				 __func__, __LINE__);
 		break;
-
 	case PS3_DEV_TYPE_STOR_ROM:
 		result = ps3_setup_storage_dev(repo, PS3_MATCH_ID_STOR_ROM);
-		if (result)
+		if (result == -EAGAIN)
+			pr_debug("%s:%u: device not ready\n", __func__,
+				 __LINE__);
+		else if (result)
 			pr_debug("%s:%u ps3_setup_storage_dev failed\n",
 				 __func__, __LINE__);
 		break;
-
 	case PS3_DEV_TYPE_STOR_FLASH:
 		result = ps3_setup_storage_dev(repo, PS3_MATCH_ID_STOR_FLASH);
 		if (result)
 			pr_debug("%s:%u ps3_setup_storage_dev failed\n",
 				 __func__, __LINE__);
 		break;
-
 	default:
 		result = 0;
 		pr_debug("%s:%u: unsupported dev_type %u\n", __func__, __LINE__,
@@ -663,6 +662,13 @@ static int ps3_register_repository_devic
  * ps3_probe_thread - Background repository probing at system startup.
  *
  * This implementation only supports background probing on a single bus.
+ *
+ * To make this more robust, the probe could cycle through the bus devices
+ * until no changes are found.  The current logic waits on each device until
+ * it finds some regions, then goes to the next device.  This will loop
+ * endlessly on the device if no regions ever appear for that device, and
+ * also will only register the regions found at the time the first region
+ * is found.  Seems to work OK though.
  */
 
 static int ps3_probe_thread(void *data)
@@ -691,9 +697,13 @@ static int ps3_probe_thread(void *data)
 				pr_debug("%s:%u: found device (%u:%u:%u)\n",
 					 __func__, __LINE__, repo->bus_index,
 					 repo->dev_index, repo->dev_type);
-				ps3_register_repository_device(repo);
-				ps3_repository_bump_device(repo);
+				result = ps3_register_repository_device(repo);
+
 				ms = 250;
+				if (result == -EAGAIN)
+					break;
+
+				ps3_repository_bump_device(repo);
 			}
 		} while (!result);
 
