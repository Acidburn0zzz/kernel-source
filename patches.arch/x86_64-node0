diff -u linux-2.6.6-amd64/arch/i386/mach-default/topology.c-NODE0 linux-2.6.6-amd64/arch/i386/mach-default/topology.c
--- linux-2.6.6-amd64/arch/i386/mach-default/topology.c-NODE0	2004-03-21 21:12:03.000000000 +0100
+++ linux-2.6.6-amd64/arch/i386/mach-default/topology.c	2004-05-18 20:00:04.000000000 +0200
@@ -41,8 +41,10 @@
 {
 	int i;
 
-	for (i = 0; i < num_online_nodes(); i++)
-		arch_register_node(i);
+	for (i = 0; i < MAX_NUMNODES; i++) {
+		if (node_online(i))
+			arch_register_node(i);
+	}
 	for (i = 0; i < NR_CPUS; i++)
 		if (cpu_possible(i)) arch_register_cpu(i);
 	return 0;
diff -u linux-2.6.6-amd64/arch/x86_64/mm/init.c-NODE0 linux-2.6.6-amd64/arch/x86_64/mm/init.c
--- linux-2.6.6-amd64/arch/x86_64/mm/init.c-NODE0	2004-05-09 12:36:59.000000000 +0200
+++ linux-2.6.6-amd64/arch/x86_64/mm/init.c	2004-05-18 19:59:32.000000000 +0200
@@ -512,9 +512,7 @@
 	/* Should check here against the e820 map to avoid double free */ 
 #ifdef CONFIG_DISCONTIGMEM
 	int nid = phys_to_nid(phys);
-	if (phys < HIGH_MEMORY && nid) 
-		panic("reserve of %lx at node %d", phys, nid);
-	reserve_bootmem_node(NODE_DATA(nid), phys, len);
+  	reserve_bootmem_node(NODE_DATA(nid), phys, len);
 #else       		
 	reserve_bootmem(phys, len);    
 #endif
diff -u linux/include/asm-i386/cpu.h-o linux/include/asm-i386/cpu.h
--- linux/include/asm-i386/cpu.h-o	2004-03-21 21:11:56.000000000 +0100
+++ linux/include/asm-i386/cpu.h	2004-05-18 20:29:53.000000000 +0200
@@ -17,7 +17,8 @@
 	struct node *parent = NULL;
 	
 #ifdef CONFIG_NUMA
-	parent = &node_devices[cpu_to_node(num)].node;
+	if (node_online(num))
+		parent = &node_devices[cpu_to_node(num)].node;
 #endif /* CONFIG_NUMA */
 
 	return register_cpu(&cpu_devices[num].cpu, num, parent);
