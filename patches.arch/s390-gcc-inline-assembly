Index: linux-2.6.1/include/asm-s390/atomic.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/atomic.h,v
retrieving revision 1.6
diff -u -r1.6 atomic.h
--- linux-2.6.1/include/asm-s390/atomic.h	16 Jan 2004 12:10:46 -0000	1.6
+++ linux-2.6.1/include/asm-s390/atomic.h	16 Jan 2004 14:37:42 -0000
@@ -36,8 +36,10 @@
                              "   cs    %0,%1,0(%3)\n"			\
                              "   jl    0b"				\
                              : "=&d" (old_val), "=&d" (new_val),	\
-			       "+m" (((atomic_t *)(ptr))->counter)	\
-			     : "a" (ptr), "d" (op_val) : "cc" );	\
+			       "=m" (((atomic_t *)(ptr))->counter)	\
+			     : "a" (ptr), "d" (op_val),			\
+			       "m" (((atomic_t *)(ptr))->counter)	\
+			     : "cc" );					\
 	new_val;							\
 })
 #define atomic_read(v)          ((v)->counter)
Index: linux-2.6.1/include/asm-s390/bitops.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/bitops.h,v
retrieving revision 1.19
diff -u -r1.19 bitops.h
--- linux-2.6.1/include/asm-s390/bitops.h	16 Jan 2004 12:20:00 -0000	1.19
+++ linux-2.6.1/include/asm-s390/bitops.h	16 Jan 2004 14:37:42 -0000
@@ -560,7 +560,8 @@
                 "   alr  %0,%2\n"
                 "4:"
                 : "=&a" (res), "=&d" (cmp), "=&a" (count)
-                : "a" (size), "a" (addr), "a" (&_zb_findmap) : "cc" );
+                : "a" (size), "a" (addr), "a" (&_zb_findmap),
+		  "m" (*addr) : "cc" );
         return (res < size) ? res : size;
 }
 
@@ -599,7 +600,8 @@
                 "   alr  %0,%2\n"
                 "4:"
                 : "=&a" (res), "=&d" (cmp), "=&a" (count)
-                : "a" (size), "a" (addr), "a" (&_sb_findmap) : "cc" );
+                : "a" (size), "a" (addr), "a" (&_sb_findmap),
+		  "m" (*addr) : "cc" );
         return (res < size) ? res : size;
 }
 
@@ -687,12 +689,9 @@
  */
 static inline unsigned long ffz(unsigned long word)
 {
-	unsigned long reg;
-        int result;
+        int result = 0;
 
-        __asm__("   slr  %0,%0\n"
-                "   lhi  %2,0xff\n"
-                "   tml  %1,0xffff\n"
+        __asm__("   tml  %1,0xffff\n"
                 "   jno  0f\n"
                 "   ahi  %0,16\n"
                 "   srl  %1,16\n"
@@ -703,8 +702,8 @@
                 "1: nr   %1,%2\n"
                 "   ic   %1,0(%1,%3)\n"
                 "   alr  %0,%1"
-                : "=&d" (result), "+a" (word), "=&d" (reg)
-                : "a" (&_zb_findmap) : "cc" );
+                : "+&d" (result), "+a" (word)
+                : "d" (0xff), "a" (&_zb_findmap) : "cc" );
         return result;
 }
 
@@ -714,11 +713,9 @@
  */
 static inline unsigned long __ffs (unsigned long word)
 {
-	unsigned long reg, result;
+	unsigned long result = 0;
 
-        __asm__("   slr  %0,%0\n"
-                "   lhi  %2,0xff\n"
-                "   tml  %1,0xffff\n"
+        __asm__("   tml  %1,0xffff\n"
                 "   jnz  0f\n"
                 "   ahi  %0,16\n"
                 "   srl  %1,16\n"
@@ -729,8 +726,8 @@
                 "1: nr   %1,%2\n"
                 "   ic   %1,0(%1,%3)\n"
                 "   alr  %0,%1"
-                : "=&d" (result), "+a" (word), "=&d" (reg)
-                : "a" (&_sb_findmap) : "cc" );
+                : "+&d" (result), "+a" (word)
+                : "d" (0xff), "a" (&_sb_findmap) : "cc" );
         return result;
 }
 
@@ -777,7 +774,8 @@
                 "   algr  %0,%2\n"
                 "5:"
                 : "=&a" (res), "=&d" (cmp), "=&a" (count)
-		: "a" (size), "a" (addr), "a" (&_zb_findmap) : "cc" );
+		: "a" (size), "a" (addr), "a" (&_zb_findmap),
+		  "m" (*addr) : "cc" );
         return (res < size) ? res : size;
 }
 
@@ -819,7 +817,8 @@
                 "   algr  %0,%2\n"
                 "5:"
                 : "=&a" (res), "=&d" (cmp), "=&a" (count)
-		: "a" (size), "a" (addr), "a" (&_sb_findmap) : "cc" );
+		: "a" (size), "a" (addr), "a" (&_sb_findmap),
+		  "m" (*addr) : "cc" );
         return (res < size) ? res : size;
 }
 
@@ -947,15 +946,13 @@
  */
 static inline unsigned long __ffs (unsigned long word)
 {
-        unsigned long reg, result;
+        unsigned long result = 0;
 
-        __asm__("   slgr %0,%0\n"
-                "   ltr  %1,%1\n"
+        __asm__("   ltr  %1,%1\n"
                 "   jnz  0f\n"
                 "   aghi %0,32\n"
                 "   srlg %1,%1,32\n"
-                "0: lghi %2,0xff\n"
-                "   tmll %1,0xffff\n"
+                "0: tmll %1,0xffff\n"
                 "   jnz  1f\n"
                 "   aghi %0,16\n"
                 "   srlg %1,%1,16\n"
@@ -966,8 +963,8 @@
                 "2: ngr  %1,%2\n"
                 "   ic   %1,0(%1,%3)\n"
                 "   algr %0,%1"
-                : "=&d" (result), "+a" (word), "=&d" (reg)
-                : "a" (&_sb_findmap) : "cc" );
+                : "+&d" (result), "+a" (word)
+                : "d" (0xff), "a" (&_sb_findmap) : "cc" );
         return result;
 }
 
@@ -1098,7 +1095,7 @@
 ext2_find_first_zero_bit(void *vaddr, unsigned int size)
 {
 	unsigned long cmp, count;
-        unsigned int res;
+        unsigned int res = 0;
 
         if (!size)
                 return 0;
@@ -1106,7 +1103,6 @@
                 "   lr   %2,%3\n"
                 "   ahi  %2,31\n"
                 "   srl  %2,5\n"
-                "   slr  %0,%0\n"
                 "0: cl   %1,0(%0,%4)\n"
                 "   jne  1f\n"
                 "   ahi  %0,4\n"
@@ -1129,8 +1125,9 @@
                 "   ic   %2,0(%2,%5)\n"
                 "   alr  %0,%2\n"
                 "4:"
-                : "=&a" (res), "=&d" (cmp), "=&a" (count)
-                : "a" (size), "a" (vaddr), "a" (&_zb_findmap) : "cc" );
+                : "+&a" (res), "=&d" (cmp), "=&a" (count)
+                : "a" (size), "a" (vaddr), "a" (&_zb_findmap),
+		  "m" (*(char *) vaddr) : "cc" );
         return (res < size) ? res : size;
 }
 
@@ -1139,7 +1136,7 @@
 {
         unsigned long *addr = vaddr;
         unsigned long *p = addr + (offset >> 5);
-        unsigned long word, reg;
+        unsigned long word;
         unsigned int bit = offset & 31UL, res;
 
         if (offset >= size)
@@ -1150,12 +1147,11 @@
                         "   icm  %0,2,1(%1)\n"
                         "   icm  %0,4,2(%1)\n"
                         "   icm  %0,8,3(%1)"
-                        : "=&a" (word) : "a" (p) : "cc" );
+                        : "=&a" (word) : "a" (p), "m" (*p) : "cc" );
 		word >>= bit;
                 res = bit;
                 /* Look for zero in first longword */
-                __asm__("   lhi  %2,0xff\n"
-                        "   tml  %1,0xffff\n"
+                __asm__("   tml  %1,0xffff\n"
                 	"   jno  0f\n"
                 	"   ahi  %0,16\n"
                 	"   srl  %1,16\n"
@@ -1166,8 +1162,8 @@
                 	"1: nr   %1,%2\n"
                 	"   ic   %1,0(%1,%3)\n"
                 	"   alr  %0,%1"
-                	: "+&d" (res), "+&a" (word), "=&d" (reg)
-                  	: "a" (&_zb_findmap) : "cc" );
+                	: "+&d" (res), "+&a" (word)
+                  	: "d" (0xff), "a" (&_zb_findmap) : "cc" );
                 if (res < 32)
 			return (p - addr)*32 + res;
                 p++;
@@ -1182,7 +1178,8 @@
 static inline unsigned long
 ext2_find_first_zero_bit(void *vaddr, unsigned long size)
 {
-        unsigned long res, cmp, count;
+        unsigned long cmp, count;
+        unsigned long res = 0;
 
         if (!size)
                 return 0;
@@ -1190,7 +1187,6 @@
                 "   lgr   %2,%3\n"
                 "   aghi  %2,63\n"
                 "   srlg  %2,%2,6\n"
-                "   slgr  %0,%0\n"
                 "0: clg   %1,0(%0,%4)\n"
                 "   jne   1f\n"
                 "   aghi  %0,8\n"
@@ -1216,8 +1212,9 @@
                 "   ic    %2,0(%2,%5)\n"
                 "   algr  %0,%2\n"
                 "5:"
-                : "=&a" (res), "=&d" (cmp), "=&a" (count)
-		: "a" (size), "a" (vaddr), "a" (&_zb_findmap) : "cc" );
+                : "+&a" (res), "=&d" (cmp), "=&a" (count)
+		: "a" (size), "a" (vaddr), "a" (&_zb_findmap),
+		  "m" (*(char *) vaddr) : "cc" );
         return (res < size) ? res : size;
 }
 
@@ -1273,11 +1270,16 @@
 
 /* Bitmap functions for the minix filesystem.  */
 /* FIXME !!! */
-#define minix_test_and_set_bit(nr,addr) test_and_set_bit(nr,addr)
-#define minix_set_bit(nr,addr) set_bit(nr,addr)
-#define minix_test_and_clear_bit(nr,addr) test_and_clear_bit(nr,addr)
-#define minix_test_bit(nr,addr) test_bit(nr,addr)
-#define minix_find_first_zero_bit(addr,size) find_first_zero_bit(addr,size)
+#define minix_test_and_set_bit(nr,addr) \
+	test_and_set_bit(nr,(unsigned long *)addr)
+#define minix_set_bit(nr,addr) \
+	set_bit(nr,(unsigned long *)addr)
+#define minix_test_and_clear_bit(nr,addr) \
+	test_and_clear_bit(nr,(unsigned long *)addr)
+#define minix_test_bit(nr,addr) \
+	test_bit(nr,(unsigned long *)addr)
+#define minix_find_first_zero_bit(addr,size) \
+	find_first_zero_bit(addr,size)
 
 #endif /* __KERNEL__ */
 
Index: linux-2.6.1/include/asm-s390/byteorder.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/byteorder.h,v
retrieving revision 1.4
diff -u -r1.4 byteorder.h
--- linux-2.6.1/include/asm-s390/byteorder.h	26 Nov 2003 13:26:06 -0000	1.4
+++ linux-2.6.1/include/asm-s390/byteorder.h	16 Jan 2004 14:37:42 -0000
@@ -50,7 +50,7 @@
 		"        icm   %0,4,2(%1)\n"
 		"        icm   %0,2,1(%1)\n"
 		"        ic    %0,0(%1)"
-		: "=&d" (result) : "a" (x) : "cc" );
+		: "=&d" (result) : "a" (x), "m" (*x) : "cc" );
 #else /* __s390x__ */
 		"   lrv  %0,%1"
 		: "=d" (result) : "m" (*x) );
@@ -85,7 +85,7 @@
 #ifndef __s390x__
 		"        icm   %0,2,1(%1)\n"
 		"        ic    %0,0(%1)\n"
-		: "=&d" (result) : "a" (x) : "cc" );
+		: "=&d" (result) : "a" (x), "m" (*x) : "cc" );
 #else /* __s390x__ */
 		"   lrvh %0,%1"
 		: "=d" (result) : "m" (*x) );
Index: linux-2.6.1/include/asm-s390/checksum.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/checksum.h,v
retrieving revision 1.6
diff -u -r1.6 checksum.h
--- linux-2.6.1/include/asm-s390/checksum.h	31 Oct 2003 12:50:56 -0000	1.6
+++ linux-2.6.1/include/asm-s390/checksum.h	16 Jan 2004 14:37:42 -0000
@@ -42,7 +42,7 @@
 	__asm__ __volatile__ (
 		"0:  cksm %0,%1\n"	/* do checksum on longs */
 		"    jo   0b\n"
-		: "+&d" (sum), "+&a" (rp) : : "cc" );
+		: "+&d" (sum), "+&a" (rp) : "m" (*(char *) buff) : "cc" );
 #else /* __s390x__ */
         __asm__ __volatile__ (
                 "    lgr  2,%1\n"    /* address in gpr 2 */
@@ -50,7 +50,7 @@
                 "0:  cksm %0,2\n"    /* do checksum on longs */
                 "    jo   0b\n"
                 : "+&d" (sum)
-                : "d" (buff), "d" (len)
+                : "d" (buff), "d" (len), "m" (*(char *) buff)
                 : "cc", "2", "3" );
 #endif /* __s390x__ */
 	return sum;
@@ -70,7 +70,8 @@
 	__asm__ __volatile__ (
 		"0:  cksm %0,%1\n"    /* do checksum on longs */
 		"    jo   0b\n"
-                : "+&d" (sum), "+&a" (rp) : : "cc", "memory" );
+                : "+&d" (sum), "+&a" (rp) : "m" (*(char *) buff)
+		: "cc", "memory" );
 #else /* __s390x__ */
 	__asm__ __volatile__ (
 		"    lgr  2,%1\n"    /* address in gpr 2 */
@@ -78,7 +79,7 @@
 		"0:  cksm %0,2\n"    /* do checksum on longs */
 		"    jo   0b\n"
                 : "+&d" (sum)
-		: "d" (buff), "d" (len)
+		: "d" (buff), "d" (len), "m" (*(char *) buff)
                 : "cc", "memory", "2", "3" );
 #endif /* __s390x__ */
 	return sum;
@@ -165,7 +166,8 @@
 		"    sr   %0,%0\n"   /* set sum to zero */
                 "0:  cksm %0,%1\n"   /* do checksum on longs */
                 "    jo   0b\n"
-                : "=&d" (sum), "+&a" (rp) : : "cc", "memory" );
+                : "=&d" (sum), "+&a" (rp) : "m" (*(char *) iph)
+		: "cc", "memory" );
 #else /* __s390x__ */
         __asm__ __volatile__ (
 		"    slgr %0,%0\n"   /* set sum to zero */
@@ -174,7 +176,7 @@
                 "0:  cksm %0,2\n"    /* do checksum on ints */
                 "    jo   0b\n"
                 : "=&d" (sum)
-                : "d" (iph), "d" (ihl*4)
+                : "d" (iph), "d" (ihl*4), "m" (*(char *) iph)
                 : "cc", "memory", "2", "3" );
 #endif /* __s390x__ */
         return csum_fold(sum);
Index: linux-2.6.1/include/asm-s390/ebcdic.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/ebcdic.h,v
retrieving revision 1.3
diff -u -r1.3 ebcdic.h
--- linux-2.6.1/include/asm-s390/ebcdic.h	4 Apr 2003 14:24:21 -0000	1.3
+++ linux-2.6.1/include/asm-s390/ebcdic.h	16 Jan 2004 14:37:42 -0000
@@ -35,7 +35,7 @@
 		"   jnm  0b\n"
 		"   ex   %1,0(1)"
                 : "+&a" (addr), "+&a" (nr)
-                : "a" (codepage) : "cc", "memory", "1" );
+                : "a" (codepage), "m" (*addr) : "cc", "memory", "1" );
 }
 
 #define ASCEBC(addr,nr) codepage_convert(_ascebc, addr, nr)
Index: linux-2.6.1/include/asm-s390/page.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/page.h,v
retrieving revision 1.6
diff -u -r1.6 page.h
--- linux-2.6.1/include/asm-s390/page.h	9 Apr 2003 13:49:12 -0000	1.6
+++ linux-2.6.1/include/asm-s390/page.h	16 Jan 2004 14:37:42 -0000
@@ -30,7 +30,8 @@
 	rp.subreg.odd = (unsigned long) 4096;
         asm volatile ("   slr  1,1\n"
 		      "   mvcl %0,0"
-		      : "+&a" (rp) : : "memory", "cc", "1" );
+		      : "+&a" (rp) : "m" (*(char *) page) 
+		      : "memory", "cc", "1" );
 }
 
 static inline void copy_page(void *to, void *from)
@@ -38,7 +39,8 @@
         if (MACHINE_HAS_MVPG)
 		asm volatile ("   sr   0,0\n"
 			      "   mvpg %0,%1"
-			      : : "a" ((void *)(to)), "a" ((void *)(from))
+			      : : "a" (to), "a" (from),
+			          "m" (*(char *) to), "m" (*(char *) from)
 			      : "memory", "cc", "0" );
 	else
 		asm volatile ("   mvc  0(256,%0),0(%1)\n"
@@ -57,7 +59,8 @@
 			      "   mvc  3328(256,%0),3328(%1)\n"
 			      "   mvc  3584(256,%0),3584(%1)\n"
 			      "   mvc  3840(256,%0),3840(%1)\n"
-			      : : "a"((void *)(to)),"a"((void *)(from)) 
+			      : : "a"(to), "a"(from),
+			          "m" (*(char *) to), "m" (*(char *) from)
 			      : "memory" );
 }
 
@@ -69,7 +72,7 @@
                       "   lghi 3,4096\n"
                       "   slgr 1,1\n"
                       "   mvcl 2,0"
-                      : : "a" ((void *) (page))
+                      : : "a" ((void *) (page)), "m" (*(char *) page)
 		      : "memory", "cc", "1", "2", "3" );
 }
 
@@ -78,7 +81,8 @@
         if (MACHINE_HAS_MVPG)
 		asm volatile ("   sgr  0,0\n"
 			      "   mvpg %0,%1"
-			      : : "a" ((void *)(to)), "a" ((void *)(from))
+			      : : "a" (to), "a" (from),
+			          "m" (*(char *) to), "m" (*(char *) from)
 			      : "memory", "cc", "0" );
 	else
 		asm volatile ("   mvc  0(256,%0),0(%1)\n"
@@ -97,7 +101,8 @@
 			      "   mvc  3328(256,%0),3328(%1)\n"
 			      "   mvc  3584(256,%0),3584(%1)\n"
 			      "   mvc  3840(256,%0),3840(%1)\n"
-			      : : "a"((void *)(to)),"a"((void *)(from)) 
+			      : : "a" (to), "a"(from),
+			          "m" (*(char *) to), "m" (*(char *) from)
 			      : "memory" );
 }
 
Index: linux-2.6.1/include/asm-s390/pgtable.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/pgtable.h,v
retrieving revision 1.21
diff -u -r1.21 pgtable.h
--- linux-2.6.1/include/asm-s390/pgtable.h	10 Nov 2003 12:53:06 -0000	1.21
+++ linux-2.6.1/include/asm-s390/pgtable.h	16 Jan 2004 14:37:42 -0000
@@ -553,11 +553,13 @@
 	if (!(pte_val(pte) & _PAGE_INVALID)) {
 		/* S390 has 1mb segments, we are emulating 4MB segments */
 		pte_t *pto = (pte_t *) (((unsigned long) ptep) & 0x7ffffc00);
-		__asm__ __volatile__ ("ipte %0,%1" : : "a" (pto), "a" (address));
+		asm volatile ("ipte %0,%1"
+			      : : "a" (pto), "a" (address), "m" (*pto));
 	}
 #else /* __s390x__ */
 	if (!(pte_val(pte) & _PAGE_INVALID)) 
-		__asm__ __volatile__ ("ipte %0,%1" : : "a" (ptep), "a" (address));
+		asm volatile ("ipte %0,%1"
+			      : : "a" (ptep), "a" (address), "m" (*ptep));
 #endif /* __s390x__ */
 	pte_clear(ptep);
 	return pte;
Index: linux-2.6.1/include/asm-s390/processor.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/processor.h,v
retrieving revision 1.14
diff -u -r1.14 processor.h
--- linux-2.6.1/include/asm-s390/processor.h	2 Sep 2003 14:27:36 -0000	1.14
+++ linux-2.6.1/include/asm-s390/processor.h	16 Jan 2004 14:37:42 -0000
@@ -200,14 +200,14 @@
 		"    st	  %0,4(%1)\n"
 		"    lpsw 0(%1)\n"
 		"1:"
-		: "=&d" (addr) : "a" (&psw) : "memory", "cc" );
+		: "=&d" (addr) : "a" (&psw), "m" (psw) : "memory", "cc" );
 #else /* __s390x__ */
 	asm volatile (
 		"    larl  %0,1f\n"
 		"    stg   %0,8(%1)\n"
 		"    lpswe 0(%1)\n"
 		"1:"
-		: "=&d" (addr) : "a" (&psw) : "memory", "cc" );
+		: "=&d" (addr) : "a" (&psw), "m" (psw) : "memory", "cc" );
 #endif /* __s390x__ */
 }
  
@@ -229,14 +229,16 @@
 		"    oi   4(%1),0x80\n"
 		"    lpsw 0(%1)\n"
 		"1:"
-		: "=&a" (reg) : "a" (&wait_psw) : "memory", "cc" );
+		: "=&a" (reg) : "a" (&wait_psw), "m" (wait_psw)
+		: "memory", "cc" );
 #else /* __s390x__ */
 	asm volatile (
 		"    larl  %0,0f\n"
 		"    stg   %0,8(%1)\n"
 		"    lpswe 0(%1)\n"
 		"0:"
-		: "=&a" (reg) : "a" (&wait_psw) : "memory", "cc" );
+		: "=&a" (reg) : "a" (&wait_psw), "m" (wait_psw)
+		: "memory", "cc" );
 #endif /* __s390x__ */
 }
 
@@ -258,9 +260,9 @@
          * the processor is dead afterwards
          */
 #ifndef __s390x__
-        asm volatile ("    stctl 0,0,0(%1)\n"
-                      "    ni    0(%1),0xef\n" /* switch off protection */
-                      "    lctl  0,0,0(%1)\n"
+        asm volatile ("    stctl 0,0,0(%2)\n"
+                      "    ni    0(%2),0xef\n" /* switch off protection */
+                      "    lctl  0,0,0(%2)\n"
                       "    stpt  0xd8\n"       /* store timer */
                       "    stckc 0xe0\n"       /* store clock comparator */
                       "    stpx  0x108\n"      /* store prefix register */
@@ -271,13 +273,14 @@
                       "    std   6,0x178\n"    /* store f6 */
                       "    stm   0,15,0x180\n" /* store general registers */
                       "    stctl 0,15,0x1c0\n" /* store control registers */
-                      "    oi    0(%1),0x10\n" /* fake protection bit */
-                      "    lpsw 0(%0)"
-                      : : "a" (dw_psw), "a" (&ctl_buf) : "cc" );
+                      "    oi    0(%2),0x10\n" /* fake protection bit */
+                      "    lpsw 0(%1)"
+                      : "=m" (ctl_buf)
+		      : "a" (dw_psw), "a" (&ctl_buf), "m" (*dw_psw) : "cc" );
 #else /* __s390x__ */
-        asm volatile ("    stctg 0,0,0(%1)\n"
+        asm volatile ("    stctg 0,0,0(%2)\n"
                       "    ni    4(%1),0xef\n" /* switch off protection */
-                      "    lctlg 0,0,0(%1)\n"
+                      "    lctlg 0,0,0(%2)\n"
                       "    lghi  1,0x1000\n"
                       "    stpt  0x328(1)\n"      /* store timer */
                       "    stckc 0x330(1)\n"      /* store clock comparator */
@@ -303,8 +306,10 @@
                       "    stmg  0,15,0x280(1)\n" /* store general registers */
                       "    stctg 0,15,0x380(1)\n" /* store control registers */
                       "    oi    0x384(1),0x10\n" /* fake protection bit */
-                      "    lpswe 0(%0)"
-                      : : "a" (dw_psw), "a" (&ctl_buf) : "cc", "0", "1");
+                      "    lpswe 0(%1)"
+                      : "=m" (ctl_buf) 
+		      : "a" (dw_psw), "a" (&ctl_buf), "m" (*dw_psw)
+		      : "cc", "0", "1");
 #endif /* __s390x__ */
 }
 
Index: linux-2.6.1/include/asm-s390/rwsem.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/rwsem.h,v
retrieving revision 1.7
diff -u -r1.7 rwsem.h
--- linux-2.6.1/include/asm-s390/rwsem.h	4 Apr 2003 14:24:21 -0000	1.7
+++ linux-2.6.1/include/asm-s390/rwsem.h	16 Jan 2004 14:37:42 -0000
@@ -102,21 +102,21 @@
 
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   ahi  %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   ahi  %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   aghi %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   aghi %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "i" (RWSEM_ACTIVE_READ_BIAS)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "i" (RWSEM_ACTIVE_READ_BIAS),
+		  "m" (sem->count) : "cc", "memory" );
 	if (old < 0)
 		rwsem_down_read_failed(sem);
 }
@@ -130,25 +130,25 @@
 
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: ltr  %1,%0\n"
 		"   jm   1f\n"
-		"   ahi  %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   ahi  %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b\n"
 		"1:"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: ltgr %1,%0\n"
 		"   jm   1f\n"
-		"   aghi %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   aghi %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b\n"
 		"1:"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "i" (RWSEM_ACTIVE_READ_BIAS)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "i" (RWSEM_ACTIVE_READ_BIAS),
+		  "m" (sem->count) : "cc", "memory" );
 	return old >= 0 ? 1 : 0;
 }
 
@@ -162,21 +162,21 @@
 	tmp = RWSEM_ACTIVE_WRITE_BIAS;
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   a    %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   a    %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   ag   %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   ag   %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "m" (tmp)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "m" (tmp),
+		  "m" (sem->count) : "cc", "memory" );
 	if (old != 0)
 		rwsem_down_write_failed(sem);
 }
@@ -190,22 +190,22 @@
 
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%1)\n"
+		"   l    %0,0(%2)\n"
 		"0: ltr  %0,%0\n"
 		"   jnz  1f\n"
-		"   cs   %0,%2,0(%1)\n"
+		"   cs   %0,%3,0(%2)\n"
 		"   jl   0b\n"
 #else /* __s390x__ */
-		"   lg   %0,0(%1)\n"
+		"   lg   %0,0(%2)\n"
 		"0: ltgr %0,%0\n"
 		"   jnz  1f\n"
-		"   csg  %0,%2,0(%1)\n"
+		"   csg  %0,%3,0(%2)\n"
 		"   jl   0b\n"
 #endif /* __s390x__ */
 		"1:"
-                : "=&d" (old)
-		: "a" (&sem->count), "d" (RWSEM_ACTIVE_WRITE_BIAS)
-		: "cc", "memory" );
+                : "=&d" (old), "=m" (sem->count)
+		: "a" (&sem->count), "d" (RWSEM_ACTIVE_WRITE_BIAS),
+		  "m" (sem->count) : "cc", "memory" );
 	return (old == RWSEM_UNLOCKED_VALUE) ? 1 : 0;
 }
 
@@ -218,21 +218,21 @@
 
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   ahi  %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   ahi  %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   aghi %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   aghi %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "i" (-RWSEM_ACTIVE_READ_BIAS)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "i" (-RWSEM_ACTIVE_READ_BIAS),
+		  "m" (sem->count) : "cc", "memory" );
 	if (new < 0)
 		if ((new & RWSEM_ACTIVE_MASK) == 0)
 			rwsem_wake(sem);
@@ -248,21 +248,21 @@
 	tmp = -RWSEM_ACTIVE_WRITE_BIAS;
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   a    %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   a    %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   ag   %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   ag   %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "m" (tmp)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "m" (tmp),
+		  "m" (sem->count) : "cc", "memory" );
 	if (new < 0)
 		if ((new & RWSEM_ACTIVE_MASK) == 0)
 			rwsem_wake(sem);
@@ -278,21 +278,21 @@
 	tmp = -RWSEM_WAITING_BIAS;
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   a    %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   a    %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   ag   %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   ag   %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "m" (tmp)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "m" (tmp),
+		  "m" (sem->count) : "cc", "memory" );
 	if (new > 1)
 		rwsem_downgrade_wake(sem);
 }
@@ -306,21 +306,21 @@
 
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   ar   %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   ar   %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   agr  %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   agr  %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "d" (delta)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "d" (delta),
+		  "m" (sem->count) : "cc", "memory" );
 }
 
 /*
@@ -332,21 +332,21 @@
 
 	__asm__ __volatile__(
 #ifndef __s390x__
-		"   l    %0,0(%2)\n"
+		"   l    %0,0(%3)\n"
 		"0: lr   %1,%0\n"
-		"   ar   %1,%3\n"
-		"   cs   %0,%1,0(%2)\n"
+		"   ar   %1,%4\n"
+		"   cs   %0,%1,0(%3)\n"
 		"   jl   0b"
 #else /* __s390x__ */
-		"   lg   %0,0(%2)\n"
+		"   lg   %0,0(%3)\n"
 		"0: lgr  %1,%0\n"
-		"   agr  %1,%3\n"
-		"   csg  %0,%1,0(%2)\n"
+		"   agr  %1,%4\n"
+		"   csg  %0,%1,0(%3)\n"
 		"   jl   0b"
 #endif /* __s390x__ */
-                : "=&d" (old), "=&d" (new)
-		: "a" (&sem->count), "d" (delta)
-		: "cc", "memory" );
+                : "=&d" (old), "=&d" (new), "=m" (sem->count)
+		: "a" (&sem->count), "d" (delta),
+		  "m" (sem->count) : "cc", "memory" );
 	return new;
 }
 
Index: linux-2.6.1/include/asm-s390/spinlock.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/spinlock.h,v
retrieving revision 1.9
diff -u -r1.9 spinlock.h
--- linux-2.6.1/include/asm-s390/spinlock.h	20 Oct 2003 15:55:32 -0000	1.9
+++ linux-2.6.1/include/asm-s390/spinlock.h	16 Jan 2004 14:37:42 -0000
@@ -57,8 +57,8 @@
                            "1:  slr   %1,%1\n"
                            "    cs    %1,%0,0(%3)\n"
                            "    jl    0b\n"
-                           : "=&d" (reg1), "=&d" (reg2), "+m" (lp->lock)
-			   : "a" (&lp->lock) : "cc" );
+                           : "=&d" (reg1), "=&d" (reg2), "=m" (lp->lock)
+			   : "a" (&lp->lock), "m" (lp->lock) : "cc" );
 #else /* __s390x__ */
 	unsigned long reg1, reg2;
         __asm__ __volatile("    bras  %1,1f\n"
@@ -66,9 +66,9 @@
                            "1:  slr   %0,%0\n"
                            "    cs    %0,%1,0(%3)\n"
                            "    jl    0b\n"
-                           : "=&d" (reg1), "=&d" (reg2), "+m" (lp->lock)
-                           : "a" (&lp->lock), "i" (__DIAG44_OPERAND)
-			   : "cc" );
+                           : "=&d" (reg1), "=&d" (reg2), "=m" (lp->lock)
+			   : "a" (&lp->lock), "i" (__DIAG44_OPERAND),
+			     "m" (lp->lock) : "cc" );
 #endif /* __s390x__ */
 }
 
@@ -82,8 +82,8 @@
 	__asm__ __volatile("    slr   %0,%0\n"
 			   "    basr  %1,0\n"
 			   "0:  cs    %0,%1,0(%3)"
-			   : "=&d" (result), "=&d" (reg), "+m" (lp->lock)
-			   : "a" (&lp->lock) : "cc" );
+			   : "=&d" (result), "=&d" (reg), "=m" (lp->lock)
+			   : "a" (&lp->lock), "m" (lp->lock) : "cc" );
 	return !result;
 }
 
@@ -126,8 +126,8 @@
                      "   la    3,1(2)\n"     /* one more reader */ \
                      "   cs    2,3,0(%1)\n"  /* try to write new value */ \
                      "   jl    0b"       \
-                     : "+m" ((rw)->lock) : "a" (&(rw)->lock) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) : "a" (&(rw)->lock), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #else /* __s390x__ */
 #define _raw_read_lock(rw)   \
         asm volatile("   lg    2,0(%1)\n"   \
@@ -137,9 +137,9 @@
                      "   la    3,1(2)\n"   /* one more reader */  \
                      "   csg   2,3,0(%1)\n" /* try to write new value */ \
                      "   jl    0b"       \
-                     : "+m" ((rw)->lock) \
-		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) \
+		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #endif /* __s390x__ */
 
 #ifndef __s390x__
@@ -151,8 +151,8 @@
                      "   ahi   3,-1\n"    /* one less reader */ \
                      "   cs    2,3,0(%1)\n" \
                      "   jl    0b"       \
-                     : "+m" ((rw)->lock) : "a" (&(rw)->lock) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) : "a" (&(rw)->lock), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #else /* __s390x__ */
 #define _raw_read_unlock(rw) \
         asm volatile("   lg    2,0(%1)\n"   \
@@ -162,9 +162,9 @@
                      "   bctgr 3,0\n"    /* one less reader */ \
                      "   csg   2,3,0(%1)\n" \
                      "   jl    0b"       \
-                     : "+m" ((rw)->lock) \
-		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) \
+		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #endif /* __s390x__ */
 
 #ifndef __s390x__
@@ -176,8 +176,8 @@
                      "1: slr   2,2\n"     /* old lock value must be 0 */ \
                      "   cs    2,3,0(%1)\n" \
                      "   jl    0b"       \
-                     : "+m" ((rw)->lock) : "a" (&(rw)->lock) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) : "a" (&(rw)->lock), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #else /* __s390x__ */
 #define _raw_write_lock(rw) \
         asm volatile("   llihh 3,0x8000\n" /* new lock value = 0x80...0 */ \
@@ -186,9 +186,9 @@
                      "1: slgr  2,2\n"      /* old lock value must be 0 */ \
                      "   csg   2,3,0(%1)\n" \
                      "   jl    0b"         \
-                     : "+m" ((rw)->lock) \
-		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) \
+		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #endif /* __s390x__ */
 
 #ifndef __s390x__
@@ -200,8 +200,8 @@
                      "   sll   2,31\n"    /* old lock value must be 0x80000000 */ \
                      "   cs    2,3,0(%1)\n" \
                      "   jl    0b"       \
-                     : "+m" ((rw)->lock) : "a" (&(rw)->lock) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) : "a" (&(rw)->lock), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #else /* __s390x__ */
 #define _raw_write_unlock(rw) \
         asm volatile("   slgr  3,3\n"      /* new lock value = 0 */ \
@@ -210,9 +210,9 @@
                      "1: llihh 2,0x8000\n" /* old lock value must be 0x8..0 */\
                      "   csg   2,3,0(%1)\n"   \
                      "   jl    0b"         \
-                     : "+m" ((rw)->lock) \
-		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND) \
-		     : "2", "3", "cc" )
+                     : "=m" ((rw)->lock) \
+		     : "a" (&(rw)->lock), "i" (__DIAG44_OPERAND), \
+		       "m" ((rw)->lock) : "2", "3", "cc" )
 #endif /* __s390x__ */
 
 extern inline int _raw_write_trylock(rwlock_t *rw)
@@ -230,8 +230,8 @@
 			     "   llihh %1,0x8000\n"
 			     "0: csg %0,%1,0(%3)\n"
 #endif /* __s390x__ */
-			     : "=&d" (result), "=&d" (reg), "+m" (rw->lock)
-			     : "a" (&rw->lock) : "cc" );
+			     : "=&d" (result), "=&d" (reg), "=m" (rw->lock)
+			     : "a" (&rw->lock), "m" (rw->lock) : "cc" );
 	return result == 0;
 }
 
Index: linux-2.6.1/include/asm-s390/string.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/string.h,v
retrieving revision 1.4
diff -u -r1.4 string.h
--- linux-2.6.1/include/asm-s390/string.h	28 Apr 2003 17:25:41 -0000	1.4
+++ linux-2.6.1/include/asm-s390/string.h	16 Jan 2004 14:37:42 -0000
@@ -68,8 +68,8 @@
                           "   slgr  %0,%0\n"
 #endif /* __s390x__ */
                           "1:"
-                          : "=&a" (ptr) : "a" (cs), "d" (c), "d" (count)
-                          : "cc", "0", "1" );
+                          : "=&a" (ptr) : "a" (cs), "d" (c), "d" (count),
+                            "m" (*(char *) cs) : "cc", "0", "1" );
     return ptr;
 }
 
@@ -87,8 +87,8 @@
                           "0: mvst  %0,%1\n"
                           "   jo    0b"
 #endif /* __s390x__ */
-                          : "+&a" (dest), "+&a" (src) :
-                          : "cc", "memory", "0" );
+                          : "+&a" (dest), "+&a" (src), "=m" (*dest)
+			  : "m" (*src) : "cc", "memory", "0" );
     return tmp;
 }
 
@@ -112,7 +112,7 @@
                           "   lgr   %0,0\n"
                           "   sgr   %0,%1"
 #endif /* __s390x__ */
-                          : "=&a" (len) : "a" (s) 
+                          : "=&a" (len) : "a" (s), "m" (*s)
                           : "cc", "0" );
     return len;
 }
@@ -139,8 +139,8 @@
                           "1: mvst  %0,%1\n"
                           "   jo    1b"
 #endif /* __s390x__ */
-                          : "+&a" (dest), "+&a" (src) :
-                          : "cc", "memory", "0" );
+                          : "+&a" (dest), "+&a" (src), "=m" (*dest)
+			  : "m" (*src) : "cc", "memory", "0" );
     return tmp;
 }
 
Index: linux-2.6.1/include/asm-s390/system.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/system.h,v
retrieving revision 1.17
diff -u -r1.17 system.h
--- linux-2.6.1/include/asm-s390/system.h	11 Aug 2003 12:22:08 -0000	1.17
+++ linux-2.6.1/include/asm-s390/system.h	16 Jan 2004 14:37:42 -0000
@@ -32,28 +32,28 @@
 static inline void save_fp_regs(s390_fp_regs *fpregs)
 {
 	asm volatile (
-		"   std   0,8(%0)\n"
-		"   std   2,24(%0)\n"
-		"   std   4,40(%0)\n"
-		"   std   6,56(%0)"
-		: : "a" (fpregs) : "memory" );
+		"   std   0,8(%1)\n"
+		"   std   2,24(%1)\n"
+		"   std   4,40(%1)\n"
+		"   std   6,56(%1)"
+		: "=m" (*fpregs) : "a" (fpregs) : "memory" );
 	if (!MACHINE_HAS_IEEE)
 		return;
 	asm volatile(
-		"   stfpc 0(%0)\n"
-		"   std   1,16(%0)\n"
-		"   std   3,32(%0)\n"
-		"   std   5,48(%0)\n"
-		"   std   7,64(%0)\n"
-		"   std   8,72(%0)\n"
-		"   std   9,80(%0)\n"
-		"   std   10,88(%0)\n"
-		"   std   11,96(%0)\n"
-		"   std   12,104(%0)\n"
-		"   std   13,112(%0)\n"
-		"   std   14,120(%0)\n"
-		"   std   15,128(%0)\n"
-		: : "a" (fpregs) : "memory" );
+		"   stfpc 0(%1)\n"
+		"   std   1,16(%1)\n"
+		"   std   3,32(%1)\n"
+		"   std   5,48(%1)\n"
+		"   std   7,64(%1)\n"
+		"   std   8,72(%1)\n"
+		"   std   9,80(%1)\n"
+		"   std   10,88(%1)\n"
+		"   std   11,96(%1)\n"
+		"   std   12,104(%1)\n"
+		"   std   13,112(%1)\n"
+		"   std   14,120(%1)\n"
+		"   std   15,128(%1)\n"
+		: "=m" (*fpregs) : "a" (fpregs) : "memory" );
 }
 
 static inline void restore_fp_regs(s390_fp_regs *fpregs)
@@ -63,7 +63,7 @@
 		"   ld    2,24(%0)\n"
 		"   ld    4,40(%0)\n"
 		"   ld    6,56(%0)"
-		: : "a" (fpregs));
+		: : "a" (fpregs), "m" (*fpregs) );
 	if (!MACHINE_HAS_IEEE)
 		return;
 	asm volatile(
@@ -80,7 +80,7 @@
 		"   ld    13,112(%0)\n"
 		"   ld    14,120(%0)\n"
 		"   ld    15,128(%0)\n"
-		: : "a" (fpregs));
+		: : "a" (fpregs), "m" (*fpregs) );
 }
 
 #define switch_to(prev,next,last) do {					     \
@@ -107,15 +107,15 @@
 		shift = (3 ^ (addr & 3)) << 3;
 		addr ^= addr & 3;
 		asm volatile(
-			"    l   %0,0(%3)\n"
+			"    l   %0,0(%4)\n"
 			"0:  lr  0,%0\n"
-			"    nr  0,%2\n"
-			"    or  0,%1\n"
-			"    cs  %0,0,0(%3)\n"
+			"    nr  0,%3\n"
+			"    or  0,%2\n"
+			"    cs  %0,0,0(%4)\n"
 			"    jl  0b\n"
-			: "=&d" (old)
-			: "d" (x << shift), "d" (~(255 << shift)), "a" (addr)
-			: "memory", "cc", "0" );
+			: "=&d" (old), "=m" (*(int *) addr)
+			: "d" (x << shift), "d" (~(255 << shift)), "a" (addr),
+			  "m" (*(int *) addr) : "cc", "0" );
 		x = old >> shift;
 		break;
 	case 2:
@@ -123,33 +123,35 @@
 		shift = (2 ^ (addr & 2)) << 3;
 		addr ^= addr & 2;
 		asm volatile(
-			"    l   %0,0(%3)\n"
+			"    l   %0,0(%4)\n"
 			"0:  lr  0,%0\n"
-			"    nr  0,%2\n"
-			"    or  0,%1\n"
-			"    cs  %0,0,0(%3)\n"
+			"    nr  0,%3\n"
+			"    or  0,%2\n"
+			"    cs  %0,0,0(%4)\n"
 			"    jl  0b\n"
-			: "=&d" (old) 
-			: "d" (x << shift), "d" (~(65535 << shift)), "a" (addr)
-			: "memory", "cc", "0" );
+			: "=&d" (old), "=m" (*(int *) addr) 
+			: "d" (x << shift), "d" (~(65535 << shift)), "a" (addr),
+			  "m" (*(int *) addr) : "cc", "0" );
 		x = old >> shift;
 		break;
 	case 4:
 		asm volatile (
-			"    l   %0,0(%2)\n"
-			"0:  cs  %0,%1,0(%2)\n"
+			"    l   %0,0(%3)\n"
+			"0:  cs  %0,%2,0(%3)\n"
 			"    jl  0b\n"
-			: "=&d" (old) : "d" (x), "a" (ptr)
+			: "=&d" (old), "=m" (*(int *) ptr)
+			: "d" (x), "a" (ptr), "m" (*(int *) ptr)
 			: "memory", "cc", "0" );
 		x = old;
 		break;
 #ifdef __s390x__
 	case 8:
 		asm volatile (
-			"    lg  %0,0(%2)\n"
-			"0:  csg %0,%1,0(%2)\n"
+			"    lg  %0,0(%3)\n"
+			"0:  csg %0,%2,0(%3)\n"
 			"    jl  0b\n"
-			: "=&d" (old) : "d" (x), "a" (ptr)
+			: "=&d" (old), "=m" (*(long *) ptr)
+			: "d" (x), "a" (ptr), "m" (*(long *) ptr)
 			: "memory", "cc", "0" );
 		x = old;
 		break;
@@ -182,55 +184,57 @@
 		shift = (3 ^ (addr & 3)) << 3;
 		addr ^= addr & 3;
 		asm volatile(
-			"    l   %0,0(%4)\n"
-			"0:  nr  %0,%5\n"
+			"    l   %0,0(%5)\n"
+			"0:  nr  %0,%6\n"
                         "    lr  %1,%0\n"
-			"    or  %0,%2\n"
-			"    or  %1,%3\n"
-			"    cs  %0,%1,0(%4)\n"
+			"    or  %0,%3\n"
+			"    or  %1,%4\n"
+			"    cs  %0,%1,0(%5)\n"
 			"    jnl 1f\n"
 			"    xr  %1,%0\n"
-			"    nr  %1,%5\n"
+			"    nr  %1,%6\n"
 			"    jnz 0b\n"
 			"1:"
-			: "=&d" (prev), "=&d" (tmp)
+			: "=&d" (prev), "=&d" (tmp), "=m" (*(int *) addr)
 			: "d" (old << shift), "d" (new << shift), "a" (ptr),
-			  "d" (~(255 << shift))
-			: "memory", "cc" );
+			  "d" (~(255 << shift)), "m" (*(int *) addr)
+			: "cc" );
 		return prev >> shift;
 	case 2:
 		addr = (unsigned long) ptr;
 		shift = (2 ^ (addr & 2)) << 3;
 		addr ^= addr & 2;
 		asm volatile(
-			"    l   %0,0(%4)\n"
-			"0:  nr  %0,%5\n"
+			"    l   %0,0(%5)\n"
+			"0:  nr  %0,%6\n"
                         "    lr  %1,%0\n"
-			"    or  %0,%2\n"
-			"    or  %1,%3\n"
-			"    cs  %0,%1,0(%4)\n"
+			"    or  %0,%3\n"
+			"    or  %1,%4\n"
+			"    cs  %0,%1,0(%5)\n"
 			"    jnl 1f\n"
 			"    xr  %1,%0\n"
-			"    nr  %1,%5\n"
+			"    nr  %1,%6\n"
 			"    jnz 0b\n"
 			"1:"
-			: "=&d" (prev), "=&d" (tmp)
+			: "=&d" (prev), "=&d" (tmp), "=m" (*(int *) addr)
 			: "d" (old << shift), "d" (new << shift), "a" (ptr),
-			  "d" (~(65535 << shift))
-			: "memory", "cc" );
+			  "d" (~(65535 << shift)), "m" (*(int *) addr)
+			: "cc" );
 		return prev >> shift;
 	case 4:
 		asm volatile (
-			"    cs  %0,%2,0(%3)\n"
-			: "=&d" (prev) : "0" (old), "d" (new), "a" (ptr)
-			: "memory", "cc" );
+			"    cs  %0,%3,0(%4)\n"
+			: "=&d" (prev), "=m" (*(int *) ptr)
+			: "0" (old), "d" (new), "a" (ptr), "m" (*(int *) ptr)
+			: "cc" );
 		return prev;
 #ifdef __s390x__
 	case 8:
 		asm volatile (
-			"    csg %0,%2,0(%3)\n"
-			: "=&d" (prev) : "0" (old), "d" (new), "a" (ptr)
-			: "memory", "cc" );
+			"    csg %0,%3,0(%4)\n"
+			: "=&d" (prev), "=m" (*(long *) ptr)
+			: "0" (old), "d" (new), "a" (ptr), "m" (*(long *) ptr)
+			: "cc" );
 		return prev;
 #endif /* __s390x__ */
         }
@@ -282,7 +286,7 @@
         __asm__ __volatile__("stosm 0(%1),0" : "=m" (x) : "a" (&x) )
 
 #define local_irq_restore(x) \
-        __asm__ __volatile__("ssm   0(%0)" : : "a" (&x) : "memory")
+        __asm__ __volatile__("ssm   0(%1)" : : "m" (x), "a" (&x) )
 
 #define irqs_disabled()			\
 ({					\
@@ -294,14 +298,15 @@
 #ifdef __s390x__
 
 #define __load_psw(psw) \
-        __asm__ __volatile__("lpswe 0(%0)" : : "a" (&psw) : "cc" );
+        __asm__ __volatile__("lpswe 0(%0)" : : "a" (&psw), "m" (psw) : "cc" );
 
 #define __ctl_load(array, low, high) ({ \
 	__asm__ __volatile__ ( \
 		"   bras  1,0f\n" \
                 "   lctlg 0,0,0(%0)\n" \
 		"0: ex    %1,0(1)" \
-		: : "a" (&array), "a" (((low)<<4)+(high)) : "1" ); \
+		: : "a" (&array), "a" (((low)<<4)+(high)), \
+		    "m" (*(&array)) : "1" ); \
 	})
 
 #define __ctl_store(array, low, high) ({ \
@@ -309,7 +314,8 @@
 		"   bras  1,0f\n" \
 		"   stctg 0,0,0(%1)\n" \
 		"0: ex    %2,0(1)" \
-		: "=m" (array) : "a" (&array), "a" (((low)<<4)+(high)) : "1" ); \
+		: "=m" (*(&array)) \
+		: "a" (&array), "a" (((low)<<4)+(high)) : "1" ); \
 	})
 
 #define __ctl_set_bit(cr, bit) ({ \
@@ -356,7 +362,8 @@
 		"   bras  1,0f\n" \
                 "   lctl 0,0,0(%0)\n" \
 		"0: ex    %1,0(1)" \
-		: : "a" (&array), "a" (((low)<<4)+(high)) : "1" ); \
+		: : "a" (&array), "a" (((low)<<4)+(high)), \
+		    "m" (*(&array)) : "1" ); \
 	})
 
 #define __ctl_store(array, low, high) ({ \
@@ -364,7 +371,8 @@
 		"   bras  1,0f\n" \
 		"   stctl 0,0,0(%1)\n" \
 		"0: ex    %2,0(1)" \
-		: "=m" (array) : "a" (&array), "a" (((low)<<4)+(high)): "1" ); \
+		: "=m" (*(&array)) \
+		: "a" (&array), "a" (((low)<<4)+(high)): "1" ); \
 	})
 
 #define __ctl_set_bit(cr, bit) ({ \
Index: linux-2.6.1/include/asm-s390/timex.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/timex.h,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 timex.h
--- linux-2.6.1/include/asm-s390/timex.h	13 Mar 2002 19:33:10 -0000	1.1.1.1
+++ linux-2.6.1/include/asm-s390/timex.h	16 Jan 2004 14:37:42 -0000
@@ -25,7 +25,7 @@
 {
 	cycles_t cycles;
 
-	__asm__("stck 0(%0)" : : "a" (&(cycles)) : "memory", "cc");
+	__asm__("stck 0(%1)" : "=m" (cycles) : "a" (&cycles) : "cc" );
 	return cycles >> 2;
 }
 
@@ -33,7 +33,7 @@
 {
 	unsigned long long clk;
 
-	__asm__("stck 0(%0)" : : "a" (&(clk)) : "memory", "cc");
+	__asm__("stck 0(%1)" : "=m" (clk) : "a" (&clk) : "cc" );
 	return clk;
 }
 
Index: linux-2.6.1/include/asm-s390/tlbflush.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/tlbflush.h,v
retrieving revision 1.17
diff -u -r1.17 tlbflush.h
--- linux-2.6.1/include/asm-s390/tlbflush.h	8 Dec 2003 15:44:48 -0000	1.17
+++ linux-2.6.1/include/asm-s390/tlbflush.h	16 Jan 2004 14:37:42 -0000
@@ -85,7 +85,8 @@
 			"    slr  2,2\n"
 			"    slr  3,3\n"
 			"    csp  2,%0"
-			: : "a" (addr) : "cc", "2", "3" );
+			: : "a" (addr), "m" (dummy)
+			: "cc", "2", "3" );
 	}
 }
 
Index: linux-2.6.1/include/asm-s390/uaccess.h
===================================================================
RCS file: /home/cvs/linux-2.5/include/asm-s390/uaccess.h,v
retrieving revision 1.18
diff -u -r1.18 uaccess.h
--- linux-2.6.1/include/asm-s390/uaccess.h	10 Oct 2003 15:25:43 -0000	1.18
+++ linux-2.6.1/include/asm-s390/uaccess.h	16 Jan 2004 14:37:42 -0000
@@ -124,8 +124,8 @@
 		"1:\n"						\
 		__uaccess_fixup					\
 		: "=&d" (err)					\
-		: "a" (__to),"a" (__from),"K" (-EFAULT),"0" (0)	\
-		: "cc" );					\
+		: "a" (__to),"a" (__from),"K" (-EFAULT),"0" (0),\
+		  "m" (x) : "cc" );				\
 })
 
 #else /* __s390x__ */
@@ -418,11 +418,10 @@
 static inline long
 __strncpy_from_user(char *dst, const char *src, long count)
 {
-        int len;
+        int len = 0;
         __asm__ __volatile__ (
-		"   slr   %0,%0\n"
-		"   lr    2,%1\n"
-                "   lr    4,%2\n"
+		"   lr    2,%2\n"
+                "   lr    4,%3\n"
                 "   slr   3,3\n"
                 "   sacf  512\n"
 		"0: ic	  3,0(%0,4)\n"
@@ -430,11 +429,11 @@
 		"   ltr	  3,3\n"
 		"   jz	  2f\n"
 		"   ahi	  %0,1\n"
-		"   clr	  %0,%3\n"
+		"   clr	  %0,%4\n"
 		"   jl	  0b\n"
 		"2: sacf  0\n"
 		".section .fixup,\"ax\"\n"
-		"3: lhi	  %0,%h4\n"
+		"3: lhi	  %0,%h5\n"
 		"   basr  3,0\n"
 		"   l	  3,4f-.(3)\n"
 		"   br	  3\n"
@@ -445,7 +444,7 @@
 		"   .long  0b,3b\n"
 		"   .long  1b,3b\n"
 		".previous"
-		: "=&a" (len)
+		: "+&a" (len), "=m" (*dst)
 		: "a" (dst), "d" (src), "d" (count), "K" (-EFAULT)
 		: "2", "3", "4", "memory", "cc" );
 	return len;
@@ -456,11 +455,10 @@
 static inline long
 __strncpy_from_user(char *dst, const char *src, long count)
 {
-	long len;
+	long len = 0;
 	__asm__ __volatile__ (
-		"   slgr  %0,%0\n"
-		"   lgr	  2,%1\n"
-		"   lgr	  4,%2\n"
+		"   lgr	  2,%2\n"
+		"   lgr	  4,%3\n"
 		"   slr	  3,3\n"
 		"   sacf  512\n"
 		"0: ic	  3,0(%0,4)\n"
@@ -468,11 +466,11 @@
 		"   ltr	  3,3\n"
 		"   jz	  2f\n"
 		"   aghi  %0,1\n"
-		"   cgr	  %0,%3\n"
+		"   cgr	  %0,%4\n"
 		"   jl	  0b\n"
 		"2: sacf  0\n"
 		".section .fixup,\"ax\"\n"
-		"3: lghi  %0,%h4\n"
+		"3: lghi  %0,%h5\n"
 		"   jg	  2b\n"	 
 		".previous\n"
 		".section __ex_table,\"a\"\n"
@@ -480,7 +478,7 @@
 		"   .quad  0b,3b\n"
 		"   .quad  1b,3b\n"
 		".previous"
-		: "=&a" (len)
+		: "+&a" (len), "=m" (*dst)
 		: "a"  (dst), "d" (src), "d" (count), "K" (-EFAULT)
 		: "cc", "2" ,"3", "4" );
 	return len;
