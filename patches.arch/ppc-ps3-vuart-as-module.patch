---
 arch/powerpc/platforms/ps3/Kconfig |   19 +++++++------------
 drivers/ps3/vuart.c                |    5 +++++
 2 files changed, 12 insertions(+), 12 deletions(-)

--- a/arch/powerpc/platforms/ps3/Kconfig
+++ b/arch/powerpc/platforms/ps3/Kconfig
@@ -57,18 +57,12 @@ config PS3_USE_LPAR_ADDR
 
 config PS3_VUART
 	depends on PPC_PS3
-	bool "PS3 Virtual UART support" if PS3_ADVANCED
-	default y
-	help
-	  Include support for the PS3 Virtual UART.
-
-	  This support is required for several system services
-	  including the System Manager and AV Settings.  In
-	  general, all users will say Y.
+	tristate
 
 config PS3_PS3AV
+	depends on PPC_PS3
 	tristate "PS3 AV settings driver" if PS3_ADVANCED
-	depends on PS3_VUART
+	select PS3_VUART
 	default y
 	help
 	  Include support for the PS3 AV Settings driver.
@@ -77,13 +71,14 @@ config PS3_PS3AV
 	  general, all users will say Y or M.
 
 config PS3_SYS_MANAGER
-	bool "PS3 System Manager driver" if PS3_ADVANCED
-	depends on PS3_VUART
+	depends on PPC_PS3
+	tristate "PS3 System Manager driver" if PS3_ADVANCED
+	select PS3_VUART
 	default y
 	help
 	  Include support for the PS3 System Manager.
 
 	  This support is required for system control.  In
-	  general, all users will say Y.
+	  general, all users will say Y or M.
 
 endmenu
--- a/drivers/ps3/vuart.c
+++ b/drivers/ps3/vuart.c
@@ -437,6 +437,7 @@ void ps3_vuart_clear_rx_bytes(struct ps3
 
 	dev->priv->stats.bytes_read -= bytes_waiting;
 }
+EXPORT_SYMBOL_GPL(ps3_vuart_clear_rx_bytes);
 
 /**
  * struct list_buffer - An element for a port device fifo buffer list.
@@ -519,6 +520,7 @@ int ps3_vuart_write(struct ps3_vuart_por
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(ps3_vuart_write);
 
 /**
  * ps3_vuart_queue_rx_bytes - Queue waiting bytes into the buffer list.
@@ -638,6 +640,7 @@ int ps3_vuart_read(struct ps3_vuart_port
 	spin_unlock_irqrestore(&dev->priv->rx_list.lock, flags);
 	return 0;
 }
+EXPORT_SYMBOL_GPL(ps3_vuart_read);
 
 int ps3_vuart_read_async(struct ps3_vuart_port_device *dev, work_func_t func,
 	unsigned int bytes)
@@ -671,11 +674,13 @@ int ps3_vuart_read_async(struct ps3_vuar
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(ps3_vuart_read_async);
 
 void ps3_vuart_cancel_async(struct ps3_vuart_port_device *dev)
 {
 	dev->priv->rx_list.work.trigger = 0;
 }
+EXPORT_SYMBOL_GPL(ps3_vuart_cancel_async);
 
 /**
  * ps3_vuart_handle_interrupt_tx - third stage transmit interrupt handler
