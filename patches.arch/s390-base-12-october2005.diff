From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: IBM Codestream linux-2.6.16 october2005, patch base-12
Patch-Mainline: 2.6.17-rc1

[patch] tape: retry flooding by deferred CC in interrupt.

If a deferred CC happens there will be lots of messages, because the retry is
done immediatly in the interrupt handler which can be too fast. To avoid this
requeue the request and schedule the queue to be processed.
Acked-by: Hannes Reinecke <hare@suse.de>

---

 drivers/s390/char/tape_core.c |    9 +++++----
 1 files changed, 5 insertions(+), 4 deletions(-)

diff -urpN linux-2.6/drivers/s390/char/tape_core.c linux-2.6-patched/drivers/s390/char/tape_core.c
--- linux-2.6/drivers/s390/char/tape_core.c	2006-03-20 06:53:29.000000000 +0100
+++ linux-2.6-patched/drivers/s390/char/tape_core.c	2006-03-22 11:46:52.000000000 +0100
@@ -1064,15 +1064,16 @@ __tape_do_irq (struct ccw_device *cdev, 
 	/*
 	 * If the condition code is not zero and the start function bit is
 	 * still set, this is an deferred error and the last start I/O did
-	 * not succeed. Restart the request now.
+	 * not succeed. At this point the condition that caused the deferred
+	 * error might still apply. So we just schedule the request to be
+	 * started later.
 	 */
 	if (irb->scsw.cc != 0 && (irb->scsw.fctl & SCSW_FCTL_START_FUNC)) {
 		PRINT_WARN("(%s): deferred cc=%i. restaring\n",
 			cdev->dev.bus_id,
 			irb->scsw.cc);
-		rc = __tape_start_io(device, request);
-		if (rc)
-			__tape_end_request(device, request, rc);
+		request->status = TAPE_REQUEST_QUEUED;
+		schedule_work(&device->tape_dnr);
 		return;
 	}
 
