- Description: qeth: registering multicast addresses for Token Ring and
               Ethernet failed
  Symptom:     trying to join another multicast group fails for all multicast
               addresses belonging to a Token Ring device and some multicast
               addresses belonging to an Ethernet device as the appropriate
               set_multicast_list function of the network device isn't called
  Problem:     network stack doesn't notify the network devices for every
               multicast address
  Solution:    introduced a multicast notifier chain so that network devices
               may register if they need to be notified.
  Problem-ID:  --
  Archs:       s390-31,s390-64

--- linux-2.5/drivers/s390/net/qeth_main.c	4 Jun 2004 13:02:34 -0000	1.77.2.18
+++ linux-2.5/drivers/s390/net/qeth_main.c	20 Jun 2004 23:48:23 -0000	1.77.2.19
@@ -1,6 +1,6 @@
 /*
  * 
- * linux/drivers/s390/net/qeth_main.c ($Revision: 1.77.2.18 $)
+ * linux/drivers/s390/net/qeth_main.c ($Revision: 1.77.2.19 $)
  *
  * Linux on zSeries OSA Express and HiperSockets support
  *
@@ -12,7 +12,7 @@
  *			  Frank Pavlic (pavlic@de.ibm.com) and
  *		 	  Thomas Spatzier <tspat@de.ibm.com>
  *
- *    $Revision: 1.77.2.18 $	 $Date: 2004/06/04 13:02:34 $
+ *    $Revision: 1.77.2.19 $	 $Date: 2004/06/20 23:48:23 $
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -78,7 +78,7 @@
 #include "qeth_mpc.h"
 #include "qeth_fs.h"
 
-#define VERSION_QETH_C "$Revision: 1.77.2.18 $"
+#define VERSION_QETH_C "$Revision: 1.77.2.19 $"
 static const char *version = "qeth S/390 OSA-Express driver";
 
 /**
@@ -6956,6 +6956,28 @@
 	0
 };
 
+static int
+qeth_multicast_event(struct notifier_block *this,
+                    unsigned long event, void *ptr)
+{
+       struct qeth_card *card;
+       struct ip_mc_list *mc  = (struct ip_mc_list *) ptr;
+       struct net_device *dev = mc->interface->dev;
+      
+       QETH_DBF_TEXT(trace,3,"mcevent");
+       card = qeth_get_card_from_dev(dev);
+       if (!card)
+	       return NOTIFY_DONE;
+
+       qeth_set_multicast_list(dev);
+       return NOTIFY_DONE;
+}
+
+static struct notifier_block qeth_mc_notifier = {
+        qeth_multicast_event,
+        0
+};
+
 #ifdef CONFIG_QETH_IPV6
 /**
  * IPv6 event handler
@@ -7008,6 +7030,32 @@
 	qeth_ip6_event,
 	0
 };
+
+
+static int
+qeth_multicast6_event(struct notifier_block *this,
+                    unsigned long event, void *ptr)
+{
+	struct qeth_card *card;
+	struct ifmcaddr6 *mc  = (struct ifmcaddr6 *) ptr;
+	struct net_device *dev = mc->idev->dev;
+
+	QETH_DBF_TEXT(trace,3,"mc6event");
+	card = qeth_get_card_from_dev(dev);
+	if (!card)
+		return NOTIFY_DONE;
+	if (!qeth_is_supported(card, IPA_IPV6))
+		return NOTIFY_DONE;
+
+	qeth_set_multicast_list(dev);
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block qeth_mc6_notifier = {
+	qeth_multicast6_event,
+	0
+};
+
 #endif
 
 static int
@@ -7042,19 +7090,27 @@
 	QETH_DBF_TEXT(trace,5,"regnotif");
 	if ((r = register_reboot_notifier(&qeth_reboot_notifier)))
 		return r;
+	if ((r = register_multicast_notifier(&qeth_mc_notifier)))
+		goto out_mc;
 	if ((r = register_inetaddr_notifier(&qeth_ip_notifier)))
 		goto out_reboot;
 #ifdef CONFIG_QETH_IPV6
-	if ((r = register_inet6addr_notifier(&qeth_ip6_notifier)))
+	if ((r = register_multicast6_notifier(&qeth_mc6_notifier)))
 		goto out_ipv4;
+	if ((r = register_inet6addr_notifier(&qeth_ip6_notifier)))
+		goto out_ipv6;
 #endif 
 	return 0;
 	
 #ifdef CONFIG_QETH_IPV6
+out_ipv6:
+	unregister_multicast6_notifier(&qeth_mc6_notifier);
 out_ipv4:
 	unregister_inetaddr_notifier(&qeth_ip_notifier);
 #endif
 out_reboot:
+	unregister_multicast_notifier(&qeth_mc_notifier);
+out_mc:
 	unregister_reboot_notifier(&qeth_reboot_notifier);
 	return r;
 }
@@ -7069,7 +7125,9 @@
 	QETH_DBF_TEXT(trace,5,"unregnot");
 	BUG_ON(unregister_reboot_notifier(&qeth_reboot_notifier));
 	BUG_ON(unregister_inetaddr_notifier(&qeth_ip_notifier));
+	BUG_ON(unregister_multicast_notifier(&qeth_mc_notifier));
 #ifdef CONFIG_QETH_IPV6
+	BUG_ON(unregister_multicast6_notifier(&qeth_mc6_notifier));
 	BUG_ON(unregister_inet6addr_notifier(&qeth_ip6_notifier));
 #endif /* QETH_IPV6 */
 

