- Description: lcs & qeth: registering multicast addresses for Token Ring and
               Ethernet failed
  Symptom:     trying to join another multicast group fails for all multicast
               addresses belonging to a Token Ring device and some multicast
               addresses belonging to an Ethernet device as the appropriate
               set_multicast_list function of the network device isn't called
  Problem:     network stack doesn't notify the network devices for every
               multicast address
  Solution:    introduced a multicast notifier chain so that network devices
               may register if they need to be notified.
  Problem-ID:  --
  Archs:       s390-31,s390-64

--- linux-2.5/include/linux/igmp.h	11 Aug 2003 16:46:44 -0000	1.5
+++ linux-2.5/include/linux/igmp.h	20 Jun 2004 23:48:23 -0000	1.5.6.1
@@ -195,6 +195,9 @@
 #define IGMPV3_QQIC(value) IGMPV3_EXP(0x80, 4, 3, value)
 #define IGMPV3_MRC(value) IGMPV3_EXP(0x80, 4, 3, value)
 
+extern int register_multicast_notifier(struct notifier_block *nb);
+extern int unregister_multicast_notifier(struct notifier_block *nb);
+
 extern int ip_check_mc(struct in_device *dev, u32 mc_addr, u32 src_addr, u16 proto);
 extern int igmp_rcv(struct sk_buff *);
 extern int ip_mc_join_group(struct sock *sk, struct ip_mreqn *imr);

--- linux-2.5/include/net/addrconf.h	11 Mar 2004 10:00:28 -0000	1.10
+++ linux-2.5/include/net/addrconf.h	20 Jun 2004 23:48:23 -0000	1.10.2.1
@@ -81,6 +81,10 @@
 /*
  *	multicast prototypes (mcast.c)
  */
+
+extern int register_multicast6_notifier(struct notifier_block *nb);
+extern int unregister_multicast6_notifier(struct notifier_block *nb);
+
 extern int ipv6_sock_mc_join(struct sock *sk, int ifindex, 
 		  struct in6_addr *addr);
 extern int ipv6_sock_mc_drop(struct sock *sk, int ifindex, 

--- linux-2.5/net/ipv4/igmp.c	5 Apr 2004 09:28:01 -0000	1.24
+++ linux-2.5/net/ipv4/igmp.c	20 Jun 2004 23:48:23 -0000	1.24.2.1
@@ -156,6 +156,19 @@
 
 #ifdef CONFIG_IP_MULTICAST
 
+static struct notifier_block *multicast_chain;
+
+int register_multicast_notifier(struct notifier_block *nb)
+{
+	        return notifier_chain_register(&multicast_chain, nb);
+}
+
+int unregister_multicast_notifier(struct notifier_block *nb)
+{
+	        return notifier_chain_unregister(&multicast_chain,nb);
+}
+
+
 /*
  *	Timer management
  */
@@ -1176,6 +1189,8 @@
 	igmp_group_added(im);
 	if (!in_dev->dead)
 		ip_rt_multicast_event(in_dev);
+	notifier_call_chain(&multicast_chain, NETDEV_REGISTER, im);
+		
 out:
 	return;
 }
@@ -1200,7 +1215,10 @@
 
 				if (!in_dev->dead)
 					ip_rt_multicast_event(in_dev);
-
+			
+				notifier_call_chain(&multicast_chain,
+						    NETDEV_UNREGISTER,
+						    i);
 				ip_ma_put(i);
 				return;
 			}
@@ -2461,6 +2479,8 @@
 }
 #endif
 
+EXPORT_SYMBOL(register_multicast_notifier);
+EXPORT_SYMBOL(unregister_multicast_notifier);
 EXPORT_SYMBOL(ip_mc_dec_group);
 EXPORT_SYMBOL(ip_mc_inc_group);
 EXPORT_SYMBOL(ip_mc_join_group);

--- linux-2.5/net/ipv6/mcast.c	11 Mar 2004 10:00:38 -0000	1.24
+++ linux-2.5/net/ipv6/mcast.c	20 Jun 2004 23:48:24 -0000	1.24.2.1
@@ -128,6 +128,20 @@
 
 static struct socket *igmp6_socket;
 
+
+static struct notifier_block *multicast_chain;
+
+int register_multicast6_notifier(struct notifier_block *nb)
+{
+        return notifier_chain_register(&multicast_chain, nb);
+}
+
+int unregister_multicast6_notifier(struct notifier_block *nb)
+{
+        return notifier_chain_unregister(&multicast_chain,nb);
+}
+
+
 static void igmp6_join_group(struct ifmcaddr6 *ma);
 static void igmp6_leave_group(struct ifmcaddr6 *ma);
 static void igmp6_timer_handler(unsigned long data);
@@ -863,6 +877,7 @@
 
 	mld_del_delrec(idev, &mc->mca_addr);
 	igmp6_group_added(mc);
+	notifier_call_chain(&multicast_chain, NETDEV_REGISTER, mc);
 	ma_put(mc);
 	return 0;
 }
@@ -882,6 +897,8 @@
 				write_unlock_bh(&idev->lock);
 
 				igmp6_group_dropped(ma);
+				notifier_call_chain(&multicast_chain,
+						    NETDEV_UNREGISTER, ma);
 
 				ma_put(ma);
 				return 0;

