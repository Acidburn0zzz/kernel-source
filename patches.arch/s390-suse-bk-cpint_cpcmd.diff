--- 11/arch/s390/kernel/cpcmd.c
+++ bk/arch/s390/kernel/cpcmd.c
@@ -13,6 +13,8 @@
 #include <linux/spinlock.h>
 #include <asm/cpcmd.h>
 #include <asm/system.h>
+#include <linux/slab.h>
+#include <asm/errno.h>
 
 static spinlock_t cpcmd_lock = SPIN_LOCK_UNLOCKED;
 static char cpcmd_buf[128];
@@ -77,3 +78,57 @@
 	spin_unlock_irqrestore(&cpcmd_lock, flags);
 }
 
+/* improved cpcmd for cpint module */
+int cpint_cpcmd(CPCmd_Dev *devExt)
+{
+    const int mask = 0x60000000L;
+    int rspSize = -EOPNOTSUPP;
+    int cc = -1;
+
+    if (!MACHINE_IS_VM)
+	goto out;
+
+    while (cc != 0)
+    {
+        asm volatile("LRA   2,0(%3)\t/* Get cmd address */\n\t"
+		      "LR    4,%4\t/* Get length of command */\n\t"
+		      "O     4,%7\t/* Set flags */\n\t"
+		      "LRA   3,0(%5)\t/* Get response address */\n\t"
+		      "LR    5,%6\t/* Get response length */\n\t"
+		      "AHI   5,-1\t/* Leave room for eol */\n\t"
+#ifdef __s390x__
+		      "SAM31\t\t/* Get into 31 bit mode */\n\t"
+#endif
+		      ".long 0x83240008\t/* Issue command */\n\t"
+#ifdef __s390x__
+		      "SAM64\t\t/* Return to 64 bit mode */\n\t"
+#endif
+		      "IPM   %1\t\t/* Get CC */\n\t"
+		      "SRL   %1,28\t/* Shuffle down */\n\t"
+#ifdef __s390x__
+		      "LGFR  %0,4\t/* Keep return code */\n\t"
+#else
+		      "LR    %0,4\t/* Keep return code */\n\t"
+#endif
+		      "LR    %2,5\t/* Get response length */\n\t"
+		      : "=d" (devExt->rc), "=d" (cc), "=d" (rspSize)
+		      : "a" (devExt->cmd), "d" (devExt->count),
+		        "a" (devExt->data), "d" (devExt->size),
+		        "m" (mask)
+		      : "cc", "2", "3", "4", "5");
+	if (cc != 0) {
+	    if (rspSize <= 65536) {
+		devExt->size += rspSize + 1;
+		devExt->data = kmalloc(devExt->size, GFP_DMA);
+		if (devExt->data) {
+		    memset(devExt->data, 0, devExt->size);
+		    continue;
+		}
+	    }
+	    return -ENOMEM;
+	}
+    }
+    devExt->size = rspSize;
+out:
+    return rspSize;
+}
--- 11/arch/s390/kernel/s390_ksyms.c
+++ bk/arch/s390/kernel/s390_ksyms.c
@@ -68,6 +68,7 @@
 EXPORT_SYMBOL(machine_flags);
 EXPORT_SYMBOL(__udelay);
 EXPORT_SYMBOL(kernel_thread);
+EXPORT_SYMBOL(cpint_cpcmd);
 EXPORT_SYMBOL(csum_fold);
 EXPORT_SYMBOL(console_mode);
 EXPORT_SYMBOL(console_device);
--- 11/include/asm-s390/cpcmd.h
+++ bk/include/asm-s390/cpcmd.h
@@ -9,6 +9,33 @@
 #ifndef __CPCMD__
 #define __CPCMD__
 
+#include <linux/wait.h>
+/*
+ * For cpint_cpcmd:
+ */
+typedef struct CPInt_Dev {
+   void  *devExt;              /* Device type extension     */
+   uid_t devOwner;             /* Current owner of device   */
+   int   devLock;              /* Lock word for device      */
+   wait_queue_head_t devWait;  /* Wait queue for device     */
+} CPInt_Dev;
+
+typedef struct CPCmd_Dev {
+   char cmd[240];            /* The CP command                 */
+   char *data;               /* CP command response buffer     */
+   CPInt_Dev *dev;           /* Pointer to the base device     */
+   unsigned long count;      /* Length of the command          */
+   unsigned long size;       /* Length of the response         */
+   int rc;                   /* Return code from CP command    */
+   int flag;                /* Options flag                   */
+#define UPCASE 0x80         /* Only command is uppercased     */
+} CPCmd_Dev;
+
+/*
+ * Exported function for cpint module:
+ */
+extern int cpint_cpcmd(CPCmd_Dev *devExt);
+
 extern void cpcmd(char *cmd, char *response, int rlen);
 
 #endif
