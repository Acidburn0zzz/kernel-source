Subject: [PATCH] kdump-image-rm-static                                                                                                                               
From: David Wilder <dwilder@us.ibm.com>                                                                                                                              
Date: Mon, 10 Apr 2006 15:30:58 -0700                                                                                                                                
Message-ID: <443ADCA2.20903@us.ibm.com>

Bug 149545 - LTC21344-kdump boot panic when a CPU hangs in the first kernel

On powerpc, the panic CPU sends an IPI to shoot down other CPUs.
Since not an NMI, may not able to stop all CPUs before kdump boot.
However, one solution could be, if some CPUs are not stopped, asking the
user to activate soft-reset (either from management console or pressing
soft-reset button) which sends FW NMI to all CPUs. These CPUS will execute
arch specific kdump func which has to be invoked machine_kexec() directly.
At present, kexec_crash_image is not passed to machine_crash_shutdown()
or defined as static in kexec.c.

Signed-off-by: Haren Myneni <haren@us.ibm.com>
Signed-off-by: Olaf Hering <olh@suse.de>

---
 kernel/kexec.c |    8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

Index: linux-2.6.16-olh-kdump/kernel/kexec.c
===================================================================
--- linux-2.6.16-olh-kdump.orig/kernel/kexec.c
+++ linux-2.6.16-olh-kdump/kernel/kexec.c
@@ -903,7 +903,7 @@ static int kimage_load_segment(struct ki
  * that to happen you need to do that yourself.
  */
 struct kimage *kexec_image = NULL;
-static struct kimage *kexec_crash_image = NULL;
+struct kimage *kexec_crash_image = NULL;
 /*
  * A home grown binary mutex.
  * Nothing can wait so this mutex is safe to use
@@ -1042,7 +1042,6 @@ asmlinkage long compat_sys_kexec_load(un
 
 void crash_kexec(struct pt_regs *regs)
 {
-	struct kimage *image;
 	int locked;
 
 
@@ -1056,12 +1055,11 @@ void crash_kexec(struct pt_regs *regs)
 	 */
 	locked = xchg(&kexec_lock, 1);
 	if (!locked) {
-		image = xchg(&kexec_crash_image, NULL);
-		if (image) {
+		if (kexec_crash_image) {
 			struct pt_regs fixed_regs;
 			crash_setup_regs(&fixed_regs, regs);
 			machine_crash_shutdown(&fixed_regs);
-			machine_kexec(image);
+			machine_kexec(kexec_crash_image);
 		}
 		xchg(&kexec_lock, 0);
 	}
