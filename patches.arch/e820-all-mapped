Subject: Introduce e820_all_mapped
From: Arjan van de Ven <arjan@linux.intel.com>
Acked-by: ak@suse.de
Patch-mainline: 2.6.17
References: 160583

Introduce a e820_all_mapped() function which checks if the entire
range <start,end> is mapped with type. This is done by moving the local
start variable to the end of each known-good region; if at the end
of the function the start address is still before end, there must be
a part that's not of the correct type; otherwise it's a good region.

Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>
Signed-off-by: Andi Kleen <ak@suse.de>

---
 arch/i386/kernel/setup.c  |   30 ++++++++++++++++++++++++++++++
 arch/x86_64/kernel/e820.c |   33 +++++++++++++++++++++++++++++++++
 include/asm-i386/e820.h   |    4 ++++
 include/asm-x86_64/e820.h |    1 +
 4 files changed, 68 insertions(+)

Index: linux-2.6.16/arch/x86_64/kernel/e820.c
===================================================================
--- linux-2.6.16.orig/arch/x86_64/kernel/e820.c
+++ linux-2.6.16/arch/x86_64/kernel/e820.c
@@ -80,6 +80,10 @@ static inline int bad_addr(unsigned long
 	return 0;
 } 
 
+/*
+ * This function checks if any part of the range <start,end> is mapped
+ * with type.
+ */
 int __init e820_any_mapped(unsigned long start, unsigned long end, unsigned type) 
 { 
 	int i;
@@ -94,6 +98,35 @@ int __init e820_any_mapped(unsigned long
 	return 0;
 }
 
+/*
+ * This function checks if the entire range <start,end> is mapped with type.
+ *
+ * Note: this function only works correct if the e820 table is sorted and
+ * not-overlapping, which is the case
+ */
+int __init e820_all_mapped(unsigned long start, unsigned long end, unsigned type)
+{
+	int i;
+	for (i = 0; i < e820.nr_map; i++) {
+		struct e820entry *ei = &e820.map[i];
+		if (type && ei->type != type)
+			continue;
+		/* is the region (part) in overlap with the current region ?*/
+		if (ei->addr >= end || ei->addr + ei->size <= start)
+			continue;
+
+		/* if the region is at the beginning of <start,end> we move
+		 * start to the end of the region since it's ok until there
+		 */
+		if (ei->addr <= start)
+			start = ei->addr + ei->size;
+		/* if start is now at or beyond end, we're done, full coverage */
+		if (start >= end)
+			return 1; /* we're done */
+	}
+	return 0;
+}
+
 /* 
  * Find a free area in a specific range. 
  */ 
Index: linux-2.6.16/include/asm-x86_64/e820.h
===================================================================
--- linux-2.6.16.orig/include/asm-x86_64/e820.h
+++ linux-2.6.16/include/asm-x86_64/e820.h
@@ -48,6 +48,7 @@ extern unsigned long e820_end_of_ram(voi
 extern void e820_reserve_resources(void);
 extern void e820_print_map(char *who);
 extern int e820_any_mapped(unsigned long start, unsigned long end, unsigned type);
+extern int e820_all_mapped(unsigned long start, unsigned long end, unsigned type);
 
 extern void e820_bootmem_free(pg_data_t *pgdat, unsigned long start,unsigned long end);
 extern void e820_setup_gap(void);
Index: linux-2.6.16/arch/i386/kernel/setup.c
===================================================================
--- linux-2.6.16.orig/arch/i386/kernel/setup.c
+++ linux-2.6.16/arch/i386/kernel/setup.c
@@ -965,6 +965,36 @@ efi_memory_present_wrapper(unsigned long
 	return 0;
 }
 
+ /*
+  * This function checks if the entire range <start,end> is mapped with type.
+  *
+  * Note: this function only works correct if the e820 table is sorted and
+  * not-overlapping, which is the case
+  */
+int __init
+e820_all_mapped(unsigned long start, unsigned long end, unsigned type)
+{
+	int i;
+	for (i = 0; i < e820.nr_map; i++) {
+		struct e820entry *ei = &e820.map[i];
+		if (type && ei->type != type)
+			continue;
+		/* is the region (part) in overlap with the current region ?*/
+		if (ei->addr >= end || ei->addr + ei->size <= start)
+			continue;
+		/* if the region is at the beginning of <start,end> we move
+		 * start to the end of the region since it's ok until there
+		 */
+		if (ei->addr <= start)
+			start = ei->addr + ei->size;
+		/* if start is now at or beyond end, we're done, full
+		 * coverage */
+		if (start >= end)
+			return 1; /* we're done */
+	}
+	return 0;
+}
+
 /*
  * Find the highest page frame number we have available
  */
Index: linux-2.6.16/include/asm-i386/e820.h
===================================================================
--- linux-2.6.16.orig/include/asm-i386/e820.h
+++ linux-2.6.16/include/asm-i386/e820.h
@@ -35,6 +35,10 @@ struct e820map {
 };
 
 extern struct e820map e820;
+
+extern int e820_all_mapped(unsigned long start, unsigned long end,
+			   unsigned type);
+
 #endif/*!__ASSEMBLY__*/
 
 #endif/*__E820_HEADER*/
