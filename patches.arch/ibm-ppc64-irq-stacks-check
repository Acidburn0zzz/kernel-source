Date: Fri, 7 May 2004 23:15:47 +1000
From: Paul Mackerras <paulus@samba.org>
To: olh@suse.de
Cc: anton@samba.org
Subject: Fix stack traces for irq stacks

Olaf,

When I added the irq stacks I missed the check in show_stack() where
it checks the stack pointer before looking to see if the current stack
frame is an exception frame.  The consequence is that a stack trace
won't show exception frames that are in the hard or soft irq stack.
There was a similar check in xmon in the stack trace routine there.
This patch fixes both.

Thanks,
Paul.

diff -urN linux-2.6.5/arch/ppc64/kernel/process.c newxmon/arch/ppc64/kernel/process.c
--- linux-2.6.5/arch/ppc64/kernel/process.c	2004-05-07 09:54:53.000000000 +1000
+++ newxmon/arch/ppc64/kernel/process.c	2004-05-07 22:21:40.898929104 +1000
@@ -457,24 +457,25 @@
 
 static int kstack_depth_to_print = 64;
 
-static int validate_sp(unsigned long sp, struct task_struct *p)
+static int validate_sp(unsigned long sp, struct task_struct *p,
+		       unsigned long nbytes)
 {
 	int cpu = task_cpu(p);
 	unsigned long stack_page = (unsigned long)p->thread_info;
 
 	if (sp >= stack_page + sizeof(struct thread_struct)
-	    && sp <= stack_page + THREAD_SIZE - 112)
+	    && sp <= stack_page + THREAD_SIZE - nbytes)
 		return 1;
 
 #ifdef CONFIG_IRQSTACKS
 	stack_page = (unsigned long) hardirq_ctx[cpu];
 	if (sp >= stack_page + sizeof(struct thread_struct)
-	    && sp <= stack_page + THREAD_SIZE - 112)
+	    && sp <= stack_page + THREAD_SIZE - nbytes)
 		return 1;
 
 	stack_page = (unsigned long) softirq_ctx[cpu];
 	if (sp >= stack_page + sizeof(struct thread_struct)
-	    && sp <= stack_page + THREAD_SIZE - 112)
+	    && sp <= stack_page + THREAD_SIZE - nbytes)
 		return 1;
 #endif
 
@@ -496,12 +497,12 @@
 		return 0;
 
 	sp = p->thread.ksp;
-	if (!validate_sp(sp, p))
+	if (!validate_sp(sp, p, 112))
 		return 0;
 
 	do {
 		sp = *(unsigned long *)sp;
-		if (!validate_sp(sp, p))
+		if (!validate_sp(sp, p, 112))
 			return 0;
 		if (count > 0) {
 			ip = *(unsigned long *)(sp + 16);
@@ -531,7 +532,7 @@
 	lr = 0;
 	printk("Call Trace:\n");
 	do {
-		if (!validate_sp(sp, p))
+		if (!validate_sp(sp, p, 112))
 			return;
 
 		_sp = (unsigned long *) sp;
@@ -550,8 +551,7 @@
 		 * See if this is an exception frame.
 		 * We look for the "regshere" marker in the current frame.
 		 */
-		if (sp <= (unsigned long) p->thread_info + THREAD_SIZE
-			+ sizeof(struct pt_regs) + 400
+		if (validate_sp(sp, p, sizeof(struct pt_regs) + 400)
 		    && _sp[12] == 0x7265677368657265) {
 			struct pt_regs *regs = (struct pt_regs *)
 				(sp + STACK_FRAME_OVERHEAD);
