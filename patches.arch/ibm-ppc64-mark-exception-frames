ChangeSet
  1.1592 04/04/28 22:48:35 paulus@samba.org +2 -0
  Mark exception frames, look for the marker in show_stack().
  
  This makes it clear where the exception frames are in a stack
  trace.  We also mark the first return address after an exception
  (and the first one in the trace) as "(unreliable)".

  arch/ppc64/kernel/process.c
    1.60 04/04/28 22:48:29 paulus@samba.org +35 -9
    Look for the exception frame markers on the stack and print
    the NIP and LR from the frame when doing a stack trace.

  arch/ppc64/kernel/head.S
    1.65 04/04/28 22:48:29 paulus@samba.org +4 -0
    Put a marker on the stack in save_remaining_regs so we can
    find exception frames when doing stack traces.

diff -Nru a/arch/ppc64/kernel/head.S b/arch/ppc64/kernel/head.S
--- a/arch/ppc64/kernel/head.S	Wed Apr 28 15:22:11 2004
+++ b/arch/ppc64/kernel/head.S	Wed Apr 28 15:22:11 2004
@@ -1278,6 +1278,10 @@
 	SAVE_4GPRS(16, r1)
 	SAVE_8GPRS(24, r1)
 
+	/* Set the marker value "regshere" just before the reg values */
+	SET_REG_TO_CONST(r22, 0x7265677368657265)
+	std	r22,STACK_FRAME_OVERHEAD-16(r1)
+
 	/*
 	 * Clear the RESULT field
 	 */
diff -Nru a/arch/ppc64/kernel/process.c b/arch/ppc64/kernel/process.c
--- a/arch/ppc64/kernel/process.c	Wed Apr 28 15:22:11 2004
+++ b/arch/ppc64/kernel/process.c	Wed Apr 28 15:22:11 2004
@@ -463,7 +463,8 @@
 
 	if (sp < stack_page + sizeof(struct thread_struct))
 		return 0;
-	if (sp >= stack_page + THREAD_SIZE)
+	/* stack frames are at least 64 bytes */
+	if (sp > stack_page + THREAD_SIZE - 64)
 		return 0;
 
 	return 1;
@@ -502,9 +503,10 @@
 
 void show_stack(struct task_struct *p, unsigned long *_sp)
 {
-	unsigned long ip;
+	unsigned long ip, newsp, lr;
 	int count = 0;
 	unsigned long sp = (unsigned long)_sp;
+	int firstframe = 1;
 
 	if (sp == 0) {
 		if (p) {
@@ -515,17 +517,41 @@
 		}
 	}
 
-	if (!validate_sp(sp, p))
-		return;
-
+	lr = 0;
 	printk("Call Trace:\n");
 	do {
-		sp = *(unsigned long *)sp;
 		if (!validate_sp(sp, p))
 			return;
-		ip = *(unsigned long *)(sp + 16);
-		printk("[%016lx] ", ip);
-		print_symbol("%s\n", ip);
+
+		_sp = (unsigned long *) sp;
+		newsp = _sp[0];
+		ip = _sp[2];
+		if (!firstframe || ip != lr) {
+			printk("[%016lx] [%016lx] ", sp, ip);
+			print_symbol("%s", ip);
+			if (firstframe)
+				printk(" (unreliable)");
+			printk("\n");
+		}
+		firstframe = 0;
+
+		/*
+		 * See if this is an exception frame.
+		 * We look for the "regshere" marker in the current frame.
+		 */
+		if (sp <= (unsigned long) p->thread_info + THREAD_SIZE
+			+ sizeof(struct pt_regs) + 400
+		    && _sp[12] == 0x7265677368657265) {
+			struct pt_regs *regs = (struct pt_regs *)
+				(sp + STACK_FRAME_OVERHEAD);
+			printk("--- Exception: %lx", regs->trap);
+			print_symbol(" at %s\n", regs->nip);
+			lr = regs->link;
+			print_symbol("    LR = %s\n", lr);
+			firstframe = 1;
+		}
+
+		sp = newsp;
 	} while (count++ < kstack_depth_to_print);
 }
 
.........................................................................
# vim: syntax=diff

