==============================
01_sles-macro-cleanup-1.patch:
==============================
Corresponds to BK revision 1.1713.31.15
[PATCH] ppc64: Fix bug in hugepage support

From: David Gibson <david@gibson.dropbear.id.au>

The PPC64 version of is_aligned_hugepage_range() is buggy.  It is supposed to
test not only that the given range is hugepage aligned, but that it lies
within the address space allowed for hugepages.  We were checking only that
the given range intersected the hugepage range, not that it lay entirely
within it.  This patch fixes the problem and changes the name of some macros
to make it less likely to make that misunderstanding again.


diff -purN SLES9-cvs-current/arch/ppc64/mm/hugetlbpage.c SLES9-cvs-current-work/arch/ppc64/mm/hugetlbpage.c
--- SLES9-cvs-current/arch/ppc64/mm/hugetlbpage.c	Thu Apr 15 10:22:53 2004
+++ SLES9-cvs-current-work/arch/ppc64/mm/hugetlbpage.c	Thu Apr 15 11:05:51 2004
@@ -229,7 +229,8 @@ int is_aligned_hugepage_range(unsigned l
 		return -EINVAL;
 	if (addr & ~HPAGE_MASK)
 		return -EINVAL;
-	if (! is_hugepage_only_range(addr, len))
+	if (! (within_hugepage_low_range(addr, len)
+	       || within_hugepage_high_range(addr, len)) )
 		return -EINVAL;
 	return 0;
 }
@@ -299,9 +300,9 @@ static int open_32bit_htlbpage_range(str
 
 int prepare_hugepage_range(unsigned long addr, unsigned long len)
 {
-	if (is_hugepage_high_range(addr, len))
+	if (within_hugepage_high_range(addr, len))
 		return 0;
-	else if (is_hugepage_low_range(addr, len))
+	else if (within_hugepage_low_range(addr, len))
 		return open_32bit_htlbpage_range(current->mm);
 
 	return -EINVAL;
