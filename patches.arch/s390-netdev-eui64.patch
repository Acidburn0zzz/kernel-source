diff -u --recursive linux-2.6.8-rc1/drivers/net/net_init.c linux-2.6.8-rc1.hotplug/drivers/net/net_init.c
--- linux-2.6.8-rc1/drivers/net/net_init.c	2004-07-11 19:33:54.000000000 +0200
+++ linux-2.6.8-rc1.hotplug/drivers/net/net_init.c	2004-07-14 16:07:44.000000000 +0200
@@ -279,7 +279,8 @@
 	dev->hard_header_cache	= eth_header_cache;
 	dev->header_cache_update= eth_header_cache_update;
 	dev->hard_header_parse	= eth_header_parse;
-
+	dev->generate_eui64     = NULL;
+	dev->dev_id             = 0;
 	dev->type		= ARPHRD_ETHER;
 	dev->hard_header_len 	= ETH_HLEN;
 	dev->mtu		= 1500; /* eth_mtu */
@@ -305,6 +306,8 @@
 	dev->change_mtu			= fddi_change_mtu;
 	dev->hard_header		= fddi_header;
 	dev->rebuild_header		= fddi_rebuild_header;
+	dev->generate_eui64             = NULL;
+	dev->dev_id                     = 0;
 
 	dev->type				= ARPHRD_FDDI;
 	dev->hard_header_len	= FDDI_K_SNAP_HLEN+3;	/* Assume 802.2 SNAP hdr len + 3 pad bytes */
@@ -415,6 +418,8 @@
 	
 	dev->hard_header	= tr_header;
 	dev->rebuild_header	= tr_rebuild_header;
+	dev->generate_eui64     = NULL;
+	dev->dev_id             = 0;
 
 	dev->type		= ARPHRD_IEEE802_TR;
 	dev->hard_header_len	= TR_HLEN;
diff -u --recursive linux-2.6.8-rc1/include/linux/netdevice.h linux-2.6.8-rc1.hotplug/include/linux/netdevice.h
--- linux-2.6.8-rc1/include/linux/netdevice.h	2004-07-11 19:35:29.000000000 +0200
+++ linux-2.6.8-rc1.hotplug/include/linux/netdevice.h	2004-07-14 16:07:44.000000000 +0200
@@ -462,6 +462,7 @@
 						     unsigned char *haddr);
 	int			(*neigh_setup)(struct net_device *dev, struct neigh_parms *);
 	int			(*accept_fastpath)(struct net_device *, struct dst_entry*);
+	int                     (*generate_eui64)(u8 *eui, struct net_device *dev);
 #ifdef CONFIG_NETPOLL_RX
 	int			netpoll_rx;
 #endif
@@ -486,6 +487,10 @@
 	/* class/net/name entry */
 	struct class_device	class_dev;
 	struct net_device_stats* (*last_stats)(struct net_device *);
+
+	/* use dev_id in conjunction with shared network cards*/
+	unsigned short           dev_id; 
+
 	/* how much padding had been added by alloc_netdev() */
 	int padded;
 };
diff -u --recursive linux-2.6.8-rc1/include/net/addrconf.h linux-2.6.8-rc1.hotplug/include/net/addrconf.h
--- linux-2.6.8-rc1/include/net/addrconf.h	2004-07-11 19:35:08.000000000 +0200
+++ linux-2.6.8-rc1.hotplug/include/net/addrconf.h	2004-07-14 16:07:44.000000000 +0200
@@ -70,6 +70,7 @@
 					       struct in6_addr *saddr,
 					       int onlink);
 extern int			ipv6_get_lladdr(struct net_device *dev, struct in6_addr *);
+extern int                      ipv6_generate_eui64(u8 *eui, struct net_device *dev);
 extern int			ipv6_rcv_saddr_equal(const struct sock *sk, 
 						      const struct sock *sk2);
 extern void			addrconf_join_solict(struct net_device *dev,
diff -u --recursive linux-2.6.8-rc1/net/8021q/vlan.c linux-2.6.8-rc1.hotplug/net/8021q/vlan.c
--- linux-2.6.8-rc1/net/8021q/vlan.c	2004-07-11 19:35:08.000000000 +0200
+++ linux-2.6.8-rc1.hotplug/net/8021q/vlan.c	2004-07-14 16:07:44.000000000 +0200
@@ -471,6 +471,10 @@
 	new_dev->flags = real_dev->flags;
 	new_dev->flags &= ~IFF_UP;
 
+	/* ipv6 shared card related stuff */
+	new_dev->dev_id = real_dev->dev_id;
+	new_dev->generate_eui64 = real_dev->generate_eui64;
+
 	/* need 4 bytes for extra VLAN header info,
 	 * hope the underlying device can handle it.
 	 */
diff -u --recursive linux-2.6.8-rc1/net/ipv6/addrconf.c linux-2.6.8-rc1.hotplug/net/ipv6/addrconf.c
--- linux-2.6.8-rc1/net/ipv6/addrconf.c	2004-07-11 19:35:29.000000000 +0200
+++ linux-2.6.8-rc1.hotplug/net/ipv6/addrconf.c	2004-07-14 16:07:44.000000000 +0200
@@ -1057,7 +1057,7 @@
 }
 
 
-static int ipv6_generate_eui64(u8 *eui, struct net_device *dev)
+int ipv6_generate_eui64(u8 *eui, struct net_device *dev)
 {
 	switch (dev->type) {
 	case ARPHRD_ETHER:
@@ -1115,7 +1115,7 @@
 
 	dev = idev->dev;
 
-	if (ipv6_generate_eui64(idev->work_eui64, dev)) {
+	if (dev->generate_eui64(idev->work_eui64, dev)) {
 		printk(KERN_INFO
 			"__ipv6_regen_rndid(idev=%p): cannot get EUI64 identifier; use random bytes.\n",
 			idev);
@@ -1379,7 +1379,7 @@
 
 		if (pinfo->prefix_len == 64) {
 			memcpy(&addr, &pinfo->prefix, 8);
-			if (ipv6_generate_eui64(addr.s6_addr + 8, dev) &&
+			if (dev->generate_eui64(addr.s6_addr + 8, dev) &&
 			    ipv6_inherit_eui64(addr.s6_addr + 8, in6_dev)) {
 				in6_dev_put(in6_dev);
 				return;
@@ -1783,14 +1783,16 @@
 		return;
 	}
 
+	if (!dev->generate_eui64) 
+		dev->generate_eui64 = ipv6_generate_eui64;
+
 	idev = addrconf_add_dev(dev);
 	if (idev == NULL)
 		return;
 
 	memset(&addr, 0, sizeof(struct in6_addr));
 	addr.s6_addr32[0] = htonl(0xFE800000);
-
-	if (ipv6_generate_eui64(addr.s6_addr + 8, dev) == 0)
+	if (dev->generate_eui64(addr.s6_addr + 8, dev) == 0)
 		addrconf_add_linklocal(idev, &addr);
 }
 
