From 4901477d33667f7f53c52e481985a280a103b24a Mon Sep 17 00:00:00 2001
From: Alexander Graf <agraf@suse.de>
Date: Wed, 22 Oct 2014 13:01:55 +0200
Subject: [PATCH 10/10] KVM: ARM: Hack to enable VGIC mapping on 64k PAGE_SIZE
 kernels
Patch-mainline: No
References: bnc#902633

Originally commit 63afbe7a0ac disabled mapping of unaligned VGIC regions
on 64k PAGE_SIZE enabled kernels. However, we want to be able to support
broken hardware, even if it allows guests to crash the hosts.

Hack things up for now to enable the map again. Also add a sanity check
to make sure that normal user space doesn't blow up hosts unknowingly.

To allow guests to find out where to map the vgic, expose the offset to
user space via the device api.

Do not use KVM on broken hosts unless you know what you're doing!

Signed-off-by: Alexander Graf <agraf@suse.de>

---
 arch/arm/include/uapi/asm/kvm.h   |  1 +
 arch/arm64/include/uapi/asm/kvm.h |  1 +
 virt/kvm/arm/vgic-v2.c            |  2 ++
 virt/kvm/arm/vgic.c               | 19 +++++++++++++++++++
 4 files changed, 23 insertions(+)

diff --git a/arch/arm/include/uapi/asm/kvm.h b/arch/arm/include/uapi/asm/kvm.h
index 09ee408..1cc85d8 100644
--- a/arch/arm/include/uapi/asm/kvm.h
+++ b/arch/arm/include/uapi/asm/kvm.h
@@ -80,6 +80,7 @@ struct kvm_regs {
 /* Supported VGIC address types  */
 #define KVM_VGIC_V2_ADDR_TYPE_DIST	0
 #define KVM_VGIC_V2_ADDR_TYPE_CPU	1
+#define KVM_VGIC_V2_PAGE_OFFSET		0xfff2
 
 #define KVM_VGIC_V2_DIST_SIZE		0x1000
 #define KVM_VGIC_V2_CPU_SIZE		0x2000
diff --git a/arch/arm64/include/uapi/asm/kvm.h b/arch/arm64/include/uapi/asm/kvm.h
index 8e38878..78898b9 100644
--- a/arch/arm64/include/uapi/asm/kvm.h
+++ b/arch/arm64/include/uapi/asm/kvm.h
@@ -74,6 +74,7 @@ struct kvm_regs {
 /* Supported VGIC address types  */
 #define KVM_VGIC_V2_ADDR_TYPE_DIST	0
 #define KVM_VGIC_V2_ADDR_TYPE_CPU	1
+#define KVM_VGIC_V2_PAGE_OFFSET		0xfff2
 
 #define KVM_VGIC_V2_DIST_SIZE		0x1000
 #define KVM_VGIC_V2_CPU_SIZE		0x2000
diff --git a/virt/kvm/arm/vgic-v2.c b/virt/kvm/arm/vgic-v2.c
index 2935405..40d648f 100644
--- a/virt/kvm/arm/vgic-v2.c
+++ b/virt/kvm/arm/vgic-v2.c
@@ -214,6 +214,7 @@ int vgic_v2_probe(struct device_node *vgic_node,
 		goto out_unmap;
 	}
 
+#if 0
 	if (!PAGE_ALIGNED(vcpu_res.start)) {
 		kvm_err("GICV physical address 0x%llx not page aligned\n",
 			(unsigned long long)vcpu_res.start);
@@ -228,6 +229,7 @@ int vgic_v2_probe(struct device_node *vgic_node,
 		ret = -ENXIO;
 		goto out_unmap;
 	}
+#endif
 
 	vgic->vcpu_base = vcpu_res.start;
 
diff --git a/virt/kvm/arm/vgic.c b/virt/kvm/arm/vgic.c
index 7613dea..4220171 100644
--- a/virt/kvm/arm/vgic.c
+++ b/virt/kvm/arm/vgic.c
@@ -1912,6 +1912,13 @@ int kvm_vgic_init(struct kvm *kvm)
 		goto out;
 	}
 
+	if ((kvm->arch.vgic.vgic_cpu_base & ~PAGE_MASK) !=
+	    (vgic->vcpu_base & ~PAGE_MASK)) {
+		kvm_err("Need to align vgic identically in guest and host\n");
+		ret = -ENXIO;
+		goto out;
+	}
+
 	ret = kvm_phys_addr_ioremap(kvm, kvm->arch.vgic.vgic_cpu_base,
 				    vgic->vcpu_base, KVM_VGIC_V2_CPU_SIZE,
 				    true);
@@ -2015,6 +2022,11 @@ static int vgic_ioaddr_assign(struct kvm *kvm, phys_addr_t *ioaddr,
 	return ret;
 }
 
+static u64 vgic_get_vcpu_base(void)
+{
+	return vgic->vcpu_base;
+}
+
 /**
  * kvm_vgic_addr - set or get vgic VM base addresses
  * @kvm:   pointer to the vm struct
@@ -2051,6 +2063,13 @@ int kvm_vgic_addr(struct kvm *kvm, unsigned long type, u64 *addr, bool write)
 			*addr = vgic->vgic_cpu_base;
 		}
 		break;
+	case KVM_VGIC_V2_PAGE_OFFSET:
+		if (write) {
+			r = -ENODEV;
+		} else {
+			*addr = vgic_get_vcpu_base() & ~PAGE_MASK;
+		}
+		break;
 	default:
 		r = -ENODEV;
 	}
-- 
2.1.0

