ChangeSet
  1.1512.1.1 04/03/16 14:47:48 boutcher@brule.rchland.ibm.com +3 -0
  Add function to the ibmvscsi driver to retrieve host configuration
  information.  This patch exports a routine that can be called by
  another module.

  drivers/scsi/ibmvscsi/rpa_vscsi.c
    1.11 04/03/16 14:47:27 boutcher@brule.rchland.ibm.com +18 -0
    Add function to retreive host configuration

  drivers/scsi/ibmvscsi/ibmvscsi.h
    1.9 04/03/16 14:47:27 boutcher@brule.rchland.ibm.com +3 -0
    Add function to retrieve host configuration

  drivers/scsi/ibmvscsi/ibmvscsi.c
    1.12 04/03/16 14:47:27 boutcher@brule.rchland.ibm.com +40 -0
    Add function to retrieve host configuration

diff -Nru a/drivers/scsi/ibmvscsi/ibmvscsi.c b/drivers/scsi/ibmvscsi/ibmvscsi.c
--- a/drivers/scsi/ibmvscsi/ibmvscsi.c	Wed Mar 17 12:26:11 2004
+++ b/drivers/scsi/ibmvscsi/ibmvscsi.c	Wed Mar 17 12:26:11 2004
@@ -912,6 +912,46 @@
 	spin_unlock_irqrestore(evt_struct->hostdata->host->host_lock, flags);
 }
 
+/**
+ * ibmvscsi_get_host_config: Send the command to the server to get host
+ * configuration data.  The data is opaque to us.
+ */
+int ibmvscsi_do_host_config(struct ibmvscsi_host_data *hostdata, 
+			    unsigned char *buffer, int length) {
+	struct VIOSRP_HOST_CONFIG host_config;
+	struct srp_event_struct *evt_struct;
+	int rc;
+	
+	memset(&host_config, 0x00, sizeof(host_config));
+	host_config.common.type = VIOSRP_HOST_CONFIG_TYPE;
+	host_config.common.length = length;
+	host_config.buffer = dma_map_single(hostdata->dev, buffer, length,
+					    DMA_BIDIRECTIONAL);
+	
+	evt_struct = evt_struct_for(&hostdata->pool, 
+				    (union VIOSRP_IU *)&host_config, 
+				    NULL, 
+				    sync_completion);
+	
+	if (!evt_struct) {
+		printk(KERN_ERR 
+		       "ibmvscsi: could't allocate event for HOST_CONFIG!\n");
+		rc = -1;
+	} else {
+		evt_struct->crq.format = VIOSRP_MAD_FORMAT;
+		init_completion(&evt_struct->comp);
+		rc =  ibmvscsi_send_srp_event(evt_struct, hostdata);
+		if (rc == 0) {
+			wait_for_completion(&evt_struct->comp);
+		}
+	}
+	
+	dma_unmap_single(hostdata->dev, host_config.buffer, length, 
+			 DMA_BIDIRECTIONAL);
+
+	return rc ? rc : host_config.common.status;
+}
+
 /* ------------------------------------------------------------
  * SCSI driver registration
  */
diff -Nru a/drivers/scsi/ibmvscsi/ibmvscsi.h b/drivers/scsi/ibmvscsi/ibmvscsi.h
--- a/drivers/scsi/ibmvscsi/ibmvscsi.h	Wed Mar 17 12:26:11 2004
+++ b/drivers/scsi/ibmvscsi/ibmvscsi.h	Wed Mar 17 12:26:11 2004
@@ -106,4 +106,7 @@
 struct ibmvscsi_host_data *ibmvscsi_probe(struct device *dev);
 void ibmvscsi_remove(struct ibmvscsi_host_data *hostdata);
 
+int ibmvscsi_do_host_config(struct ibmvscsi_host_data *hostdata, 
+			    unsigned char *buffer, int length);
+
 #endif				/* IBMVSCSI_H */
diff -Nru a/drivers/scsi/ibmvscsi/rpa_vscsi.c b/drivers/scsi/ibmvscsi/rpa_vscsi.c
--- a/drivers/scsi/ibmvscsi/rpa_vscsi.c	Wed Mar 17 12:26:11 2004
+++ b/drivers/scsi/ibmvscsi/rpa_vscsi.c	Wed Mar 17 12:26:11 2004
@@ -221,6 +221,24 @@
 }
 
 /**
+ * Return host configuration data.  This interface is exported
+ * because it is used by arch/ppc64 code to retrieve host
+ * configuration information.
+ */
+int ibmvscsi_get_host_config(struct vio_dev *vdev,
+			     unsigned char *buffer, 
+			     int length) {
+	struct ibmvscsi_host_data *hostdata = 
+		(struct ibmvscsi_host_data *) vdev->driver_data;
+
+	if (hostdata == NULL)
+		return -1;
+
+	return ibmvscsi_do_host_config(hostdata,buffer,length);
+}
+EXPORT_SYMBOL(ibmvscsi_get_host_config);
+
+/**
  * rpa_device_table: Used by vio.c to match devices in the device tree we 
  * support.
  */
.........................................................................
# vim: syntax=diff

