From: Olaf Dabrunz <od@suse.de>

Subject: Disable AMD/ATI legacy boot interrupt generation

Add quirks for several AMD/ATI chipsets to prevent generation of legacy boot
interrupts.

Signed-off-by: Olaf Dabrunz <od@suse.de>
Signed-off-by: Stefan Assmann <sassmann@suse.de>
---
 drivers/pci/quirks.c |   77 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 77 insertions(+)

--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -1449,6 +1449,83 @@ static void quirk_disable_broadcom_boot_
 			"0x%04x:0x%04x\n", dev->vendor, dev->device);
 }
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_SERVERWORKS,   PCI_DEVICE_ID_SERVERWORKS_HT1000SB, 	quirk_disable_broadcom_boot_interrupt);
+
+/*
+ * disable boot interrupts on AMD and ATI chipsets
+ */
+#define AMD_813X_MISC			0x40
+#define AMD_813X_NOIOAMODE		1
+
+static void quirk_disable_amd_813x_boot_interrupt(struct pci_dev *dev)
+{
+	u32 pci_config_dword;
+
+	if (noioapicquirk)
+		return;
+
+	pci_read_config_dword(dev, AMD_813X_MISC, &pci_config_dword);
+	pci_config_dword |= AMD_813X_NOIOAMODE;
+	pci_write_config_dword(dev, AMD_813X_MISC, pci_config_dword);
+
+	printk(KERN_INFO "disabled boot interrupts on PCI device "
+			"0x%04x:0x%04x\n", dev->vendor, dev->device);
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_AMD,   PCI_DEVICE_ID_AMD_8131_BRIDGE, 	quirk_disable_amd_813x_boot_interrupt);
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_AMD,   PCI_DEVICE_ID_AMD_8132_BRIDGE, 	quirk_disable_amd_813x_boot_interrupt);
+
+#define AMD_8111_PCI_IRQ_ROUTING	0x56
+
+static void quirk_disable_amd_8111_boot_interrupt(struct pci_dev *dev)
+{
+	u16 pci_config_word;
+
+	if (noioapicquirk)
+		return;
+
+	pci_read_config_word(dev, AMD_8111_PCI_IRQ_ROUTING, &pci_config_word);
+	if (!pci_config_word) {
+		printk(KERN_INFO "boot interrupts on PCI device 0x%04x:0x%04x "
+				"already disabled\n",
+				dev->vendor, dev->device);
+		return;
+	}
+	pci_write_config_word(dev, AMD_8111_PCI_IRQ_ROUTING, 0);
+	printk(KERN_INFO "disabled boot interrupts on PCI device "
+			"0x%04x:0x%04x\n", dev->vendor, dev->device);
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_AMD,   PCI_DEVICE_ID_AMD_8111_SMBUS, 	quirk_disable_amd_8111_boot_interrupt);
+
+/*
+ * disable PCI boot interrupt mapping to PIC / first IO-APIC on SB700S
+ */
+#define AMD_SB700S_MAP_REG		0x64
+#define AMD_SB700S_MAP_ENABLE		(1<<0)
+#define AMD_SB700S_IRQ_IDX		0xC00
+#define AMD_SB700S_IRQ_DATA		0xC01
+
+static void quirk_disable_amd_sb700s_boot_interrupt(struct pci_dev *dev)
+{
+	u32 pci_config_dword;
+	int i, irqs[] = {0x0, 0x1, 0x2, 0x3, 0x4, 0x9, 0xa, 0xb, 0xc};
+
+	if (noioapicquirk)
+		return;
+
+	pci_read_config_dword(dev, AMD_SB700S_MAP_REG, &pci_config_dword);
+	pci_write_config_dword(dev, AMD_SB700S_MAP_REG, pci_config_dword |
+			AMD_SB700S_MAP_ENABLE);
+
+	for (i = 0; i < ARRAY_SIZE(irqs); i++) {
+		outb(irqs[i], AMD_SB700S_IRQ_IDX);
+		outb(0x00, AMD_SB700S_IRQ_DATA);
+	}
+
+	pci_write_config_dword(dev, AMD_SB700S_MAP_REG, pci_config_dword);
+
+	printk(KERN_INFO "disabled boot interrupts on PCI device "
+			"0x%04x:0x%04x\n", dev->vendor, dev->device);
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_ATI,   PCI_DEVICE_ID_ATI_SBX00_SMBUS, 	quirk_disable_amd_sb700s_boot_interrupt);
 #endif /* CONFIG_X86_IO_APIC */
 
 /*
