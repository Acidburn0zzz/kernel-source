diff -urpN /sb/common/linux-2.6.5-7.23/arch/ppc64/kernel/rtas-proc.c linux-2.6.5-7.23/arch/ppc64/kernel/rtas-proc.c
--- /sb/common/linux-2.6.5-7.23/arch/ppc64/kernel/rtas-proc.c	Wed May  5 15:44:11 2004
+++ linux-2.6.5-7.23/arch/ppc64/kernel/rtas-proc.c	Mon May 10 21:49:51 2004
@@ -162,6 +162,10 @@ static ssize_t ppc_rtas_tone_volume_read
 		size_t count, loff_t *ppos);
 static ssize_t ppc_rtas_rmo_buf_read(struct file *file, char *buf,
 				    size_t count, loff_t *ppos);
+static ssize_t ppc_rtas_msg_write(struct file * file, const char * buf,
+		size_t count, loff_t *ppos);
+static ssize_t ppc_rtas_msg_read(struct file * file, char * buf,
+		size_t count, loff_t *ppos);
 
 struct file_operations ppc_rtas_poweron_operations = {
 	.read =		ppc_rtas_poweron_read,
@@ -189,6 +193,10 @@ struct file_operations ppc_rtas_tone_vol
 static struct file_operations ppc_rtas_rmo_buf_ops = {
 	.read =		ppc_rtas_rmo_buf_read,
 };
+struct file_operations ppc_rtas_msg_operations = {
+	.read =		ppc_rtas_msg_read,
+	.write =	ppc_rtas_msg_write
+};
 
 int ppc_rtas_find_all_sensors (void);
 int ppc_rtas_process_sensor(struct individual_sensor s, int state, 
@@ -237,6 +245,10 @@ static int __init proc_rtas_init(void)
 	if (entry)
 		entry->proc_fops = &ppc_rtas_rmo_buf_ops;
 
+	entry = create_proc_entry("ppc64/rtas/rtasmsgs", S_IRUSR, NULL);
+	if (entry)
+		entry->proc_fops = &ppc_rtas_msg_operations;
+
 	return 0;
 }
 
@@ -954,3 +966,50 @@ static ssize_t ppc_rtas_rmo_buf_read(str
 	
 	return n;
 }
+
+/* ****************************************************************** */
+
+static ssize_t ppc_rtas_msg_write(struct file * file, const char * buf,
+		size_t count, loff_t *ppos)
+{
+	char stkbuf[40];  /* its small, its on stack */
+	char *dest;
+
+	if (39 < count) count = 39;
+	if (copy_from_user (stkbuf, buf, count)) {
+		return -EFAULT;
+	}
+	stkbuf[count] = 0;
+	print_rtasmsgs = simple_strtoul(stkbuf, &dest, 10);
+	if (*dest != '\0' && *dest != '\n') {
+		printk("ppc_rtas_msg_write: Invalid message setting\n");
+		return count;
+	}
+	
+	printk(KERN_INFO "RTAS: %s rtas messsage output to /var/log/messages\n",
+		(print_rtasmsgs ? "Enabling" : "Disabling"));
+	return count;
+}
+
+static ssize_t ppc_rtas_msg_read(struct file * file, char * buf,
+		size_t count, loff_t *ppos)
+{
+	int n, sn;
+	char stkbuf[40];  /* its small, its on stack */
+
+	n = scnprintf(stkbuf, 40, "%d\n", print_rtasmsgs);
+
+	sn = strlen (stkbuf) +1;
+	if (*ppos >= sn)
+		return 0;
+	if (n > sn - *ppos)
+		n = sn - *ppos;
+	if (n > count)
+		n = count;
+	if (copy_to_user (buf, stkbuf + (*ppos), n)) {
+		return -EFAULT;
+	}
+	*ppos += n;
+	return n;
+}
+
diff -urpN /sb/common/linux-2.6.5-7.23/arch/ppc64/kernel/rtasd.c linux-2.6.5-7.23/arch/ppc64/kernel/rtasd.c
--- /sb/common/linux-2.6.5-7.23/arch/ppc64/kernel/rtasd.c	Wed May  5 15:44:11 2004
+++ linux-2.6.5-7.23/arch/ppc64/kernel/rtasd.c	Mon May 10 21:54:17 2004
@@ -50,6 +50,8 @@ extern volatile int no_more_logging;
 
 volatile int error_log_cnt = 0;
 
+int print_rtasmsgs = 1;
+
 /*
  * Since we use 32 bit RTAS, the physical address of this must be below
  * 4G or else bad things happen. Allocate this in the kernel data and
@@ -78,6 +80,9 @@ static void printk_log_rtas(char *buf, i
 	char buffer[64];
 	char * str = "RTAS event";
 
+	if (print_rtasmsgs == 0)
+		return;
+
 	printk(RTAS_DEBUG "%d -------- %s begin --------\n", error_log_cnt, str);
 
 	/*
@@ -474,5 +479,16 @@ static int __init surveillance_setup(cha
 	return 1;
 }
 
+static int __init rtasmsg_setup(char *str)
+{
+	if (!strcmp(str, "on"))
+		print_rtasmsgs = 1;
+	if (!strcmp(str, "off"))
+		print_rtasmsgs = 0;
+
+	return 1;
+}
+
 __initcall(rtas_init);
 __setup("surveillance=", surveillance_setup);
+__setup("rtasmsgs=", rtasmsg_setup);
diff -urpN /sb/common/linux-2.6.5-7.23/include/asm-ppc64/rtas.h linux-2.6.5-7.23/include/asm-ppc64/rtas.h
--- /sb/common/linux-2.6.5-7.23/include/asm-ppc64/rtas.h	Wed May  5 15:44:30 2004
+++ linux-2.6.5-7.23/include/asm-ppc64/rtas.h	Mon May 10 21:49:51 2004
@@ -166,6 +166,8 @@ extern struct flash_block_list_header rt
 
 extern struct rtas_t rtas;
 
+extern int print_rtasmsgs;
+
 extern void enter_rtas(struct rtas_args *);
 extern int rtas_token(const char *service);
 extern long rtas_call(int token, int, int, unsigned long *, ...);
