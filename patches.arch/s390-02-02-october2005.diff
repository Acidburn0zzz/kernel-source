From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: IBM Codedrop 2006-01-09 - linux-2.6.15-s390-02-02-october2005.diff

  Description: kernel: cputime misaccounting.
  Symptom:     The accounted cpu time for a process can be slightly off.
  Problem:     The user cpu time is accumulated by the first level
               interrupt handlers in entry.S to a field in the lowcore.
               This accumulated cpu time is added to the process at each
               tick. It is not added to the process in the scheduler,
               the partial cpu time in the lowcore of a process that
               calls schedule gets misaccounted to the next process.
  Solution:    Update the process user cpu time in schedule.
  Problem-ID:  -
  Archs:       s390-31, s390-64

Acked-by: Hannes Reinecke <hare@suse.de>

--- linux-2.5/arch/s390/kernel/time.c	4 Jan 2006 12:20:22 -0000	1.45
+++ linux-2.5/arch/s390/kernel/time.c	12 Jan 2006 13:19:10 -0000	1.45.2.1
@@ -214,7 +214,7 @@
 #endif
 
 #ifdef CONFIG_VIRT_CPU_ACCOUNTING
-	account_user_vtime(current);
+	account_tick_vtime(current);
 #else
 	while (ticks--)
 		update_process_times(user_mode(regs));

--- linux-2.5/arch/s390/kernel/vtime.c	4 Jan 2006 12:20:22 -0000	1.7
+++ linux-2.5/arch/s390/kernel/vtime.c	12 Jan 2006 13:19:10 -0000	1.7.2.1
@@ -32,7 +32,7 @@
  * Update process times based on virtual cpu times stored by entry.S
  * to the lowcore fields user_timer, system_timer & steal_clock.
  */
-void account_user_vtime(struct task_struct *tsk)
+void account_tick_vtime(struct task_struct *tsk)
 {
 	cputime_t cputime;
 	__u64 timer, clock;
@@ -70,6 +70,31 @@
 		rcu_check_callbacks(smp_processor_id(), rcu_user_flag);
 	scheduler_tick();
  	run_posix_cpu_timers(tsk);
+}
+
+/*
+ * Update process times based on virtual cpu times stored by entry.S
+ * to the lowcore fields user_timer, system_timer & steal_clock.
+ */
+void account_vtime(struct task_struct *tsk)
+{
+	cputime_t cputime;
+	__u64 timer;
+
+	timer = S390_lowcore.last_update_timer;
+	asm volatile ("  STPT %0"    /* Store current cpu timer value */
+		      : "=m" (S390_lowcore.last_update_timer) );
+	S390_lowcore.system_timer += timer - S390_lowcore.last_update_timer;
+
+	cputime = S390_lowcore.user_timer >> 12;
+	S390_lowcore.user_timer -= cputime << 12;
+	S390_lowcore.steal_clock -= cputime << 12;
+	account_user_time(tsk, cputime);
+
+	cputime =  S390_lowcore.system_timer >> 12;
+	S390_lowcore.system_timer -= cputime << 12;
+	S390_lowcore.steal_clock -= cputime << 12;
+	account_system_time(tsk, 0, cputime);
 }
 
 /*

--- linux-2.5/include/asm-s390/system.h	29 Aug 2005 09:47:57 -0000	1.25
+++ linux-2.5/include/asm-s390/system.h	12 Jan 2006 13:19:10 -0000	1.25.2.1
@@ -105,13 +105,14 @@
 } while (0)
 
 #ifdef CONFIG_VIRT_CPU_ACCOUNTING
-extern void account_user_vtime(struct task_struct *);
+extern void account_vtime(struct task_struct *);
+extern void account_tick_vtime(struct task_struct *);
 extern void account_system_vtime(struct task_struct *);
 #endif
 
 #define finish_arch_switch(prev) do {					     \
 	set_fs(current->thread.mm_segment);				     \
-	account_system_vtime(prev);					     \
+	account_vtime(prev);						     \
 } while (0)
 
 #define nop() __asm__ __volatile__ ("nop")

--- linux-2.5/include/linux/hardirq.h	4 Jan 2006 12:22:42 -0000	1.6
+++ linux-2.5/include/linux/hardirq.h	12 Jan 2006 13:19:10 -0000	1.6.2.1
@@ -93,10 +93,6 @@
 struct task_struct;
 
 #ifndef CONFIG_VIRT_CPU_ACCOUNTING
-static inline void account_user_vtime(struct task_struct *tsk)
-{
-}
-
 static inline void account_system_vtime(struct task_struct *tsk)
 {
 }

