ChangeSet
  1.1546 04/03/31 16:59:22 saleon@ambient.ltc.austin.ibm.com +1 -0
  Replaced NO_TCE references with pci_dma_mapping_error() and PCI_DMA_ERROR_CODE in Virtual Ethernet driver.

  drivers/net/ibmveth.c
    1.10 04/03/31 16:59:13 saleon@ambient.ltc.austin.ibm.com +14 -17
    Replaced NO_TCE references with pci_dma_mapping_error() and PCI_DMA_ERROR_CODE

diff -Nru a/drivers/net/ibmveth.c b/drivers/net/ibmveth.c
--- a/drivers/net/ibmveth.c	Thu Apr  1 06:45:18 2004
+++ b/drivers/net/ibmveth.c	Thu Apr  1 06:45:18 2004
@@ -60,9 +60,6 @@
 
 #include "ibmveth.h"
 
-#warning remove NO_TCE usage from ibmveth.c
-#define NO_TCE PCI_DMA_ERROR_CODE
-
 #define DEBUG 1
 
 #define ibmveth_printk(fmt, args...) \
@@ -407,27 +404,27 @@
 static void ibmveth_cleanup(struct ibmveth_adapter *adapter)
 {
 	if(adapter->buffer_list_addr != NULL) {
-		if(adapter->buffer_list_dma != NO_TCE) {
+		if(!pci_dma_mapping_error(adapter->buffer_list_dma)) {
 			vio_unmap_single(adapter->vdev, adapter->buffer_list_dma, 4096, PCI_DMA_BIDIRECTIONAL);
-			adapter->buffer_list_dma = NO_TCE;
+			adapter->buffer_list_dma = PCI_DMA_ERROR_CODE;
 		}
 		free_page((unsigned long)adapter->buffer_list_addr);
 		adapter->buffer_list_addr = NULL;
 	} 
 
 	if(adapter->filter_list_addr != NULL) {
-		if(adapter->filter_list_dma != NO_TCE) {
+		if(!pci_dma_mapping_error(adapter->filter_list_dma)) {
 			vio_unmap_single(adapter->vdev, adapter->filter_list_dma, 4096, PCI_DMA_BIDIRECTIONAL);
-			adapter->filter_list_dma = NO_TCE;
+			adapter->filter_list_dma = PCI_DMA_ERROR_CODE;
 		}
 		free_page((unsigned long)adapter->filter_list_addr);
 		adapter->filter_list_addr = NULL;
 	}
 
 	if(adapter->rx_queue.queue_addr != NULL) {
-		if(adapter->rx_queue.queue_dma != NO_TCE) {
+		if(!pci_dma_mapping_error(adapter->rx_queue.queue_dma)) {
 			vio_unmap_single(adapter->vdev, adapter->rx_queue.queue_dma, adapter->rx_queue.queue_len, PCI_DMA_BIDIRECTIONAL);
-			adapter->rx_queue.queue_dma = NO_TCE;
+			adapter->rx_queue.queue_dma = PCI_DMA_ERROR_CODE;
 		}
 		kfree(adapter->rx_queue.queue_addr);
 		adapter->rx_queue.queue_addr = NULL;
@@ -476,9 +473,9 @@
 	adapter->filter_list_dma = vio_map_single(adapter->vdev, adapter->filter_list_addr, 4096, PCI_DMA_BIDIRECTIONAL);
 	adapter->rx_queue.queue_dma = vio_map_single(adapter->vdev, adapter->rx_queue.queue_addr, adapter->rx_queue.queue_len, PCI_DMA_BIDIRECTIONAL);
 
-	if((adapter->buffer_list_dma == NO_TCE) || 
-	   (adapter->filter_list_dma == NO_TCE) || 
-	   (adapter->rx_queue.queue_dma == NO_TCE)) {
+	if((pci_dma_mapping_error(adapter->buffer_list_dma) ) || 
+	   (pci_dma_mapping_error(adapter->filter_list_dma)) || 
+	   (pci_dma_mapping_error(adapter->rx_queue.queue_dma))) {
 		ibmveth_error_printk("unable to map filter or buffer list pages\n");
 		ibmveth_cleanup(adapter);
 		return -ENOMEM;
@@ -647,7 +644,7 @@
 	desc[0].fields.address = vio_map_single(adapter->vdev, skb->data, desc[0].fields.length, PCI_DMA_TODEVICE);
 	desc[0].fields.valid   = 1;
 
-	if(desc[0].fields.address == NO_TCE) {
+	if(pci_dma_mapping_error(desc[0].fields.address)) {
 		ibmveth_error_printk("tx: unable to map initial fragment\n");
 		adapter->tx_map_failed++;
 		adapter->stats.tx_dropped++;
@@ -666,7 +663,7 @@
 		desc[curfrag+1].fields.length = frag->size;
 		desc[curfrag+1].fields.valid  = 1;
 
-		if(desc[curfrag+1].fields.address == NO_TCE) {
+		if(pci_dma_mapping_error(desc[curfrag+1].fields.address)) {
 			ibmveth_error_printk("tx: unable to map fragment %d\n", curfrag);
 			adapter->tx_map_failed++;
 			adapter->stats.tx_dropped++;
@@ -947,9 +944,9 @@
 
 	INIT_WORK(&adapter->replenish_task, (void*)ibmveth_replenish_task, (void*)adapter);
 
-	adapter->buffer_list_dma = NO_TCE;
-	adapter->filter_list_dma = NO_TCE;
-	adapter->rx_queue.queue_dma = NO_TCE;
+	adapter->buffer_list_dma = PCI_DMA_ERROR_CODE;
+	adapter->filter_list_dma = PCI_DMA_ERROR_CODE;
+	adapter->rx_queue.queue_dma = PCI_DMA_ERROR_CODE;
 
 	atomic_set(&adapter->not_replenishing, 1);
 
.........................................................................
# vim: syntax=diff

