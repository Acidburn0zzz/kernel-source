- Description: dasd: dasd module load->unload->load can still corrupt pointers.
  Symptom:     Load the dasd_mod and dasd_eckd_mod modules. Don't set the devices
               online but set the use_diag attribut to 0 or 1 for one or more
               device. Unload the dasd modules and load them again. Set the dasd
               device of the previous step online. The device is not set-up
               correctly. This can be checked by looking at /proc/dasd/devices.
               The device should be listed there, but it isn't.
  Problem:     A struct dasd_devmap is allocated the first time it is accessed,
               which is the case when a dasd is set online, but also when a dasd
               specific attribute is set. When the dasd_devmap is allocated, a
               pointer to it is stored in the ccw_device.dev.driver_data. This
               pointer needs to be set to Null before module unload or the
               invalid pointer will be used when the dasd module is loaded again.
               The cleanup code is invoked when a device is set offline, but
               when it was never set online we will keep the invalid pointer.
  Solution:    The driver_data pointer is set when setting the device online and
               not when the devmap is created.
  Problem-ID:  --
  Archs:       s390-31, s390-64

--- linux-2.5/drivers/s390/block/dasd_devmap.c	25 May 2004 08:23:26 -0000	1.27.2.1
+++ linux-2.5/drivers/s390/block/dasd_devmap.c	16 Jun 2004 11:29:45 -0000	1.27.2.2
@@ -11,7 +11,7 @@
  * functions may not be called from interrupt context. In particular
  * dasd_get_device is a no-no from interrupt context.
  *
- * $Revision: 1.27.2.1 $
+ * $Revision: 1.27.2.2 $
  */
 
 #include <linux/config.h>
@@ -430,16 +430,9 @@
 {
 	struct dasd_devmap *devmap;
 
-	if (cdev->dev.driver_data)
-		return (struct dasd_devmap *) cdev->dev.driver_data;
 	devmap = dasd_find_busid(cdev->dev.bus_id);
-	if (!IS_ERR(devmap)) {
-		cdev->dev.driver_data = devmap;
-		return devmap;
-	}
-	devmap = dasd_add_busid(cdev->dev.bus_id, DASD_FEATURE_DEFAULT);
-	if (!IS_ERR(devmap))
-		cdev->dev.driver_data = devmap;
+	if (IS_ERR(devmap)) 
+		devmap = dasd_add_busid(cdev->dev.bus_id, DASD_FEATURE_DEFAULT);
 	return devmap;
 }
 
@@ -456,6 +449,7 @@
 	devmap = dasd_devmap_from_cdev(cdev);
 	if (IS_ERR(devmap))
 		return (void *) devmap;
+	cdev->dev.driver_data = devmap;
 
 	device = dasd_alloc_device();
 	if (IS_ERR(device))

