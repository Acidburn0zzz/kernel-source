From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: IBM codedrop s390-02-09-october2005

  Description: qeth: Kernel panic when using EDDP in Layer 2 mode
  Symptom:     Kernel panics when using EDDP with qeth devices
               which are configured in Layer2 mode.
  Problem:     Using EDDP in Layer 2 mode means that we have to copy
               the MAC header either. Trying to do so eddp code tried
               to use skb->mac.raw for copying the mac header to the
               EDDP structure. But skb->mac.raw does not point to MAC
               header of outgoing packets.
  Solution:    set skb->mac.raw pointer to MAC header and then
               use it for data copy instructions.
  Problem-ID:  21241
  Archs:       s390-31, s390-64

Acked-by: Hannes Reinecke <hare@suse.de>

--- linux-2.5/drivers/s390/net/qeth_eddp.c	4 Jan 2006 17:59:20 -0000	1.14.2.1
+++ linux-2.5/drivers/s390/net/qeth_eddp.c	2 Feb 2006 18:03:13 -0000	1.14.2.2
@@ -416,6 +416,13 @@
 	
 	QETH_DBF_TEXT(trace, 5, "eddpftcp");
 	eddp->skb_offset = sizeof(struct qeth_hdr) + eddp->nhl + eddp->thl;
+       if (eddp->qh.hdr.l2.id == QETH_HEADER_TYPE_LAYER2) {
+               eddp->skb_offset += sizeof(struct ethhdr);
+#ifdef CONFIG_QETH_VLAN
+               if (eddp->mac.h_proto == __constant_htons(ETH_P_8021Q))
+                       eddp->skb_offset += VLAN_HLEN;
+#endif /* CONFIG_QETH_VLAN */
+       }
 	tcph = eddp->skb->h.th;
 	while (eddp->skb_offset < eddp->skb->len) {
 		data_len = min((int)skb_shinfo(eddp->skb)->tso_size,
@@ -486,6 +493,7 @@
 		return -ENOMEM;
 	}
 	if (qhdr->hdr.l2.id == QETH_HEADER_TYPE_LAYER2) {
+		skb->mac.raw = (skb->data) + sizeof(struct qeth_hdr);
 		memcpy(&eddp->mac, eth_hdr(skb), ETH_HLEN);
 #ifdef CONFIG_QETH_VLAN
 		if (eddp->mac.h_proto == __constant_htons(ETH_P_8021Q)) {

--- linux-2.5/drivers/s390/net/qeth_main.c	2 Feb 2006 17:48:30 -0000	1.252.2.2
+++ linux-2.5/drivers/s390/net/qeth_main.c	2 Feb 2006 18:03:13 -0000	1.252.2.3
@@ -7459,6 +7459,7 @@
 		card->lan_online = 1;
 	if (card->info.type==QETH_CARD_TYPE_OSN)
 		goto out;
+	qeth_set_large_send(card, card->options.large_send);
 	if (card->options.layer2) {
 		card->dev->features |=
 			NETIF_F_HW_VLAN_FILTER |
@@ -7476,12 +7477,6 @@
 #endif
 		goto out;
 	}
-	if ((card->options.large_send == QETH_LARGE_SEND_EDDP) ||
-	    (card->options.large_send == QETH_LARGE_SEND_TSO))
-		card->dev->features |= NETIF_F_TSO | NETIF_F_SG;
-	else
-		card->dev->features &= ~(NETIF_F_TSO | NETIF_F_SG);
-
 	if ((rc = qeth_setadapter_parms(card)))
 		QETH_DBF_TEXT_(setup, 2, "2err%d", rc);
 	if ((rc = qeth_start_ipassists(card)))

