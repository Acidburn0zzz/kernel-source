
From: Martin Hicks <mort@wildopensource.com>

Another optimization patch from Jack Steiner, intended to reduce TLB
flushes during process migration.

Most architextures should define tlb_migrate_prepare() to be flush_tlb_mm(),
but on i386, it would be a wasted flush, because i386 disconnects previous
cpus from the tlb flush automatically.


Index: linux-2.6.3/include/asm-generic/tlb.h
===================================================================
--- linux-2.6.3.orig/include/asm-generic/tlb.h	Tue Mar  2 15:41:17 2004
+++ linux-2.6.3/include/asm-generic/tlb.h	Tue Mar  2 15:41:40 2004
@@ -146,4 +146,6 @@
 		__pmd_free_tlb(tlb, pmdp);			\
 	} while (0)
 
+#define tlb_migrate_prepare(mm) do { } while(0)
+
 #endif /* _ASM_GENERIC__TLB_H */
Index: linux-2.6.3/include/asm-ia64/tlb.h
===================================================================
--- linux-2.6.3.orig/include/asm-ia64/tlb.h	Tue Mar  2 15:41:17 2004
+++ linux-2.6.3/include/asm-ia64/tlb.h	Tue Mar  2 15:41:40 2004
@@ -211,6 +211,8 @@
 	tlb->end_addr = address + PAGE_SIZE;
 }
 
+#define tlb_migrate_prepare(mm) flush_tlb_mm(mm)
+
 #define tlb_start_vma(tlb, vma)			do { } while (0)
 #define tlb_end_vma(tlb, vma)			do { } while (0)
 
Index: linux-2.6.3/kernel/sched.c
===================================================================
--- linux-2.6.3.orig/kernel/sched.c	Tue Mar  2 15:41:19 2004
+++ linux-2.6.3/kernel/sched.c	Tue Mar  2 15:43:57 2004
@@ -25,6 +25,7 @@
 #include <linux/highmem.h>
 #include <linux/smp_lock.h>
 #include <asm/mmu_context.h>
+#include <asm/tlb.h>
 #include <linux/interrupt.h>
 #include <linux/completion.h>
 #include <linux/kernel_stat.h>
@@ -1029,6 +1030,13 @@
 		wake_up_process(rq->migration_thread);
 		wait_for_completion(&req.done);
 
+		/*
+		 * we want a new context here. This eliminates TLB
+		 * flushes on the cpus where the process executed prior to
+		 * the migration.
+		 */
+		tlb_migrate_prepare(current->mm);
+
 		/* If we raced with sys_sched_setaffinity, don't
 		 * restore mask. */
 		rq = task_rq_lock(p, &flags);
