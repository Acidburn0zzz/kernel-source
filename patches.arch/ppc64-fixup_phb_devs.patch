From: John Rose <johnrose@austin.ibm.com>                                                                                                                            
Bug 157014 - LTC22280-DLPAR add DDR/P5IOC, adapters improperly configured

Subject: [PATCH 1/3] cleanup PCI Host Bridge setup                                                                                                                   
Since setup_phb() and pci_process_bridge_OF_ranges() are always called
together, and since the latter falls under the category of "setup", move
the latter into the former.

Subject: [PATCH 2/3] move init_phb_dynamic() to pseries                                                                                                              
ince init_phb_dynamic() only comes into play during dynamic
partitioning on POWER systems, move it to pseries-specific file.  This  
is also necessary for the addition of some pseries-specific fixups
during PHB creation.

Subject: [PATCH 3/3] properly configure DDR/P5IOC children devs                                                                                                      
The dynamic add path for PCI Host Bridges can fail to configure children
adapters under P5IOC controllers.  It fails to properly fixup bus/device
resources, and it fails to properly enable EEH.  Both of these steps
need to occur before any children devices are enabled in
pci_bus_add_devices().

This fix has been tested for P5IOC and non-P5IOC slots.

Signed-off-by: Olaf Hering <olh@suse.de>

 arch/powerpc/kernel/pci_64.c               |    5 +++--
 arch/powerpc/kernel/rtas_pci.c             |   27 +++------------------------
 arch/powerpc/platforms/pseries/pci_dlpar.c |   27 +++++++++++++++++++++++++++
 include/asm-powerpc/ppc-pci.h              |    1 +
 4 files changed, 34 insertions(+), 26 deletions(-)

Index: linux-2.6.16-rc5-olh/arch/powerpc/kernel/rtas_pci.c
===================================================================
--- linux-2.6.16-rc5-olh.orig/arch/powerpc/kernel/rtas_pci.c
+++ linux-2.6.16-rc5-olh/arch/powerpc/kernel/rtas_pci.c
@@ -280,8 +280,7 @@ static int phb_set_bus_ranges(struct dev
 	return 0;
 }
 
-static int __devinit setup_phb(struct device_node *dev,
-			       struct pci_controller *phb)
+int __devinit setup_phb(struct device_node *dev, struct pci_controller *phb)
 {
 	if (is_python(dev))
 		python_countermeasures(dev);
@@ -292,6 +291,8 @@ static int __devinit setup_phb(struct de
 	phb->ops = &rtas_pci_ops;
 	phb->buid = get_phb_buid(dev);
 
+	pci_process_bridge_OF_ranges(phb, dev, 0);
+
 	return 0;
 }
 
@@ -323,7 +324,6 @@ unsigned long __init find_and_init_phbs(
 		if (!phb)
 			continue;
 		setup_phb(node, phb);
-		pci_process_bridge_OF_ranges(phb, node, 0);
 		pci_setup_phb_io(phb, index == 0);
 #ifdef CONFIG_PPC_PSERIES
 		/* XXX This code need serious fixing ... --BenH */
@@ -359,27 +359,6 @@ unsigned long __init find_and_init_phbs(
 	return 0;
 }
 
-struct pci_controller * __devinit init_phb_dynamic(struct device_node *dn)
-{
-	struct pci_controller *phb;
-	int primary;
-
-	primary = list_empty(&hose_list);
-	phb = pcibios_alloc_controller(dn);
-	if (!phb)
-		return NULL;
-	setup_phb(dn, phb);
-	pci_process_bridge_OF_ranges(phb, dn, primary);
-
-	pci_setup_phb_io_dynamic(phb, primary);
-
-	pci_devs_phb_init_dynamic(phb);
-	scan_phb(phb);
-
-	return phb;
-}
-EXPORT_SYMBOL(init_phb_dynamic);
-
 /* RPA-specific bits for removing PHBs */
 int pcibios_remove_root_bus(struct pci_controller *phb)
 {
Index: linux-2.6.16-rc5-olh/arch/powerpc/kernel/pci_64.c
===================================================================
--- linux-2.6.16-rc5-olh.orig/arch/powerpc/kernel/pci_64.c
+++ linux-2.6.16-rc5-olh/arch/powerpc/kernel/pci_64.c
@@ -589,7 +589,6 @@ void __devinit scan_phb(struct pci_contr
 #endif /* CONFIG_PPC_MULTIPLATFORM */
 	if (mode == PCI_PROBE_NORMAL)
 		hose->last_busno = bus->subordinate = pci_scan_child_bus(bus);
-	pci_bus_add_devices(bus);
 }
 
 static int __init pcibios_init(void)
@@ -608,8 +607,10 @@ static int __init pcibios_init(void)
 	printk("PCI: Probing PCI hardware\n");
 
 	/* Scan all of the recorded PCI controllers.  */
-	list_for_each_entry_safe(hose, tmp, &hose_list, list_node)
+	list_for_each_entry_safe(hose, tmp, &hose_list, list_node) {
 		scan_phb(hose);
+		pci_bus_add_devices(hose->bus);
+	}
 
 #ifndef CONFIG_PPC_ISERIES
 	if (pci_probe_only)
Index: linux-2.6.16-rc5-olh/arch/powerpc/platforms/pseries/pci_dlpar.c
===================================================================
--- linux-2.6.16-rc5-olh.orig/arch/powerpc/platforms/pseries/pci_dlpar.c
+++ linux-2.6.16-rc5-olh/arch/powerpc/platforms/pseries/pci_dlpar.c
@@ -27,6 +27,7 @@
 
 #include <linux/pci.h>
 #include <asm/pci-bridge.h>
+#include <asm/ppc-pci.h>
 
 static struct pci_bus *
 find_bus_among_children(struct pci_bus *bus,
@@ -179,3 +180,29 @@ pcibios_add_pci_devices(struct pci_bus *
 	}
 }
 EXPORT_SYMBOL_GPL(pcibios_add_pci_devices);
+
+struct pci_controller * __devinit init_phb_dynamic(struct device_node *dn)
+{
+	struct pci_controller *phb;
+	int primary;
+
+	primary = list_empty(&hose_list);
+	phb = pcibios_alloc_controller(dn);
+	if (!phb)
+		return NULL;
+	setup_phb(dn, phb);
+
+	pci_setup_phb_io_dynamic(phb, primary);
+
+	pci_devs_phb_init_dynamic(phb);
+
+	if (dn->child)
+		eeh_add_device_tree_early(dn);
+
+	scan_phb(phb);
+	pcibios_fixup_new_pci_devices(phb->bus, 0);
+	pci_bus_add_devices(phb->bus);
+
+	return phb;
+}
+EXPORT_SYMBOL_GPL(init_phb_dynamic);
Index: linux-2.6.16-rc5-olh/include/asm-powerpc/ppc-pci.h
===================================================================
--- linux-2.6.16-rc5-olh.orig/include/asm-powerpc/ppc-pci.h
+++ linux-2.6.16-rc5-olh/include/asm-powerpc/ppc-pci.h
@@ -38,6 +38,7 @@ void *traverse_pci_devices(struct device
 
 void pci_devs_phb_init(void);
 void pci_devs_phb_init_dynamic(struct pci_controller *phb);
+int setup_phb(struct device_node *dev, struct pci_controller *phb);
 void __devinit scan_phb(struct pci_controller *hose);
 
 /* From rtas_pci.h */
