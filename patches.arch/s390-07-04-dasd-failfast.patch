From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: dasd: Add 'failfast' device feature.
References: bnc#464466,LTC#43066

  Symptom:     md-raid1 cannot operate and manage md array, when no path is
               operational.
  Problem:     md-raid1 does not set the FAILFAST flag, because that would
               break SCSI functionality due to ambiguous meaning of the flag.
  Solution:    Add a new dasd feature 'failfast' which controls the dasd
               driver handling of requests and can be configured per device
               independently of the setting of the FAILFAST flag per request.
               If the 'failfast' feature is enabled for a device, the dasd
               driver will handle requests as if the request had the FAILFAST
               flag set, particularly posting I/O failure, when no path is
               operational to the device.
               The 'failfast' feature can be configured via the new sysfs
               attribute 'failfast' or via the 'dasd=' parameter, just like
               any other feature. By default, the 'failfast' feature is not
               set.

Acked-by: John Jolly <jjolly@suse.de>

---
 arch/s390/include/asm/dasd.h     |    1 
 drivers/s390/block/dasd_devmap.c |   48 +++++++++++++++++++++++++++++++++++++++
 drivers/s390/block/dasd_diag.c   |    3 +-
 drivers/s390/block/dasd_eckd.c   |    3 +-
 drivers/s390/block/dasd_fba.c    |    3 +-
 5 files changed, 55 insertions(+), 3 deletions(-)

Index: linux-sles11/drivers/s390/block/dasd_devmap.c
===================================================================
--- linux-sles11.orig/drivers/s390/block/dasd_devmap.c
+++ linux-sles11/drivers/s390/block/dasd_devmap.c
@@ -205,6 +205,8 @@ dasd_feature_list(char *str, char **endp
 			features |= DASD_FEATURE_USEDIAG;
 		else if (len == 6 && !strncmp(str, "erplog", 6))
 			features |= DASD_FEATURE_ERPLOG;
+		else if (len == 8 && !strncmp(str, "failfast", 8))
+			features |= DASD_FEATURE_FAILFAST;
 		else {
 			MESSAGE(KERN_WARNING,
 				"unsupported feature: %*s, "
@@ -666,6 +668,51 @@ dasd_device_from_cdev(struct ccw_device
  */
 
 /*
+ * failfast controls the behaviour, if no path is available
+ */
+static ssize_t dasd_ff_show(struct device *dev, struct device_attribute *attr,
+			    char *buf)
+{
+	struct dasd_devmap *devmap;
+	int ff_flag;
+
+	devmap = dasd_find_busid(dev->bus_id);
+	if (!IS_ERR(devmap))
+		ff_flag = (devmap->features & DASD_FEATURE_FAILFAST) != 0;
+	else
+		ff_flag = (DASD_FEATURE_DEFAULT & DASD_FEATURE_FAILFAST) != 0;
+	return snprintf(buf, PAGE_SIZE, ff_flag ? "1\n" : "0\n");
+}
+
+static ssize_t dasd_ff_store(struct device *dev, struct device_attribute *attr,
+	      const char *buf, size_t count)
+{
+	struct dasd_devmap *devmap;
+	int val;
+	char *endp;
+
+	devmap = dasd_devmap_from_cdev(to_ccwdev(dev));
+	if (IS_ERR(devmap))
+		return PTR_ERR(devmap);
+
+	val = simple_strtoul(buf, &endp, 0);
+	if (((endp + 1) < (buf + count)) || (val > 1))
+		return -EINVAL;
+
+	spin_lock(&dasd_devmap_lock);
+	if (val)
+		devmap->features |= DASD_FEATURE_FAILFAST;
+	else
+		devmap->features &= ~DASD_FEATURE_FAILFAST;
+	if (devmap->device)
+		devmap->device->features = devmap->features;
+	spin_unlock(&dasd_devmap_lock);
+	return count;
+}
+
+static DEVICE_ATTR(failfast, 0644, dasd_ff_show, dasd_ff_store);
+
+/*
  * readonly controls the readonly status of a dasd
  */
 static ssize_t
@@ -1019,6 +1066,7 @@ static struct attribute * dasd_attrs[] =
 	&dev_attr_use_diag.attr,
 	&dev_attr_eer_enabled.attr,
 	&dev_attr_erplog.attr,
+	&dev_attr_failfast.attr,
 	NULL,
 };
 
Index: linux-sles11/drivers/s390/block/dasd_diag.c
===================================================================
--- linux-sles11.orig/drivers/s390/block/dasd_diag.c
+++ linux-sles11/drivers/s390/block/dasd_diag.c
@@ -544,7 +544,8 @@ static struct dasd_ccw_req *dasd_diag_bu
 	}
 	cqr->retries = DIAG_MAX_RETRIES;
 	cqr->buildclk = get_clock();
-	if (blk_noretry_request(req))
+	if (blk_noretry_request(req) ||
+	    block->base->features & DASD_FEATURE_FAILFAST)
 		set_bit(DASD_CQR_FLAGS_FAILFAST, &cqr->flags);
 	cqr->startdev = memdev;
 	cqr->memdev = memdev;
Index: linux-sles11/drivers/s390/block/dasd_eckd.c
===================================================================
--- linux-sles11.orig/drivers/s390/block/dasd_eckd.c
+++ linux-sles11/drivers/s390/block/dasd_eckd.c
@@ -1700,7 +1700,8 @@ static struct dasd_ccw_req *dasd_eckd_bu
 			recid++;
 		}
 	}
-	if (blk_noretry_request(req))
+	if (blk_noretry_request(req) ||
+	    block->base->features & DASD_FEATURE_FAILFAST)
 		set_bit(DASD_CQR_FLAGS_FAILFAST, &cqr->flags);
 	cqr->startdev = startdev;
 	cqr->memdev = startdev;
Index: linux-sles11/drivers/s390/block/dasd_fba.c
===================================================================
--- linux-sles11.orig/drivers/s390/block/dasd_fba.c
+++ linux-sles11/drivers/s390/block/dasd_fba.c
@@ -355,7 +355,8 @@ static struct dasd_ccw_req *dasd_fba_bui
 			recid++;
 		}
 	}
-	if (blk_noretry_request(req))
+	if (blk_noretry_request(req) ||
+	    block->base->features & DASD_FEATURE_FAILFAST)
 		set_bit(DASD_CQR_FLAGS_FAILFAST, &cqr->flags);
 	cqr->startdev = memdev;
 	cqr->memdev = memdev;
Index: linux-sles11/arch/s390/include/asm/dasd.h
===================================================================
--- linux-sles11.orig/arch/s390/include/asm/dasd.h
+++ linux-sles11/arch/s390/include/asm/dasd.h
@@ -78,6 +78,7 @@ typedef struct dasd_information2_t {
 #define DASD_FEATURE_USEDIAG	     0x02
 #define DASD_FEATURE_INITIAL_ONLINE  0x04
 #define DASD_FEATURE_ERPLOG	     0x08
+#define DASD_FEATURE_FAILFAST	     0x10
 
 #define DASD_PARTN_BITS 2
 
