ChangeSet
  1.1713.17.23 04/04/12 12:43:50 akpm@osdl.org[torvalds] +1 -0
  [PATCH] ppc64: Move EPOW log buffer to BSS
  
  From: Olof Johansson <olof@austin.ibm.com>
  
  RTAS on IBM pSeries runs in real mode, so all pointers being passed in to
  it need to be in low memory.  There's two places in the RAS code that
  passes in pointers to items on the stack, which might end up being above
  the limit.
  
  Below patch resolves this by creating a buffer in BSS + a lock for
  serialization.  There's no reason to worry about contention on the lock,
  since rtas_call() also serializes on a single spinlock and this is an
  infrequent code path in the first place.

  arch/ppc64/kernel/ras.c
    1.11 04/04/12 10:54:03 akpm@osdl.org[torvalds] +17 -2
    ppc64: Move EPOW log buffer to BSS

diff -Nru a/arch/ppc64/kernel/ras.c b/arch/ppc64/kernel/ras.c
--- a/arch/ppc64/kernel/ras.c	Tue Apr 13 07:23:04 2004
+++ b/arch/ppc64/kernel/ras.c	Tue Apr 13 07:23:04 2004
@@ -110,6 +110,9 @@
 }
 __initcall(init_ras_IRQ);
 
+static struct rtas_error_log log_buf;
+static spinlock_t log_lock = SPIN_LOCK_UNLOCKED;
+
 /*
  * Handle power subsystem events (EPOW).
  *
@@ -124,11 +127,17 @@
 	unsigned int size = sizeof(log_entry);
 	long status = 0xdeadbeef;
 
+	spin_lock(&log_lock);
+
 	status = rtas_call(rtas_token("check-exception"), 6, 1, NULL, 
 			   0x500, irq, 
 			   RTAS_EPOW_WARNING | RTAS_POWERMGM_EVENTS, 
 			   1,  /* Time Critical */
-			   __pa(&log_entry), size);
+			   __pa(&log_buf), size);
+
+	log_entry = log_buf;
+
+	spin_unlock(&log_lock);
 
 	udbg_printf("EPOW <0x%lx 0x%lx>\n", 
 		    *((unsigned long *)&log_entry), status); 
@@ -157,11 +166,17 @@
 	long status = 0xdeadbeef;
 	int fatal;
 
+	spin_lock(&log_lock);
+
 	status = rtas_call(rtas_token("check-exception"), 6, 1, NULL, 
 			   0x500, irq, 
 			   RTAS_INTERNAL_ERROR, 
 			   1, /* Time Critical */
-			   __pa(&log_entry), size);
+			   __pa(&log_buf), size);
+
+	log_entry = log_buf;
+
+	spin_unlock(&log_lock);
 
 	if ((status == 0) && (log_entry.severity >= SEVERITY_ERROR_SYNC)) 
 		fatal = 1;
.........................................................................
# vim: syntax=diff

