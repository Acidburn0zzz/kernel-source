Subject: Disable i386 APIC by default
From: ak@suse.de

Don't enable local APIC unless the "apic" option is specified on i386
UP kernels.

diff -u linux-2.6.13/arch/i386/kernel/acpi/boot.c-o linux-2.6.13/arch/i386/kernel/acpi/boot.c
--- linux-2.6.13/arch/i386/kernel/acpi/boot.c-o	2005-08-29 10:53:39.000000000 +0200
+++ linux-2.6.13/arch/i386/kernel/acpi/boot.c	2005-08-31 04:14:41.000000000 +0200
@@ -823,6 +823,18 @@
 #ifdef CONFIG_X86_LOCAL_APIC
 	int count, error;
 
+	/* 
+	 * Warning, broken error handling here.
+	 * When X86_APIC_OFF is not set and the APIC initialization
+	 * later fails then the ACPI state will be all messed up.
+	 */
+#ifdef CONFIG_X86_APIC_OFF
+	if (enable_local_apic <= 0) { 
+		printk(KERN_INFO "ACPI: local apic disabled\n");
+		return;
+	}
+#endif	   
+
 	count = acpi_table_parse(ACPI_APIC, acpi_parse_madt);
 	if (count >= 1) {
 
diff -u linux-2.6.13/arch/i386/kernel/apic.c-o linux-2.6.13/arch/i386/kernel/apic.c
--- linux-2.6.13/arch/i386/kernel/apic.c-o	2005-08-29 10:53:39.000000000 +0200
+++ linux-2.6.13/arch/i386/kernel/apic.c	2005-08-31 07:53:37.000000000 +0200
@@ -710,7 +710,11 @@
 
 static int __init apic_set_verbosity(char *str)
 {
-	if (strcmp("debug", str) == 0)
+	if (*str == '=') 
+		str++;
+	if (*str == 0) 
+		;/* parsed early already */
+	else if (strcmp("debug", str) == 0)
 		apic_verbosity = APIC_DEBUG;
 	else if (strcmp("verbose", str) == 0)
 		apic_verbosity = APIC_VERBOSE;
@@ -721,15 +725,20 @@
 	return 0;
 }
 
-__setup("apic=", apic_set_verbosity);
+__setup("apic", apic_set_verbosity);
 
 static int __init detect_init_APIC (void)
 {
 	u32 h, l, features;
-
+#ifdef CONFIG_X86_APIC_OFF
+	/* Disabled by kernel option? */
+	if (enable_local_apic < 1)
+		return -1;
+#else
 	/* Disabled by kernel option? */
 	if (enable_local_apic < 0)
 		return -1;
+#endif
 
 	switch (boot_cpu_data.x86_vendor) {
 	case X86_VENDOR_AMD:
@@ -818,8 +827,6 @@
 		apic_phys = mp_lapic_addr;
 
 	set_fixmap_nocache(FIX_APIC_BASE, apic_phys);
-	printk(KERN_DEBUG "mapped APIC to %08lx (%08lx)\n", APIC_BASE,
-	       apic_phys);
 
 	/*
 	 * Fetch the APIC ID of the BSP in case we have a
@@ -852,8 +859,6 @@
 				ioapic_phys = __pa(ioapic_phys);
 			}
 			set_fixmap_nocache(idx, ioapic_phys);
-			printk(KERN_DEBUG "mapped IOAPIC to %08lx (%08lx)\n",
-			       __fix_to_virt(idx), ioapic_phys);
 			idx++;
 		}
 	}
@@ -1260,11 +1265,21 @@
  */
 int __init APIC_init_uniprocessor (void)
 {
+#ifdef CONFIG_X86_APIC_OFF
+	if (enable_local_apic <= 0) { 
+		clear_bit(X86_FEATURE_APIC, boot_cpu_data.x86_capability);
+		nr_ioapics = 0;
+		return -1;
+	}
+#endif
+
 	if (enable_local_apic < 0)
 		clear_bit(X86_FEATURE_APIC, boot_cpu_data.x86_capability);
 
-	if (!smp_found_config && !cpu_has_apic)
+	if (!smp_found_config && !cpu_has_apic) { 
+		nr_ioapics = 0;
 		return -1;
+	}
 
 	/*
 	 * Complain if the BIOS pretends there is one.
@@ -1272,6 +1287,8 @@
 	if (!cpu_has_apic && APIC_INTEGRATED(apic_version[boot_cpu_physical_apicid])) {
 		printk(KERN_ERR "BIOS bug, local APIC #%d not detected!...\n",
 			boot_cpu_physical_apicid);
+		nr_ioapics = 0;
+		clear_bit(X86_FEATURE_APIC, boot_cpu_data.x86_capability);
 		return -1;
 	}
 
diff -u linux-2.6.13/arch/i386/kernel/setup.c-o linux-2.6.13/arch/i386/kernel/setup.c
--- linux-2.6.13/arch/i386/kernel/setup.c-o	2005-08-31 03:51:49.000000000 +0200
+++ linux-2.6.13/arch/i386/kernel/setup.c	2005-08-31 04:33:10.000000000 +0200
@@ -849,6 +849,9 @@
 		/* disable IO-APIC */
 		else if (!memcmp(from, "noapic", 6))
 			disable_ioapic_setup();
+		/* SUSE specific option */
+		else if (!memcmp(from, "apic", 4))
+		        lapic_enable();
 #endif /* CONFIG_X86_LOCAL_APIC */
 #endif /* CONFIG_ACPI_BOOT */
 
diff -u linux-2.6.13/arch/i386/Kconfig-o linux-2.6.13/arch/i386/Kconfig
--- linux-2.6.13/arch/i386/Kconfig-o	2005-08-31 03:52:03.000000000 +0200
+++ linux-2.6.13/arch/i386/Kconfig	2005-08-31 07:48:25.000000000 +0200
@@ -539,6 +539,15 @@
 	  performance counters), and the NMI watchdog which detects hard
 	  lockups.
 
+config X86_APIC_OFF
+        bool "Disable local/IO APIC by default" 
+	depends on X86_LOCAL_APIC  && !SMP
+	default n
+	help
+	  When this option is enabled the IO/local APIC code is compiled in, but 
+	  only enabled when the kernel is booted with "apic" on the kernel 
+	  command line  or an DMI entry forced APIC mode. 
+
 config X86_UP_IOAPIC
 	bool "IO-APIC support on uniprocessors"
 	depends on X86_UP_APIC
diff -u linux-2.6.13/arch/x86_64/kernel/apic.c-o linux-2.6.13/arch/x86_64/kernel/apic.c
--- linux-2.6.13/arch/x86_64/kernel/apic.c-o	2005-08-29 10:53:48.000000000 +0200
+++ linux-2.6.13/arch/x86_64/kernel/apic.c	2005-08-31 04:14:40.000000000 +0200
@@ -38,6 +38,9 @@
 int apic_verbosity;
 
 int disable_apic_timer __initdata;
+/* just used to communicate with shared i386 code: */
+int enable_local_apic = 1; 
+
 
 /* Using APIC to generate smp_local_timer_interrupt? */
 int using_apic_timer = 0;
@@ -1073,6 +1076,7 @@
 	}
 	if (!cpu_has_apic) { 
 		disable_apic = 1;
+		enable_local_apic = -1; 
 		printk(KERN_INFO "Apic disabled by BIOS\n");
 		return -1;
 	}
@@ -1099,12 +1103,14 @@
 
 static __init int setup_disableapic(char *str) 
 { 
+	enable_local_apic = -1;
 	disable_apic = 1;
 	return 0;
 } 
 
 static __init int setup_nolapic(char *str) 
 { 
+	enable_local_apic = -1;
 	disable_apic = 1;
 	return 0;
 } 
diff -u linux-2.6.13/Documentation/kernel-parameters.txt-o linux-2.6.13/Documentation/kernel-parameters.txt
--- linux-2.6.13/Documentation/kernel-parameters.txt-o	2005-08-31 03:51:55.000000000 +0200
+++ linux-2.6.13/Documentation/kernel-parameters.txt	2005-08-31 04:14:16.000000000 +0200
@@ -224,6 +224,12 @@
 	apm=		[APM] Advanced Power Management
 			See header of arch/i386/kernel/apm.c.
 
+	apic		[UP,APIC,i386] Tells the kernel to make use of the APIC on
+	                uniprocessor systems. When CONFIG_X86_APIC_OFF is set it 
+			needs this parameter to really activate it (needed to 
+			avoid problems with certain machines). This enables IO 
+			and local APICs.
+
 	applicom=	[HW]
 			Format: <mem>,<irq>
  
diff -u linux-2.6.13/include/asm-i386/mach-default/mach_apic.h-o linux-2.6.13/include/asm-i386/mach-default/mach_apic.h
--- linux-2.6.13/include/asm-i386/mach-default/mach_apic.h-o	2005-08-29 10:54:10.000000000 +0200
+++ linux-2.6.13/include/asm-i386/mach-default/mach_apic.h	2005-08-31 07:54:58.000000000 +0200
@@ -56,8 +56,10 @@
 
 static inline void clustered_apic_check(void)
 {
+#ifdef CONFIG_SMP
 	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",
 					"Flat", nr_ioapics);
+#endif
 }
 
 static inline int multi_timer_check(int apic, int irq)
