diff -u linux/arch/i386/kernel/acpi/boot.c-o linux/arch/i386/kernel/acpi/boot.c
--- linux/arch/i386/kernel/acpi/boot.c-o	2004-03-23 17:32:22.000000000 +0100
+++ linux/arch/i386/kernel/acpi/boot.c	2004-03-23 17:34:23.000000000 +0100
@@ -685,6 +685,13 @@
 #ifdef CONFIG_X86_LOCAL_APIC
 	int count, error;
 
+	/* it's still wrong when the apic is disabled later */
+	extern int enable_local_apic;
+	if (enable_local_apic < 0) { 
+		printk(KERN_INFO "ACPI: local apic disabled\n");
+		return;
+	}
+
 	count = acpi_table_parse(ACPI_APIC, acpi_parse_madt);
 	if (count == 1) {
 
diff -u linux/arch/i386/kernel/apic.c-o linux/arch/i386/kernel/apic.c
--- linux/arch/i386/kernel/apic.c-o	2004-03-23 17:32:22.000000000 +0100
+++ linux/arch/i386/kernel/apic.c	2004-03-23 18:01:21.000000000 +0100
@@ -41,6 +41,8 @@
 
 #include "io_ports.h"
 
+extern int enable_local_apic;
+
 static void apic_pm_activate(void);
 
 void __init apic_intr_init(void)
@@ -190,6 +192,9 @@
 {
 	unsigned long value;
 
+	if (enable_local_apic < 0) 
+		return;
+
 	clear_local_APIC();
 
 	/*
@@ -609,7 +614,12 @@
 /*
  * Knob to control our willingness to enable the local APIC.
  */
-int enable_local_apic __initdata = 0; /* -1=force-disable, +1=force-enable */
+/* For SuSE don't enable APIC by default on UP kernels */ 
+#ifndef CONFIG_SMP
+int enable_local_apic __initdata = -1; /* -1=force-disable, +1=force-enable */
+#else
+int enable_local_apic __initdata = 0;
+#endif
 
 static int __init lapic_disable(char *str)
 {
@@ -626,6 +636,17 @@
 }
 __setup("lapic", lapic_enable);
 
+int __init apic_enable(char *str)
+{
+#ifdef CONFIG_X86_IO_APIC
+	extern int skip_ioapic_setup;
+	skip_ioapic_setup = 0;
+#endif
+	enable_local_apic = 1;
+	return 0;
+}
+__setup("apic", apic_enable); 
+
 static int __init detect_init_APIC (void)
 {
 	u32 h, l, features;
@@ -1172,8 +1193,6 @@
 	 * Complain if the BIOS pretends there is one.
 	 */
 	if (!cpu_has_apic && APIC_INTEGRATED(apic_version[boot_cpu_physical_apicid])) {
-		printk(KERN_ERR "BIOS bug, local APIC #%d not detected!...\n",
-			boot_cpu_physical_apicid);
 		return -1;
 	}
 
diff -u linux/arch/i386/kernel/io_apic.c-o linux/arch/i386/kernel/io_apic.c
--- linux/arch/i386/kernel/io_apic.c-o	2004-03-23 17:32:22.000000000 +0100
+++ linux/arch/i386/kernel/io_apic.c	2004-03-23 17:32:28.000000000 +0100
@@ -722,7 +722,11 @@
 #define MAX_PIRQS 8
 int pirq_entries [MAX_PIRQS];
 int pirqs_enabled;
-int skip_ioapic_setup;
+#ifdef CONFIG_SMP
+int skip_ioapic_setup = 0;
+#else
+int skip_ioapic_setup = 1;
+#endif
 
 static int __init ioapic_setup(char *str)
 {
diff -u linux/arch/i386/kernel/setup.c-o linux/arch/i386/kernel/setup.c
--- linux/arch/i386/kernel/setup.c-o	2004-03-23 17:32:00.000000000 +0100
+++ linux/arch/i386/kernel/setup.c	2004-03-23 18:01:14.000000000 +0100
@@ -50,6 +50,10 @@
 #include "setup_arch_pre.h"
 #include "mach_resources.h"
 
+#ifdef CONFIG_X86_LOCAL_APIC
+extern int enable_local_apic;
+#endif
+
 /* This value is set up by the early boot code to point to the value
    immediately after the boot time page tables.  It contains a *physical*
    address, and must not be in the .bss segment! */
@@ -624,6 +628,10 @@
 		/* disable IO-APIC */
 		else if (!memcmp(from, "noapic", 6))
 			disable_ioapic_setup();
+		else if (!memcmp(from, "apic", 4)) {
+		     extern int apic_enable(char *);
+		     apic_enable(from); 
+		} 		     	
 #endif /* CONFIG_X86_LOCAL_APIC */
 #endif /* CONFIG_ACPI_BOOT */
 
@@ -917,6 +925,7 @@
 	acpi_reserve_bootmem();
 #endif
 #ifdef CONFIG_X86_FIND_SMP_CONFIG
+	if (enable_local_apic >= 0) 
 	/*
 	 * Find and reserve possible boot-time SMP configuration:
 	 */
@@ -1232,7 +1241,7 @@
 	acpi_boot_init();
 
 #ifdef CONFIG_X86_LOCAL_APIC
-	if (smp_found_config)
+	if (smp_found_config && enable_local_apic >= 0)
 		get_smp_config();
 #endif
 
diff -u linux/arch/x86_64/kernel/apic.c-o linux/arch/x86_64/kernel/apic.c
--- linux/arch/x86_64/kernel/apic.c-o	2004-03-23 17:32:01.000000000 +0100
+++ linux/arch/x86_64/kernel/apic.c	2004-03-23 18:41:58.000000000 +0100
@@ -970,6 +970,7 @@
 }
 
 int disable_apic; 
+int enable_local_apic = 1;
 
 /*
  * This initializes the IO-APIC and APIC hardware if this is
@@ -1009,12 +1010,14 @@
 
 static __init int setup_disableapic(char *str) 
 { 
+	enable_local_apic = -1;
 	disable_apic = 1;
 	return 0;
 } 
 
 static __init int setup_nolapic(char *str) 
 { 
+	enable_local_apic = -1;
 	disable_apic = 1;
 	return 0;
 } 
diff -u linux/Documentation/kernel-parameters.txt-o linux/Documentation/kernel-parameters.txt
--- linux/Documentation/kernel-parameters.txt-o	2004-03-23 17:32:22.000000000 +0100
+++ linux/Documentation/kernel-parameters.txt	2004-03-23 17:59:43.000000000 +0100
@@ -176,6 +176,12 @@
 			not play well with APC CPU idle - disable it if you have
 			APC and your system crashes randomly.
  
+	apic		[UP,APIC] Tells the kernel to make use of the APIC on
+	                uniprocessor systems. Even when APIC on UP
+			systems is enabled, it needs this parameter
+			to really activate it (needed to avoid problems
+			with certain machines). This enables IO and local APICs.
+ 
 	apm=		[APM] Advanced Power Management
 			See header of arch/i386/kernel/apm.c.
 
