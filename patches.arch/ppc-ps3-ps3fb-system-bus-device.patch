Subject: ps3: Convert ps3fb to a PS3 system bus device

Convert ps3fb from a platform device to a PS3 system bus device


---
 arch/powerpc/platforms/ps3/device-init.c |   41 +++++----
 drivers/video/ps3fb.c                    |  128 +++++++++++--------------------
 2 files changed, 72 insertions(+), 97 deletions(-)

--- a/arch/powerpc/platforms/ps3/device-init.c
+++ b/arch/powerpc/platforms/ps3/device-init.c
@@ -438,6 +438,8 @@ static int __devinit ps3_register_sound(
 		struct ps3_mmio_region m_region;
 	} *p;
 
+	pr_debug(" -> %s:%d\n", __func__, __LINE__);
+
 	p = kzalloc(sizeof(*p), GFP_KERNEL);
 	if (!p)
 		return -ENOMEM;
@@ -446,13 +448,14 @@ static int __devinit ps3_register_sound(
 				   &p->d_region,
 				   &p->m_region);
 
-#warning need device specific data here
+#warning need to get the device specific data here
 
 	result = ps3_system_bus_device_register(&p->dev, PS3_IOBUS_IOC0);
 
 	if (result)
 		kfree(p);
 
+	pr_debug(" <- %s:%d\n", __func__, __LINE__);
 	return result;
 }
 
@@ -755,7 +758,8 @@ static int ps3stor_probe_dev(struct ps3_
 
 	error = ps3_system_bus_device_register(&dev->sbd, PS3_IOBUS_SB);
 	if (error) {
-		printk(KERN_ERR "%s:%u: ps3_system_register failed %d\n",
+		printk(KERN_ERR
+		       "%s:%u: ps3_system_bus_device_register failed %d\n",
 		       __func__, __LINE__, error);
 		goto cleanup;
 	}
@@ -848,28 +852,31 @@ static int __devinit ps3_register_storag
 	return 0;
 }
 
-#include <linux/platform_device.h>
 static int __devinit ps3_register_fb(void)
 {
-	int result;
-	static struct platform_device dev = {
-		.name   = "ps3fb",
-		.id     = 0,
-	};
+	int error;
+	struct ps3_system_bus_device *dev;
 
-	pr_debug(" -> %s:%d\n", __func__, __LINE__);
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (!dev)
+		return -ENOMEM;
 
-	result = platform_device_register(&dev);
+	ps3_system_bus_device_init(dev, PS3_MATCH_ID_GFX, NULL, NULL);
 
-	if (result) {
-		pr_debug("%s:%d platform_device_register failed\n",
-			__func__, __LINE__);
-		goto fail;
+	pr_debug(" -> %s:%d\n", __func__, __LINE__);
+
+	error = ps3_system_bus_device_register(dev, PS3_IOBUS_IOC0);
+	if (error) {
+		printk(KERN_ERR
+		       "%s:%u: ps3_system_bus_device_register failed %d\n",
+		       __func__, __LINE__, error);
+		goto cleanup;
 	}
+	return 0;
 
-fail:
-	pr_debug(" <- %s:%d\n", __func__, __LINE__);
-	return result;
+cleanup:
+	kfree(dev);
+	return -ENODEV;
 }
 
 static int __init ps3_register_known_devices(void)
--- a/drivers/video/ps3fb.c
+++ b/drivers/video/ps3fb.c
@@ -27,7 +27,6 @@
 #include <linux/vmalloc.h>
 #include <linux/delay.h>
 #include <linux/interrupt.h>
-#include <linux/platform_device.h>
 #include <linux/console.h>
 #include <linux/ioctl.h>
 #include <linux/notifier.h>
@@ -46,6 +45,9 @@
 #include <asm/ps3fb.h>
 #include <asm/ps3.h>
 
+
+#define DEVICE_NAME		"ps3fb"
+
 #ifdef PS3FB_DEBUG
 #define DPRINTK(fmt, args...) printk("%s: " fmt, __func__ , ##args)
 #else
@@ -126,7 +128,6 @@ struct gpu_driver_info {
 
 struct ps3fb_priv {
 	unsigned int irq_no;
-	void *dev;
 
 	u64 context_handle, memory_handle;
 	void *xdr_ea;
@@ -145,8 +146,6 @@ struct ps3fb_priv {
 };
 static struct ps3fb_priv ps3fb;
 
-static struct ps3_system_bus_device fake_dev; //FIXME: need to put ps3fb on system-bus
-
 struct ps3fb_res_table {
 	u32 xres;
 	u32 yres;
@@ -173,7 +172,7 @@ static const struct ps3fb_res_table ps3f
 	{    0,    0,   0,   0 , 0} };
 
 /* default resolution */
-#define GPU_RES_INDEX 0		/* 720 x 480 */
+#define GPU_RES_INDEX	0		/* 720 x 480 */
 
 static const struct fb_videomode ps3fb_modedb[] = {
     /* 60 Hz broadcast modes (modes "1" to "5") */
@@ -300,10 +299,9 @@ static const struct fb_videomode ps3fb_m
 #define FB_OFF(i)	(GPU_OFFSET - VP_OFF(i) % GPU_OFFSET)
 
 static int ps3fb_mode;
-module_param(ps3fb_mode, bool, 0);
+module_param(ps3fb_mode, int, 0);
 
-static char *mode_option __initdata;
-int mode_hack; // FIXME: do something with this...
+static char *mode_option __devinitdata;
 
 static int ps3fb_get_res_table(u32 xres, u32 yres)
 {
@@ -854,7 +852,8 @@ static irqreturn_t ps3fb_vsync_interrupt
 }
 
 
-static int ps3fb_vsync_settings(struct gpu_driver_info *dinfo, void *dev)
+static int ps3fb_vsync_settings(struct gpu_driver_info *dinfo,
+				struct ps3_system_bus_device *dev)
 {
 	int error;
 
@@ -870,7 +869,6 @@ static int ps3fb_vsync_settings(struct g
 		return -EINVAL;
 	}
 
-	ps3fb.dev = dev;
 	error = ps3_irq_plug_setup(PS3_BINDING_CPU_ANY, dinfo->irq.irq_outlet,
 				   &ps3fb.irq_no);
 	if (error) {
@@ -880,7 +878,7 @@ static int ps3fb_vsync_settings(struct g
 	}
 
 	error = request_irq(ps3fb.irq_no, ps3fb_vsync_interrupt, IRQF_DISABLED,
-			    "ps3fb vsync", ps3fb.dev);
+			    DEVICE_NAME, dev);
 	if (error) {
 		printk(KERN_ERR "%s: request_irq failed %d\n", __func__,
 		       error);
@@ -939,17 +937,12 @@ static struct fb_ops ps3fb_ops = {
 };
 
 static struct fb_fix_screeninfo ps3fb_fix __initdata = {
-	.id =		"PS3 FB",
+	.id =		DEVICE_NAME,
 	.type =		FB_TYPE_PACKED_PIXELS,
 	.visual =	FB_VISUAL_TRUECOLOR,
 	.accel =	FB_ACCEL_NONE,
 };
 
-static void ps3fb_platform_release(struct device *device)
-{
-	printk("%s:%u\n need this???", __func__, __LINE__);
-}
-
 static int ps3fb_set_sync(void)
 {
 	int status;
@@ -982,10 +975,11 @@ static int ps3fb_set_sync(void)
 
 //EXPORT_SYMBOL_GPL(ps3fb_set_sync);
 
-static int __init ps3fb_probe(struct platform_device *dev)
+static int __devinit ps3fb_probe(struct ps3_system_bus_device *dev)
 {
 	struct fb_info *info;
 	int retval = -ENOMEM;
+	u32 xres, yres;
 	u64 ddr_lpar = 0;
 	u64 lpar_dma_control = 0;
 	u64 lpar_driver_info = 0;
@@ -998,26 +992,18 @@ static int __init ps3fb_probe(struct pla
 
 	printk(" -> %s:%u\n", __func__, __LINE__);
 
-	dev->dev.release = ps3fb_platform_release; // need this???
-
-	ps3_system_bus_device_init(&fake_dev, PS3_MATCH_ID_GFX, NULL, NULL);
-
-	status = ps3_open_hv_device(&fake_dev);
-
+	status = ps3_open_hv_device(dev);
 	if (status) {
 		printk(KERN_ERR "%s: ps3_open_hv_device failed\n", __func__);
 		goto err;
 	}
 
-	ps3fb_mode = ps3av_get_mode();
+	if (!ps3fb_mode)
+		ps3fb_mode = ps3av_get_mode();
 	DPRINTK("ps3av_mode:%d\n", ps3fb_mode);
 
-	if (mode_hack)
-		ps3fb_mode = mode_hack;
-
-	if (ps3fb_mode > 0) {
-		u32 xres, yres;
-		ps3av_video_mode2res(ps3fb_mode, &xres, &yres);
+	if (ps3fb_mode > 0 &&
+	    !ps3av_video_mode2res(ps3fb_mode, &xres, &yres)) {
 		ps3fb.res_index = ps3fb_get_res_table(xres, yres);
 		DPRINTK("res_index:%d\n", ps3fb.res_index);
 	} else
@@ -1073,7 +1059,7 @@ static int __init ps3fb_probe(struct pla
 	 * leakage into userspace
 	 */
 	memset(ps3fb.xdr_ea, 0, ps3fb_videomemory.size);
-	info = framebuffer_alloc(sizeof(u32) * 16, &dev->dev);
+	info = framebuffer_alloc(sizeof(u32) * 16, &dev->core);
 	if (!info)
 		goto err_free_irq;
 
@@ -1105,13 +1091,13 @@ static int __init ps3fb_probe(struct pla
 	if (retval < 0)
 		goto err_fb_dealloc;
 
-	platform_set_drvdata(dev, info);
+	dev->core.driver_data = info;
 
 	printk(KERN_INFO
 	       "fb%d: PS3 frame buffer device, using %ld KiB of video memory\n",
 	       info->node, ps3fb_videomemory.size >> 10);
 
-	task = kthread_run(ps3fbd, info, "ps3fbd");
+	task = kthread_run(ps3fbd, info, DEVICE_NAME);
 	if (IS_ERR(task)) {
 		retval = PTR_ERR(task);
 		goto err_unregister_framebuffer;
@@ -1129,7 +1115,7 @@ err_fb_dealloc:
 err_framebuffer_release:
 	framebuffer_release(info);
 err_free_irq:
-	free_irq(ps3fb.irq_no, ps3fb.dev);
+	free_irq(ps3fb.irq_no, dev);
 	ps3_irq_plug_destroy(ps3fb.irq_no);
 err_iounmap_dinfo:
 	iounmap((u8 __iomem *)ps3fb.dinfo);
@@ -1141,7 +1127,7 @@ err:
 	return retval;
 }
 
-static int ps3fb_remove(struct platform_device *dev)
+static int __devexit ps3fb_remove(struct ps3_system_bus_device *dev)
 {
 	BUG();
 	return 0;
@@ -1150,10 +1136,10 @@ static int ps3fb_remove(struct platform_
 extern void fbcon_exit(void);
 extern void vt_console_stop(void);
 
-static void ps3fb_shutdown(struct platform_device *dev)
+static int ps3fb_shutdown(struct ps3_system_bus_device *dev)
 {
 	int status;
-	struct fb_info *info = platform_get_drvdata(dev);
+	struct fb_info *info = dev->core.driver_data;
 
 	printk(" -> %s:%d\n", __func__, __LINE__);
 
@@ -1175,7 +1161,7 @@ static void ps3fb_shutdown(struct platfo
 		kthread_stop(task);
 	}
 	if (ps3fb.irq_no) {
-		free_irq(ps3fb.irq_no, ps3fb.dev);
+		free_irq(ps3fb.irq_no, dev);
 		ps3_irq_plug_destroy(ps3fb.irq_no);
 	}
 	iounmap((u8 __iomem *)ps3fb.dinfo);
@@ -1188,83 +1174,65 @@ static void ps3fb_shutdown(struct platfo
 	if (status)
 		DPRINTK("lv1_gpu_memory_free failed: %d\n", status);
 
-	ps3_close_hv_device(&fake_dev);
+	ps3_close_hv_device(dev);
 	printk(" <- %s:%d\n", __func__, __LINE__);
+
+	return 0;
 }
 
-static struct platform_driver ps3fb_driver = {
-	.probe	= ps3fb_probe,
-	.remove = ps3fb_remove,
-	.shutdown = ps3fb_shutdown,
-	.driver = { .name = "ps3fb" }
+static struct ps3_system_bus_driver ps3fb_driver = {
+	.match_id	= PS3_MATCH_ID_GFX,
+	.core.name	= DEVICE_NAME,
+	.core.owner	= THIS_MODULE,
+	.probe		= ps3fb_probe,
+	.remove		= __devexit_p(ps3fb_remove),
+	.shutdown	= ps3fb_shutdown,
 };
 
 #ifndef MODULE
 static int __init ps3fb_setup(void)
 {
-	char *this_opt;
-	int mode = 0;
-	char *options;
+	char *options, *this_opt;
 
-	if (fb_get_options("ps3fb", &options))
+	if (fb_get_options(DEVICE_NAME, &options))
 		return -ENXIO;
 
 	if (!options || !*options)
-		return 0;	/* no options */
+		return 0;
 
 	while ((this_opt = strsep(&options, ",")) != NULL) {
 		if (!*this_opt)
 			continue;
 		if (!strncmp(this_opt, "mode:", 5))
-			mode_hack = simple_strtoul(this_opt + 5, NULL, 0);
+			ps3fb_mode = simple_strtoul(this_opt + 5, NULL, 0);
 		else
 			mode_option = this_opt;
 	}
 	return 0;
 }
+#else
+#define ps3fb_setup()	0
 #endif	/* MODULE */
 
 static int __init ps3fb_init(void)
 {
-	int error;
-
-	printk(" -> %s:%d\n", __func__, __LINE__);
-
-#ifndef MODULE
-	error = ps3fb_setup();
-	if (error)
-		return error;
-#endif
-
-	if (!ps3fb_videomemory.address)
+	if (!ps3fb_videomemory.address ||  ps3fb_setup())
 		return -ENXIO;
 
-	error = platform_driver_register(&ps3fb_driver);
-	if (error) {
-		printk(KERN_ERR "%s: platform_driver_register failed: %d\n",
-		       __func__, error);
-	}
-
-	printk(" <- %s:%d\n", __func__, __LINE__);
-
-	return error;
+	return ps3_system_bus_driver_register(&ps3fb_driver, 0);
 }
 
-module_init(ps3fb_init);
-
-#ifdef MODULE
 static void __exit ps3fb_exit(void)
 {
 	printk(" -> %s:%d\n", __func__, __LINE__);
-	platform_driver_unregister(&ps3fb_driver);
+	ps3_system_bus_driver_unregister(&ps3fb_driver);
 	printk(" <- %s:%d\n", __func__, __LINE__);
 }
 
-/*
-FIXME: need to fix fbcon to support remove
-module_exit(ps3fb_exit);
-*/
-#endif /* MODULE */
+module_init(ps3fb_init);
+#if 0
+module_exit(ps3fb_exit);	/* FIXME: need to fix fbcon to support remove */
+#endif
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("PS3 GPU Frame Buffer Driver");
