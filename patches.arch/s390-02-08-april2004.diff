- Description: kernel: per-cpu variables in 64 bit modules.
  Symptom:     The load of the ipv6 modules on a 64 bit system with more
               than 4 GB of main memory crashes the kernel.
  Problem:     A statically defined per-cpu variable in a kernel modules is
               accessed by use of the "larl" instruction. The range of the
               instruction is +- 4GB. Because of this the access to such a
               variable only works if the kernel image and the kernel modules
               are no more then 4 GB apart.
  Solution:    Force the use of a 64 bit relocation to access statically
               defined per-cpu variables.
  Problem-ID:  -
  Archs:       s390-64

--- linux-2.5/arch/s390/kernel/module.c	9 Sep 2003 18:20:15 -0000	1.9
+++ linux-2.5/arch/s390/kernel/module.c	10 May 2004 15:52:48 -0000	1.9.6.1
@@ -277,7 +277,8 @@
 			*(unsigned int *) loc = val;
 		else if (r_type == R_390_GOTENT ||
 			 r_type == R_390_GOTPLTENT)
-			*(unsigned int *) loc = val >> 1;
+			*(unsigned int *) loc =
+				(val + (Elf_Addr) me->module_core - loc) >> 1;
 		else if (r_type == R_390_GOT64 ||
 			 r_type == R_390_GOTPLT64)
 			*(unsigned long *) loc = val;

--- linux-2.5/include/asm-s390/percpu.h	14 Aug 2003 16:56:48 -0000	1.2
+++ linux-2.5/include/asm-s390/percpu.h	10 May 2004 15:52:49 -0000	1.2.6.1
@@ -5,10 +5,26 @@
 #include <asm/lowcore.h>
 
 /*
- * s390 uses the generic implementation for per cpu data, with the exception that
- * the offset of the cpu local data area is cached in the cpu's lowcore memory
+ * For builtin kernel code s390 uses the generic implementation for
+ * per cpu data, with the exception that the offset of the cpu local
+ * data area is cached in the cpu's lowcore memory
+ * For 64 bit module code s390 forces the use of a GOT slot for the
+ * address of the per cpu variable. This is needed because the module
+ * may be more than 4G above the per cpu area.
  */
+#if defined(__s390x__) && defined(MODULE)
+#define __get_got_cpu_var(var,offset) \
+  (*({ unsigned long *__ptr; \
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" : "=a" (__ptr) ); \
+       ((typeof(&per_cpu__##var))((*__ptr) + offset)); \
+    }))
+#undef __get_cpu_var
+#define __get_cpu_var(var) __get_got_cpu_var(var,S390_lowcore.percpu_offset)
+#undef per_cpu
+#define per_cpu(var,cpu) __get_got_cpu_var(var,__per_cpu_offset[cpu])
+#else
 #undef __get_cpu_var
 #define __get_cpu_var(var) (*RELOC_HIDE(&per_cpu__##var, S390_lowcore.percpu_offset))
+#endif
 
 #endif /* __ARCH_S390_PERCPU__ */

