# This patch includes the following deltas:
#	           ChangeSet	1.1471  -> 1.1471.4.1
#	arch/ppc64/kernel/chrp_setup.c	1.56    -> 1.57   
#	arch/ppc64/kernel/rtas.c	1.25    -> 1.26   
#	include/asm-ppc64/machdep.h	1.34    -> 1.35   
#	arch/ppc64/kernel/setup.c	1.61    -> 1.62   
#	include/asm-ppc64/rtas.h	1.17    -> 1.18   
#
# --------------------------------------------
# 04/02/27	mjwolf@brule.rchland.ibm.com	1.1471.4.1
# Add RTAS os-term call for panic on pSeries
# --------------------------------------------
#
# This patch includes the following deltas:
#	           ChangeSet	1.1499.1.13 -> 1.1499.7.1
#	arch/ppc64/kernel/rtas.c	1.28    -> 1.28.1.1
#	include/asm-ppc64/machdep.h	1.36    -> 1.37   
#	arch/ppc64/kernel/setup.c	1.64    -> 1.65   
#	include/asm-ppc64/rtas.h	1.20    -> 1.20.1.1
#
# --------------------------------------------
# 04/03/17	mjwolf@brule.rchland.ibm.com	1.1499.7.1
# From Michael Strosaker:
# This patch handles the RTAS_BUSY value that ibm,os-term can return, and also passes 
# the panic string to the os-term call so that it can be stored in a platform
# error log.
# --------------------------------------------
#
diff -purN linux-2.6.5-rc2/arch/ppc64/kernel/chrp_setup.c linux-2.6.5-rc2.ppc64/arch/ppc64/kernel/chrp_setup.c
--- linux-2.6.5-rc2/arch/ppc64/kernel/chrp_setup.c	2004-02-27 23:02:35.000000000 +0000
+++ linux-2.6.5-rc2.ppc64/arch/ppc64/kernel/chrp_setup.c	2004-03-21 10:47:14.000000000 +0000
@@ -270,6 +270,7 @@ chrp_init(unsigned long r3, unsigned lon
 	ppc_md.restart        = rtas_restart;
 	ppc_md.power_off      = rtas_power_off;
 	ppc_md.halt           = rtas_halt;
+	ppc_md.panic          = rtas_os_term;
 
 	ppc_md.get_boot_time  = pSeries_get_boot_time;
 	ppc_md.get_rtc_time   = pSeries_get_rtc_time;
diff -purN linux-2.6.5-rc2/arch/ppc64/kernel/rtas.c linux-2.6.5-rc2.ppc64/arch/ppc64/kernel/rtas.c
--- linux-2.6.5-rc2/arch/ppc64/kernel/rtas.c	2004-03-16 11:30:38.000000000 +0000
+++ linux-2.6.5-rc2.ppc64/arch/ppc64/kernel/rtas.c	2004-03-21 10:47:14.000000000 +0000
@@ -448,6 +431,27 @@ rtas_halt(void)
         rtas_power_off();
 }
 
+/* Must be in the RMO region, so we place it here */
+static char rtas_os_term_buf[2048];
+
+void rtas_os_term(char *str)
+{
+	long status;
+
+	snprintf(rtas_os_term_buf, 2048, "OS panic: %s", str);
+
+	do {
+		status = rtas_call(rtas_token("ibm,os-term"), 1, 1, NULL,
+				   __pa(rtas_os_term_buf));
+
+		if (status == RTAS_BUSY)
+			udelay(1);
+		else if (status != 0)
+			printk(KERN_EMERG "ibm,os-term call failed %ld\n",
+			       status);
+	} while (status == RTAS_BUSY);
+}
+
 unsigned long rtas_rmo_buf = 0;
 
 asmlinkage int ppc_rtas(struct rtas_args __user *uargs)
diff -purN linux-2.6.5-rc2/arch/ppc64/kernel/setup.c linux-2.6.5-rc2.ppc64/arch/ppc64/kernel/setup.c
--- linux-2.6.5-rc2/arch/ppc64/kernel/setup.c	2004-02-23 16:39:09.000000000 +0000
+++ linux-2.6.5-rc2.ppc64/arch/ppc64/kernel/setup.c	2004-03-21 10:47:14.000000000 +0000
@@ -25,6 +25,7 @@
 #include <linux/version.h>
 #include <linux/tty.h>
 #include <linux/root_dev.h>
+#include <linux/notifier.h>
 #include <asm/io.h>
 #include <asm/prom.h>
 #include <asm/processor.h>
@@ -93,6 +94,13 @@ unsigned long SYSRQ_KEY;
 
 struct machdep_calls ppc_md;
 
+static int ppc64_panic_event(struct notifier_block *, unsigned long, void *);
+
+static struct notifier_block ppc64_panic_block = {
+	notifier_call: ppc64_panic_event,
+	priority: INT_MIN /* may not return; must be done last */
+};
+
 /*
  * Perhaps we can put the pmac screen_info[] here
  * on pmac as well so we don't need the ifdef's.
@@ -318,6 +326,14 @@ EXPORT_SYMBOL(machine_halt);
 unsigned long ppc_proc_freq;
 unsigned long ppc_tb_freq;
 
+static int ppc64_panic_event(struct notifier_block *this,
+                             unsigned long event, void *ptr)
+{
+	ppc_md.panic((char *)ptr);  /* May not return */
+	return NOTIFY_DONE;
+}
+
+
 #ifdef CONFIG_SMP
 DEFINE_PER_CPU(unsigned int, pvr);
 #endif
@@ -614,6 +630,9 @@ void __init setup_arch(char **cmdline_p)
 	/* reboot on panic */
 	panic_timeout = 180;
 
+	if (ppc_md.panic)
+		notifier_chain_register(&panic_notifier_list, &ppc64_panic_block);
+
 	init_mm.start_code = PAGE_OFFSET;
 	init_mm.end_code = (unsigned long) _etext;
 	init_mm.end_data = (unsigned long) _edata;
diff -purN linux-2.6.5-rc2/include/asm-ppc64/machdep.h linux-2.6.5-rc2.ppc64/include/asm-ppc64/machdep.h
--- linux-2.6.5-rc2/include/asm-ppc64/machdep.h	2004-02-27 23:02:35.000000000 +0000
+++ linux-2.6.5-rc2.ppc64/include/asm-ppc64/machdep.h	2004-03-21 10:47:14.000000000 +0000
@@ -81,6 +81,7 @@ struct machdep_calls {
 	void		(*restart)(char *cmd);
 	void		(*power_off)(void);
 	void		(*halt)(void);
+	void		(*panic)(char *str);
 
 	int		(*set_rtc_time)(struct rtc_time *);
 	void		(*get_rtc_time)(struct rtc_time *);
diff -purN linux-2.6.5-rc2/include/asm-ppc64/rtas.h linux-2.6.5-rc2.ppc64/include/asm-ppc64/rtas.h
--- linux-2.6.5-rc2/include/asm-ppc64/rtas.h	2004-03-16 11:30:38.000000000 +0000
+++ linux-2.6.5-rc2.ppc64/include/asm-ppc64/rtas.h	2004-03-21 10:47:14.000000000 +0000
@@ -175,6 +175,7 @@ extern void call_rtas_display_status(cha
 extern void rtas_restart(char *cmd);
 extern void rtas_power_off(void);
 extern void rtas_halt(void);
+extern void rtas_os_term(char *str);
 extern int rtas_get_sensor(int sensor, int index, int *state);
 extern int rtas_get_power_level(int powerdomain, int *level);
 extern int rtas_set_power_level(int powerdomain, int level, int *setlevel);
