From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: kernel: Fix range for add_active_range() in setup_memory()
References: bnc#440610

Symptom:     BUG_ON in move_freepages(), when the kernelcore parameter is
             specified and the last memory chunk is set offline.
Problem:     add_active_range() expects start_pfn + size as end_pfn value,
             i.e. not the pfn of the last page frame but the one behind that.
             We used the pfn of the last page frame so far.
Solution:    Use start_pfn + size as end_pfn value.

Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/kernel/setup.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

Index: linux-sles11/arch/s390/kernel/setup.c
===================================================================
--- linux-sles11.orig/arch/s390/kernel/setup.c
+++ linux-sles11/arch/s390/kernel/setup.c
@@ -615,13 +615,13 @@ setup_memory(void)
 		if (memory_chunk[i].type != CHUNK_READ_WRITE)
 			continue;
 		start_chunk = PFN_DOWN(memory_chunk[i].addr);
-		end_chunk = start_chunk + PFN_DOWN(memory_chunk[i].size) - 1;
+		end_chunk = start_chunk + PFN_DOWN(memory_chunk[i].size);
 		end_chunk = min(end_chunk, end_pfn);
 		if (start_chunk >= end_chunk)
 			continue;
 		add_active_range(0, start_chunk, end_chunk);
 		pfn = max(start_chunk, start_pfn);
-		for (; pfn <= end_chunk; pfn++)
+		for (; pfn < end_chunk; pfn++)
 			page_set_storage_key(PFN_PHYS(pfn), PAGE_DEFAULT_KEY);
 	}
 
