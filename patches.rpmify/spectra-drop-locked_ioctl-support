From: Jeff Mahoney <jeffm@suse.com>
Subject: spectra: Drop ->locked_ioctl support
Patch-mainline: Submitted Aug 18, 2010

 Commit 8a6cfeb6deca3a8fefd639d898b0d163c0b5d368 removed
 ->locked_ioctl from the block layer but missed the ffsport driver.

 This patch pushes the BKL into GLOB_SBD_ioctl and switches to just using
 ->ioctl.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 drivers/staging/spectra/ffsport.c |   58 +++++++++++++++++++-------------------
 1 file changed, 29 insertions(+), 29 deletions(-)

--- a/drivers/staging/spectra/ffsport.c
+++ b/drivers/staging/spectra/ffsport.c
@@ -520,7 +512,9 @@ static int GLOB_SBD_getgeo(struct block_
 int GLOB_SBD_ioctl(struct block_device *bdev, fmode_t mode,
 		unsigned int cmd, unsigned long arg)
 {
-	int ret;
+	int ret = 0;
+
+	lock_kernel(); /* needed? */
 
 	nand_dbg_print(NAND_DBG_TRACE, "%s, Line %d, Function: %s\n",
 		       __FILE__, __LINE__, __func__);
@@ -531,23 +525,23 @@ int GLOB_SBD_ioctl(struct block_device *
 			       "Spectra IOCTL: Garbage Collection "
 			       "being performed\n");
 		if (PASS != GLOB_FTL_Garbage_Collection())
-			return -EFAULT;
-		return 0;
+			ret = -EFAULT;
+		break;
 
 	case GLOB_SBD_IOCTL_WL:
 		nand_dbg_print(NAND_DBG_DEBUG,
 			       "Spectra IOCTL: Static Wear Leveling "
 			       "being performed\n");
 		if (PASS != GLOB_FTL_Wear_Leveling())
-			return -EFAULT;
-		return 0;
+			ret = -EFAULT;
+		break;
 
 	case GLOB_SBD_IOCTL_FORMAT:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: Flash format "
 			       "being performed\n");
 		if (PASS != GLOB_FTL_Flash_Format())
-			return -EFAULT;
-		return 0;
+			ret = -EFAULT;
+		break;
 
 	case GLOB_SBD_IOCTL_FLUSH_CACHE:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: Cache flush "
@@ -555,7 +549,7 @@ int GLOB_SBD_ioctl(struct block_device *
 		mutex_lock(&spectra_lock);
 		ret = force_flush_cache();
 		mutex_unlock(&spectra_lock);
-		return ret;
+		break;
 
 	case GLOB_SBD_IOCTL_COPY_BLK_TABLE:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: "
@@ -563,8 +557,8 @@ int GLOB_SBD_ioctl(struct block_device *
 		if (copy_to_user((void __user *)arg,
 			get_blk_table_start_addr(),
 			get_blk_table_len()))
-			return -EFAULT;
-		return 0;
+			ret = -EFAULT;
+		break;
 
 	case GLOB_SBD_IOCTL_COPY_WEAR_LEVELING_TABLE:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: "
@@ -572,36 +566,43 @@ int GLOB_SBD_ioctl(struct block_device *
 		if (copy_to_user((void __user *)arg,
 			get_wear_leveling_table_start_addr(),
 			get_wear_leveling_table_len()))
-			return -EFAULT;
-		return 0;
+			ret = -EFAULT;
+		break;
 
 	case GLOB_SBD_IOCTL_GET_NAND_INFO:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: "
 			       "Get NAND info\n");
 		if (copy_to_user((void __user *)arg, &IdentifyDeviceData,
 			sizeof(IdentifyDeviceData)))
-			return -EFAULT;
-		return 0;
+			ret = -EFAULT;
+		break;
 
 	case GLOB_SBD_IOCTL_WRITE_DATA:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: "
 			       "Write one page data\n");
-		return ioctl_write_page_data(arg);
+		ret = ioctl_write_page_data(arg);
+		break;
 
 	case GLOB_SBD_IOCTL_READ_DATA:
 		nand_dbg_print(NAND_DBG_DEBUG, "Spectra IOCTL: "
 			       "Read one page data\n");
-		return ioctl_read_page_data(arg);
+		ret = ioctl_read_page_data(arg);
+		break;
+	default:
+		ret = -ENOTTY;
+		break;
 	}
 
-	return -ENOTTY;
+	unlock_kernel();
+
+	return ret;
 }
 
 static struct block_device_operations GLOB_SBD_ops = {
 	.owner = THIS_MODULE,
 	.open = GLOB_SBD_open,
 	.release = GLOB_SBD_release,
-	.locked_ioctl = GLOB_SBD_ioctl,
+	.ioctl = GLOB_SBD_ioctl,
 	.getgeo = GLOB_SBD_getgeo,
 };
 
