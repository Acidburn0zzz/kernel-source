Index: linux-2.6.5/Documentation/kernel-parameters.txt
===================================================================
--- linux-2.6.5.orig/Documentation/kernel-parameters.txt
+++ linux-2.6.5/Documentation/kernel-parameters.txt
@@ -1179,6 +1179,8 @@ running once the system is up.
 
 	stram_swap=	[HW,M68k]
 
+	supported	Only allow loading of supported kernel modules.
+
 	swiotlb=	[IA-64] Number of I/O TLB slabs
  
 	switches=	[HW,M68k]
Index: linux-2.6.5/Documentation/sysctl/kernel.txt
===================================================================
--- linux-2.6.5.orig/Documentation/sysctl/kernel.txt
+++ linux-2.6.5/Documentation/sysctl/kernel.txt
@@ -321,6 +321,14 @@ can be ORed together:
   2 - A module was force loaded by insmod -f.
       Set by modutils >= 2.4.9 and module-init-tools.
   4 - Unsafe SMP processors: SMP with CPUs not designed for SMP.
+  8 - An unsupported kernel module was loaded.
+
+==============================================================
+
+unsupported:
+
+If set to a zero, the kernel will refuse to load kernel
+modules without the supported flag.
 
 ==============================================================
 
Index: linux-2.6.5/include/linux/kernel.h
===================================================================
--- linux-2.6.5.orig/include/linux/kernel.h
+++ linux-2.6.5/include/linux/kernel.h
@@ -113,6 +113,7 @@ extern int oops_in_progress;		/* If set,
 extern int panic_on_oops;
 extern int system_state;		/* See values below */
 extern int tainted;
+extern int unsupported;
 extern const char *print_tainted(void);
 
 /* Values used for system_state */
@@ -124,6 +125,7 @@ extern const char *print_tainted(void);
 #define TAINT_FORCED_MODULE		(1<<1)
 #define TAINT_UNSAFE_SMP		(1<<2)
 #define TAINT_FORCED_RMMOD		(1<<3)
+#define TAINT_UNSUPPORTED		(1<<4)
 
 extern void dump_stack(void);
 
Index: linux-2.6.5/include/linux/sysctl.h
===================================================================
--- linux-2.6.5.orig/include/linux/sysctl.h
+++ linux-2.6.5/include/linux/sysctl.h
@@ -141,6 +141,7 @@ enum
 	KERN_MMAPUSEHUGEPAGES=71,       /* int: back anon mmap with hpages */
 	KERN_HPAGES_MAP_SZ=72,  /* int: min size (MB) of mapping */
 	KERN_XMON=73,		/* int: xmon debugger enabled */
+	KERN_UNSUPPORTED=74,	/* int: allow loading of unsupported modules */
 
 };
 
Index: linux-2.6.5/kernel/module.c
===================================================================
--- linux-2.6.5.orig/kernel/module.c
+++ linux-2.6.5/kernel/module.c
@@ -57,6 +57,17 @@
 #define symbol_is(literal, string)				\
 	(strcmp(MODULE_SYMBOL_PREFIX literal, (string)) == 0)
 
+/* Allow unsupported modules switch. */ 
+int unsupported = 1;  /* default to be permissive. */
+
+static int __init supported_setup(char *str)
+{
+	unsupported = 0;
+	printk("Allow loading of supported modules only.\n");
+	return 1;
+}
+__setup("supported", supported_setup);
+
 /* Protects module list */
 static spinlock_t modlist_lock = SPIN_LOCK_UNLOCKED;
 
@@ -1297,7 +1308,7 @@ static struct module *load_module(void _
 {
 	Elf_Ehdr *hdr;
 	Elf_Shdr *sechdrs;
-	char *secstrings, *args, *modmagic, *strtab = NULL;
+	char *secstrings, *args, *modmagic, *strtab = NULL, *supported;
 	unsigned int i, symindex = 0, strindex = 0, setupindex, exindex,
 		exportindex, modindex, obsparmindex, infoindex, gplindex,
 		crcindex, gplcrcindex, versindex, pcpuindex;
@@ -1412,6 +1423,21 @@ static struct module *load_module(void _
 		goto free_hdr;
 	}
 
+	supported = get_modinfo(sechdrs, infoindex, "supported");
+	if (!supported || strcmp(supported, "yes")) {
+		if (!unsupported) {
+			printk(KERN_WARNING "%s: unsupported module, refusing "
+			       "to load. To override, echo "
+			       "1 > /proc/sys/kernel/unsupported.\n",
+			       mod->name);
+			err = -ENOEXEC;
+			goto free_hdr;
+		}
+		tainted |= TAINT_UNSUPPORTED;
+		printk(KERN_WARNING "%s: unsupported module, tainting "
+		       "kernel.\n", mod->name);
+	}
+
 	/* Now copy in args */
 	arglen = strlen_user(uargs);
 	if (!arglen) {
Index: linux-2.6.5/kernel/panic.c
===================================================================
--- linux-2.6.5.orig/kernel/panic.c
+++ linux-2.6.5/kernel/panic.c
@@ -160,6 +160,7 @@ EXPORT_SYMBOL(panic);
  *  'P' - Proprietary module has been loaded.
  *  'F' - Module has been forcibly loaded.
  *  'S' - SMP with CPUs not designed for SMP.
+ *  'U' - Unsuported modules loaded.
  *
  *	The string is overwritten by the next call to print_taint().
  */
@@ -168,10 +169,11 @@ const char *print_tainted(void)
 {
 	static char buf[20];
 	if (tainted) {
-		snprintf(buf, sizeof(buf), "Tainted: %c%c%c",
+		snprintf(buf, sizeof(buf), "Tainted: %c%c%c%c",
 			tainted & TAINT_PROPRIETARY_MODULE ? 'P' : 'G',
 			tainted & TAINT_FORCED_MODULE ? 'F' : ' ',
-			tainted & TAINT_UNSAFE_SMP ? 'S' : ' ');
+			tainted & TAINT_UNSAFE_SMP ? 'S' : ' ',
+			tainted & TAINT_UNSUPPORTED ? 'U' : ' ');
 	}
 	else
 		snprintf(buf, sizeof(buf), "Not tainted");
Index: linux-2.6.5/kernel/sysctl.c
===================================================================
--- linux-2.6.5.orig/kernel/sysctl.c
+++ linux-2.6.5/kernel/sysctl.c
@@ -306,6 +306,14 @@ static ctl_table kern_table[] = {
 		.proc_handler	= &proc_dointvec,
 	},
 	{
+		.ctl_name	= KERN_UNSUPPORTED,
+		.procname	= "unsupported",
+		.data		= &unsupported,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
 		.ctl_name	= KERN_CAP_BSET,
 		.procname	= "cap-bound",
 		.data		= &cap_bset,
Index: linux-2.6.5/scripts/Makefile.modpost
===================================================================
--- linux-2.6.5.orig/scripts/Makefile.modpost
+++ linux-2.6.5/scripts/Makefile.modpost
@@ -52,6 +52,7 @@ _modpost: $(modules)
 quiet_cmd_modpost = MODPOST
       cmd_modpost = scripts/modpost \
 	$(if $(KBUILD_EXTMOD),-i,-o) $(symverfile) \
+	-s $(objtree)/Module.supported \
 	$(filter-out FORCE,$^)
 
 .PHONY: __modpost
Index: linux-2.6.5/scripts/modpost.c
===================================================================
--- linux-2.6.5.orig/scripts/modpost.c
+++ linux-2.6.5/scripts/modpost.c
@@ -392,6 +392,31 @@ is_vmlinux(const char *modname)
 	return strcmp(myname, "vmlinux") == 0;
 }
 
+static struct {
+	void *file;
+	unsigned long size;
+} supp;
+
+int
+supported(struct module *mod)
+{
+	unsigned long pos = 0;
+	char *line, *basename;
+
+	/* In a first shot, do a simple linear scan. */
+	while ((line = get_next_line(&pos, supp.file,
+				     supp.size))) {
+		basename = strrchr(mod->name, '/');
+		if (!basename)
+			basename = line;
+		else
+			basename++;
+		if (!strcmp(basename, line))
+			return 1;
+	}
+	return 0;
+}
+
 void
 read_symbols(char *modname)
 {
@@ -496,6 +521,13 @@ add_header(struct buffer *b)
 	buf_printf(b, "};\n");
 }
 
+void
+add_supported_flag(struct buffer *b, struct module *mod)
+{
+	if (supported(mod))
+		buf_printf(b, "\nMODULE_INFO(supported, \"yes\");\n");
+}
+
 /* Record CRCs for unresolved symbols */
 
 void
@@ -617,6 +649,14 @@ write_if_changed(struct buffer *b, const
 }
 
 void
+read_supported(const char *fname)
+{
+	supp.file = grab_file(fname, &supp.size);
+	if (!supp.file)
+		; /* ignore error */
+}
+
+void
 read_dump(const char *fname)
 {
 	unsigned long size, pos = 0;
@@ -691,9 +731,10 @@ main(int argc, char **argv)
 	struct buffer buf = { };
 	char fname[SZ];
 	char *dump_read = NULL, *dump_write = NULL;
+	char *supp = NULL;
 	int opt;
 
-	while ((opt = getopt(argc, argv, "i:o:")) != -1) {
+	while ((opt = getopt(argc, argv, "i:o:s:")) != -1) {
 		switch(opt) {
 			case 'i':
 				dump_read = optarg;
@@ -701,11 +742,17 @@ main(int argc, char **argv)
 			case 'o':
 				dump_write = optarg;
 				break;
+			case 's':
+				supp = optarg;
+				break;
 			default:
 				exit(1);
 		}
 	}
 
+	if (supp)
+		read_supported(supp);
+
 	if (dump_read)
 		read_dump(dump_read);
 
@@ -720,6 +767,7 @@ main(int argc, char **argv)
 		buf.pos = 0;
 
 		add_header(&buf);
+		add_supported_flag(&buf, mod);
 		add_versions(&buf, mod);
 		add_depends(&buf, mod, modules);
 		add_moddevtable(&buf, mod);
