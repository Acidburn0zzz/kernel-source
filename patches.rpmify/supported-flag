Index: linux-2.6.8/Documentation/kernel-parameters.txt
===================================================================
--- linux-2.6.8.orig/Documentation/kernel-parameters.txt
+++ linux-2.6.8/Documentation/kernel-parameters.txt
@@ -1237,8 +1237,14 @@ running once the system is up.
 			Format: bpp:<bpp1>[:<bpp2>[:<bpp3>...]]
 
 	stram_swap=	[HW,M68k]
 
+	unsupported	Allow loading of unsupported kernel modules:
+			0 = only allow supported modules,
+			1 = warn when loading unsupported modules,
+			2 = don't warn.
+			
+
 	swiotlb=	[IA-64] Number of I/O TLB slabs
  
 	switches=	[HW,M68k]
 
Index: linux-2.6.8/Documentation/sysctl/kernel.txt
===================================================================
--- linux-2.6.8.orig/Documentation/sysctl/kernel.txt
+++ linux-2.6.8/Documentation/sysctl/kernel.txt
@@ -310,5 +310,16 @@ can be ORed together:
       Set by modutils >= 2.4.9 and module-init-tools.
   2 - A module was force loaded by insmod -f.
       Set by modutils >= 2.4.9 and module-init-tools.
   4 - Unsafe SMP processors: SMP with CPUs not designed for SMP.
+  8 - An unsupported kernel module was loaded.
+
+==============================================================
+
+unsupported:
+
+Allow to load unsupported kernel modules:
+
+  0 - refuse to load unsupported modules,
+  1 - warn when loading unsupported modules,
+  2 - don't warn.
 
Index: linux-2.6.8/include/linux/kernel.h
===================================================================
--- linux-2.6.8.orig/include/linux/kernel.h
+++ linux-2.6.8/include/linux/kernel.h
@@ -131,8 +131,9 @@ static inline void console_verbose(void)
 extern void bust_spinlocks(int yes);
 extern int oops_in_progress;		/* If set, an oops, panic(), BUG() or die() is in progress */
 extern int panic_on_oops;
 extern int tainted;
+extern int unsupported;
 extern const char *print_tainted(void);
 
 /* Values used for system_state */
 extern enum system_states {
@@ -146,8 +147,10 @@ extern enum system_states {
 #define TAINT_PROPRIETARY_MODULE	(1<<0)
 #define TAINT_FORCED_MODULE		(1<<1)
 #define TAINT_UNSAFE_SMP		(1<<2)
 #define TAINT_FORCED_RMMOD		(1<<3)
+#define TAINT_NO_SUPPORT		(1<<4)
+#define TAINT_EXTERNAL_SUPPORT		(1<<5)
 
 extern void dump_stack(void);
 
 #ifdef DEBUG
Index: linux-2.6.8/include/linux/sysctl.h
===================================================================
--- linux-2.6.8.orig/include/linux/sysctl.h
+++ linux-2.6.8/include/linux/sysctl.h
@@ -137,8 +137,9 @@ enum
 	KERN_KDB=67,		/* int: kdb on/off */
 	KERN_DEFTIMESLICE=68,	/* int: nice   0 def timeslice */
 	KERN_MINTIMESLICE=69,	/* int: nice +19 min timeslice */
 	KERN_HZ=70,		/* unsigned long: internal kernel HZ */
+	KERN_UNSUPPORTED=71,	/* int: allow loading of unsupported modules */
 };
 
 
 /* CTL_VM names: */
Index: linux-2.6.8/kernel/module.c
===================================================================
--- linux-2.6.8.orig/kernel/module.c
+++ linux-2.6.8/kernel/module.c
@@ -50,8 +50,22 @@
 
 /* If this is set, the section belongs in the init part of the module */
 #define INIT_OFFSET_MASK (1UL << (BITS_PER_LONG-1))
 
+/* Allow unsupported modules switch. */ 
+#ifdef UNSUPPORTED_MODULES
+int unsupported = UNSUPPORTED_MODULES;
+#else
+int unsupported = 2;  /* don't warn when loading unsupported modules. */
+#endif
+
+static int __init unsupported_setup(char *str)
+{
+	get_option(&str, &unsupported);
+	return 1;
+}
+__setup("unsupported=", unsupported_setup);
+
 /* Protects module list */
 static spinlock_t modlist_lock = SPIN_LOCK_UNLOCKED;
 
 /* List of modules, protected by module_mutex AND modlist_lock */
@@ -1484,9 +1498,9 @@ static struct module *load_module(void _
 				  const char __user *uargs)
 {
 	Elf_Ehdr *hdr;
 	Elf_Shdr *sechdrs;
-	char *secstrings, *args, *modmagic, *strtab = NULL;
+	char *secstrings, *args, *modmagic, *strtab = NULL, *supported;
 	unsigned int i, symindex = 0, strindex = 0, setupindex, exindex,
 		exportindex, modindex, obsparmindex, infoindex, gplindex,
 		crcindex, gplcrcindex, versindex, pcpuindex;
 	long arglen;
@@ -1603,8 +1617,31 @@ static struct module *load_module(void _
 		err = -ENOEXEC;
 		goto free_hdr;
 	}
 
+	supported = get_modinfo(sechdrs, infoindex, "supported");
+	if (supported) {
+		if (!strcmp(supported, "external"))
+			tainted |= TAINT_EXTERNAL_SUPPORT;
+		else if (strcmp(supported, "yes"))
+			supported = NULL;
+	}
+	if (!supported) {
+		if (unsupported == 0) {
+			printk(KERN_WARNING "%s: unsupported module, refusing "
+			       "to load. To override, echo "
+			       "1 > /proc/sys/kernel/unsupported\n",
+			       mod->name);
+			err = -ENOEXEC;
+			goto free_hdr;
+		}
+		tainted |= TAINT_NO_SUPPORT;
+		if (unsupported == 1) {
+			printk(KERN_WARNING "%s: unsupported module, tainting "
+			       "kernel.\n", mod->name);
+		}
+	}
+
 	/* Now copy in args */
 	arglen = strlen_user(uargs);
 	if (!arglen) {
 		err = -EFAULT;
Index: linux-2.6.8/kernel/panic.c
===================================================================
--- linux-2.6.8.orig/kernel/panic.c
+++ linux-2.6.8/kernel/panic.c
@@ -122,20 +122,24 @@ EXPORT_SYMBOL(panic);
  *
  *  'P' - Proprietary module has been loaded.
  *  'F' - Module has been forcibly loaded.
  *  'S' - SMP with CPUs not designed for SMP.
+ *  'U' - Unsuported modules loaded.
+ *  'X' - Modules with external support loaded.
  *
  *	The string is overwritten by the next call to print_taint().
  */
  
 const char *print_tainted(void)
 {
 	static char buf[20];
 	if (tainted) {
-		snprintf(buf, sizeof(buf), "Tainted: %c%c%c",
+		snprintf(buf, sizeof(buf), "Tainted: %c%c%c%c",
 			tainted & TAINT_PROPRIETARY_MODULE ? 'P' : 'G',
 			tainted & TAINT_FORCED_MODULE ? 'F' : ' ',
-			tainted & TAINT_UNSAFE_SMP ? 'S' : ' ');
+			tainted & TAINT_UNSAFE_SMP ? 'S' : ' ',
+			tainted & TAINT_NO_SUPPORT ? 'U' :
+				(tainted & TAINT_EXTERNAL_SUPPORT ? 'X' : ' '));
 	}
 	else
 		snprintf(buf, sizeof(buf), "Not tainted");
 	return(buf);
Index: linux-2.6.8/kernel/sysctl.c
===================================================================
--- linux-2.6.8.orig/kernel/sysctl.c
+++ linux-2.6.8/kernel/sysctl.c
@@ -305,8 +305,18 @@ static ctl_table kern_table[] = {
 		.maxlen		= sizeof(int),
 		.mode		= 0444,
 		.proc_handler	= &proc_dointvec,
 	},
+#ifdef CONFIG_MODULES
+	{
+		.ctl_name	= KERN_UNSUPPORTED,
+		.procname	= "unsupported",
+		.data		= &unsupported,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
 	{
 		.ctl_name	= KERN_CAP_BSET,
 		.procname	= "cap-bound",
 		.data		= &cap_bset,
Index: linux-2.6.8/Makefile
===================================================================
--- linux-2.6.8.orig/Makefile
+++ linux-2.6.8/Makefile
@@ -346,8 +346,12 @@ CPPFLAGS        := -D__KERNEL__ $(LINUXI
 CFLAGS 		:= -Wall -Wstrict-prototypes -Wno-trigraphs \
 	  	   -fno-strict-aliasing -fno-common
 AFLAGS		:= -D__ASSEMBLY__
 
+ifneq ($(UNSUPPORTED_MODULES),)
+CFLAGS		+= -DUNSUPPORTED_MODULES=$(UNSUPPORTED_MODULES)
+endif
+
 export	VERSION PATCHLEVEL SUBLEVEL EXTRAVERSION LOCALVERSION KERNELRELEASE \
 	ARCH CONFIG_SHELL HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC \
 	CPP AR NM STRIP OBJCOPY OBJDUMP MAKE AWK GENKSYMS PERL UTS_MACHINE \
 	HOSTCXX HOSTCXXFLAGS LDFLAGS_MODULE CHECK CHECKFLAGS
Index: linux-2.6.8/scripts/Makefile.modpost
===================================================================
--- linux-2.6.8.orig/scripts/Makefile.modpost
+++ linux-2.6.8/scripts/Makefile.modpost
@@ -52,8 +52,10 @@ _modpost: $(modules)
 quiet_cmd_modpost = MODPOST
       cmd_modpost = scripts/mod/modpost            \
         $(if $(CONFIG_MODVERSIONS),-m)             \
 	$(if $(KBUILD_EXTMOD),-i,-o) $(symverfile) \
+	-s $(firstword $(wildcard $(dir $(MODVERDIR))/Module.supported \
+				  $(objtree)/Module.supported /dev/null)) \
 	$(filter-out FORCE,$^)
 
 .PHONY: __modpost
 __modpost: $(wildcard vmlinux) $(modules:.ko=.o) FORCE
Index: linux-2.6.8/scripts/mod/modpost.c
===================================================================
--- linux-2.6.8.orig/scripts/mod/modpost.c
+++ linux-2.6.8/scripts/mod/modpost.c
@@ -395,8 +395,52 @@ is_vmlinux(const char *modname)
 
 	return strcmp(myname, "vmlinux") == 0;
 }
 
+static struct {
+	void *file;
+	unsigned long size;
+} supp;
+
+const char *
+supported(struct module *mod)
+{
+	unsigned long pos = 0;
+	char *line;
+
+	/* In a first shot, do a simple linear scan. */
+	while ((line = get_next_line(&pos, supp.file, supp.size))) {
+		const char *basename, *how = "yes";
+		char *l = line;
+
+		/* optional type-of-support flag */
+		for (l = line; *l != '\0'; l++) {
+			if (*l == ' ' || *l == '\t') {
+				*l = '\0';
+				how = l + 1;
+				break;
+			}
+		}
+
+		/* skip directory components */
+		if ((l = strrchr(line, '/')))
+			line = l + 1;
+		/* strip .ko extension */
+		l = line + strlen(line);
+		if (l - line > 3 && !strcmp(l-3, ".ko"))
+			*(l-3) = '\0';
+
+		/* skip directory components */
+		if ((basename = strrchr(mod->name, '/')))
+			basename++;
+		else
+			basename = mod->name;
+		if (!strcmp(basename, line))
+			return how;
+	}
+	return NULL;
+}
+
 void
 read_symbols(char *modname)
 {
 	const char *symname;
@@ -493,8 +537,16 @@ add_header(struct buffer *b, struct modu
 			      "#endif\n");
 	buf_printf(b, "};\n");
 }
 
+void
+add_supported_flag(struct buffer *b, struct module *mod)
+{
+	const char *how = supported(mod);
+	if (how)
+		buf_printf(b, "\nMODULE_INFO(supported, \"%s\");\n", how);
+}
+
 /* Record CRCs for unresolved symbols */
 
 void
 add_versions(struct buffer *b, struct module *mod)
@@ -614,8 +666,16 @@ write_if_changed(struct buffer *b, const
 	fclose(file);
 }
 
 void
+read_supported(const char *fname)
+{
+	supp.file = grab_file(fname, &supp.size);
+	if (!supp.file)
+		; /* ignore error */
+}
+
+void
 read_dump(const char *fname)
 {
 	unsigned long size, pos = 0;
 	void *file = grab_file(fname, &size);
@@ -687,11 +747,12 @@ main(int argc, char **argv)
 	struct module *mod;
 	struct buffer buf = { };
 	char fname[SZ];
 	char *dump_read = NULL, *dump_write = NULL;
+	char *supp = NULL;
 	int opt;
 
-	while ((opt = getopt(argc, argv, "i:mo:")) != -1) {
+	while ((opt = getopt(argc, argv, "i:mo:s:")) != -1) {
 		switch(opt) {
 			case 'i':
 				dump_read = optarg;
 				break;
@@ -700,13 +761,19 @@ main(int argc, char **argv)
 				break;
 			case 'o':
 				dump_write = optarg;
 				break;
+			case 's':
+				supp = optarg;
+				break;
 			default:
 				exit(1);
 		}
 	}
 
+	if (supp)
+		read_supported(supp);
+
 	if (dump_read)
 		read_dump(dump_read);
 
 	while (optind < argc) {
@@ -719,8 +786,9 @@ main(int argc, char **argv)
 
 		buf.pos = 0;
 
 		add_header(&buf, mod);
+		add_supported_flag(&buf, mod);
 		add_versions(&buf, mod);
 		add_depends(&buf, mod, modules);
 		add_moddevtable(&buf, mod);
 
