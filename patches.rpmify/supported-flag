From: Andreas Gruenbacher <agruen@suse.de>
Subject: Novell/external support flag in modules

Upon module load, check if a module is supported, and set the
U (TAINT_NO_SUPPORT) or X (TAINT_EXTERNAL_SUPPORT) tail flags
for unsupported or externally suported modules.

Signed-off-by: Andreas Gruenbacher <agruen@suse.de>

 Documentation/kernel-parameters.txt |    6 +++
 Documentation/sysctl/kernel.txt     |   11 ++++++
 Makefile                            |    5 ++
 include/linux/kernel.h              |    3 +
 include/linux/sysctl.h              |    1 
 kernel/module.c                     |   38 ++++++++++++++++++++-
 kernel/panic.c                      |    8 +++-
 kernel/sysctl.c                     |   10 +++++
 scripts/Makefile.modpost            |    2 +
 scripts/mod/modpost.c               |   65 +++++++++++++++++++++++++++++++++++-
 10 files changed, 145 insertions(+), 4 deletions(-)

--- linux-2.6.15.orig/Documentation/kernel-parameters.txt	2006-03-01 10:28:43.000000000 -0800
+++ linux-2.6.15/Documentation/kernel-parameters.txt	2006-03-01 10:30:14.000000000 -0800
@@ -1543,6 +1543,12 @@
 	stifb=		[HW]
 			Format: bpp:<bpp1>[:<bpp2>[:<bpp3>...]]
 
+	unsupported	Allow loading of unsupported kernel modules:
+			0 = only allow supported modules,
+			1 = warn when loading unsupported modules,
+			2 = don't warn.
+
+
 	swiotlb=	[IA-64] Number of I/O TLB slabs
 
 	switches=	[HW,M68k]
--- linux-2.6.15.orig/Documentation/sysctl/kernel.txt	2006-03-01 10:28:42.000000000 -0800
+++ linux-2.6.15/Documentation/sysctl/kernel.txt	2006-03-01 10:30:14.000000000 -0800
@@ -341,4 +341,15 @@
   2 - A module was force loaded by insmod -f.
       Set by modutils >= 2.4.9 and module-init-tools.
   4 - Unsafe SMP processors: SMP with CPUs not designed for SMP.
+ 64 - An unsupported kernel module was loaded.
+
+==============================================================
+
+unsupported:
+
+Allow to load unsupported kernel modules:
+
+  0 - refuse to load unsupported modules,
+  1 - warn when loading unsupported modules,
+  2 - don't warn.
 
--- linux-2.6.15.orig/include/linux/kernel.h	2006-03-01 10:28:42.000000000 -0800
+++ linux-2.6.15/include/linux/kernel.h	2006-03-01 10:30:14.000000000 -0800
@@ -175,6 +175,7 @@
 extern __deprecated_for_modules int panic_timeout;
 extern int panic_on_oops;
 extern int tainted;
+extern int unsupported;
 extern const char *print_tainted(void);
 extern void add_taint(unsigned);
 
@@ -194,6 +195,8 @@
 #define TAINT_FORCED_RMMOD		(1<<3)
 #define TAINT_MACHINE_CHECK		(1<<4)
 #define TAINT_BAD_PAGE			(1<<5)
+#define TAINT_NO_SUPPORT		(1<<6)
+#define TAINT_EXTERNAL_SUPPORT		(1<<7)
 
 extern void dump_stack(void);
 
--- linux-2.6.15.orig/include/linux/sysctl.h	2006-03-01 10:28:43.000000000 -0800
+++ linux-2.6.15/include/linux/sysctl.h	2006-03-01 10:30:36.000000000 -0800
@@ -148,6 +148,7 @@
 	KERN_SPIN_RETRY=70,	/* int: number of spinlock retries */
 	KERN_ACPI_VIDEO_FLAGS=71, /* int: flags for setting up video after ACPI sleep */
 	KERN_IA64_UNALIGNED=72, /* int: ia64 unaligned userland trap enable */
+	KERN_UNSUPPORTED=73,	/* int: allow loading of unsupported modules */
 };
 
 
--- linux-2.6.15.orig/kernel/module.c	2006-03-01 10:28:43.000000000 -0800
+++ linux-2.6.15/kernel/module.c	2006-03-01 10:30:14.000000000 -0800
@@ -56,6 +56,20 @@
 /* If this is set, the section belongs in the init part of the module */
 #define INIT_OFFSET_MASK (1UL << (BITS_PER_LONG-1))
 
+/* Allow unsupported modules switch. */
+#ifdef UNSUPPORTED_MODULES
+int unsupported = UNSUPPORTED_MODULES;
+#else
+int unsupported = 2;  /* don't warn when loading unsupported modules. */
+#endif
+
+static int __init unsupported_setup(char *str)
+{
+	get_option(&str, &unsupported);
+	return 1;
+}
+__setup("unsupported=", unsupported_setup);
+
 /* Protects module list */
 static DEFINE_SPINLOCK(modlist_lock);
 
@@ -1532,7 +1546,7 @@
 {
 	Elf_Ehdr *hdr;
 	Elf_Shdr *sechdrs;
-	char *secstrings, *args, *modmagic, *strtab = NULL;
+	char *secstrings, *args, *modmagic, *strtab = NULL, *supported;
 	unsigned int i, symindex = 0, strindex = 0, setupindex, exindex,
 		exportindex, modindex, obsparmindex, infoindex, gplindex,
 		crcindex, gplcrcindex, versindex, pcpuindex;
@@ -1652,6 +1666,28 @@
 		goto free_hdr;
 	}
 
+	supported = get_modinfo(sechdrs, infoindex, "supported");
+	if (supported) {
+		if (!strcmp(supported, "external"))
+			tainted |= TAINT_EXTERNAL_SUPPORT;
+		else if (strcmp(supported, "yes"))
+			supported = NULL;
+	}
+	if (!supported) {
+		if (unsupported == 0) {
+			printk(KERN_WARNING "%s: module not supported by "
+			       "Novell, refusing to load. To override, echo "
+			       "1 > /proc/sys/kernel/unsupported\n", mod->name);
+			err = -ENOEXEC;
+			goto free_hdr;
+		}
+		tainted |= TAINT_NO_SUPPORT;
+		if (unsupported == 1) {
+			printk(KERN_WARNING "%s: module not supported by "
+			       "Novell, setting U taint flag.\n", mod->name);
+		}
+	}
+
 	/* Now copy in args */
 	arglen = strlen_user(uargs);
 	if (!arglen) {
--- linux-2.6.15.orig/kernel/panic.c	2006-03-01 10:28:40.000000000 -0800
+++ linux-2.6.15/kernel/panic.c	2006-03-01 10:30:14.000000000 -0800
@@ -148,6 +148,8 @@
  *  'R' - User forced a module unload.
  *  'M' - Machine had a machine check experience.
  *  'B' - System has hit bad_page.
+ *  'U' - Unsuported modules loaded.
+ *  'X' - Modules with external support loaded.
  *
  *	The string is overwritten by the next call to print_taint().
  */
@@ -156,13 +158,15 @@
 {
 	static char buf[20];
 	if (tainted) {
-		snprintf(buf, sizeof(buf), "Tainted: %c%c%c%c%c%c",
+		snprintf(buf, sizeof(buf), "Tainted: %c%c%c%c%c%c%c",
 			tainted & TAINT_PROPRIETARY_MODULE ? 'P' : 'G',
 			tainted & TAINT_FORCED_MODULE ? 'F' : ' ',
 			tainted & TAINT_UNSAFE_SMP ? 'S' : ' ',
 			tainted & TAINT_FORCED_RMMOD ? 'R' : ' ',
  			tainted & TAINT_MACHINE_CHECK ? 'M' : ' ',
-			tainted & TAINT_BAD_PAGE ? 'B' : ' ');
+			tainted & TAINT_BAD_PAGE ? 'B' : ' ',
+			tainted & TAINT_NO_SUPPORT ? 'U' :
+				(tainted & TAINT_EXTERNAL_SUPPORT ? 'X' : ' '));
 	}
 	else
 		snprintf(buf, sizeof(buf), "Not tainted");
--- linux-2.6.15.orig/kernel/sysctl.c	2006-03-01 10:28:43.000000000 -0800
+++ linux-2.6.15/kernel/sysctl.c	2006-03-01 10:30:14.000000000 -0800
@@ -305,6 +305,16 @@
 		.mode		= 0444,
 		.proc_handler	= &proc_dointvec,
 	},
+#ifdef CONFIG_MODULES
+	{
+		.ctl_name	= KERN_UNSUPPORTED,
+		.procname	= "unsupported",
+		.data		= &unsupported,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
 	{
 		.ctl_name	= KERN_CAP_BSET,
 		.procname	= "cap-bound",
--- linux-2.6.15.orig/Makefile	2006-03-01 10:29:48.000000000 -0800
+++ linux-2.6.15/Makefile	2006-03-01 10:30:14.000000000 -0800
@@ -311,6 +311,11 @@
 		   -ffreestanding
 AFLAGS		:= -D__ASSEMBLY__
 
+# Warn about unsupported modules in kernels built inside Autobuild
+ifneq ($(wildcard /.buildenv),)
+CFLAGS		+= -DUNSUPPORTED_MODULES=1
+endif
+
 # Read KERNELRELEASE from .kernelrelease (if it exists)
 KERNELRELEASE = $(shell cat .kernelrelease 2> /dev/null)
 KERNELVERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
--- linux-2.6.15.orig/scripts/Makefile.modpost	2006-03-01 10:28:43.000000000 -0800
+++ linux-2.6.15/scripts/Makefile.modpost	2006-03-01 10:30:14.000000000 -0800
@@ -58,6 +58,8 @@
 	$(if $(KBUILD_EXTMOD),-i,-o) $(kernelsymfile) \
 	$(if $(KBUILD_EXTMOD),-I $(modulesymfile)) \
 	$(if $(KBUILD_EXTMOD),-o $(modulesymfile)) \
+	-s $(firstword $(wildcard $(dir $(MODVERDIR))/Module.supported \
+				  $(objtree)/Module.supported /dev/null)) \
 	$(filter-out FORCE,$^)
 
 .PHONY: __modpost
--- linux-2.6.15.orig/scripts/mod/modpost.c	2006-03-01 10:28:43.000000000 -0800
+++ linux-2.6.15/scripts/mod/modpost.c	2006-03-01 10:30:14.000000000 -0800
@@ -451,6 +451,48 @@
 	return NULL;
 }
 
+void *supported_file;
+unsigned long supported_size;
+
+const char *supported(struct module *mod)
+{
+	unsigned long pos = 0;
+	char *line;
+
+	/* In a first shot, do a simple linear scan. */
+	while ((line = get_next_line(&pos, supported_file,
+				     supported_size))) {
+		const char *basename, *how = "yes";
+		char *l = line;
+
+		/* optional type-of-support flag */
+		for (l = line; *l != '\0'; l++) {
+			if (*l == ' ' || *l == '\t') {
+				*l = '\0';
+				how = l + 1;
+				break;
+			}
+		}
+
+		/* skip directory components */
+		if ((l = strrchr(line, '/')))
+			line = l + 1;
+		/* strip .ko extension */
+		l = line + strlen(line);
+		if (l - line > 3 && !strcmp(l-3, ".ko"))
+			*(l-3) = '\0';
+
+		/* skip directory components */
+		if ((basename = strrchr(mod->name, '/')))
+			basename++;
+		else
+			basename = mod->name;
+		if (!strcmp(basename, line))
+			return how;
+	}
+	return NULL;
+}
+
 static void read_symbols(char *modname)
 {
 	const char *symname;
@@ -552,6 +594,13 @@
 	buf_printf(b, "};\n");
 }
 
+void add_supported_flag(struct buffer *b, struct module *mod)
+{
+	const char *how = supported(mod);
+	if (how)
+		buf_printf(b, "\nMODULE_INFO(supported, \"%s\");\n", how);
+}
+
 /**
  * Record CRCs for unresolved symbols
  **/
@@ -679,6 +728,13 @@
 	fclose(file);
 }
 
+void read_supported(const char *fname)
+{
+	supported_file = grab_file(fname, &supported_size);
+	if (!supported_file)
+		; /* ignore error */
+}
+
 static void read_dump(const char *fname, unsigned int kernel)
 {
 	unsigned long size, pos = 0;
@@ -763,9 +819,10 @@
 	char fname[SZ];
 	char *kernel_read = NULL, *module_read = NULL;
 	char *dump_write = NULL;
+	const char *supported = NULL;
 	int opt;
 
-	while ((opt = getopt(argc, argv, "i:I:mo:a")) != -1) {
+	while ((opt = getopt(argc, argv, "i:I:mo:as:")) != -1) {
 		switch(opt) {
 			case 'i':
 				kernel_read = optarg;
@@ -783,11 +840,16 @@
 			case 'a':
 				all_versions = 1;
 				break;
+			case 's':
+				supported = optarg;
+				break;
 			default:
 				exit(1);
 		}
 	}
 
+	if (supported)
+		read_supported(supported);
 	if (kernel_read)
 		read_dump(kernel_read, 1);
 	if (module_read)
@@ -804,6 +866,7 @@
 		buf.pos = 0;
 
 		add_header(&buf, mod);
+		add_supported_flag(&buf, mod);
 		add_versions(&buf, mod);
 		add_depends(&buf, mod, modules);
 		add_moddevtable(&buf, mod);
