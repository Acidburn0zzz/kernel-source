From: Andreas Gruenbacher <agruen@suse.de>
Subject: Dump the types that make up modversions

Add a new -T option to genksyms that generates a dump of the
type definition that make up the symbol version hashes. This
allows to trace modversion changes back to what caused them.
The dump format is the name of the type defined, followed by
its definition (which is almost C):

  s#list_head struct list_head { s#list_head * next , * prev ; }

The s#, u#, e#, and t# prefixes stand for struct, union, enum,
and typedef.  The exported symbols do not define types, and thus
do not have an x# prefix:

  nfs4_acl_get_whotype int nfs4_acl_get_whotype ( char * , t#u32 )

The symbol type defintion of a single file can be generated with:

  make fs/jbd/journal.symtapes

If KBUILD_SYMTYPES is defined, all the *.symtypes of all object
files that export symbols are generated.

Signed-off-by: Andreas Gruenbacher <agruen@suse.de>

Index: linux-2.6.14/scripts/Makefile.build
===================================================================
--- linux-2.6.14.orig/scripts/Makefile.build
+++ linux-2.6.14/scripts/Makefile.build
@@ -139,6 +139,15 @@ cmd_cc_i_c       = $(CPP) $(c_flags)   -
 %.i: %.c FORCE
 	$(call if_changed_dep,cc_i_c)
 
+quiet_cmd_cc_symtypes_c = SYM $(quiet_modtag) $@
+cmd_cc_symtypes_c	   = \
+		$(CPP) -D__GENKSYMS__ $(c_flags) $<			\
+		| $(GENKSYMS) -T $@ >/dev/null;				\
+		test -s $@ || rm -f $@
+
+%.symtypes : %.c FORCE
+	$(call if_changed_dep,cc_symtypes_c)
+
 # C (.c) files
 # The C file is compiled and updated dependency information is generated.
 # (See cmd_cc_o_c + relevant part of rule_cc_o_c)
@@ -165,7 +174,8 @@ cmd_cc_o_c = $(CC) $(c_flags) -c -o $(@D
 cmd_modversions =							\
 	if $(OBJDUMP) -h $(@D)/.tmp_$(@F) | grep -q __ksymtab; then	\
 		$(CPP) -D__GENKSYMS__ $(c_flags) $<			\
-		| $(GENKSYMS)						\
+		| $(GENKSYMS) $(if $(KBUILD_SYMTYPES),			\
+				-T $(@D)/$(@F:.o=.symtypes))		\
 		> $(@D)/.tmp_$(@F:.o=.ver);				\
 									\
 		$(LD) $(LDFLAGS) -r -o $@ $(@D)/.tmp_$(@F) 		\
Index: linux-2.6.14/scripts/genksyms/genksyms.c
===================================================================
--- linux-2.6.14.orig/scripts/genksyms/genksyms.c
+++ linux-2.6.14/scripts/genksyms/genksyms.c
@@ -43,12 +43,13 @@ FILE *debugfile;
 int cur_line = 1;
 char *cur_filename, *output_directory;
 
-int flag_debug, flag_dump_defs, flag_warnings;
+int flag_debug, flag_dump_defs, flag_dump_types, flag_warnings;
 
 static int errors;
 static int nsyms;
 
 static struct symbol *expansion_trail;
+static struct symbol *visited_symbols;
 
 static const char * const symbol_type_name[] = {
   "normal", "typedef", "enum", "struct", "union"
@@ -178,6 +179,7 @@ add_symbol(const char *name, enum symbol
   sym->type = type;
   sym->defn = defn;
   sym->expansion_trail = NULL;
+  sym->visited = NULL;
   sym->is_extern = is_extern;
 
   sym->hash_next = symtab[h];
@@ -262,27 +264,12 @@ equal_list(struct string_list *a, struct
 static inline void
 print_node(FILE *f, struct string_list *list)
 {
-  switch (list->tag)
+  if (list->tag != SYM_NORMAL)
     {
-    case SYM_STRUCT:
-      putc('s', f);
-      goto printit;
-    case SYM_UNION:
-      putc('u', f);
-      goto printit;
-    case SYM_ENUM:
-      putc('e', f);
-      goto printit;
-    case SYM_TYPEDEF:
-      putc('t', f);
-      goto printit;
-
-    printit:
+      putc(symbol_type_name[list->tag][0], f);
       putc('#', f);
-    case SYM_NORMAL:
-      fputs(list->string, f);
-      break;
     }
+  fputs(list->string, f);
 }
 
 void
@@ -318,8 +305,9 @@ print_list(FILE *f, struct string_list *
 }
 
 static unsigned long
-expand_and_crc_list(struct string_list *list, unsigned long crc)
+expand_and_crc_sym(struct symbol *sym, unsigned long crc)
 {
+  struct string_list *list = sym->defn;
   struct string_list **e, **b;
   struct string_list *tmp, **tmp2;
   int elem = 1;
@@ -367,7 +355,7 @@ expand_and_crc_list(struct string_list *
 	    {
 	      subsym->expansion_trail = expansion_trail;
 	      expansion_trail = subsym;
-	      crc = expand_and_crc_list(subsym->defn, crc);
+	      crc = expand_and_crc_sym(subsym, crc);
 	    }
 	  break;
 
@@ -418,12 +406,23 @@ expand_and_crc_list(struct string_list *
 	    {
 	      subsym->expansion_trail = expansion_trail;
 	      expansion_trail = subsym;
-	      crc = expand_and_crc_list(subsym->defn, crc);
+	      crc = expand_and_crc_sym(subsym, crc);
 	    }
 	  break;
 	}
     }
 
+  {
+    static struct symbol **end = &visited_symbols;
+
+    if (!sym->visited)
+      {
+	*end = sym;
+	end = &sym->visited;
+	sym->visited = (struct symbol *)-1L;
+      }
+  }
+
   return crc;
 }
 
@@ -444,7 +443,7 @@ export_symbol(const char *name)
 
       expansion_trail = (struct symbol *)-1L;
 
-      crc = expand_and_crc_list(sym->defn, 0xffffffff) ^ 0xffffffff;
+      crc = expand_and_crc_sym(sym, 0xffffffff) ^ 0xffffffff;
 
       sym = expansion_trail;
       while (sym != (struct symbol *)-1L)
@@ -525,6 +524,7 @@ void genksyms_usage(void)
 int
 main(int argc, char **argv)
 {
+  FILE *dumpfile = NULL;
   int o;
 
 #ifdef __GNU_LIBRARY__
@@ -533,12 +533,13 @@ main(int argc, char **argv)
     {"warnings", 0, 0, 'w'},
     {"quiet", 0, 0, 'q'},
     {"dump", 0, 0, 'D'},
+    {"dump-types", 1, 0, 'T'},
     {"version", 0, 0, 'V'},
     {"help", 0, 0, 'h'},
     {0, 0, 0, 0}
   };
 
-  while ((o = getopt_long(argc, argv, "dwqVDk:p:",
+  while ((o = getopt_long(argc, argv, "dwqVDT:k:p:",
 			  &long_opts[0], NULL)) != EOF)
 #else  /* __GNU_LIBRARY__ */
   while ((o = getopt(argc, argv, "dwqVDk:p:")) != EOF)
@@ -560,6 +561,15 @@ main(int argc, char **argv)
       case 'D':
 	flag_dump_defs = 1;
 	break;
+      case 'T':
+	flag_dump_types = 1;
+	dumpfile = fopen(optarg, "w");
+	if (!dumpfile)
+	  {
+	    perror(optarg);
+	    return 1;
+	  }
+	break;
       case 'h':
 	genksyms_usage();
 	return 0;
@@ -581,6 +591,27 @@ main(int argc, char **argv)
 
   yyparse();
 
+  if (flag_dump_types && visited_symbols)
+    {
+      while (visited_symbols != (struct symbol *)-1L)
+	{
+	  struct symbol *sym = visited_symbols;
+
+	  if (sym->type != SYM_NORMAL)
+	    {
+	      putc(symbol_type_name[sym->type][0], dumpfile);
+	      putc('#', dumpfile);
+	    }
+	  fputs(sym->name, dumpfile);
+	  putc(' ', dumpfile);
+	  print_list(dumpfile, sym->defn);
+	  putc('\n', dumpfile);
+
+	  visited_symbols = sym->visited;
+	  sym->visited = NULL;
+	}
+    }
+
   if (flag_debug)
     {
       fprintf(debugfile, "Hash table occupancy %d/%d = %g\n",
Index: linux-2.6.14/scripts/genksyms/genksyms.h
===================================================================
--- linux-2.6.14.orig/scripts/genksyms/genksyms.h
+++ linux-2.6.14/scripts/genksyms/genksyms.h
@@ -46,6 +46,7 @@ struct symbol
   enum symbol_type type;
   struct string_list *defn;
   struct symbol *expansion_trail;
+  struct symbol *visited;
   int is_extern;
 };
 
Index: linux-2.6.14/Makefile
===================================================================
--- linux-2.6.14.orig/Makefile
+++ linux-2.6.14/Makefile
@@ -853,6 +853,8 @@ export CPPFLAGS_vmlinux.lds += -P -C -U$
 	$(Q)$(MAKE) $(build)=$(@D) $@
 %.i: %.c scripts FORCE
 	$(Q)$(MAKE) $(build)=$(@D) $@
+%.symtypes: %.c scripts FORCE
+	$(Q)$(MAKE) $(build)=$(@D) $@
 %.o: %.c scripts FORCE
 	$(Q)$(MAKE) $(build)=$(@D) $@
 %.ko: scripts FORCE
@@ -1015,7 +1017,8 @@ clean: archclean $(clean-dirs)
 	$(call cmd,rmfiles)
 	@find . $(RCS_FIND_IGNORE) \
 	 	\( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \
-		-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \) \
+		-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \
+		-o -name '*.symtypes' \) \
 		-type f -print | xargs rm -f
 
 # mrproper - Delete all generated files, including .config
