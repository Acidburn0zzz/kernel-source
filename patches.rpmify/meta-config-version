kbuild creates a temporary copy of include/linux/version.h, and compares
that with version.h. If those files differ, version.h is replaced.  Our
"meta-version" of version.h contains the definitions of multiple config
files, so this test will never succeed, and our perfectly fine
"meta-version" would always get destroyed.  To fix this, extract the
definitions in version.h using the C pre-processor.  Only replace
version.h if the results cpp produces differ.

Index: linux-2.6.1/Makefile
===================================================================
--- linux-2.6.1.orig/Makefile
+++ linux-2.6.1/Makefile
@@ -665,8 +665,35 @@ define filechk_version.h
 	)
 endef
 
-include/linux/version.h: Makefile
-	$(call filechk,version.h)
+# Run version.h through the C pre-processor to determine which symbols
+# it defines: The simple version that filechk_version.h produces is not
+# byte-wise identical to our version for multiple configurations.
+# ---------------------------------------------------------------------------
+
+include/linux/version.h: FORCE
+	@echo '  CHK     $@';				\
+	if [ -e $@ ]; then				\
+	    CURRENT="$$(				\
+		( echo '#include "$@"';			\
+		  echo UTS_RELEASE;			\
+		  echo LINUX_VERSION_CODE		\
+		) | cpp | tail -n 2)";			\
+	    NEW="$$(					\
+		echo \"$(KERNELRELEASE)\";		\
+		expr $(VERSION) \* 65536 +		\
+		     $(PATCHLEVEL) \* 256 +		\
+		     $(SUBLEVEL)			\
+		)";					\
+	    test "$$CURRENT" = "$$NEW";			\
+	else						\
+	    false;					\
+	fi;						\
+	if test $$? -ne 0; then				\
+	    echo '  UPD     $@';			\
+	    mkdir -p $(dir $@);				\
+	    $(call filechk_version.h) > $@;		\
+	fi
+
 
 # ---------------------------------------------------------------------------
 
