From: ak@suse.de
References: 310620
Subject: Fix alternate_node_alloc() on RT kernel

alternate_node_alloc() needs to pass the this_cpu variable from
the caller to cache_grow(); otherwise the lock for the wrong CPU
can be released.

Signed-off-by: Andi Kleen <ak@suse.de>

Index: linux-2.6.22-SLERT10_BRANCH/mm/slab.c
===================================================================
--- linux-2.6.22-SLERT10_BRANCH.orig/mm/slab.c
+++ linux-2.6.22-SLERT10_BRANCH/mm/slab.c
@@ -1066,7 +1066,7 @@ cache_free_alien(struct kmem_cache *cach
 }
 
 static inline void *alternate_node_alloc(struct kmem_cache *cachep,
-		gfp_t flags)
+		gfp_t flags, int *this_cpu)
 {
 	return NULL;
 }
@@ -1081,7 +1081,7 @@ static inline void *____cache_alloc_node
 
 static void *____cache_alloc_node(struct kmem_cache *cachep, gfp_t flags,
 				int nodeid, int *this_cpu);
-static void *alternate_node_alloc(struct kmem_cache *, gfp_t);
+static void *alternate_node_alloc(struct kmem_cache *, gfp_t, int *);
 
 static struct array_cache **alloc_alien_cache(int node, int limit)
 {
@@ -3305,9 +3305,10 @@ ____cache_alloc(struct kmem_cache *cache
  * If we are in_interrupt, then process context, including cpusets and
  * mempolicy, may not apply and should not be used for allocation policy.
  */
-static void *alternate_node_alloc(struct kmem_cache *cachep, gfp_t flags)
+static void *alternate_node_alloc(struct kmem_cache *cachep, gfp_t flags,
+				int *this_cpu)
 {
-	int nid_alloc, nid_here, this_cpu = raw_smp_processor_id();
+	int nid_alloc, nid_here;
 
 	if (in_interrupt() || (flags & __GFP_THISNODE))
 		return NULL;
@@ -3317,7 +3318,7 @@ static void *alternate_node_alloc(struct
 	else if (current->mempolicy)
 		nid_alloc = slab_node(current->mempolicy);
 	if (nid_alloc != nid_here)
-		return ____cache_alloc_node(cachep, flags, nid_alloc, &this_cpu);
+		return ____cache_alloc_node(cachep, flags, nid_alloc, this_cpu);
 	return NULL;
 }
 
@@ -3527,7 +3528,7 @@ __do_cache_alloc(struct kmem_cache *cach
 	void *objp;
 
 	if (unlikely(current->flags & (PF_SPREAD_SLAB | PF_MEMPOLICY))) {
-		objp = alternate_node_alloc(cache, flags);
+		objp = alternate_node_alloc(cache, flags, this_cpu);
 		if (objp)
 			goto out;
 	}
