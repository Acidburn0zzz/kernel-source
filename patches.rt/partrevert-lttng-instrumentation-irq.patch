Subject: disable portions of lttng-instrumentation-irq for RT
From: Tony Jones <tonyj@suse.de>
Upstream: never

Remove portions of patches.trace/lttng-instrumentation-irq.patch to allow
subsequent RT patches to cleanly apply.   RT version of removed portions 
added back in (later) by patches.rt/partreadd-lttng-instrumentation-irq.patch

--- linux-2.6.26-RT.orig/kernel/softirq.c
+++ linux-2.6.26-RT/kernel/softirq.c
@@ -208,9 +207,7 @@ restart:
 
 	do {
 		if (pending & 1) {
-			trace_irq_softirq_entry(h, softirq_vec);
 			h->action(h);
-			trace_irq_softirq_exit(h, softirq_vec);
 			rcu_bh_qsctr_inc(cpu);
 		}
 		h++;
@@ -303,7 +300,6 @@ void irq_exit(void)
  */
 inline void raise_softirq_irqoff(unsigned int nr)
 {
-	trace_irq_softirq_raise(nr);
 	__raise_softirq_irqoff(nr);
 
 	/*
@@ -390,9 +386,7 @@ static void tasklet_action(struct softir
 			if (!atomic_read(&t->count)) {
 				if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))
 					BUG();
-				trace_irq_tasklet_low_entry(t);
 				t->func(t->data);
-				trace_irq_tasklet_low_exit(t);
 				tasklet_unlock(t);
 				continue;
 			}
@@ -427,9 +421,7 @@ static void tasklet_hi_action(struct sof
 			if (!atomic_read(&t->count)) {
 				if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))
 					BUG();
-				trace_irq_tasklet_high_entry(t);
 				t->func(t->data);
-				trace_irq_tasklet_high_exit(t);
 				tasklet_unlock(t);
 				continue;
 			}
--- linux-2.6.26-RT.orig/kernel/irq/handle.c
+++ linux-2.6.26-RT/kernel/irq/handle.c
@@ -131,9 +130,6 @@ irqreturn_t handle_IRQ_event(unsigned in
 {
 	irqreturn_t ret, retval = IRQ_NONE;
 	unsigned int status = 0;
-	struct pt_regs *regs = get_irq_regs();
-
-	trace_irq_entry(irq, regs);
 
 	handle_dynamic_tick(action);
 
@@ -152,8 +148,6 @@ irqreturn_t handle_IRQ_event(unsigned in
 		add_interrupt_randomness(irq);
 	local_irq_disable();
 
-	trace_irq_exit(retval);
-
 	return retval;
 }
 
