From slert-devel-bounces+sdietrich=novell.com@suse.de Fri Feb 15 18:52:51 2008
Return-path: <slert-devel-bounces+sdietrich=novell.com@suse.de>
Received: from Relay2.suse.de ([149.44.160.89]) by emea5-mh.id5.novell.com
	with ESMTP (TLS encrypted); Fri, 15 Feb 2008 18:52:51 +0100
Received: from Fourier.suse.de (fourier.suse.de [149.44.160.40]) by
	Relay2.suse.de (Postfix) with ESMTP id 0D98B1C4C34F for
	<sdietrich@novell.com>; Fri, 15 Feb 2008 18:52:51 +0100 (CET)
Received: from fourier.suse.de (localhost [127.0.0.1]) by Fourier.suse.de
	(Postfix) with ESMTP id 097981E4277E for <sdietrich@novell.com>; Fri, 15
	Feb 2008 18:52:51 +0100 (CET)
Received: from Relay1.suse.de (relay1.suse.de [149.44.160.87]) by
	Fourier.suse.de (Postfix) with ESMTP id 2CC641E4277E for
	<slert-devel@mailman.suse.de>; Fri, 15 Feb 2008 18:52:50 +0100 (CET)
Received: by Relay1.suse.de (Postfix) id 29E481C052A8; Fri, 15 Feb 2008
	18:52:50 +0100 (CET)
Received: from relay1.suse.de (localhost [127.0.0.1]) by Relay1.suse.de
	(Postfix) with ESMTP id 172261C052A7 for <slert-devel@suse.de>; Fri, 15 Feb
	2008 18:52:50 +0100 (CET)
X-Virus-Scanned: by amavisd-new at relay1.suse.de
X-Spam-Score: -3.499
X-Spam-Level: 
X-Spam-Status: No, score=-3.499 tagged_above=-20 required=5
	tests=[BAYES_00=-2.599, MY_LINUX=-1, RDNS_DYNAMIC=0.1]
Received: from mx2.suse.de ([195.135.220.15]) by relay1.suse.de
	(relay1.suse.de [149.44.160.87]) (amavisd-new, port 10025) with ESMTP id
	de6XZbYK4wlY for <slert-devel@suse.de>; Fri, 15 Feb 2008 18:52:44 +0100
	(CET)
Received: from novell1.haskins.net (75-130-111-13.dhcp.oxfr.ma.charter.com
	[75.130.111.13]) by mx2.suse.de (Postfix) with ESMTP id 01104355C6 for
	<slert-devel@suse.de>; Fri, 15 Feb 2008 18:52:44 +0100 (CET)
Received: from novell1.haskins.net (localhost [127.0.0.1]) by
	novell1.haskins.net (Postfix) with ESMTP id 1C73A3FC1D5 for
	<slert-devel@suse.de>; Fri, 15 Feb 2008 12:26:00 -0500 (EST)
From: Gregory Haskins <ghaskins@novell.com>
To: slert-devel@suse.de
Date: Fri, 15 Feb 2008 12:26:00 -0500
Message-ID: <20080215172559.25573.78728.stgit@novell1.haskins.net>
In-Reply-To: <20080215172421.25573.85164.stgit@novell1.haskins.net>
References: <20080215172421.25573.85164.stgit@novell1.haskins.net>
User-Agent: StGIT/0.12.1
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Subject: [slert-devel] [PATCH 05/10] add a loop counter based timeout
	mechanism
X-BeenThere: slert-devel@suse.de
X-Mailman-Version: 2.1.4
Precedence: list
List-Id: All things slert <slert-devel.suse.de>
List-Unsubscribe: <https://mailman.suse.de/mailman/listinfo/slert-devel>,
	<mailto:slert-devel-request@suse.de?subject=unsubscribe>
List-Archive: <https://mailman.suse.de/mailman/private/slert-devel>
List-Post: <mailto:slert-devel@suse.de>
List-Help: <mailto:slert-devel-request@suse.de?subject=help>
List-Subscribe: <https://mailman.suse.de/mailman/listinfo/slert-devel>,
	<mailto:slert-devel-request@suse.de?subject=subscribe>
Sender: slert-devel-bounces+sdietrich=novell.com@suse.de
Errors-To: slert-devel-bounces+sdietrich=novell.com@suse.de
X-Evolution-Source: imap://sdietrich@prv1-3.novell.com/
Content-Transfer-Encoding: 8bit

From: Sven Dietrich <sdietrich@novell.com>

Signed-off-by: Sven Dietrich <sdietrich@novell.com>
---

 kernel/Kconfig.preempt    |   11 +++++++++++
 kernel/rtmutex_adaptive.c |    7 ++++++-
 kernel/rtmutex_adaptive.h |    6 +++++-
 kernel/sysctl.c           |   12 ++++++++++++
 4 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/kernel/Kconfig.preempt b/kernel/Kconfig.preempt
index ef41b7e..23d9113 100644
--- a/kernel/Kconfig.preempt
+++ b/kernel/Kconfig.preempt
@@ -205,6 +205,17 @@ config ADAPTIVE_RTSPINLOCK
 
 	 If unsure, say Y
 
+config RTSPINLOCK_DELAY
+	int "Default delay (in loops) for adaptive spinlocks"
+	range 0 1000000000
+	depends on PREEMPT_RT && ADAPTIVE_RTSPINLOCK
+	default "10000"
+        help
+         This allows you to specify the delay between spin attempts for
+         rtspinlocks.  Larger values will allow the system to have higher
+         throughput at the expense of longer latencies for deadlock
+         avoidance.  The value is tunable at runtime via a sysctl.
+
 config SPINLOCK_BKL
 	bool "Old-Style Big Kernel Lock"
 	depends on (PREEMPT || SMP) && !PREEMPT_RT
diff --git a/kernel/rtmutex_adaptive.c b/kernel/rtmutex_adaptive.c
index ddff53c..4705db6 100644
--- a/kernel/rtmutex_adaptive.c
+++ b/kernel/rtmutex_adaptive.c
@@ -33,6 +33,8 @@
 #include <linux/sched.h>
 #include "rtmutex_adaptive.h"
 
+int rtspin_timeout __read_mostly = CONFIG_RTSPINLOCK_DELAY;
+
 /*
  * Adaptive-spinlocks will busywait when possible, and sleep only if
  * necessary. Note that the busyloop looks racy, and it is....but we do
@@ -45,7 +47,7 @@ adaptive_wait(struct rt_mutex *lock, struct rt_mutex_waiter *waiter,
 {
 	int sleep = 0;
 
-	for (;;) {
+	for (; adaptive->timeout > 0; adaptive->timeout--) {
 		/*
 		 * If the task was re-awoken, break out completely so we can
 		 * reloop through the lock-acquisition code.
@@ -86,6 +88,9 @@ adaptive_wait(struct rt_mutex *lock, struct rt_mutex_waiter *waiter,
 		cpu_relax();
 	}
 
+	if (adaptive->timeout <= 0)
+		sleep = 1;
+
 	put_task_struct(adaptive->owner);
 
 	return sleep;
diff --git a/kernel/rtmutex_adaptive.h b/kernel/rtmutex_adaptive.h
index a136571..ee6ec08 100644
--- a/kernel/rtmutex_adaptive.h
+++ b/kernel/rtmutex_adaptive.h
@@ -15,6 +15,7 @@
 #ifdef CONFIG_ADAPTIVE_RTSPINLOCK
 struct adaptive_waiter {
 	struct task_struct *owner;
+	int timeout;
 };
 
 /*
@@ -35,8 +36,11 @@ prepare_adaptive_wait(struct rt_mutex *lock, struct adaptive_waiter *adaptive)
 	get_task_struct(adaptive->owner);
 }
 
+extern int rtspin_timeout;
+
 #define DECLARE_ADAPTIVE_WAITER(name) \
-     struct adaptive_waiter name = { .owner = NULL, }
+     struct adaptive_waiter name = { .owner = NULL,               \
+                                     .timeout = rtspin_timeout, }
 
 #else
 
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 541aa9f..7f95167 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -58,6 +58,8 @@
 #include <asm/stacktrace.h>
 #endif
 
+#include "rtmutex_adaptive.h"
+
 static int deprecated_sysctl_warning(struct __sysctl_args *args);
 
 #if defined(CONFIG_SYSCTL)
@@ -964,6 +966,16 @@ static struct ctl_table kern_table[] = {
 		.proc_handler	= &proc_dointvec,
 	},
 #endif
+#ifdef CONFIG_ADAPTIVE_RTSPINLOCK
+	{
+		.ctl_name	= CTL_UNNUMBERED,
+		.procname	= "rtspin_timeout",
+		.data		= &rtspin_timeout,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
 #ifdef CONFIG_PROC_FS
 	{
 		.ctl_name       = CTL_UNNUMBERED,

