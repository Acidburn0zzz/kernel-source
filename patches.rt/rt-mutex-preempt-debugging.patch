---
 include/linux/preempt.h |   18 +++++++++++++++---
 include/linux/smp.h     |    2 +-
 init/main.c             |    2 +-
 kernel/sched.c          |   24 ++++++++++++++++++++++--
 kernel/softirq.c        |    6 +++---
 kernel/stop_machine.c   |    2 +-
 6 files changed, 43 insertions(+), 11 deletions(-)

Index: linux-2.6.22/include/linux/preempt.h
===================================================================
--- linux-2.6.22.orig/include/linux/preempt.h	2007-07-24 08:57:04.000000000 +0200
+++ linux-2.6.22/include/linux/preempt.h	2007-07-24 08:57:17.000000000 +0200
@@ -8,6 +8,7 @@
 
 #include <linux/thread_info.h>
 #include <linux/linkage.h>
+#include <linux/thread_info.h>
 
 #if defined(CONFIG_DEBUG_PREEMPT) || defined(CONFIG_CRITICAL_TIMING)
   extern void notrace add_preempt_count(unsigned int val);
@@ -34,11 +35,12 @@
 #define inc_preempt_count() add_preempt_count(1)
 #define dec_preempt_count() sub_preempt_count(1)
 
-#define preempt_count()	(current_thread_info()->preempt_count)
+#define preempt_count()		(current_thread_info()->preempt_count)
 
 #ifdef CONFIG_PREEMPT
 
 asmlinkage void preempt_schedule(void);
+asmlinkage void preempt_schedule_irq(void);
 
 #define preempt_disable() \
 do { \
@@ -46,12 +48,19 @@ do { \
 	barrier(); \
 } while (0)
 
-#define preempt_enable_no_resched() \
+#define __preempt_enable_no_resched() \
 do { \
 	barrier(); \
 	dec_preempt_count(); \
 } while (0)
 
+
+#ifdef CONFIG_DEBUG_PREEMPT
+extern void notrace preempt_enable_no_resched(void);
+#else
+# define preempt_enable_no_resched() __preempt_enable_no_resched()
+#endif
+
 #define preempt_check_resched() \
 do { \
 	if (unlikely(test_thread_flag(TIF_NEED_RESCHED))) \
@@ -60,7 +69,7 @@ do { \
 
 #define preempt_enable() \
 do { \
-	preempt_enable_no_resched(); \
+	__preempt_enable_no_resched(); \
 	barrier(); \
 	preempt_check_resched(); \
 } while (0)
@@ -69,9 +78,12 @@ do { \
 
 #define preempt_disable()		do { } while (0)
 #define preempt_enable_no_resched()	do { } while (0)
+#define __preempt_enable_no_resched()	do { } while (0)
 #define preempt_enable()		do { } while (0)
 #define preempt_check_resched()		do { } while (0)
 
+#define preempt_schedule_irq()		do { } while (0)
+
 #endif
 
 #endif /* __LINUX_PREEMPT_H */
Index: linux-2.6.22/include/linux/smp.h
===================================================================
--- linux-2.6.22.orig/include/linux/smp.h	2007-07-24 08:56:24.000000000 +0200
+++ linux-2.6.22/include/linux/smp.h	2007-07-24 08:57:17.000000000 +0200
@@ -131,7 +131,7 @@ static inline int smp_call_function_sing
 
 #define get_cpu()		({ preempt_disable(); smp_processor_id(); })
 #define put_cpu()		preempt_enable()
-#define put_cpu_no_resched()	preempt_enable_no_resched()
+#define put_cpu_no_resched()	__preempt_enable_no_resched()
 
 void smp_setup_processor_id(void);
 
Index: linux-2.6.22/init/main.c
===================================================================
--- linux-2.6.22.orig/init/main.c	2007-07-24 08:57:14.000000000 +0200
+++ linux-2.6.22/init/main.c	2007-07-24 08:57:17.000000000 +0200
@@ -440,7 +440,7 @@ static void noinline __init_refok rest_i
 	 * at least once to get things moving:
 	 */
 	init_idle_bootup_task(current);
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 	schedule();
 	preempt_disable();
 
Index: linux-2.6.22/kernel/sched.c
===================================================================
--- linux-2.6.22.orig/kernel/sched.c	2007-07-24 08:57:14.000000000 +0200
+++ linux-2.6.22/kernel/sched.c	2007-07-24 08:57:17.000000000 +0200
@@ -3367,7 +3367,7 @@ need_resched_nonpreemptible:
 		rq = cpu_rq(cpu);
 		goto need_resched_nonpreemptible;
 	}
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 	if (unlikely(test_thread_flag(TIF_NEED_RESCHED)))
 		goto need_resched;
 }
@@ -6358,7 +6358,7 @@ void __init sched_init(void)
 	current->sched_class = &fair_sched_class;
 }
 
-#ifdef CONFIG_DEBUG_SPINLOCK_SLEEP
+#if defined(CONFIG_DEBUG_SPINLOCK_SLEEP) || defined(CONFIG_DEBUG_PREEMPT)
 void __might_sleep(char *file, int line)
 {
 #ifdef in_atomic
@@ -6488,3 +6488,23 @@ void set_curr_task(int cpu, struct task_
 }
 
 #endif
+
+#ifdef CONFIG_DEBUG_PREEMPT
+void notrace preempt_enable_no_resched(void)
+{
+	static int once = 1;
+
+	barrier();
+	dec_preempt_count();
+
+	if (once && !preempt_count()) {
+		once = 0;
+		printk(KERN_ERR "BUG: %s:%d task might have lost a preemption check!\n",
+			current->comm, current->pid);
+		dump_stack();
+	}
+}
+
+EXPORT_SYMBOL(preempt_enable_no_resched);
+#endif
+
Index: linux-2.6.22/kernel/softirq.c
===================================================================
--- linux-2.6.22.orig/kernel/softirq.c	2007-07-24 08:57:14.000000000 +0200
+++ linux-2.6.22/kernel/softirq.c	2007-07-24 08:57:17.000000000 +0200
@@ -413,7 +413,7 @@ void irq_exit(void)
 	if (!in_interrupt() && idle_cpu(smp_processor_id()) && !need_resched())
 		tick_nohz_stop_sched_tick();
 #endif
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 }
 
 /*
@@ -600,7 +600,7 @@ static int ksoftirqd(void * __data)
 	while (!kthread_should_stop()) {
 		preempt_disable();
 		if (!(local_softirq_pending() & mask)) {
-			preempt_enable_no_resched();
+			__preempt_enable_no_resched();
 			schedule();
 			preempt_disable();
 		}
@@ -619,7 +619,7 @@ static int ksoftirqd(void * __data)
 				goto wait_to_die;
 
 			local_irq_disable();
-			preempt_enable_no_resched();
+			__preempt_enable_no_resched();
 			set_softirq_pending(local_softirq_pending() & ~mask);
 			local_bh_disable();
 			local_irq_enable();
Index: linux-2.6.22/kernel/stop_machine.c
===================================================================
--- linux-2.6.22.orig/kernel/stop_machine.c	2007-07-24 08:56:24.000000000 +0200
+++ linux-2.6.22/kernel/stop_machine.c	2007-07-24 08:57:17.000000000 +0200
@@ -137,7 +137,7 @@ static void restart_machine(void)
 {
 	stopmachine_set_state(STOPMACHINE_EXIT);
 	local_irq_enable();
-	preempt_enable_no_resched();
+	__preempt_enable_no_resched();
 }
 
 struct stop_machine_data
