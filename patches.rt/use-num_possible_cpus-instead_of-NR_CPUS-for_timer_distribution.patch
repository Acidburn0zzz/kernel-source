From: john stultz <johnstul@us.ibm.com>
To: Andrew Morton <akpm@osdl.org>
Cc: Thomas Gleixner <tglx@linutronix.de>, lkml <linux-kernel@vger.kernel.org>
Content-Type: text/plain
Date:	Wed, 15 Aug 2007 15:46:17 -0700

Andrew requested this fixup awhile back, and I just now got to it
(apologies for being slow).

To avoid lock contention, we distribute the sched_timer calls across the
cpus so they do not trigger at the same instant. However, I used
NR_CPUS, which can cause needless grouping on small smp systems
depending on your kernel config. This patch converts to using
num_possible_cpus() so we spread it as evenly as possible on every
machine.

Briefly tested w/ NR_CPUS=255 and verified reduced contention.

Signed-off-by: John Stultz <johnstul@us.ibm.com>

Index: 2.6-rt/kernel/time/tick-sched.c
===================================================================
--- 2.6-rt.orig/kernel/time/tick-sched.c
+++ 2.6-rt/kernel/time/tick-sched.c
@@ -586,7 +586,7 @@ void tick_setup_sched_timer(void)
 	/* Get the next period (per cpu) */
 	ts->sched_timer.expires = tick_init_jiffy_update();
 	offset = ktime_to_ns(tick_period) >> 1;
-	do_div(offset, NR_CPUS);
+	do_div(offset, num_possible_cpus());
 	offset *= smp_processor_id();
 	ts->sched_timer.expires = ktime_add_ns(ts->sched_timer.expires, offset);
 


-
To unsubscribe from this list: send the line "unsubscribe linux-kernel" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
