From: Sven-Thorsten Dietrich <sdietrich@suse.de>
Subject: Make kprobe locking consistent with lock-type declarations.

kprobes uses an abstraction layer for table locking and unlocking.
The abstraction layer must be aware of the lock-type declaration,
in order to call the correct lock/unlock ops.

Explicitly declare the lock-type in the table operations.

Signed-off-by: Sven-Thorsten Dietrich <sdietrich@suse.de>
---
 kernel/kprobes.c |   10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

--- a/kernel/kprobes.c
+++ b/kernel/kprobes.c
@@ -75,7 +75,7 @@ static struct {
 	raw_spinlock_t lock ____cacheline_aligned;
 } kretprobe_table_locks[KPROBE_TABLE_SIZE];
 
-static spinlock_t *kretprobe_table_lock_ptr(unsigned long hash)
+static raw_spinlock_t *kretprobe_table_lock_ptr(unsigned long hash)
 {
 	return &(kretprobe_table_locks[hash].lock);
 }
@@ -397,7 +397,7 @@ void kretprobe_hash_lock(struct task_str
 			 struct hlist_head **head, unsigned long *flags)
 {
 	unsigned long hash = hash_ptr(tsk, KPROBE_HASH_BITS);
-	spinlock_t *hlist_lock;
+	raw_spinlock_t *hlist_lock;
 
 	*head = &kretprobe_inst_table[hash];
 	hlist_lock = kretprobe_table_lock_ptr(hash);
@@ -406,14 +406,14 @@ void kretprobe_hash_lock(struct task_str
 
 void kretprobe_table_lock(unsigned long hash, unsigned long *flags)
 {
-	spinlock_t *hlist_lock = kretprobe_table_lock_ptr(hash);
+	raw_spinlock_t *hlist_lock = kretprobe_table_lock_ptr(hash);
 	spin_lock_irqsave(hlist_lock, *flags);
 }
 
 void kretprobe_hash_unlock(struct task_struct *tsk, unsigned long *flags)
 {
 	unsigned long hash = hash_ptr(tsk, KPROBE_HASH_BITS);
-	spinlock_t *hlist_lock;
+	raw_spinlock_t *hlist_lock;
 
 	hlist_lock = kretprobe_table_lock_ptr(hash);
 	spin_unlock_irqrestore(hlist_lock, *flags);
@@ -421,7 +421,7 @@ void kretprobe_hash_unlock(struct task_s
 
 void kretprobe_table_unlock(unsigned long hash, unsigned long *flags)
 {
-	spinlock_t *hlist_lock = kretprobe_table_lock_ptr(hash);
+	raw_spinlock_t *hlist_lock = kretprobe_table_lock_ptr(hash);
 	spin_unlock_irqrestore(hlist_lock, *flags);
 }
 
