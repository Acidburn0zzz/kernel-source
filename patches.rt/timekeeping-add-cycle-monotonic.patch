Subject: Linux-RT 2.6.24-rc8-rt1
From: http://www.kernel.org/pub/linux/kernel/projects/rt/
Acked-by: Sven-Thorsten Dietrich <sdietrich@suse.de>
From:	Steven Rostedt <rostedt@goodmis.org>
Subject: time keeping add cycle_raw for actual incrementation

The get_monotonic_cycles needs to produce a monotonic counter as output.

This patch adds a cycle_raw to produce an accumulative counter.
Unfortunately there is already an cycle_accumulate variable, but that is
used to avoid clock source overflow and can also be decremented
(probably that name should be changed and we should use that for this
patch).


Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
Acked-by: John Stultz <johnstul@us.ibm.com>

---
 include/linux/clocksource.h |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

Index: linux-2.6.24-rc8-rt1/include/linux/clocksource.h
===================================================================
--- linux-2.6.24-rc8-rt1.orig/include/linux/clocksource.h	2008-01-16 22:27:55.000000000 -0500
+++ linux-2.6.24-rc8-rt1/include/linux/clocksource.h	2008-01-16 22:27:56.000000000 -0500
@@ -52,6 +52,7 @@ struct clocksource;
  * @resume:		resume function for the clocksource, if necessary
  * @cycle_last:		Used internally by timekeeping core, please ignore.
  * @cycle_accumulated:	Used internally by timekeeping core, please ignore.
+ * @cycle_montonic:	Used internally by timekeeping core, please ignore.
  * @cycle_interval:	Used internally by timekeeping core, please ignore.
  * @xtime_interval:	Used internally by timekeeping core, please ignore.
  * @xtime_nsec:		Used internally by timekeeping core, please ignore.
@@ -87,7 +88,7 @@ struct clocksource {
 	 * more than one cache line.
 	 */
 	struct {
-		cycle_t cycle_last, cycle_accumulated;
+		cycle_t cycle_last, cycle_accumulated, cycle_monotonic;
 	} ____cacheline_aligned_in_smp;
 
 	u64 xtime_nsec;
@@ -204,6 +205,7 @@ static inline void clocksource_accumulat
 	cycle_t offset = (now - cs->cycle_last) & cs->mask;
 	cs->cycle_last = now;
 	cs->cycle_accumulated += offset;
+	cs->cycle_monotonic += offset;
 }
 
 /**
