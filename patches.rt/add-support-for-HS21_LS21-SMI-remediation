Subject: [Rtibm-dev] [PATCH 1/3] Add support for HS21/LS21 SMI Remediation
Date: Fri, 16 May 2008 14:30:03 -0500
From: "Timothy R. Chavez" <tim.chavez@linux.vnet.ibm.com>
Organization: IBM


System Management Interrupts (SMIs) add large (by real-time standards) 
and variable latencies which can negatively impact the execution of high 
priority real-time processes, as well limit the types of guarantees we 
are able to make.

This BIOS driver can disable and re-enable System Management Interrupts 
at run-time on IBM Blade Servers with BIOS support for Premium Real-Time 
Mode (PRTM).  Currently BIOS support for PRTM is only available for IBM 
HS21 and LS21 Blade Servers.  If PRTM is not supported by the BIOS, the 
driver will not load.  Otherwise, it will load and a sysfs interface 
will be created.  This interface has two user-viewable attributes: 
'state' (0 = off, 1 = on) and 'version' (the SMI BIOS structure).  A 
couple of examples follow:

1) Put BIOS in PRTM (aka disable SMIs)

$ echo 1 > /sys/devices/system/ibm_rtl/state

2) Return to normal mode of operation (aka re-enable SMIs)

$ echo 0 > /sys/devices/system/ibm_rtl/state

A userspace package called 'ibm-prtm' abstracts this functionality by 
turning it into a system service. It also comes with a daemon that 
emulates the SMI handler to capture and handle correctable ECC errors 
while the system is in Premium Real-Time Linux mode.

This driver has been tested on a Quad Core LS21 running BAE132-US BIOS.

Signed-off-by: Keith Mannthey <kmannth@us.ibm.com>
Signed-off-by: Timothy R. Chavez <tim.chavez@linux.vnet.ibm.com>

Acked-by: Sven-Thorsten Dietrich <sdietrich@suse.de>

Index: linux-2.6.22/drivers/misc/Kconfig
===================================================================
--- linux-2.6.22.orig/drivers/misc/Kconfig	2008-05-16 19:03:56.000000000 +0000
+++ linux-2.6.22/drivers/misc/Kconfig	2008-05-16 19:19:01.000000000 +0000
@@ -4,6 +4,24 @@
 
 menu "Misc devices"
 
+config IBM_RTL
+	tristate "Device driver to enable PRTM support"
+	depends on X86 && PCI
+	---help---
+	  Enable support for IBM Premium Real Time Mode (PRTM).
+
+	  This module allows you to enter and exit PRTM in the BIOS via sysfs
+	  on platforms that support this feature.  A system in PRTM will not
+	  receive CPU-generated SMIs for recoverable errors.  Using this
+	  feature without proper support may void your hardware warranty.
+
+	  If the proper BIOS support is found, the driver will load and create
+	  /sys/devices/system/ibm_rtl/.  The "state" variable will indicate
+	  whether or not the BIOS is in PRTM:
+
+	  state = 0 (BIOS SMIs on)
+	  state = 1 (BIOS SMIs off)
+
 config IBM_ASM
 	tristate "Device driver for IBM RSA service processor"
 	depends on X86 && PCI && EXPERIMENTAL
Index: linux-2.6.22/drivers/misc/Makefile
===================================================================
--- linux-2.6.22.orig/drivers/misc/Makefile	2008-05-16 19:03:56.000000000 +0000
+++ linux-2.6.22/drivers/misc/Makefile	2008-05-16 19:04:08.000000000 +0000
@@ -4,6 +4,7 @@
 obj- := misc.o	# Dummy rule to force built-in.o to be made
 
 obj-$(CONFIG_IBM_ASM)		+= ibmasm/
+obj-$(CONFIG_IBM_RTL)		+= ibmrtl/
 obj-$(CONFIG_HDPU_FEATURES)	+= hdpuftrs/
 obj-$(CONFIG_MSI_LAPTOP)     += msi-laptop.o
 obj-$(CONFIG_ASUS_LAPTOP)     += asus-laptop.o
Index: linux-2.6.22/drivers/misc/ibmrtl/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.22/drivers/misc/ibmrtl/Makefile	2008-05-16 19:04:08.000000000 +0000
@@ -0,0 +1 @@
+obj-$(CONFIG_IBM_RTL) := ibm_rtl.o
Index: linux-2.6.22/drivers/misc/ibmrtl/ibm_rtl.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.22/drivers/misc/ibmrtl/ibm_rtl.c	2008-05-16 19:04:08.000000000 +0000
@@ -0,0 +1,205 @@
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/sysdev.h>
+
+#include "rtl.h"
+static unsigned int table_addr;
+
+/* printk the table for debug*/
+void dump_rtl_table (struct ibm_rtl* rtl) {
+		int i;
+		for (i = 0 ; i < 5; i ++)
+		printk ("%c",rtl->signature[i]);
+			printk (" signature\n");
+
+		printk ("%x version \n",rtl->version );
+		printk ("%x RT_Status \n",rtl->RT_Status );
+		printk ("%x Command \n",rtl->Command );
+		printk ("%x CommandStatus \n",rtl->CommandStatus);
+		printk ("%x CMDAddressType\n",rtl->CMDAddressType);
+		printk ("%x CmdGranularity\n",rtl->CmdGranularity);
+		printk ("%x CmdOffset \n",rtl->CmdOffset);
+		printk ("%x Reserve1\n",rtl->Reserve1);
+		printk ("0x%x CmdPortAddress\n",bios_to_value(rtl->CmdPortAddress));
+		printk ("0x%x CmdPortValue\n",bios_to_value(rtl->CmdPortValue));
+}
+
+int ibm_rtl_write(u8 value)
+{
+	int ret = 0;
+	struct  ibm_rtl *rtl;
+
+	/* only valid value is 0 and 1 */
+	if (value > 1) {
+		ret = -EINVAL;
+		goto err_out;
+	}
+
+	rtl = ioremap(table_addr,RTL_TABLE_SIZE);
+
+	if (!rtl) {
+		printk ("could not map table\n");
+		ret = -ENOMEM;
+		goto err_out;
+	}
+
+	if (rtl->RT_Status != value) {
+		if (value == 1)
+			rtl->Command = 1;
+		else
+			rtl->Command = 2;
+
+		/*write special command :  very ugly need to fix*/
+		outb(bios_to_value(rtl->CmdPortValue) >> ((32-rtl->CmdGranularity)/2), bios_to_value(rtl->CmdPortAddress));
+
+		while (rtl->Command) {
+			msleep(10);
+		}
+
+		if (rtl->CommandStatus)
+			ret = -EIO;
+	}
+
+	iounmap(rtl);
+err_out:
+	return ret;
+}
+
+static ssize_t rtl_show_version (struct sysdev_class * dev, char * buf)
+{
+	int ret;
+	struct  ibm_rtl *rtl;
+
+	rtl = ioremap(table_addr,RTL_TABLE_SIZE);
+
+	if (!rtl) {
+		ret = -ENOMEM;
+		goto err_out;
+	}
+	/* debug to be removed*/
+	dump_rtl_table(rtl);
+
+	ret = sprintf(buf, "%d\n",rtl->version);
+
+	iounmap(rtl);
+err_out:
+	return ret;
+}
+
+static ssize_t rtl_show_state (struct sysdev_class * dev, char * buf)
+{
+	int ret;
+	struct  ibm_rtl *rtl;
+
+	rtl = ioremap(table_addr,RTL_TABLE_SIZE);
+
+	if (!rtl) {
+		printk ("could not map table\n");
+		ret = -ENOMEM;
+		goto err_out;
+	}
+	ret = sprintf(buf, "%d\n",rtl->RT_Status);
+
+	iounmap(rtl);
+err_out:
+	return ret;
+}
+
+static ssize_t rtl_set_state(struct sysdev_class * dev, const char * buf, size_t size)
+{
+	ssize_t ret;
+	switch (buf[0]) {
+	case '0':
+		ret = ibm_rtl_write(0);
+		break;
+	case '1':
+		ret = ibm_rtl_write(1);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+	if (ret >= 0)
+		ret = size;
+
+	return ret;
+}
+
+static struct sysdev_class class_rtl = {
+	set_kset_name("ibm_rtl"),
+};
+
+static SYSDEV_CLASS_ATTR(version, S_IRUGO, rtl_show_version, NULL);
+static SYSDEV_CLASS_ATTR(state, 0600, rtl_show_state, rtl_set_state);
+
+static struct sysdev_class_attribute *rtl_attributes[] = {
+	&attr_version,
+	&attr_state,
+	NULL
+};
+
+
+static int rtl_setup_sysfs(void) {
+	int ret,i;
+	ret = sysdev_class_register(&class_rtl);
+
+	if (!ret) {
+		for (i = 0; rtl_attributes[i]; i ++)
+			sysdev_class_create_file(&class_rtl, rtl_attributes[i]);
+	}
+	return ret;
+}
+
+static void rtl_teardown_sysfs(void) {
+	int i;
+	for (i = 0; rtl_attributes[i]; i ++)
+		sysdev_class_remove_file(&class_rtl, rtl_attributes[i]);
+	sysdev_class_unregister(&class_rtl);
+	return;;
+}
+
+/* only allow the modules to load if the _RTL_ table can be found*/
+int init_module(void)
+{
+
+	unsigned long ebda_addr,ebda_size;
+	void *data, *d;
+	int ret,i;
+
+	/*get the address for the RTL table form the EBDA */
+	ebda_addr = *(unsigned short *)phys_to_virt(0x40E);
+	ebda_addr <<= 4;
+	ebda_size = 64*1024;
+
+	data = ioremap(ebda_addr,ebda_size);
+	d = data;
+
+	if (!data) {
+		ret = -ENOMEM;
+		goto exit;
+	}
+
+	for (i = 0 ; i < ebda_size/4; i ++) {
+		unsigned int *tmp = (unsigned int *) data++;
+		if (*tmp == RTL_MAGIC_IDENT) {
+			table_addr = ebda_addr + i;
+			ret = rtl_setup_sysfs();
+			goto exit;
+		}
+	}
+
+	ret = -ENODEV;
+
+exit:
+	iounmap(d);
+	return ret;
+}
+
+void cleanup_module(void)
+{
+	rtl_teardown_sysfs();
+}
+
+MODULE_LICENSE("GPL");
+
Index: linux-2.6.22/drivers/misc/ibmrtl/rtl.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.22/drivers/misc/ibmrtl/rtl.h	2008-05-16 19:04:08.000000000 +0000
@@ -0,0 +1,18 @@
+#define RTL_TABLE_SIZE 30
+#define RTL_MAGIC_IDENT (('L'<<24)|('T'<<16)|('R'<<8)|'_')
+struct ibm_rtl
+{
+	u8 signature[5];
+	u8 version;
+	u8 RT_Status;
+	u8 Command;
+	u8 CommandStatus;
+	u8 CMDAddressType;
+	u8 CmdGranularity;
+	u8 CmdOffset;
+	u16 Reserve1;
+	u8 CmdPortAddress[4];
+	u8 CmdPortValue[4];
+};
+
+#define bios_to_value(value) (u32)((value[0] << 12) + (value[1] << 8) + (value[2] << 4) + value[3])

