Subject: Linux-RT 2.6.25-rt
From: http://www.kernel.org/pub/linux/kernel/projects/rt/
Acked-by: Sven-Thorsten Dietrich <sdietrich@suse.de>
From mingo@elte.hu Mon Feb 11 19:45:05 2008
Date: Sun, 10 Feb 2008 08:20:30 +0100
From: Ingo Molnar <mingo@elte.hu>
To: linux-kernel@vger.kernel.org
Cc: Linus Torvalds <torvalds@linux-foundation.org>,
     Andrew Morton <akpm@zip.com.au>, Steven Rostedt <rostedt@goodmis.org>
Subject: [09/19] ftrace: add notrace annotations for NMI routines

From: Steven Rostedt <srostedt@redhat.com>

This annotates NMI functions with notrace. Some tracers may be able
to live with this, but some cannot. The safest is to turn it off,
it's not particularly interesting anyway.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
---
 arch/x86/kernel/nmi_32.c   |    3 ++-
 arch/x86/kernel/nmi_64.c   |    6 ++++--
 arch/x86/kernel/traps_32.c |   12 ++++++------
 arch/x86/kernel/traps_64.c |   10 +++++-----
 4 files changed, 17 insertions(+), 14 deletions(-)

Index: linux-2.6.24.4-rt4/arch/x86/kernel/nmi_32.c
===================================================================
--- linux-2.6.24.4-rt4.orig/arch/x86/kernel/nmi_32.c	2008-03-24 19:05:28.000000000 -0400
+++ linux-2.6.24.4-rt4/arch/x86/kernel/nmi_32.c	2008-03-24 19:05:42.000000000 -0400
@@ -318,7 +318,8 @@ EXPORT_SYMBOL(touch_nmi_watchdog);
 
 extern void die_nmi(struct pt_regs *, const char *msg);
 
-__kprobes int nmi_watchdog_tick(struct pt_regs * regs, unsigned reason)
+notrace __kprobes int
+nmi_watchdog_tick(struct pt_regs *regs, unsigned reason)
 {
 
 	/*
Index: linux-2.6.24.4-rt4/arch/x86/kernel/nmi_64.c
===================================================================
--- linux-2.6.24.4-rt4.orig/arch/x86/kernel/nmi_64.c	2008-03-24 19:05:28.000000000 -0400
+++ linux-2.6.24.4-rt4/arch/x86/kernel/nmi_64.c	2008-03-24 19:05:42.000000000 -0400
@@ -314,7 +314,8 @@ void touch_nmi_watchdog(void)
  	touch_softlockup_watchdog();
 }
 
-int __kprobes nmi_watchdog_tick(struct pt_regs * regs, unsigned reason)
+notrace int __kprobes
+nmi_watchdog_tick(struct pt_regs * regs, unsigned reason)
 {
 	int sum;
 	int touched = 0;
@@ -385,7 +386,8 @@ int __kprobes nmi_watchdog_tick(struct p
 
 static unsigned ignore_nmis;
 
-asmlinkage __kprobes void do_nmi(struct pt_regs * regs, long error_code)
+asmlinkage notrace __kprobes void
+do_nmi(struct pt_regs *regs, long error_code)
 {
 	nmi_enter();
 	add_pda(__nmi_count,1);
Index: linux-2.6.24.4-rt4/arch/x86/kernel/traps_32.c
===================================================================
--- linux-2.6.24.4-rt4.orig/arch/x86/kernel/traps_32.c	2008-03-24 19:05:28.000000000 -0400
+++ linux-2.6.24.4-rt4/arch/x86/kernel/traps_32.c	2008-03-24 19:05:42.000000000 -0400
@@ -630,7 +630,7 @@ gp_in_kernel:
 	}
 }
 
-static __kprobes void
+static notrace __kprobes void
 mem_parity_error(unsigned char reason, struct pt_regs * regs)
 {
 	printk(KERN_EMERG "Uhhuh. NMI received for unknown reason %02x on "
@@ -653,7 +653,7 @@ mem_parity_error(unsigned char reason, s
 	clear_mem_error(reason);
 }
 
-static __kprobes void
+static notrace __kprobes void
 io_check_error(unsigned char reason, struct pt_regs * regs)
 {
 	unsigned long i;
@@ -670,7 +670,7 @@ io_check_error(unsigned char reason, str
 	outb(reason, 0x61);
 }
 
-static __kprobes void
+static notrace __kprobes void
 unknown_nmi_error(unsigned char reason, struct pt_regs * regs)
 {
 #ifdef CONFIG_MCA
@@ -692,7 +692,7 @@ unknown_nmi_error(unsigned char reason, 
 
 static DEFINE_SPINLOCK(nmi_print_lock);
 
-void __kprobes die_nmi(struct pt_regs *regs, const char *msg)
+void notrace __kprobes die_nmi(struct pt_regs *regs, const char *msg)
 {
 	if (notify_die(DIE_NMIWATCHDOG, msg, regs, 0, 2, SIGINT) ==
 	    NOTIFY_STOP)
@@ -723,7 +723,7 @@ void __kprobes die_nmi(struct pt_regs *r
 	do_exit(SIGSEGV);
 }
 
-static __kprobes void default_do_nmi(struct pt_regs * regs)
+static notrace __kprobes void default_do_nmi(struct pt_regs *regs)
 {
 	unsigned char reason = 0;
 
@@ -763,7 +763,7 @@ static __kprobes void default_do_nmi(str
 
 static int ignore_nmis;
 
-fastcall __kprobes void do_nmi(struct pt_regs * regs, long error_code)
+fastcall notrace __kprobes void do_nmi(struct pt_regs * regs, long error_code)
 {
 	int cpu;
 
Index: linux-2.6.24.4-rt4/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.24.4-rt4.orig/arch/x86/kernel/traps_64.c	2008-03-24 19:05:28.000000000 -0400
+++ linux-2.6.24.4-rt4/arch/x86/kernel/traps_64.c	2008-03-24 19:05:42.000000000 -0400
@@ -547,7 +547,7 @@ void die(const char * str, struct pt_reg
 	do_exit(SIGSEGV); 
 }
 
-void __kprobes die_nmi(char *str, struct pt_regs *regs, int do_panic)
+notrace void __kprobes die_nmi(char *str, struct pt_regs *regs, int do_panic)
 {
 	unsigned long flags = oops_begin();
 
@@ -722,7 +722,7 @@ asmlinkage void __kprobes do_general_pro
 	}
 }
 
-static __kprobes void
+static notrace __kprobes void
 mem_parity_error(unsigned char reason, struct pt_regs * regs)
 {
 	printk(KERN_EMERG "Uhhuh. NMI received for unknown reason %02x.\n",
@@ -746,7 +746,7 @@ mem_parity_error(unsigned char reason, s
 	outb(reason, 0x61);
 }
 
-static __kprobes void
+static notrace __kprobes void
 io_check_error(unsigned char reason, struct pt_regs * regs)
 {
 	printk("NMI: IOCK error (debug interrupt?)\n");
@@ -760,7 +760,7 @@ io_check_error(unsigned char reason, str
 	outb(reason, 0x61);
 }
 
-static __kprobes void
+static notrace __kprobes void
 unknown_nmi_error(unsigned char reason, struct pt_regs * regs)
 {
 	printk(KERN_EMERG "Uhhuh. NMI received for unknown reason %02x.\n",
@@ -775,7 +775,7 @@ unknown_nmi_error(unsigned char reason, 
 
 /* Runs on IST stack. This code must keep interrupts off all the time.
    Nested NMIs are prevented by the CPU. */
-asmlinkage __kprobes void default_do_nmi(struct pt_regs *regs)
+asmlinkage notrace  __kprobes void default_do_nmi(struct pt_regs *regs)
 {
 	unsigned char reason = 0;
 	int cpu;
