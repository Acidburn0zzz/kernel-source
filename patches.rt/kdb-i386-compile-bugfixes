From: Joe Korty <joe.korty@ccur.com>
Subject: KDB compile fix for i386 and x86_64
Patch-Mainline: never

This patch is required to get kdb to compile under i386 and x86_64.

signed-off-by: Sven-Thorsten Dietrich <sdietrich@novell.com>


---
 kdb/modules/kdbm_task.c |    4 +---
 kdb/modules/kdbm_vm.c   |    2 +-
 kernel/sched.c          |   43 -------------------------------------------
 3 files changed, 2 insertions(+), 47 deletions(-)

--- linux-2.6.22.orig/kernel/sched.c
+++ linux-2.6.22/kernel/sched.c
@@ -7181,47 +7181,6 @@ EXPORT_SYMBOL(preempt_enable_no_resched)
 
 #include <linux/kdb.h>
 
-static void
-kdb_prio(char *name, struct prio_array *array, kdb_printf_t xxx_printf)
-{
-	int pri;
-
-	xxx_printf("  %s nr_active:%d  bitmap: 0x%lx 0x%lx 0x%lx\n",
-		name, array->nr_active,
-		array->bitmap[0], array->bitmap[1], array->bitmap[2]);
-
-	pri = sched_find_first_bit(array->bitmap);
-	if (pri != MAX_PRIO) {
-		xxx_printf("   bitmap priorities:");
-		while (pri != MAX_PRIO) {
-			xxx_printf(" %d", pri);
-			pri++;
-			pri = find_next_bit(array->bitmap, MAX_PRIO, pri);
-		}
-		xxx_printf("\n");
-	}
-
-	for (pri = 0; pri < MAX_PRIO; pri++) {
-		int printed_hdr = 0;
-		struct list_head *head, *curr;
-
-		head = array->queue + pri;
-		curr = head->next;
-		while(curr != head) {
-			struct task_struct *task;
-			if (!printed_hdr) {
-				xxx_printf("   queue at priority=%d\n", pri);
-				printed_hdr = 1;
-			}
-			task = list_entry(curr, struct task_struct, run_list);
-			xxx_printf("    0x%p %d %s  time_slice:%d\n",
-				   task, task->pid, task->comm,
-				   task->time_slice);
-			curr = curr->next;
-		}
-	}
-}
-
 /* This code must be in sched.c because struct rq is only defined in this
  * source.  To allow most of kdb to be modular, this code cannot call any kdb
  * functions directly, any external functions that it needs must be passed in
@@ -7247,8 +7206,6 @@ kdb_runqueue(unsigned long cpu, kdb_prin
 #endif
 	xxx_printf(" nr_running:%lu nr_switches:%llu\n",
 		   rq->nr_running, rq->nr_switches);
-	kdb_prio("active", rq->active, xxx_printf);
-	kdb_prio("expired", rq->expired, xxx_printf);
 }
 EXPORT_SYMBOL(kdb_runqueue);
 
--- linux-2.6.22.orig/kdb/modules/kdbm_task.c
+++ linux-2.6.22/kdb/modules/kdbm_task.c
@@ -93,9 +93,7 @@ kdbm_task(int argc, const char **argv)
 
 	kdb_printf("  need_resched=%d ",
 		test_tsk_thread_flag(tp, TIF_NEED_RESCHED));
-	kdb_printf(
-	    "timestamp=%llu time_slice=%u",
-	    tp->timestamp, tp->time_slice);
+	kdb_printf("time_slice=%u", tp->time_slice);
 	kdb_printf(" lock_depth=%d\n", tp->lock_depth);
 
 	kdb_printf(
--- linux-2.6.22.orig/kdb/modules/kdbm_vm.c
+++ linux-2.6.22/kdb/modules/kdbm_vm.c
@@ -67,7 +67,7 @@ kdbm_print_vm(struct vm_area_struct *vp,
 
 	kdb_printf("vm_start = 0x%p   vm_end = 0x%p\n", (void *) vp->vm_start,
 		   (void *) vp->vm_end);
-	kdb_printf("vm_page_prot = 0x%lx\n", pgprot_val(vp->vm_page_prot));
+	kdb_printf("vm_page_prot = 0x%llx\n", pgprot_val(vp->vm_page_prot));
 
 	kdb_printf("vm_flags: ");
 	for (tp = vmflags; tp->mask; tp++) {
