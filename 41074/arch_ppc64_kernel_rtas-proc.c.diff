--- linux-2.6.7/arch/ppc64/kernel/rtas-proc.c	2004-06-16 21:11:35.000000000 +0100
+++ linux-2.6.7-viroized/arch/ppc64/kernel/rtas-proc.c	2004-06-27 18:18:59.973250624 +0100
@@ -282,22 +282,24 @@
 {
 	char stkbuf[40];  /* its small, its on stack */
 	int n, sn;
+	loff_t pos = *ppos;
+	
 	if (power_on_time == 0)
 		n = scnprintf(stkbuf,sizeof(stkbuf),"Power on time not set\n");
 	else
 		n = scnprintf(stkbuf,sizeof(stkbuf),"%lu\n",power_on_time);
 
 	sn = strlen (stkbuf) +1;
-	if (*ppos >= sn)
+	if (pos != (unsigned int)pos || pos >= sn)
 		return 0;
-	if (n > sn - *ppos)
-		n = sn - *ppos;
+	if (n > sn - pos)
+		n = sn - pos;
 	if (n > count)
 		n = count;
-	if (copy_to_user (buf, stkbuf + (*ppos), n)) {
+	if (copy_to_user (buf, stkbuf + pos, n)) {
 		return -EFAULT;
 	}
-	*ppos += n;
+	*ppos = pos + n;
 	return n;
 }
 
@@ -329,6 +331,7 @@
 {
 	int sn, n = 0;
 	char *tmpbuf;
+	loff_t pos = *ppos;
 
 	if (progress_led == NULL) return 0;
 
@@ -340,20 +343,20 @@
 	n = sprintf (tmpbuf, "%s\n", progress_led);
 
 	sn = strlen (tmpbuf) +1;
-	if (*ppos >= sn) {
+	if (pos != (unsigned int)pos || pos >= sn) {
 		kfree (tmpbuf);
 		return 0;
 	}
-	if (n > sn - *ppos)
-		n = sn - *ppos;
+	if (n > sn - pos)
+		n = sn - pos;
 	if (n > count)
 		n = count;
-	if (copy_to_user (buf, tmpbuf + (*ppos), n)) {
+	if (copy_to_user (buf, tmpbuf + pos, n)) {
 		kfree (tmpbuf);
 		return -EFAULT;
 	}
 	kfree (tmpbuf);
-	*ppos += n;
+	*ppos = pos + n;
 	return n;
 }
 
@@ -397,7 +400,11 @@
 	unsigned long *ret = kmalloc(4*8, GFP_KERNEL);
 	int n, sn, error;
 	char stkbuf[40];  /* its small, its on stack */
+	loff_t pos = *ppos;
 
+	if(ret == NULL)
+		return -ENOMEM;
+		
 	error = rtas_call(rtas_token("get-time-of-day"), 0, 8, ret);
 	
 	year = ret[0]; mon  = ret[1]; day  = ret[2];
@@ -414,16 +421,16 @@
 	kfree(ret);
 
 	sn = strlen (stkbuf) +1;
-	if (*ppos >= sn)
+	if (pos != (unsigned int)pos || pos >= sn)
 		return 0;
-	if (n > sn - *ppos)
-		n = sn - *ppos;
+	if (n > sn - pos)
+		n = sn - pos;
 	if (n > count)
 		n = count;
-	if (copy_to_user (buf, stkbuf + (*ppos), n)) {
+	if (copy_to_user (buf, stkbuf + pos, n)) {
 		return -EFAULT;
 	}
-	*ppos += n;
+	*ppos = pos + n;
 	return n;
 }
 
@@ -834,7 +841,8 @@
 	char *dest;
 	int error;
 
-	if (39 < count) count = 39;
+	if (39 < count)
+		count = 39;
 	if (copy_from_user (stkbuf, buf, count)) {
 		return -EFAULT;
 	}
@@ -859,20 +867,21 @@
 {
 	int n, sn;
 	char stkbuf[40];  /* its small, its on stack */
+	loff_t pos = *ppos;
 
 	n = scnprintf(stkbuf, 40, "%lu\n", rtas_tone_frequency);
 
 	sn = strlen (stkbuf) +1;
-	if (*ppos >= sn)
+	if (pos != (unsigned int)pos || pos >= sn)
 		return 0;
-	if (n > sn - *ppos)
-		n = sn - *ppos;
+	if (n > sn - pos)
+		n = sn - pos;
 	if (n > count)
 		n = count;
-	if (copy_to_user (buf, stkbuf + (*ppos), n)) {
+	if (copy_to_user (buf, stkbuf + pos, n)) {
 		return -EFAULT;
 	}
-	*ppos += n;
+	*ppos = pos + n;
 	return n;
 }
 /* ****************************************************************** */
@@ -913,20 +922,21 @@
 {
 	int n, sn;
 	char stkbuf[40];  /* its small, its on stack */
+	loff_t pos = *ppos;
 
 	n = scnprintf(stkbuf, 40, "%lu\n", rtas_tone_volume);
 
 	sn = strlen (stkbuf) +1;
-	if (*ppos >= sn)
+	if (pos != (unsigned int)pos || pos >= sn)
 		return 0;
-	if (n > sn - *ppos)
-		n = sn - *ppos;
+	if (n > sn - pos)
+		n = sn - pos;
 	if (n > count)
 		n = count;
 	if (copy_to_user (buf, stkbuf + (*ppos), n)) {
 		return -EFAULT;
 	}
-	*ppos += n;
+	*ppos = pos + n;
 	return n;
 }
 
@@ -943,14 +953,13 @@
 	if (n > count)
 		n = count;
 
-	if (ppos && *ppos != 0)
+	if (*ppos != 0)
 		return 0;
 
 	if (copy_to_user(buf, kbuf, n))
 		return -EFAULT;
 
-	if (ppos)
-		*ppos = n;
+	*ppos = n;
 	
 	return n;
 }
