--- linux-2.6.7/drivers/pnp/isapnp/proc.c	2004-06-16 21:11:36.000000000 +0100
+++ linux-2.6.7-viroized/drivers/pnp/isapnp/proc.c	2004-06-27 22:26:33.434181336 +0100
@@ -26,6 +26,9 @@
 #include <linux/init.h>
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
+#include <asm/semaphore.h>
+
+static DECLARE_MUTEX(isapnp_mutex);	/* Don't whack two things at once */
 
 extern struct pnp_protocol isapnp_protocol;
 
@@ -35,7 +38,7 @@
 {
 	loff_t new = -1;
 
-	lock_kernel();
+	down(&isapnp_mutex);
 	switch (whence) {
 	case 0:
 		new = off;
@@ -48,10 +51,10 @@
 		break;
 	}
 	if (new < 0 || new > 256) {
-		unlock_kernel();
+		up(&isapnp_mutex);
 		return -EINVAL;
 	}
-	unlock_kernel();
+	up(&isapnp_mutex);
 	return (file->f_pos = new);
 }
 
@@ -60,11 +63,16 @@
 	struct inode *ino = file->f_dentry->d_inode;
 	struct proc_dir_entry *dp = PDE(ino);
 	struct pnp_dev *dev = dp->data;
-	int pos = *ppos;
+	loff_t pos;
 	int cnt, size = 256;
 
+	down(&isapnp_mutex);
+	pos = *ppos;
 	if (pos >= size)
+	{
+		up(&isapnp_mutex);
 		return 0;
+	}
 	if (nbytes >= size)
 		nbytes = size;
 	if (pos + nbytes > size)
@@ -72,7 +80,10 @@
 	cnt = nbytes;
 
 	if (!access_ok(VERIFY_WRITE, buf, cnt))
+	{
+		up(&isapnp_mutex);
 		return -EINVAL;
+	}
 
 	isapnp_cfg_begin(dev->card->number, dev->number);
 	for ( ; pos < 256 && cnt > 0; pos++, buf++, cnt--) {
@@ -83,6 +94,7 @@
 	isapnp_cfg_end();
 
 	*ppos = pos;
+	up(&isapnp_mutex);
 	return nbytes;
 }
 
