--- linux-2.6.7/drivers/pci/proc.c	2004-06-16 21:11:36.000000000 +0100
+++ linux-2.6.7-viroized/drivers/pci/proc.c	2004-06-27 20:02:05.492908704 +0100
@@ -33,7 +33,7 @@
 		new = file->f_pos + off;
 		break;
 	case 2:
-		new = inode->i_size + off;
+		new = -EINVAL;
 		break;
 	}
 	if (new < 0 || new > inode->i_size)
@@ -47,10 +47,10 @@
 static ssize_t
 proc_bus_pci_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)
 {
-	const struct inode *ino = file->f_dentry->d_inode;
+	struct inode *ino = file->f_dentry->d_inode;
 	const struct proc_dir_entry *dp = PDE(ino);
 	struct pci_dev *dev = dp->data;
-	unsigned int pos = *ppos;
+	unsigned int pos;
 	unsigned int cnt, size;
 
 	/*
@@ -66,8 +66,13 @@
 	else
 		size = 64;
 
-	if (pos >= size)
+	down(&ino->i_sem);
+	if (*ppos >= size)
+	{
+		up(&ino->i_sem);
 		return 0;
+	}
+	pos = *ppos;
 	if (nbytes >= size)
 		nbytes = size;
 	if (pos + nbytes > size)
@@ -75,7 +80,10 @@
 	cnt = nbytes;
 
 	if (!access_ok(VERIFY_WRITE, buf, cnt))
+	{
+		up(&ino->i_sem);
 		return -EINVAL;
+	}
 
 	if ((pos & 1) && cnt) {
 		unsigned char val;
@@ -123,21 +131,28 @@
 	}
 
 	*ppos = pos;
+	up(&ino->i_sem);
 	return nbytes;
 }
 
 static ssize_t
 proc_bus_pci_write(struct file *file, const char __user *buf, size_t nbytes, loff_t *ppos)
 {
-	const struct inode *ino = file->f_dentry->d_inode;
+	struct inode *ino = file->f_dentry->d_inode;
 	const struct proc_dir_entry *dp = PDE(ino);
 	struct pci_dev *dev = dp->data;
-	int pos = *ppos;
+	unsigned int pos;
 	int size = dev->cfg_size;
 	int cnt;
 
-	if (pos >= size)
+	down(&ino->i_sem);
+	if (*ppos >= size)
+	{
+		up(&ino->i_sem);
 		return 0;
+	}
+	pos = *ppos;
+	
 	if (nbytes >= size)
 		nbytes = size;
 	if (pos + nbytes > size)
@@ -145,8 +160,10 @@
 	cnt = nbytes;
 
 	if (!access_ok(VERIFY_READ, buf, cnt))
+	{
+		up(&ino->i_sem);
 		return -EINVAL;
-
+	}
 	if ((pos & 1) && cnt) {
 		unsigned char val;
 		__get_user(val, buf);
@@ -191,8 +208,8 @@
 		pos++;
 		cnt--;
 	}
-
 	*ppos = pos;
+	up(&ino->i_sem);
 	return nbytes;
 }
 
