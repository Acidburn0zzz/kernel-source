--- linux-2.6.7/drivers/video/pvr2fb.c	2004-06-16 21:10:01.000000000 +0100
+++ linux-2.6.7-viroized/drivers/video/pvr2fb.c	2004-06-27 22:37:30.646269912 +0100
@@ -678,6 +678,9 @@
 static ssize_t pvr2fb_write(struct file *file, const char *buf,
 			    size_t count, loff_t *ppos)
 {
+	struct inode *inode = file->f_dentry->d_inode;
+	int fbidx = iminor(inode);
+	struct fb_info *info = registered_fb[fbidx];
 	unsigned long dst, start, end, len;
 	unsigned int nr_pages;
 	struct page **pages;
@@ -701,7 +704,8 @@
 	}
 
 	dma_configure_channel(shdma, 0x12c1);
-	
+
+	down(&info->mutex);	
 	dst   = (unsigned long)fb_info->screen_base + *ppos;
 	start = (unsigned long)page_address(pages[0]);
 	end   = (unsigned long)page_address(pages[nr_pages]);
@@ -712,7 +716,7 @@
 		/* As we do this in one shot, it's either all or nothing.. */
 		if ((*ppos + len) > fb_info->fix.smem_len) {
 			ret = -ENOSPC;
-			goto out_unmap;
+			goto out_unmap_unlock;
 		}
 
 		dma_write(shdma, start, 0, len);
@@ -726,7 +730,7 @@
 	for (i = 0; i < nr_pages; i++, dst += PAGE_SIZE) {
 		if ((*ppos + (i << PAGE_SHIFT)) > fb_info->fix.smem_len) {
 			ret = -ENOSPC;
-			goto out_unmap;
+			goto out_unmap_unlock;
 		}
 
 		dma_write_page(shdma, (unsigned long)page_address(pages[i]), 0);
@@ -738,6 +742,8 @@
 	*ppos += count;
 	ret = count;
 
+out_unmap_unlock:
+	up(&info->mutex);	
 out_unmap:
 	for (i = 0; i < nr_pages; i++)
 		page_cache_release(pages[i]);
