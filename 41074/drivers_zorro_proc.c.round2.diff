--- linux-2.6.7/drivers/zorro/proc.c	2004-06-16 21:09:54.000000000 +0100
+++ linux-2.6.7-viroized/drivers/zorro/proc.c	2004-07-12 14:25:50.084712288 +0100
@@ -18,13 +18,17 @@
 #include <asm/uaccess.h>
 #include <asm/amigahw.h>
 #include <asm/setup.h>
+#include <asm/semaphore.h>
+
+static DECLARE_MUTEX(zorro_proc_lock);
 
 static loff_t
 proc_bus_zorro_lseek(struct file *file, loff_t off, int whence)
 {
 	loff_t new = -1;
 
-	lock_kernel();
+	down(&zorro_proc_lock);
+	
 	switch (whence) {
 	case 0:
 		new = off;
@@ -37,11 +41,12 @@
 		break;
 	}
 	if (new < 0 || new > sizeof(struct ConfigDev)) {
-		unlock_kernel();
+		up(&zorro_proc_lock);
 		return -EINVAL;
 	}
-	unlock_kernel();
-	return (file->f_pos = new);
+	file->f_pos = new;
+	up(&zorro_proc_lock);
+	return file->f_pos;
 }
 
 static ssize_t
@@ -51,10 +56,16 @@
 	struct proc_dir_entry *dp = PDE(ino);
 	struct zorro_dev *z = dp->data;
 	struct ConfigDev cd;
-	loff_t pos = *ppos;
+	loff_t pos;
+
+	down(&zorro_proc_lock);
 
+	pos = *ppos;
 	if (pos >= sizeof(struct ConfigDev))
+	{
+		up(&zorro_proc_lock);
 		return 0;
+	}
 	if (nbytes >= sizeof(struct ConfigDev))
 		nbytes = sizeof(struct ConfigDev);
 	if (pos + nbytes > sizeof(struct ConfigDev))
@@ -69,9 +80,12 @@
 	cd.cd_BoardSize = zorro_resource_len(z);
 
 	if (copy_to_user(buf, &cd, nbytes))
+	{
+		up(&zorro_proc_lock);
 		return -EFAULT;
+	}
 	*ppos += nbytes;
-
+	up(&zorro_proc_lock);
 	return nbytes;
 }
 
