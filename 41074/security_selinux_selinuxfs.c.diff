--- linux-2.6.7/security/selinux/selinuxfs.c	2004-06-16 21:11:37.000000000 +0100
+++ linux-2.6.7-viroized/security/selinux/selinuxfs.c	2004-06-28 14:30:38.346418024 +0100
@@ -74,6 +74,7 @@
 	char *page;
 	ssize_t length;
 	ssize_t end;
+	loff_t pos = *ppos;
 
 	if (count < 0 || count > PAGE_SIZE)
 		return -EINVAL;
@@ -87,13 +88,13 @@
 		return length;
 	}
 
-	if (*ppos >= length) {
+	if (pos != (unsigned int)pos || pos >= length) {
 		free_page((unsigned long)page);
 		return 0;
 	}
-	if (count + *ppos > length)
-		count = length - *ppos;
-	end = count + *ppos;
+	if (count + pos > length)
+		count = length - pos;
+	end = count + pos;
 	if (copy_to_user(buf, (char *) page + *ppos, count)) {
 		count = -EFAULT;
 		goto out;
@@ -141,6 +142,7 @@
 		selnl_notify_setenforce(selinux_enforcing);
 	}
 	length = count;
+	*ppos = length;
 out:
 	free_page((unsigned long) page);
 	return length;
@@ -189,6 +191,7 @@
 	}
 
 	length = count;
+	*ppos = length;
 out:
 	free_page((unsigned long) page);
 	return length;
@@ -207,6 +210,7 @@
 	char *page;
 	ssize_t length;
 	ssize_t end;
+	loff_t pos = *ppos;
 
 	if (count < 0 || count > PAGE_SIZE)
 		return -EINVAL;
@@ -220,14 +224,14 @@
 		return length;
 	}
 
-	if (*ppos >= length) {
+	if (pos < 0 || pos >= length) {
 		free_page((unsigned long)page);
 		return 0;
 	}
-	if (count + *ppos > length)
-		count = length - *ppos;
-	end = count + *ppos;
-	if (copy_to_user(buf, (char *) page + *ppos, count)) {
+	if (count + pos > length)
+		count = length - pos;
+	end = count + pos;
+	if (copy_to_user(buf, (char *) page + pos, count)) {
 		count = -EFAULT;
 		goto out;
 	}
@@ -250,6 +254,7 @@
 	char *page;
 	ssize_t length;
 	ssize_t end;
+	loff_t pos = *ppos;
 
 	if (count < 0 || count > PAGE_SIZE)
 		return -EINVAL;
@@ -263,14 +268,14 @@
 		return length;
 	}
 
-	if (*ppos >= length) {
+	if (pos < 0 || pos >= length) {
 		free_page((unsigned long)page);
 		return 0;
 	}
-	if (count + *ppos > length)
-		count = length - *ppos;
-	end = count + *ppos;
-	if (copy_to_user(buf, (char *) page + *ppos, count)) {
+	if (count + pos > length)
+		count = length - pos;
+	end = count + pos;
+	if (copy_to_user(buf, (char *) page + pos, count)) {
 		count = -EFAULT;
 		goto out;
 	}
@@ -445,10 +450,11 @@
 	return rv;
 }
 
-static ssize_t TA_read(struct file *file, char __user *buf, size_t size, loff_t *pos)
+static ssize_t TA_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
 {
 	struct argresp *ar;
 	ssize_t rv = 0;
+	loff_t pos = *ppos;
 
 	if (file->private_data == NULL)
 		rv = TA_write(file, buf, 0, pos);
@@ -458,13 +464,13 @@
 	ar = file->private_data;
 	if (!ar)
 		return 0;
-	if (*pos >= ar->size)
+	if (pos < 0 || pos >= ar->size)
 		return 0;
-	if (*pos + size > ar->size)
-		size = ar->size - *pos;
-	if (copy_to_user(buf, ar->data + *pos, size))
+	if (pos + size > ar->size)
+		size = ar->size - pos;
+	if (copy_to_user(buf, ar->data + pos, size))
 		return -EFAULT;
-	*pos += size;
+	*ppos = pos + size;
 	return size;
 }
 
@@ -753,7 +759,8 @@
 	ssize_t ret;
 	int cur_enforcing;
 	struct inode *inode;
-
+	loff_t pos = *ppos;
+	
 	down(&sel_sem);
 
 	ret = -EFAULT;
@@ -786,14 +793,14 @@
 		goto out;
 	}
 
-	if (*ppos >= length) {
+	if (pos < 0 || pos >= length) {
 		ret = 0;
 		goto out;
 	}
-	if (count + *ppos > length)
-		count = length - *ppos;
-	end = count + *ppos;
-	if (copy_to_user(buf, (char *) page + *ppos, count)) {
+	if (count + pos > length)
+		count = length - pos;
+	end = count + pos;
+	if (copy_to_user(buf, (char *) page + pos, count)) {
 		ret = -EFAULT;
 		goto out;
 	}
