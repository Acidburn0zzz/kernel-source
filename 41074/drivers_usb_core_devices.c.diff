--- linux-2.6.7/drivers/usb/core/devices.c	2004-06-16 21:11:36.000000000 +0100
+++ linux-2.6.7-viroized/drivers/usb/core/devices.c	2004-06-27 20:11:14.167497488 +0100
@@ -572,18 +572,24 @@
 {
 	struct list_head *buslist;
 	struct usb_bus *bus;
-	ssize_t ret, total_written = 0;
+	ssize_t ret = 0, total_written = 0;
 	loff_t skip_bytes = *ppos;
 
-	if (*ppos < 0)
-		return -EINVAL;
+	down (&usb_bus_list_lock);
+	
+	if (skip_bytes < 0)
+	{
+		ret =  -EINVAL;
+		goto error;
+	}
 	if (nbytes <= 0)
-		return 0;
+		goto error;
 	if (!access_ok(VERIFY_WRITE, buf, nbytes))
-		return -EFAULT;
-
+	{
+		ret =  -EFAULT;
+		goto error;
+	}
 	/* enumerate busses */
-	down (&usb_bus_list_lock);
 	for (buslist = usb_bus_list.next; buslist != &usb_bus_list; buslist = buslist->next) {
 		/* print devices for this bus */
 		bus = list_entry(buslist, struct usb_bus, bus_list);
@@ -594,12 +600,14 @@
 		up(&bus->root_hub->serialize);
 		if (ret < 0) {
 			up(&usb_bus_list_lock);
-			return ret;
+			goto error;
 		}
 		total_written += ret;
 	}
+	ret = total_written;
+error:
 	up (&usb_bus_list_lock);
-	return total_written;
+	return ret;
 }
 
 /* Kernel lock for "lastev" protection */
@@ -661,7 +669,8 @@
 {
 	loff_t ret;
 
-	lock_kernel();
+	/* This already guards the other users */
+	down(&usb_bus_list_lock);
 
 	switch (orig) {
 	case 0:
@@ -677,7 +686,7 @@
 		ret = -EINVAL;
 	}
 
-	unlock_kernel();
+	up(&usb_bus_list_lock);
 	return ret;
 }
 
