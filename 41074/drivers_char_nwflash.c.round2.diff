--- linux-2.6.7/drivers/char/nwflash.c	2004-06-16 21:09:53.000000000 +0100
+++ linux-2.6.7-viroized/drivers/char/nwflash.c	2004-07-03 00:18:13.000000000 +0100
@@ -134,7 +134,7 @@
 
 static ssize_t flash_read(struct file *file, char *buf, size_t size, loff_t * ppos)
 {
-	unsigned long p = *ppos;
+	loff_t p;
 	unsigned int count = size;
 	int ret = 0;
 
@@ -145,6 +145,10 @@
 	if (count)
 		ret = -ENXIO;
 
+	if (down_interruptible(&nwflash_sem))
+		return -ERESTARTSYS;
+	p = *ppos;
+	
 	if (p < gbFlashSize) {
 		if (count > gbFlashSize - p)
 			count = gbFlashSize - p;
@@ -152,8 +156,6 @@
 		/*
 		 * We now lock against reads and writes. --rmk
 		 */
-		if (down_interruptible(&nwflash_sem))
-			return -ERESTARTSYS;
 
 		ret = copy_to_user(buf, (void *)(FLASH_BASE + p), count);
 		if (ret == 0) {
@@ -161,14 +163,14 @@
 			*ppos += count;
 		} else
 			ret = -EFAULT;
-		up(&nwflash_sem);
 	}
+	up(&nwflash_sem);
 	return ret;
 }
 
 static ssize_t flash_write(struct file *file, const char *buf, size_t size, loff_t * ppos)
 {
-	unsigned long p = *ppos;
+	loff_t p;
 	unsigned int count = size;
 	int written;
 	int nBlock, temp, rc;
@@ -181,26 +183,38 @@
 	if (!gbWriteEnable)
 		return -EINVAL;
 
+	/*
+	 * We now lock against reads and writes. --rmk
+	 */
+	if (down_interruptible(&nwflash_sem))
+		return -ERESTARTSYS;
+	
+
+	p = *ppos;
 	if (p < 64 * 1024 && (!gbWriteBase64Enable))
-		return -EINVAL;
+	{
+		written = -EINVAL;
+		goto error;
+	}
 
 	/*
 	 * check for out of range pos or count
 	 */
 	if (p >= gbFlashSize)
-		return count ? -ENXIO : 0;
+	{
+		written = 0;
+		goto error;
+	}
 
 	if (count > gbFlashSize - p)
 		count = gbFlashSize - p;
 			
 	if (verify_area(VERIFY_READ, buf, count))
-		return -EFAULT;
+	{
+		written = -EFAULT;
+		goto error;
+	}
 
-	/*
-	 * We now lock against reads and writes. --rmk
-	 */
-	if (down_interruptible(&nwflash_sem))
-		return -ERESTARTSYS;
 
 	written = 0;
 
@@ -286,9 +300,8 @@
 	 * restore reg on exit
 	 */
 	leds_event(led_release);
-
+error:
 	up(&nwflash_sem);
-
 	return written;
 }
 
@@ -305,11 +318,11 @@
 {
 	loff_t ret;
 
-	lock_kernel();
 	if (flashdebug)
 		printk(KERN_DEBUG "flash_llseek: offset=0x%X, orig=0x%X.\n",
 		       (unsigned int) offset, orig);
 
+	down(&nwflash_sem);
 	switch (orig) {
 	case 0:
 		if (offset < 0) {
@@ -340,7 +353,7 @@
 	default:
 		ret = -EINVAL;
 	}
-	unlock_kernel();
+	up(&nwflash_sem);
 	return ret;
 }
 
