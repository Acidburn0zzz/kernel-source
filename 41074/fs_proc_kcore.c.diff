--- linux-2.6.7/fs/proc/kcore.c	2004-06-16 21:11:36.000000000 +0100
+++ linux-2.6.7-viroized/fs/proc/kcore.c	2004-06-27 19:31:09.081126192 +0100
@@ -280,24 +280,25 @@
 	size_t elf_buflen;
 	int nphdr;
 	unsigned long start;
+	loff_t pos = *fpos;
 
 	read_lock(&kclist_lock);
 	tsz =  get_kcore_size(&nphdr, &elf_buflen);
 	proc_root_kcore->size = size = tsz + elf_buflen;
-	if (buflen == 0 || *fpos >= size) {
+	if (buflen == 0 || pos < 0 || pos >= size) {
 		read_unlock(&kclist_lock);
 		return 0;
 	}
 
 	/* trim buflen to not go beyond EOF */
-	if (buflen > size - *fpos)
-		buflen = size - *fpos;
+	if (buflen > size - pos)
+		buflen = size - pos;
 
 	/* construct an ELF core header if we'll need some of it */
-	if (*fpos < elf_buflen) {
+	if (pos < elf_buflen) {
 		char * elf_buf;
 
-		tsz = elf_buflen - *fpos;
+		tsz = elf_buflen - pos;
 		if (buflen < tsz)
 			tsz = buflen;
 		elf_buf = kmalloc(elf_buflen, GFP_ATOMIC);
@@ -308,13 +309,14 @@
 		memset(elf_buf, 0, elf_buflen);
 		elf_kcore_store_hdr(elf_buf, nphdr, elf_buflen);
 		read_unlock(&kclist_lock);
-		if (copy_to_user(buffer, elf_buf + *fpos, tsz)) {
+		if (copy_to_user(buffer, elf_buf + pos, tsz)) {
 			kfree(elf_buf);
 			return -EFAULT;
 		}
 		kfree(elf_buf);
 		buflen -= tsz;
-		*fpos += tsz;
+		pos += tsz;
+		*fpos = pos;
 		buffer += tsz;
 		acc += tsz;
 
@@ -328,7 +330,7 @@
 	 * Check to see if our file offset matches with any of
 	 * the addresses in the elf_phdr on our list.
 	 */
-	start = kc_offset_to_vaddr(*fpos - elf_buflen);
+	start = kc_offset_to_vaddr(pos - elf_buflen);
 	if ((tsz = (PAGE_SIZE - (start & ~PAGE_MASK))) > buflen)
 		tsz = buflen;
 		
@@ -412,7 +414,8 @@
 			}
 		}
 		buflen -= tsz;
-		*fpos += tsz;
+		pos += tsz;
+		*fpos = pos;
 		buffer += tsz;
 		acc += tsz;
 		start += tsz;
