--- linux-2.6.7.proc.orig/drivers/char/generic_nvram.c
+++ linux-2.6.7.proc/drivers/char/generic_nvram.c
@@ -22,9 +22,12 @@
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
 #include <asm/nvram.h>
+#include <asm/semaphore.h>
 
 #define NVRAM_SIZE	8192
 
+static DECLARE_MUTEX(nvram_sem);
+
 static loff_t nvram_llseek(struct file *file, loff_t offset, int origin)
 {
 	down(&nvram_sem);
@@ -51,14 +54,13 @@ static ssize_t read_nvram(struct file *f
 {
 	loff_t i;
 	char __user *p = buf;
-	struct semaphore *s = &nvram_sem;
 	
 	if (verify_area(VERIFY_WRITE, buf, count))
 		return -EFAULT;
 		
 	down(&nvram_sem);
 	/* If we are already off the end then we report 0 anyway .. */
-	for (i = *ppos; count > 0 && i < NVRAM_SIZE; ++i, --count)
+	for (i = *ppos; count > 0 && i < NVRAM_SIZE; ++i, ++p, --count)
 		if (__put_user(nvram_read_byte(i), p))
 		{
 			up(&nvram_sem);
@@ -84,10 +86,14 @@ static ssize_t write_nvram(struct file *
 	/* if *ppos > end then we return 0 anyway */
 	for (i = *ppos; count > 0 && i < NVRAM_SIZE; ++i, ++p, --count) {
 		if (__get_user(c, p))
+		{
+			up(&nvram_sem);
 			return -EFAULT;
+		}
 		nvram_write_byte(c, i);
 	}
 	*ppos = i;
+	up(&nvram_sem);
 	return p - buf;
 }
 
