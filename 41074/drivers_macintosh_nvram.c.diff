--- linux-2.6.7/drivers/macintosh/nvram.c	2004-06-16 21:10:09.000000000 +0100
+++ linux-2.6.7-viroized/drivers/macintosh/nvram.c	2004-06-27 22:18:04.145604968 +0100
@@ -16,12 +16,16 @@
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
 #include <asm/nvram.h>
+#include <asm/semaphore.h>
+
+static DECLARE_MUTEX(nvram_mutex);
 
 #define NVRAM_SIZE	8192
 
+
 static loff_t nvram_llseek(struct file *file, loff_t offset, int origin)
 {
-	lock_kernel();
+	down(&nvram_mutex);
 	switch (origin) {
 	case 1:
 		offset += file->f_pos;
@@ -31,11 +35,11 @@
 		break;
 	}
 	if (offset < 0) {
-		unlock_kernel();
+		up(s);
 		return -EINVAL;
 	}
 	file->f_pos = offset;
-	unlock_kernel();
+	up(&nvram_mutex);
 	return file->f_pos;
 }
 
@@ -44,15 +48,18 @@
 {
 	unsigned int i;
 	char __user *p = buf;
-
 	if (verify_area(VERIFY_WRITE, buf, count))
 		return -EFAULT;
-	if (*ppos >= NVRAM_SIZE)
-		return 0;
+		
+	down(&nvram_mutex);
 	for (i = *ppos; count > 0 && i < NVRAM_SIZE; ++i, ++p, --count)
 		if (__put_user(nvram_read_byte(i), p))
+		{
+			up(&nvram_mutex);
 			return -EFAULT;
+		}
 	*ppos = i;
+	up(&nvram_mutex);
 	return p - buf;
 }
 
@@ -65,14 +72,18 @@
 
 	if (verify_area(VERIFY_READ, buf, count))
 		return -EFAULT;
-	if (*ppos >= NVRAM_SIZE)
-		return 0;
+		
+	down(&nvram_mutex);
 	for (i = *ppos; count > 0 && i < NVRAM_SIZE; ++i, ++p, --count) {
 		if (__get_user(c, p))
+		{
+			up(&nvram_mutex);
 			return -EFAULT;
+		}
 		nvram_write_byte(c, i);
 	}
 	*ppos = i;
+	up(&nvram_mutex);
 	return p - buf;
 }
 
