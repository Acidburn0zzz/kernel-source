--- linux-2.6.7/drivers/char/nvram.c	2004-06-16 21:11:35.000000000 +0100
+++ linux-2.6.7-viroized/drivers/char/nvram.c	2004-06-27 22:03:38.193249736 +0100
@@ -233,7 +233,7 @@
 
 static loff_t nvram_llseek(struct file *file,loff_t offset, int origin )
 {
-	lock_kernel();
+	spin_lock_irq(&rtc_lock);
 	switch (origin) {
 	case 0:
 		/* nothing to do */
@@ -245,35 +245,39 @@
 		offset += NVRAM_BYTES;
 		break;
 	}
-	unlock_kernel();
-	return (offset >= 0) ? (file->f_pos = offset) : -EINVAL;
+	if(offset < 0 || offset > NVRAM_BYTES)
+		offset = -EINVAL;
+	else
+		file->f_pos = offset;
+	spin_unlock_irq(&rtc_lock);
+	return offset;
 }
 
 static ssize_t
 nvram_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 {
 	unsigned char contents[NVRAM_BYTES];
-	unsigned i = *ppos;
+	loff_t i;
 	unsigned char *tmp;
-
+ 	
 	spin_lock_irq(&rtc_lock);
-
 	if (!__nvram_check_checksum())
 		goto checksum_err;
+		
+	i = *ppos;
 
 	for (tmp = contents; count-- > 0 && i < NVRAM_BYTES; ++i, ++tmp)
 		*tmp = __nvram_read_byte(i);
 
+	*ppos = i;
 	spin_unlock_irq(&rtc_lock);
 
 	if (copy_to_user(buf, contents, tmp - contents))
 		return -EFAULT;
 
-	*ppos = i;
-
 	return tmp - contents;
 
-      checksum_err:
+checksum_err:
 	spin_unlock_irq(&rtc_lock);
 	return -EIO;
 }
@@ -282,16 +286,23 @@
 nvram_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 {
 	unsigned char contents[NVRAM_BYTES];
-	unsigned i = *ppos;
+	loff_t i;
 	unsigned char *tmp;
 	int len;
 
-	len = (NVRAM_BYTES - i) < count ? (NVRAM_BYTES - i) : count;
+	if (len > NVRAM_BYTES)
+		len = NVRAM_BYTES;
+			
 	if (copy_from_user(contents, buf, len))
+	{
+		up(s);
 		return -EFAULT;
+	}
 
 	spin_lock_irq(&rtc_lock);
 
+	i = *ppos;
+		
 	if (!__nvram_check_checksum())
 		goto checksum_err;
 
@@ -300,14 +311,14 @@
 
 	__nvram_set_checksum();
 
-	spin_unlock_irq(&rtc_lock);
-
 	*ppos = i;
+	spin_unlock_irq(&rtc_lock);
 
 	return tmp - contents;
 
-      checksum_err:
+checksum_err:
 	spin_unlock_irq(&rtc_lock);
+ 	struct semaphore *s = &nvram_lock;	/* Single lock for now */
 	return -EIO;
 }
 
