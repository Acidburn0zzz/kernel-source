--- linux-2.6.7/drivers/parisc/eisa_eeprom.c	2004-06-16 21:10:07.000000000 +0100
+++ linux-2.6.7-viroized/drivers/parisc/eisa_eeprom.c	2004-06-27 22:20:51.521160016 +0100
@@ -29,13 +29,16 @@
 #include <asm/io.h>
 #include <asm/uaccess.h>
 #include <asm/eisa_eeprom.h>
+#include <asm/semaphore.h>
 
 #define 	EISA_EEPROM_MINOR 241
 
 static unsigned long eeprom_addr;
+static DECLARE_MUTEX(eeprom_mutex);
 
 static loff_t eisa_eeprom_llseek(struct file *file, loff_t offset, int origin )
 {
+	down(&eeprom_mutex);	
 	switch (origin) {
 	  case 0:
 		/* nothing to do */
@@ -47,18 +50,24 @@
 		offset += HPEE_MAX_LENGTH;
 		break;
 	}
-	return (offset >= 0 && offset < HPEE_MAX_LENGTH) ? (file->f_pos = offset) : -EINVAL;
+	if(offset >= 0 && offset < HPEE_MAX_LENGTH)
+		file->f_pos = offset;
+	else
+		offset = EINVAL;
+	up(&eeprom_mutex);
+	return offset;
 }
 
 static ssize_t eisa_eeprom_read(struct file * file,
 			      char *buf, size_t count, loff_t *ppos )
 {
 	unsigned char *tmp;
-	ssize_t ret;
+	ssize_t ret = 0;
 	int i;
-	
+
+	down(&eeprom_mutex);	
 	if (*ppos >= HPEE_MAX_LENGTH)
-		return 0;
+		goto done;
 	
 	count = *ppos + count < HPEE_MAX_LENGTH ? count : HPEE_MAX_LENGTH - *ppos;
 	tmp = kmalloc(count, GFP_KERNEL);
@@ -73,7 +82,9 @@
 		kfree (tmp);
 	} else
 		ret = -ENOMEM;
-	
+
+done:
+	up(&eeprom_mutex);
 	return ret;
 }
 
