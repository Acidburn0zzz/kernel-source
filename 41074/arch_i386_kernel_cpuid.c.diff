--- linux-2.6.7/arch/i386/kernel/cpuid.c	2004-06-16 21:11:35.000000000 +0100
+++ linux-2.6.7-viroized/arch/i386/kernel/cpuid.c	2004-06-27 19:44:22.608491696 +0100
@@ -41,6 +41,9 @@
 #include <asm/msr.h>
 #include <asm/uaccess.h>
 #include <asm/system.h>
+#include <asm/semaphore.h>
+
+static DECLARE_MUTEX(cpuid_lock);
 
 #ifdef CONFIG_SMP
 
@@ -88,8 +91,8 @@
 {
 	loff_t ret;
 
-	lock_kernel();
-
+	down(&cpuid_lock);
+	
 	switch (orig) {
 	case 0:
 		file->f_pos = offset;
@@ -102,8 +105,7 @@
 	default:
 		ret = -EINVAL;
 	}
-
-	unlock_kernel();
+	up(&cpuid_lock);
 	return ret;
 }
 
@@ -113,21 +115,32 @@
 	char __user *tmp = buf;
 	u32 data[4];
 	size_t rv;
-	u32 reg = *ppos;
+	u32 reg;
 	int cpu = iminor(file->f_dentry->d_inode);
+	int err = -EINVAL;
 
 	if (count % 16)
 		return -EINVAL;	/* Invalid chunk size */
 
+	down(&cpuid_lock);
+	if(*ppos > 0xFFFFFFFF)
+		goto error;
+	reg = *ppos;
+	err = -EFAULT;
 	for (rv = 0; count; count -= 16) {
 		do_cpuid(cpu, reg, data);
 		if (copy_to_user(tmp, &data, 16))
-			return -EFAULT;
+			goto error;
 		tmp += 16;
 		*ppos = reg++;
 	}
-
-	return tmp - buf;
+	err = 0;
+	
+error:
+	up(&cpuid_lock);
+	if(!err)
+		return tmp - buf;
+	return err;
 }
 
 static int cpuid_open(struct inode *inode, struct file *file)
