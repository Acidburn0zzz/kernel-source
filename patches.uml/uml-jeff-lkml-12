Message-Id: <200409141847.i8EIlb4W003427@ccure.user-mode-linux.org>
X-Mailer: exmh version 2.4 06/23/2000 with nmh-1.1-RC1
To: akpm@osdl.org
cc: linux-kernel@vger.kernel.org
Subject: [PATCH] UML - Let page faults always be delivered immediately
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: 	Tue, 14 Sep 2004 14:47:37 -0400
From: Jeff Dike <jdike@addtoit.com>
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: 	linux-kernel@vger.kernel.org
X-Scanned-By: MIMEDefang 2.43
Lines: 49
Xref: bytesex.org mlist.linux-kernel:22589

This allows page faults to be delivered when they happen.  Without this,
it can happen that a page fault will occur when SIGSEGV is disabled, and
the host will then just kill UML because it can't invoke the handler.

Signed-off-by: Jeff Dike <jdike@addtoit.com>

Index: uml-2.6.9-rc2/arch/um/kernel/process.c
===================================================================
--- uml-2.6.9-rc2.orig/arch/um/kernel/process.c	2004-09-16 16:13:41.000000000 +0200
+++ uml-2.6.9-rc2/arch/um/kernel/process.c	2004-09-16 16:58:48.052614955 +0200
@@ -57,11 +57,7 @@ void init_new_thread_signals(int altstac
 {
 	int flags = altstack ? SA_ONSTACK : 0;
 
-	/* NODEFER is set here because SEGV isn't turned back on when the
-	 * handler is ready to receive signals.  This causes any segfault
-	 * during a copy_user to kill the process because the fault is blocked.
-	 */
-	set_handler(SIGSEGV, (__sighandler_t) sig_handler, flags | SA_NODEFER,
+	set_handler(SIGSEGV, (__sighandler_t) sig_handler, flags, 
 		    SIGUSR1, SIGIO, SIGWINCH, SIGALRM, SIGVTALRM, -1);
 	set_handler(SIGTRAP, (__sighandler_t) sig_handler, flags, 
 		    SIGUSR1, SIGIO, SIGWINCH, SIGALRM, SIGVTALRM, -1);
Index: uml-2.6.9-rc2/arch/um/kernel/tt/trap_user.c
===================================================================
--- uml-2.6.9-rc2.orig/arch/um/kernel/tt/trap_user.c	2004-09-16 16:10:14.000000000 +0200
+++ uml-2.6.9-rc2/arch/um/kernel/tt/trap_user.c	2004-09-16 16:58:48.061613487 +0200
@@ -23,6 +23,13 @@ void sig_handler_common_tt(int sig, void
 
 	unprotect_kernel_mem();
 
+	/* This is done because to allow SIGSEGV to be delivered inside a SEGV
+	 * handler.  This can happen in copy_user, and if SEGV is disabled,
+	 * the process will die.
+	 */
+	if(sig == SIGSEGV)
+		change_sig(SIGSEGV, 1);
+
 	r = &TASK_REGS(get_current())->tt;
 	save_regs = *r;
 	is_user = user_context(SC_SP(sc));
