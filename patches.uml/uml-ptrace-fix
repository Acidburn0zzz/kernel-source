Index: linux-2.6.8/arch/um/include/os.h
===================================================================
--- linux-2.6.8.orig/arch/um/include/os.h	2004-10-22 11:53:43.827572039 +0200
+++ linux-2.6.8/arch/um/include/os.h	2004-10-22 11:59:22.709694714 +0200
@@ -156,7 +156,7 @@ extern int os_lock_file(int fd, int excl
 extern unsigned long os_process_pc(int pid);
 extern int os_process_parent(int pid);
 extern void os_stop_process(int pid);
-extern void os_kill_process(int pid, int reap_child);
+extern void os_kill_process(int pid, int reap_child, int trace_cont);
 extern void os_usr1_process(int pid);
 extern int os_getpid(void);
 
Index: linux-2.6.8/arch/um/os-Linux/process.c
===================================================================
--- linux-2.6.8.orig/arch/um/os-Linux/process.c	2004-10-22 11:53:43.861565631 +0200
+++ linux-2.6.8/arch/um/os-Linux/process.c	2004-10-22 11:59:22.710694526 +0200
@@ -10,6 +10,7 @@
 #include <linux/unistd.h>
 #include <sys/mman.h>
 #include <sys/wait.h>
+#include <sys/ptrace.h>
 #include "os.h"
 #include "user.h"
 #include "user_util.h"
@@ -86,12 +87,13 @@ void os_stop_process(int pid)
 	kill(pid, SIGSTOP);
 }
 
-void os_kill_process(int pid, int reap_child)
+void os_kill_process(int pid, int reap_child, int trace_cont)
 {
 	kill(pid, SIGKILL);
-	if(reap_child)
+	if (trace_cont)
+		ptrace(PTRACE_CONT, pid, NULL, NULL);
+	if (reap_child)
 		CATCH_EINTR(waitpid(pid, NULL, 0));
-		
 }
 
 void os_usr1_process(int pid)
Index: linux-2.6.8/arch/um/drivers/port_kern.c
===================================================================
--- linux-2.6.8.orig/arch/um/drivers/port_kern.c	2004-10-22 11:53:26.000000000 +0200
+++ linux-2.6.8/arch/um/drivers/port_kern.c	2004-10-22 11:59:22.720692641 +0200
@@ -112,7 +112,7 @@ static int port_accept(struct port_list 
  out_close:
 	os_close_file(fd);
 	if(pid != -1) 
-		os_kill_process(pid, 1);
+		os_kill_process(pid, 1, 0);
  out:
 	return(ret);
 } 
@@ -262,9 +262,9 @@ void port_remove_dev(void *d)
 	struct port_dev *dev = d;
 
 	if(dev->helper_pid != -1)
-		os_kill_process(dev->helper_pid, 0);
+		os_kill_process(dev->helper_pid, 0, 0);
 	if(dev->telnetd_pid != -1)
-		os_kill_process(dev->telnetd_pid, 1);
+		os_kill_process(dev->telnetd_pid, 1, 0);
 	dev->helper_pid = -1;
 	dev->telnetd_pid = -1;
 }
Index: linux-2.6.8/arch/um/drivers/ubd_kern.c
===================================================================
--- linux-2.6.8.orig/arch/um/drivers/ubd_kern.c	2004-10-22 11:53:43.915555453 +0200
+++ linux-2.6.8/arch/um/drivers/ubd_kern.c	2004-10-22 11:59:22.720692641 +0200
@@ -465,7 +465,7 @@ static int io_pid = -1;
 void kill_io_thread(void)
 {
 	if(io_pid != -1) 
-		os_kill_process(io_pid, 1);
+		os_kill_process(io_pid, 1, 0);
 }
 
 __uml_exitcall(kill_io_thread);
Index: linux-2.6.8/arch/um/drivers/line.c
===================================================================
--- linux-2.6.8.orig/arch/um/drivers/line.c	2004-10-22 11:53:44.074525485 +0200
+++ linux-2.6.8/arch/um/drivers/line.c	2004-10-22 11:59:22.721692453 +0200
@@ -639,7 +639,7 @@ static void winch_cleanup(void)
 			os_close_file(winch->fd);
 		}
 		if(winch->pid != -1) 
-			os_kill_process(winch->pid, 1);
+			os_kill_process(winch->pid, 1, 0);
 	}
 }
 __uml_exitcall(winch_cleanup);
Index: linux-2.6.8/arch/um/kernel/skas/process.c
===================================================================
--- linux-2.6.8.orig/arch/um/kernel/skas/process.c	2004-10-22 11:53:44.038532270 +0200
+++ linux-2.6.8/arch/um/kernel/skas/process.c	2004-10-22 11:59:22.721692453 +0200
@@ -400,7 +400,7 @@ void switch_mm_skas(int mm_fd)
 void kill_off_processes_skas(void)
 {
 #warning need to loop over userspace_pids in kill_off_processes_skas
-	os_kill_process(userspace_pid[0], 1);
+	os_kill_process(userspace_pid[0], 1, 1);
 }
 
 void init_registers(int pid)
Index: linux-2.6.8/arch/um/kernel/process.c
===================================================================
--- linux-2.6.8.orig/arch/um/kernel/process.c	2004-10-22 11:53:43.859566008 +0200
+++ linux-2.6.8/arch/um/kernel/process.c	2004-10-22 11:59:22.722692265 +0200
@@ -141,7 +141,7 @@ static int ptrace_child(void *arg)
 
 	if(ptrace(PTRACE_TRACEME, 0, 0, 0) < 0){
 		perror("ptrace");
-		os_kill_process(pid, 0);
+		os_kill_process(pid, 0, 0);
 	}
 	os_stop_process(pid);
 	_exit(os_getpid() == pid);
Index: linux-2.6.8/arch/um/kernel/helper.c
===================================================================
--- linux-2.6.8.orig/arch/um/kernel/helper.c	2004-10-22 11:53:43.907556961 +0200
+++ linux-2.6.8/arch/um/kernel/helper.c	2004-10-22 11:59:22.722692265 +0200
@@ -45,7 +45,7 @@ static int helper_child(void *arg)
 	errval = errno;
 	printk("execvp of '%s' failed - errno = %d\n", argv[0], errno);
 	os_write_file(data->fd, &errval, sizeof(errval));
-	os_kill_process(os_getpid(), 0);
+	os_kill_process(os_getpid(), 0, 0);
 	return(0);
 }
 
@@ -106,7 +106,7 @@ int run_helper(void (*pre_exec)(void *),
 	return(pid);
 
  out_kill:
-	os_kill_process(pid, 1);
+	os_kill_process(pid, 1, 0);
  out_close:
 	os_close_file(fds[0]);
 	os_close_file(fds[1]);
Index: linux-2.6.8/arch/um/kernel/tt/process_kern.c
===================================================================
--- linux-2.6.8.orig/arch/um/kernel/tt/process_kern.c	2004-10-22 11:53:43.860565819 +0200
+++ linux-2.6.8/arch/um/kernel/tt/process_kern.c	2004-10-22 11:59:22.722692265 +0200
@@ -66,7 +66,7 @@ void *switch_to_tt(void *prev, void *nex
 
 	reading = 1;
 	if((from->state == TASK_ZOMBIE) || (from->state == TASK_DEAD))
-		os_kill_process(os_getpid(), 0);
+		os_kill_process(os_getpid(), 0, 0);
 
 	err = os_read_file(from->thread.mode.tt.switch_pipe[0], &c, sizeof(c));
 	if(err != sizeof(c))
@@ -82,7 +82,7 @@ void *switch_to_tt(void *prev, void *nex
 	prev_sched = current->thread.prev_sched;
 	if((prev_sched->state == TASK_ZOMBIE) || 
 	   (prev_sched->state == TASK_DEAD))
-		os_kill_process(prev_sched->thread.mode.tt.extern_pid, 1);
+		os_kill_process(prev_sched->thread.mode.tt.extern_pid, 1, 1);
 
 	/* This works around a nasty race with 'jail'.  If we are switching
 	 * between two threads of a threaded app and the incoming process 
@@ -119,7 +119,7 @@ void release_thread_tt(struct task_struc
 	int pid = task->thread.mode.tt.extern_pid;
 
 	if(os_getpid() != pid)
-		os_kill_process(pid, 0);
+		os_kill_process(pid, 0, 0);
 }
 
 void exit_thread_tt(void)
@@ -331,10 +331,10 @@ void kill_off_processes_tt(void)
 	me = os_getpid();
         for_each_process(p){
 		if(p->thread.mode.tt.extern_pid != me) 
-			os_kill_process(p->thread.mode.tt.extern_pid, 0);
+			os_kill_process(p->thread.mode.tt.extern_pid, 0, 0);
 	}
 	if(init_task.thread.mode.tt.extern_pid != me) 
-		os_kill_process(init_task.thread.mode.tt.extern_pid, 0);
+		os_kill_process(init_task.thread.mode.tt.extern_pid, 0, 0);
 }
 
 void initial_thread_cb_tt(void (*proc)(void *), void *arg)
Index: linux-2.6.8/arch/um/drivers/xterm.c
===================================================================
--- linux-2.6.8.orig/arch/um/drivers/xterm.c	2004-10-22 11:53:44.076525108 +0200
+++ linux-2.6.8/arch/um/drivers/xterm.c	2004-10-22 11:59:22.723692076 +0200
@@ -157,10 +157,10 @@ void xterm_close(int fd, void *d)
 	struct xterm_chan *data = d;
 	
 	if(data->pid != -1) 
-		os_kill_process(data->pid, 1);
+		os_kill_process(data->pid, 1, 0);
 	data->pid = -1;
 	if(data->helper_pid != -1) 
-		os_kill_process(data->helper_pid, 0);
+		os_kill_process(data->helper_pid, 0, 0);
 	data->helper_pid = -1;
 	os_close_file(fd);
 }
Index: linux-2.6.8/arch/um/kernel/sigio_user.c
===================================================================
--- linux-2.6.8.orig/arch/um/kernel/sigio_user.c	2004-10-22 11:53:26.000000000 +0200
+++ linux-2.6.8/arch/um/kernel/sigio_user.c	2004-10-22 11:59:22.729690945 +0200
@@ -258,7 +258,7 @@ static void update_thread(void)
  fail:
 	sigio_lock();
 	if(write_sigio_pid != -1) 
-		os_kill_process(write_sigio_pid, 1);
+		os_kill_process(write_sigio_pid, 1, 0);
 	write_sigio_pid = -1;
 	os_close_file(sigio_private[0]);
 	os_close_file(sigio_private[1]);
@@ -385,7 +385,7 @@ void write_sigio_workaround(void)
 	return;
 
  out_kill:
-	os_kill_process(write_sigio_pid, 1);
+	os_kill_process(write_sigio_pid, 1, 0);
 	write_sigio_pid = -1;
  out_close2:
 	os_close_file(sigio_private[0]);
@@ -418,7 +418,7 @@ int read_sigio_fd(int fd)
 static void sigio_cleanup(void)
 {
 	if(write_sigio_pid != -1)
-		os_kill_process(write_sigio_pid, 1);
+		os_kill_process(write_sigio_pid, 1, 0);
 }
 
 __uml_exitcall(sigio_cleanup);
