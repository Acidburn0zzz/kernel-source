#!/bin/bash
# testmodule
# 
# Usage: testmodule versiondumpfile module.ko [module.ko [...]]
# 
# Reads the undefined symbols and the versions of the imported
# symbols from module.ko and compares them to the list of
# symbol versions found in versiondumpfile.
# versiondumpfile should be produced by collect_ksyms
# or be a symvers file from the SUSE kernel build process (in /boot)
# or be a kernel RPM
#
# (c) Kurt Garloff <garloff@suse.de>, 2005-05-17
# License: GNU GPL

unset LANG
export LC_ALL=POSIX
export PATH=$PATH:/sbin

# Arguments: list of symbols to match
filter()
{
	awk '
		BEGIN   { invert = 0
		  for (i=1; i<ARGC; i++) {
		    sym[ARGV[i]] = 1;
		  }
		  split("", ARGV)
		}
		($1 in sym) { print }
	' "$@"
}
# Arguments: list of symbols to match
filter_out()
{
	awk '
		BEGIN   { invert = 0
		  for (i=1; i<ARGC; i++) {
		    sym[ARGV[i]] = 1;
		  }
		  split("", ARGV)
		}
		!($1 in sym) { print }
	' "$@"
}

# Arg: filename
parse_prov_list()
{
	if test ! -r $1; then
		echo "$1 not accessible"
		exit 5
	fi
	provided=$(cat $1 | egrep '^[^	 ]+	[0-9a-f]+')
	
}

# Arg filename
parse_symvers()
{
	if test ! -r $1; then
		echo "$1 not accessible"
		exit 6
	fi
	provided=$(zcat $1 | sed 's/^0x\([^ 	]*\)[ 	]\([^ 	]*\)/\2\t\1/')
}
	
# Arg kernel RPM
parse_symvers_from_rpm()
{
	if test ! -r $1; then
		echo "$1 not accessible"
		exit 7
	fi
	name=$1
	DIR=$PWD
	VERSION=${name##*kernel-}
	# SAFE tmp dir creation!
	PREFIX=$(mktemp -d /tmp/kernel-$VERSION.XXXXXX)
	cd $PREFIX
	if test "${name#/}" = "${name}"; then
		unrpm $DIR/$1 >/dev/null 2>&1
	else
		unrpm $1 >/dev/null 2>&1
	fi
	VERSION=${VERSION%.*}
	VERSION=$(echo $VERSION | sed 's/^\([^-]*\)-\(.*\)\.\(.*\)$/\2-\3-\1/')
	if test -r $PREFIX/boot/modversions-$VERSION.gz; then 
		parse_symvers $PREFIX/boot/modversions-$VERSION.gz
	else
		parse_symvers $PREFIX/boot/symvers-$VERSION.gz
	fi
	cd $DIR
	rm -rf $PREFIX
}

# Arg: filename
collect_needed_versions()
{
	declare -i no=0
	if test ! -r $1; then
		echo "$1 not accessible"
		exit 8
	fi
	name=${1##*/}
	echo -n "Module $name: "
	while read ver sym; do
		ver=$(printf %08x $ver)
		match=$(echo "$provided" | filter $sym)
		#echo "$provided" | grep $sym
		#echo \"$sym\"
		#echo $match
		if test -z "$match"; then
			unresolved="$unresolved\n$sym\t$ver"
		else
			verm=$(echo "$match" | sed 's/^[^ \t]*\t\([^ \t]*\).*$/\1/')
			if test "$ver" != "$verm"; then
				unmatched="$unmatched\n$sym\t$ver\t$verm"
			fi
		fi
		let no+=1
	done < <(modprobe --dump-modversions $1)
	# Consolidate
	unresolved=$(echo -e "$unresolved" | sort -u | sed '/^$/d')
	unmatched=$(echo -e "$unmatched" | sort -u | sed '/^$/d')
	# Find undefined unversioned symbols
	need=$(nm $1 | grep '^ *[uU]' | sed "s/^ *[uU] \(.*\)$/\1/")
	provfilt=$(echo "$provided" | sed 's/	.*$//' | sort -u)
	unrefilt=$(echo "$unresolved" | sed 's/	.*$//')
	need=$(echo "$need" | filter_out $provfilt)
	need=$(echo "$need" | filter_out $unrefilt)
	unresolved="$unresolved\n$need"
	unresolved=$(echo -e "$unresolved" | sort -u | sed '/^$/d')
	echo -n "$no imported versioned symbols, "
	echo -n $(echo "$need" | sed '/^$/d' | wc -l)
	echo " unversioned"
	# Append newly found symbols
	crc=$(nm $1 | grep __crc_ | sed "s/^\(00000000\|\)\([0-9a-f]*\) . __crc_\(.*\)$/\3\t\2\t${name%.ko}/")
	provided=$(echo -e "$provided\n$crc" | sort -u | sed '/^$/d')
}

#main
if test -z "$2"; then
	echo "Usage: testmodule Versiondumpfile Module.ko [Module.ko [...]]"
	echo "Versiondumpfile is the file produced by collect_ksyms"
	echo " or the symvers file as produced in the build process"
	exit 3
fi

# List of provided syms
case $1 in
	*.rpm)
		parse_symvers_from_rpm $1
		;;
	*symvers*.gz|*modversions*.gz)
		parse_symvers $1
		;;
	*)
		parse_prov_list $1
		;;
esac		
# Modules to test
while test ! -z "$2"; do
	collect_needed_versions $2
	shift
done
# Summary
rv=0
echo "Unmatched symbol versions: $(echo "$unmatched" | sed '/^$/d' | wc -l)"
test -z "$unmatched" || { echo "$unmatched"; rv=1; }
echo "Unresolved symbols: $(echo "$unresolved" | sed '/^$/d' | wc -l)"
test -z "$unresolved" || { echo "$unresolved"; rv=2; }
exit $rv
 
