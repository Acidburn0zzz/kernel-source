#! /bin/sh

set -e  # exit on errors
#set -x  # trace

export CVS_RSH=ssh
hostname=$(hostname).$(hostname -d)
build=/work/src/bin/build
build_root_base=/abuild/buildsystem.kernel
tools=/work/src/bin/tools
cachesize=1024
keepdays=7
renice=+9
report_lines=300
mailto=root

basename=${0##*/}
basename=${basename/.*}
pidfile=/var/run/$basename.pid

update_and_prepare() {
    local archs=$1 rnums=$2 unchanged=
    cvs_update 2>&1 || unchanged=1
    if [ -z "$unchanged" -o -n "$force_build" ]; then
	tar_up
    fi
    get_release_number "$archs" "$rnums" \
    | su $user -c "cat > $directory/kernel-source/get_release_number.sh"
    return ${unchanged:-0}
}

cvs_update() {
    echo "[update working directory]"
    pushd $directory
    messages=$(su $user -c "cvs update -d -P" 2>&1)
    popd
    echo -n "$messages" 2>&1 | grep -v -e '^cvs server:' -e '^?'
}

tar_up() {
    echo "[packing up sources]"
    pushd $directory
    su $user -c scripts/tar-up.sh
    popd
}

now() {
    date '+%s'
}

elapsed_since() {
    local ts=$[$(now) - $1]
    printf '%d:%02d' $[$ts/60] $[$ts%60]
}

# the BUILD_DIST architecture to use
build_dist() {
    local arch=$1 flavor=$2
    case $(uname -m):$arch:$flavor in
	x86_64:i?86:*)	echo i386 ;;
	ppc64:ppc*:*)	echo ppc ;;
	s390x:*:s390)	echo s390 ;;
	*)		echo $arch ;;
    esac
}


# the name of the build root to use
build_root() {
    local arch=$1 flavor=$2
    echo "$build_root_base.$(build_dist $arch $flavor)"
}

# The architecture emulation wrapper to use (if any).
emulator() {
    local arch=$1 flavor=$2
    case $(uname -m):$arch:$flavor in
	x86_64:i?86:*)	echo linux32 ;;
	ppc64:ppc*:*)	echo powerpc32 ;;
	s390x:*:s390)	echo s390 ;;
    esac
}

in_build_root() {
    local arch=$1 flavor=$2
    shift 2
    $(emulator $arch $flavor) chroot $(build_root $arch $flavor) "$@"
}

ccache_stats() {
    local arch=$1 flavor=$2
    shift 2
    export CCACHE_DIR=.ccache
    if [ -d $(build_root $arch $flavor) ]; then
	in_build_root $arch $flavor ccache "$@"
    fi
}

# Compute the next free release number (m.n) for a particular architecture
last_release_number() {
    local arch=$1
    local abuild_next=$($tools/get_next_release $arch kernel-source $VERSION)

    case $arch in
    i?86)	arch=i586 ;;
    ppc*)	arch=ppc ;;
    esac

    if [ -d $homedir/built ]; then
	set -- $(find $homedir/built/ -name kernel-*-$VERSION-*.$arch.rpm \
				      -o -name kernel-*-$VERSION-*.log.gz \
	| sed -e 's/.*-//' -e "s/\.$arch\.rpm//" \
	      -e "s/\.log\.gz//" -e 's/\./ /' \
	| while read maj min; do
	    echo "$(printf '%4d' $maj) $(printf '%4d' $min)"
	done \
	| sort -r | head -n 1)
    else
	set --
    fi

    if (( $abuild_next > ${1:-0} )); then
	echo $abuild_next.0
    else
	echo ${1:-0}.$[${2:--1}+1]
    fi
}

last_release_numbers() {
    local archs=$1 arch

    for arch in $archs ; do
	last_release_number $arch
    done
}

# Create a suitable get_release_number.sh script
get_release_number() {
    local archs rnums n
    archs=( $1 )
    rnums=( $2 )

    echo 'case $(uname -m) in'
    for (( n=0 ; $n<${#archs[@]} ; n++ )); do
	arch=${archs[$n]}
	case $arch in
	i?86)	arch='i?86' ;;
	esac
	echo -e "$arch)\techo ${rnums[$n]} ;;"
    done
    echo -e '*)\techo $2.0 ;;'
    echo 'esac'
}

build_rpm() {
    local arch=$1 flavor=$2
    shift 2
    echo "[building kernel-$flavor ($arch)]" >&2
    local err=0
    export BUILD_DIST=$build_dist_base${build_dist_base:+-}
    BUILD_DIST=$BUILD_DIST$(build_dist $arch $flavor)
    export BUILD_ROOT=$(build_root $arch $flavor)
    (   cd $directory/kernel-source
	$(emulator $arch $flavor) $build --ccache $jobs "$@" kernel-$flavor.spec
    ) || err=1
    shopt -s nullglob
    rpms=$(echo $BUILD_ROOT/usr/src/packages/RPMS/*/kernel-$flavor-*.rpm \
		$BUILD_ROOT/usr/src/packages/SRPMS/kernel-$flavor-*.rpm)
    shopt -u nullglob
    su $user -c "mkdir -p $homedir/built/$arch"
    if [ -n "$rpms" ]; then
	su $user -c "cp -v $rpms $homedir/built/$arch/"
	if [ $err = 1 ]; then
	    err=2
	fi
    else
	echo "[no rpm created]"
    fi
    return $err
}

# Get certain flavors in front of others
schwartz_sort() {
    for word in "$@"; do
	case $word in
	default)    echo "0 $word" ;;
	smp)	    echo "1 $word" ;;
	*)	    echo "2 $word" ;;
	esac
    done \
    | sort \
    | sed -e 's/^[^ ]\+ //'
}

# Remove packages older than a certain age [days].
remove_old_builds() {
    local days=$1
    local said

    old=$(mktemp /tmp/timestamp.XXXXXX)
    touch -d "$days days ago" $old

    for file in $(find $homedir/built/ -type f); do
	[ $file -ot $old ] || continue
	
	if [ -z "$said" ]; then
	    echo "[removing builds older than $days days]"
	    said=1
	fi
	echo $file
	su $user -c "rm -rf $file"
    done

    rm -f $old
}

# Limit the space used in dir to size [Mib].
limit_size() {
    local size=$1
    local said

    while [ "$(du -s $homedir/built/ \
	       | awk '{print int($1/1024)}')" -gt $size ]; do
	if [ -z "$said" ]; then
	    echo "[shrinking rpm cache]"
	    said=1
	fi
	rpm="$(shopt -s nullglob ; ls -dt $homedir/built/*/*.rpm | tail -n 1)"
	if [ -n "$rpm" ]; then
	    echo "$rpm"
	    su $user -c "rm -f $rpm"
	    su $user -c "rmdir $(dirname $rpm)" 2> /dev/null || :
	else
	    echo "no files to recycle"
	    break
	fi
    done
}

# Run a copy of myself in /tmp, so that the original script can be
# changed more easily.
if [ ${0:0:5} != /tmp/ ]; then
    tmpname=$(mktemp /tmp/${0##*/}.XXXXXX)
    cp -p $0 $tmpname
    exec $tmpname "$@"
    echo "exec failed" >&2
    exit 1  # never reached, usually...
fi

usage() {
    echo "SYNOPSIS: $basename [--force] [--dir ...] [--jobs n] [--flavor ...] [--exclude-flavor ...] [--user ...] [--mailto ...] [--summary-mailto ...] [--build-root-base ...] [--one-done ...] [--dist-base ...] arch ..."
    exit 1
}

options=`getopt -o fh --long dir:,jobs:,flavor:,exclude-flavor:,user:,mailto:,summary-mailto:,force,build-root-base:,one-done:,dist-base: -- "$@"`

if [ $? -ne 0 ]
then
	usage
fi

eval set -- "$options"

while :; do
    case $1 in
    --dir)      homedir=$2
    		shift 2 ;;
    --jobs)	jobs="--jobs $2"
		shift 2 ;;
    --flavor)   opt_flavors="$opt_flavors $2"
		shift 2 ;;
    --exclude-flavor)
    		opt_exclude_flavors="$opt_exclude_flavors $2"
		shift 2 ;;
    --user)	user=$2
		shift 2 ;;
    --mailto)	mailto=$2
		shift 2 ;;
    --summary-mailto)
    		summary_mailto=$2
		shift 2 ;;
    --build-root-base)
    		build_root_base=$2
		shift 2 ;;
    --force)	force_build=1
		shift ;;
    --one-done)	one_done=$2
    		shift 2 ;;
    --dist-base) build_dist_base=$2
    		shift 2 ;;
    --)		shift
		break ;;
    *)		usage ;;
    esac
done

if [ -z "$summary_mailto" -a -n "$mailto" ]; then
    summary_mailto=$mailto
fi

if [ $# == 0 ]; then
    usage
fi

opt_archs="$*"
directory=$homedir/kernel-source-26

# Pull in the kernel configuration
source $directory/scripts/config.sh

# Check for running processes
pid=$(cat $pidfile 2> /dev/null || :)
if [ -n "$pid" ]; then
    if [ -d /proc/$pid ]; then
	# Another instance seems to be running.
	exit 0
    else
	rm -f $pidfile
    fi
fi

# Create pid file (race free)
set -o noclobber
echo $$ > $pidfile \
|| exit 0  # race with another instance
set +o noclobber

cleanup() {
    rm -f $pidfile
    [ ${0:0:5} == /tmp/ -a $0 != ${0/.} ] && rm -f $0
}

trap "cleanup ; exit 0" EXIT

killme() {
    kill -TERM -$$
    cleanup
}
trap "killme ; exit 0" SIGINT SIGQUIT SIGABRT SIGTERM

if [ -e $homedir/force-build ]; then
    force_build=1
    rm -f $homedir/force-build
fi

if ! [ -d $directory ]; then
    echo "Directory $directory does not exist" >&2
    exit 1
fi

# open /dev/null as standard input
exec < /dev/null

archs=( $opt_archs )
rnums=( $(last_release_numbers "${archs[*]}") )
if setup="$(update_and_prepare "${archs[*]}" "${rnums[*]}")" \
   || [ -n "$force_build" ]; then
    cd $homedir
    [ -n "$renice" ] \
    && renice $renice $$ > /dev/null

    su $user -c "mkdir -p $homedir/built"

    batch_start_timestamp=$(now)
    summary=/home/kernel-cvs/current-build.log
    cat >> $summary <<-EOF
	cvs timestamp: $(cat $directory/kernel-source/build-source-timestamp)
	building on: $hostname:$homedir
	build started: $(date '+%Y/%m/%d %H:%M:%S %z')

	EOF

    for (( n=0 ; $n<${#archs[@]} ; n++ )); do
	arch=${archs[$n]}
	rnum=${rnums[$n]}

	if [ -z "$opt_flavors" ]; then
	    flavors=$(schwartz_sort $(
		shopt -s nullglob
		for config in $directory/config/$arch/*; do
		    [ -f $config ] || continue
		    flavor=${config##*/}
		    #[ $flavor = um ] && continue
		    echo $flavor
		done))
	    flavors="$flavors source"
	else
	    flavors=$opt_flavors
	fi

	no_init=
	for flavor in $flavors; do
	    case " $opt_exclude_flavors " in
	    *" $flavor "*)
	    	continue ;;
	    esac

	    if ! [ -e $directory/kernel-source/kernel-$flavor.spec ]; then
		echo "[kernel-$flavor.spec does not exist]"
	    fi

	    ccache_stats $arch $flavor -z > /dev/null  # reset statistics
	    start_timestamp=$(now)

	    status="succeeded"
	    output="$(build_rpm $arch $flavor $no_init --no-checks 2>&1)" \
	    || case $? in
		2)	status="warnings" ;; 
		*)	status="failed" ;;
	    esac

	    su $user -c "mkdir -p $homedir/built/$arch"
	    adir=$homedir/built/$arch
	    logfile=$adir/kernel-$flavor-$VERSION-$rnum.log.gz
	    (   
		echo "[snapshot version]"
		echo "kernel-$flavor-$VERSION-$rnum.$arch.rpm"
		echo -n "cvs timestamp: "
		echo $(cat $directory/kernel-source/build-source-timestamp)
		
		echo "[recent changes]"
		awk '
		/^-+$/	{ if (!n--) exit }
			{ print }
		' n=3 $directory/kernel-source/kernel-source.changes
		
		echo "$setup"
	        
		echo "$output"
		
		echo "[packages]"
		in_build_root $arch $flavor bash -c 'echo $(rpm -qa|sort)' \
		| fmt
		echo

		echo "[statistics]"
		echo "time: $(elapsed_since $start_timestamp)"
		ccache_stats $arch $flavor -s
	    ) | gzip -9 > $logfile
	    chown $user $logfile

	    # Create symlinks to the most recent snapshots
	    for file in $adir/kernel-$flavor-$VERSION-$rnum.*; do
		rm -f ${file/-$VERSION-$rnum}
		su $user -c "ln -sf ${file##*/} ${file/-$VERSION-$rnum}"
	    done
	    
	    cat >> $summary <<-EOF
		kernel-$flavor-$VERSION-$rnum.$arch.rpm $status (time: $(elapsed_since $start_timestamp))
		EOF

	    if [ $status != succeeded ]; then
		(   echo "Logfile: $hostname:$adir/kernel-$flavor-$VERSION-$rnum.log.gz"
		    echo "Mirror: /mounts/dist/kerneltest/$arch/kernel-$flavor-$VERSION-$rnum.log.gz"

		    zcat $logfile \
		    | awk '
		    /\[update working directory\]/ \
		    		{ exit }
		    		{ print }
		    '

		    zgrep error: $logfile

		    echo "\$ zcat ${logfile##*/} | tail -n $report_lines"
		    zcat $logfile | tail -n $report_lines
		) | su $user -c "mail -s \"[cvs build] $arch $flavor $status\" $mailto"
	    fi

	    if [ -n "$one_done" ]; then
	        pushd $homedir/built > /dev/null
		files=$(
		    for file in $arch/kernel-$flavor-$VERSION-$rnum.*; do
			echo $file
			file=${file/-$VERSION-$rnum}
			if [ -e  $file ]; then
			    echo $file
			fi
		    done
		)
		$one_done $files
		popd > /dev/null
	    fi

	    [ -n "$opt_flavor" ] && break

	    # Only need to initialize once for all flavors
	    no_init=--no-init
	done
    done

    cat >> $summary <<-EOF

	total time: $(elapsed_since $batch_start_timestamp)
	EOF

    (   echo
    	remove_old_builds $keepdays
	echo
	limit_size $cachesize
    ) > /dev/null # >> $summary

    cat $summary \
    | su $user -c "mail -s \"[cvs build] ($opt_archs) summary\" $summary_mailto"
    rm -f $summary
fi
