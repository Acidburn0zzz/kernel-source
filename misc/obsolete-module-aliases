#! /usr/bin/perl

use File::Temp qw(tempdir);
use FileHandle;

sub module_aliases($) {
    my ($rpm) = @_;
    my $tempdir = tempdir( TMPDIR => 1, CLEANUP => 1 )
	or die "$0\n";

    unless (-e $rpm) {
	die "$rpm: File not found\n";
    }

    system("rpm2cpio \"$rpm\" | (cd \"$tempdir\" && cpio -dim --quiet)")
	and die "$rpm: $!\n";

    my $modules;
    my $fh = new FileHandle("find $tempdir -name '*.ko' |")
	or die "$rpm: $!\n";
    while (<$fh>) {
	chomp;
	push @$modules, $_;
    }
    $fh->close;

    my $aliases;
    foreach my $module (@$modules) {
	my $basename = $module;
	$basename =~ s<.*/><>;
	$basename =~ s<\.ko$><>;

	my $fh2 = new FileHandle("/sbin/modinfo -F alias \"$module\" |")
	    or die "$module: $!\n";
	while (<$fh2>) {
	    chomp;
	    push @{$aliases->{$basename}}, $_;
	}
	$fh2->close;
    }

    return $aliases
}

unless (@ARGV == 2) {
    print "USAGE: $0 kernel-old.rpm kernel-new.rpm\n";
    print "Checks which modules in the old kernel are obsoleted by which " .
    	  "modules in the new kernel.\n";
    exit 1
}

print STDERR "Extracting module aliases from $ARGV[0]\n";
my $old_modules = module_aliases($ARGV[0]);

print STDERR "Extracting module aliases from $ARGV[1]\n";
my $new_modules = module_aliases($ARGV[1]);

#foreach my $module (sort keys %$old_modules) {
#    foreach my $alias (sort @{$old_modules->{$module}}) {
#	print "old\t$module\t$alias\n";
#    }
#}

#foreach my $module (sort keys %$new_modules) {
#    foreach my $alias (sort @{$new_modules->{$module}}) {
#	print "new\t$module\t$alias\n";
#    }
#}

# Precompile regular expressions for fast matching (the matching
# itself scales quadratically with the number of obsolete modules).
my $regexps;
foreach my $module (keys %$new_modules) {
    foreach my $alias (@{$new_modules->{$module}}) {
	my $re = $alias;
	$re =~ s<\*><.*>g;
	$regexps->{$module}{$alias} = qr<^$re$>;
    }
}

print STDERR "Analyzing modules\n";
foreach my $old_module (sort keys %$old_modules) {
    next if exists $new_modules->{$old_module};

    my $old_aliases = $old_modules->{$old_module};
    my $hardware_aliases = 0;
    foreach my $alias (@$old_aliases) {
	$hardware_aliases++
	    if $alias =~ /:/;
    }
    next unless $hardware_aliases > 0;

    my $matches = 0;
    foreach my $new_module (sort keys %$new_modules) {
	my $matching_aliases = 0;
	foreach my $old_alias (@$old_aliases) {
	    foreach my $new_alias (@{$new_modules->{$new_module}}) {
		my $re = $regexps->{$new_module}{$new_alias};
		$matching_aliases++
		    if $old_alias =~ /$re/;
	    }
	}

	if ($matching_aliases == @$old_aliases) {
	    print "alias\t$old_module\t$new_module\n";
	    $matches++;
	}
    }
    if ($matches == 0) {
	print "# blacklist\t$old_module\n";
    }
}
