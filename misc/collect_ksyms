#!/bin/bash
# collect_ksyms
# 
# Arguments: Kernel version (for installed kernel) or kernel.rpm
# 
# Shell script that extracts lists of exported and used symbols
# from the 2.6 kernel and it's modules.
# The symbols and it's versions are categorized and sorted and displayed.
# 
# (c) Kurt Garloff <garloff@suse.de>, 2004-05-15
# License: GNU GPL.

unset LANG
export LC_ALL=POSIX

crcs=""
needed=""

# Arguments: list of symbols to match
filter()
{
	awk '
		BEGIN   { invert = 0
		  for (i=1; i<ARGC; i++) {
		    sym[ARGV[i]] = 1;
		  }
		  split("", ARGV)
		}
		($1 in sym) { print }
	' "$@"
}
# Arguments: list of symbols to match
filter_out()
{
	awk '
		BEGIN   { invert = 0
		  for (i=1; i<ARGC; i++) {
		    sym[ARGV[i]] = 1;
		  }
		  split("", ARGV)
		}
		!($1 in sym) { print }
	' "$@"
}

# Arguments: filename
# Fills the variables crcs and needed with the symbols it collects
# from the module named $1
collect_sym_file()
{
	test ! -r $1 && return
	#echo "Module $1"
	name=$1; name=${name##*/}; name=${name%.ko}
	syms="$(nm $1)"
	crc=$(echo "$syms" | grep __crc_ | sed "s/^\(00000000\|\)\([0-9a-f]*\) . __crc_\(.*\)$/\3\t\2\t${name}/")
	#need=$(echo "$syms" | grep '^ *[uU]' | sed "s/^ *[uU] \(.*\)$/\1\t${name}/")
	need=$(echo "$syms" | grep '^ *[uU]' | sed "s/^ *[uU] \(.*\)$/\1/")
	if test ! -z "$crc"; then
		#crcs=$(echo -e "$crcs\n$crc")
		crcs="$crcs\n$crc"
	fi
	if test ! -z "$need"; then
		#needed=$(echo -e "$needed\n$need")
		needed="$needed\n$need"
	fi
}

# Arguments: kversion
# Collects the symbols from all modules in the module directory
# for kernel version $1
collect_sym_modules()
{
	dir=$PREFIX/lib/modules/$1
	if test ! -d $dir; then
		echo "$dir does not exist"
		exit 1
	fi
	modules=$(find $dir -name "*.ko")
	for name in $modules; do
		collect_sym_file $name
	done
	echo Modules scanned: $(echo "$modules" | wc -l)
}

# Arguments: kversion
# Collects the symbols from the kernel image (System.map) 
# for kernel version $1
collect_sym_image()
{
	if test -e $PREFIX/boot/vmlinux-$1; then
		collect_sym_file $PREFIX/boot/vmlinux-$1
	elif test -e $PREFIX/boot/System.map-$1; then
#		provided="$(cat $PREFIX/boot/System.map-$1 | grep __kstrtab_ | sed 's/^[0-9a-f]* . __kstrtab_//')"
		crcs="$(cat $PREFIX/boot/System.map-$1 | grep __crc_ | sed 's/^\(00000000\|\)\([0-9a-f]*\) . __crc_\(.*\)$/\3\t\2/')"
	else
		echo "Cannot find kernel image symbols for $1 (prefix $PREFIX)"
		exit 1
	fi
}	

# main
if test -z "$1" -o "$1" = "-h"; then
	echo "Usage: collect_syms VERSION"
	echo "VERSION is the output of uname -r"
	exit 1
fi
# Determine whether we are in RPM mode and collect needed and 
# provided symbols
name=$1
name=${name%.rpm}
if test "$name" = $1; then
	collect_sym_image $1
	collect_sym_modules $1
else
	DIR=$PWD
	VERSION="${name##*kernel-}"
	# SAFE tmp dir creation!
	PREFIX=$(mktemp -d /tmp/kernel-$VERSION.XXXXXX)
	cd $PREFIX
	if test "${name#/}" = "${name}"; then
		unrpm $DIR/$1 >/dev/null 2>&1
	else
		unrpm $1 >/dev/null 2>&1
	fi
	VERSION=${VERSION%.*}
	VERSION=$(echo $VERSION | sed 's/^\([^-]*\)-\(.*\)$/\2-\1/')
	collect_sym_image $VERSION
	collect_sym_modules $VERSION
	cd $DIR
	rm -rf $PREFIX
fi

# Consolidate
needed=$(echo -e "$needed" | sort -k1 -u | sed '/^$/d')
crcs=$(echo -e "$crcs" | sort -u | sed '/^$/d')
echo Needed symbols: $(echo "$needed" | wc -l)
#echo "$needed"
echo Provided symbols with CRC: $(echo "$crcs" | wc -l)
#echo "$crcs"

# And filter ...
#needfilt=$(echo "$needed" | sed 's/	.*$//')
needfilt="$needed"
#echo "Filter: $needfilt"
#echo "$crcs" > crcs
#echo $needfilt > needfilt
used=$(echo "$crcs" | filter $needfilt)
echo Used symbols:"   "$(echo "$used" | wc -l)
echo "$used" | sed 's/\([^	]*\)	\([0-9a-f]*\)/0x\2	\1/'
unused=$(echo "$crcs" | filter_out $needfilt)
echo Unused symbols: $(echo "$unused" | wc -l)
echo "$unused" | sed 's/\([^	]*\)	\([0-9a-f]*\)/0x\2	\1/'
provfilt=$(echo "$crcs" | sed 's/	.*$//')
#echo "Filter: $provfilt"
unresolved=$(echo "$needed" | filter_out $provfilt)
echo Unresolved symbols: $(echo "$unresolved" | sed '/^$/d' | wc -l)
echo "$unresolved"

