From: jbeulich@novell.com
Subject: Fix Xen compilation with multicore scheduler

The Xen guest doesn't know anything about topology, so just
suppress it.

Index: head-2006-06-06/arch/i386/Kconfig
===================================================================
--- head-2006-06-06.orig/arch/i386/Kconfig	2006-06-06 12:51:45.000000000 +0200
+++ head-2006-06-06/arch/i386/Kconfig	2006-06-06 12:54:15.000000000 +0200
@@ -251,7 +251,7 @@ config SCHED_SMT
 
 config SCHED_MC
 	bool "Multi-core scheduler support"
-	depends on SMP
+	depends on SMP && !X86_XEN
 	help
 	  Multi-core scheduler support improves the CPU scheduler's decision
 	  making when dealing with multi-core CPU chips at a cost of slightly
Index: head-2006-06-06/arch/i386/kernel/cpu/intel_cacheinfo.c
===================================================================
--- head-2006-06-06.orig/arch/i386/kernel/cpu/intel_cacheinfo.c	2006-06-06 12:51:13.000000000 +0200
+++ head-2006-06-06/arch/i386/kernel/cpu/intel_cacheinfo.c	2006-06-06 12:54:15.000000000 +0200
@@ -174,7 +174,7 @@ unsigned int __cpuinit init_intel_cachei
 	unsigned int new_l1d = 0, new_l1i = 0; /* Cache sizes from cpuid(4) */
 	unsigned int new_l2 = 0, new_l3 = 0, i; /* Cache sizes from cpuid(4) */
 	unsigned int l2_id = 0, l3_id = 0, num_threads_sharing, index_msb;
-#ifdef CONFIG_SMP
+#if defined(CONFIG_SMP) && !defined(CONFIG_XEN)
 	unsigned int cpu = (c == &boot_cpu_data) ? 0 : (c - cpu_data);
 #endif
 
@@ -285,14 +285,14 @@ unsigned int __cpuinit init_intel_cachei
 
 		if (new_l2) {
 			l2 = new_l2;
-#ifdef CONFIG_SMP
+#if defined(CONFIG_SMP) && !defined(CONFIG_XEN)
 			cpu_llc_id[cpu] = l2_id;
 #endif
 		}
 
 		if (new_l3) {
 			l3 = new_l3;
-#ifdef CONFIG_SMP
+#if defined(CONFIG_SMP) && !defined(CONFIG_XEN)
 			cpu_llc_id[cpu] = l3_id;
 #endif
 		}
Index: head-2006-06-06/arch/i386/kernel/cpu/common-xen.c
===================================================================
--- head-2006-06-06.orig/arch/i386/kernel/cpu/common-xen.c	2006-06-06 12:51:13.000000000 +0200
+++ head-2006-06-06/arch/i386/kernel/cpu/common-xen.c	2006-06-06 12:54:15.000000000 +0200
@@ -260,7 +260,7 @@ static void __init early_cpu_detect(void
 void __devinit generic_identify(struct cpuinfo_x86 * c)
 {
 	u32 tfms, xlvl;
-	int junk;
+	int ebx;
 
 	if (have_cpuid_p()) {
 		/* Get vendor name */
@@ -276,7 +276,7 @@ void __devinit generic_identify(struct c
 		/* Intel-defined flags: level 0x00000001 */
 		if ( c->cpuid_level >= 0x00000001 ) {
 			u32 capability, excap;
-			cpuid(0x00000001, &tfms, &junk, &excap, &capability);
+			cpuid(0x00000001, &tfms, &ebx, &excap, &capability);
 			c->x86_capability[0] = capability;
 			c->x86_capability[4] = excap;
 			c->x86 = (tfms >> 8) & 15;
@@ -286,6 +286,11 @@ void __devinit generic_identify(struct c
 			if (c->x86 >= 0x6)
 				c->x86_model += ((tfms >> 16) & 0xF) << 4;
 			c->x86_mask = tfms & 15;
+#ifdef CONFIG_SMP
+			c->apicid = phys_pkg_id((ebx >> 24) & 0xFF, 0);
+#else
+			c->apicid = (ebx >> 24) & 0xFF;
+#endif
 		} else {
 			/* Have CPUID level 0 only - unheard of */
 			c->x86 = 4;
@@ -464,8 +469,6 @@ void __devinit detect_ht(struct cpuinfo_
 
 	cpuid(1, &eax, &ebx, &ecx, &edx);
 
-	c->apicid = phys_pkg_id((ebx >> 24) & 0xFF, 0);
-
 	if (!cpu_has(c, X86_FEATURE_HT) || cpu_has(c, X86_FEATURE_CMP_LEGACY))
 		return;
 
Index: head-2006-06-06/arch/x86_64/Kconfig
===================================================================
--- head-2006-06-06.orig/arch/x86_64/Kconfig	2006-06-06 12:51:45.000000000 +0200
+++ head-2006-06-06/arch/x86_64/Kconfig	2006-06-06 12:54:15.000000000 +0200
@@ -273,7 +273,7 @@ config SCHED_SMT
 
 config SCHED_MC
 	bool "Multi-core scheduler support"
-	depends on SMP
+	depends on SMP && !X86_64_XEN
 	help
 	  Multi-core scheduler support improves the CPU scheduler's decision
 	  making when dealing with multi-core CPU chips at a cost of slightly
Index: head-2006-06-06/arch/x86_64/kernel/setup-xen.c
===================================================================
--- head-2006-06-06.orig/arch/x86_64/kernel/setup-xen.c	2006-06-06 12:54:07.000000000 +0200
+++ head-2006-06-06/arch/x86_64/kernel/setup-xen.c	2006-06-06 12:54:15.000000000 +0200
@@ -1186,8 +1186,6 @@ static void __cpuinit detect_ht(struct c
 
 	cpuid(1, &eax, &ebx, &ecx, &edx);
 
-	c->apicid = phys_pkg_id(0);
-
 	if (!cpu_has(c, X86_FEATURE_HT) || cpu_has(c, X86_FEATURE_CMP_LEGACY))
 		return;
 
@@ -1395,6 +1393,8 @@ void __cpuinit identify_cpu(struct cpuin
 			c->x86_capability[2] = cpuid_edx(0x80860001);
 	}
 
+	c->apicid = phys_pkg_id(0);
+
 	/*
 	 * Vendor-specific initialization.  In this section we
 	 * canonicalize the feature flags, meaning if there are
