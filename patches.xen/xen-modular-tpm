Subject: Allow tpm{back,front} to be built as modules
From: jbeulich@novell.com

Index: head-2006-03-02/drivers/xen/tpmback/common.h
===================================================================
--- head-2006-03-02.orig/drivers/xen/tpmback/common.h	2006-03-02 10:28:08.000000000 +0100
+++ head-2006-03-02/drivers/xen/tpmback/common.h	2006-03-02 11:26:41.000000000 +0100
@@ -54,9 +54,11 @@ typedef struct tpmif_st {
 void tpmif_disconnect_complete(tpmif_t * tpmif);
 tpmif_t *tpmif_find(domid_t domid, long int instance);
 void tpmif_interface_init(void);
+void tpmif_interface_exit(void);
 void tpmif_schedule_work(tpmif_t * tpmif);
 void tpmif_deschedule_work(tpmif_t * tpmif);
 void tpmif_xenbus_init(void);
+void tpmif_xenbus_exit(void);
 int tpmif_map(tpmif_t *tpmif, unsigned long shared_page, unsigned int evtchn);
 irqreturn_t tpmif_be_int(int irq, void *dev_id, struct pt_regs *regs);
 int tpmif_vtpm_open(tpmif_t *tpmif, domid_t domain, u32 instance);
Index: head-2006-03-02/drivers/xen/tpmback/interface.c
===================================================================
--- head-2006-03-02.orig/drivers/xen/tpmback/interface.c	2006-03-02 10:28:08.000000000 +0100
+++ head-2006-03-02/drivers/xen/tpmback/interface.c	2006-03-02 11:26:41.000000000 +0100
@@ -186,6 +186,12 @@ tpmif_interface_init(void)
 					 0, 0, NULL, NULL);
 }
 
+void __init
+tpmif_interface_exit(void)
+{
+	kmem_cache_destroy(tpmif_cachep);
+}
+
 /*
  * Local variables:
  *  c-file-style: "linux"
Index: head-2006-03-02/drivers/xen/tpmback/tpmback.c
===================================================================
--- head-2006-03-02.orig/drivers/xen/tpmback/tpmback.c	2006-03-02 10:28:08.000000000 +0100
+++ head-2006-03-02/drivers/xen/tpmback/tpmback.c	2006-03-02 11:26:41.000000000 +0100
@@ -1092,7 +1092,20 @@ tpmback_init(void)
 	return 0;
 }
 
-__initcall(tpmback_init);
+module_init(tpmback_init);
+
+static void __exit
+tpmback_exit(void)
+{
+
+	tpmif_xenbus_exit();
+	tpmif_interface_exit();
+	misc_deregister(&ibmvtpms_miscdevice);
+}
+
+module_exit(tpmback_exit);
+
+MODULE_LICENSE("Dual BSD/GPL");
 
 /*
  * Local variables:
Index: head-2006-03-02/drivers/xen/tpmback/xenbus.c
===================================================================
--- head-2006-03-02.orig/drivers/xen/tpmback/xenbus.c	2006-03-02 10:28:08.000000000 +0100
+++ head-2006-03-02/drivers/xen/tpmback/xenbus.c	2006-03-02 11:26:41.000000000 +0100
@@ -317,6 +317,11 @@ void tpmif_xenbus_init(void)
 	xenbus_register_backend(&tpmback);
 }
 
+void tpmif_xenbus_exit(void)
+{
+	xenbus_unregister_driver(&tpmback);
+}
+
 /*
  * Local variables:
  *  c-file-style: "linux"
Index: head-2006-03-02/drivers/xen/tpmfront/tpmfront.c
===================================================================
--- head-2006-03-02.orig/drivers/xen/tpmfront/tpmfront.c	2006-03-02 10:28:08.000000000 +0100
+++ head-2006-03-02/drivers/xen/tpmfront/tpmfront.c	2006-03-02 11:26:41.000000000 +0100
@@ -480,6 +480,11 @@ static void __init init_tpm_xenbus(void)
 	xenbus_register_frontend(&tpmfront);
 }
 
+static void __exit exit_tpm_xenbus(void)
+{
+	xenbus_unregister_driver(&tpmfront);
+}
+
 
 static int
 tpm_allocate_buffers(struct tpm_private *tp)
@@ -700,7 +705,18 @@ tpmif_init(void)
 	return 0;
 }
 
-__initcall(tpmif_init);
+module_init(tpmif_init);
+
+static void __exit
+tpmif_exit(void)
+{
+	exit_tpm_xenbus();
+	gnttab_free_grant_references(gref_head);
+}
+
+module_exit(tpmif_exit);
+
+MODULE_LICENSE("Dual BSD/GPL");
 
 /*
  * Local variables:
