From: Jiri Kosina <jkosina@suse.cz>
Subject: i386 and x86_64: randomize brk()
References: FATE120276

Randomize the location of the heap (brk) for i386 and x86_64.  The range is
randomized in the range starting at current brk location up to 0x02000000
offset for both architectures.  This, together with
pie-executable-randomization.patch and
pie-executable-randomization-fix.patch, should make the address space
randomization on i386 and x86_64 complete.

Arjan says:

This is known to break older versions of some emacs variants, whose dumper
code assumed that the last variable declared in the program is equal to the
start of the dynamically allocated memory region.

(The dumper is the code where emacs effectively dumps core at the end of it's
compilation stage; this coredump is then loaded as the main program during
normal use)

iirc this was 5 years or so; we found this way back when I was at RH and we
first did the security stuff there (including this brk randomization).  It
wasn't all variants of emacs, and it got fixed as a result (I vaguely remember
that emacs already had code to deal with it for other archs/oses, just
ifdeffed wrongly).

It's a rare and wrong assumption as a general thing, just on x86 it mostly
happened to be true (but to be honest, it'll break too if gcc does
something fancy or if the linker does a non-standard order).  Still its
something we should at least document.

Note 2: afaik it only broke the emacs *build*.  I'm not 100% sure about that
(it IS 5 years ago) though.

Signed-off-by: Jiri Kosina <jkosina@suse.cz>
Cc: Arjan van de Ven <arjan@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@elte.hu>
Cc: Roland McGrath <roland@redhat.com>
Cc: Jakub Jelinek <jakub@redhat.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Automatically created from "patches.suse/aslr-i386-and-x86_64-randomize-brk.patch" by xen-port-patches.py

Index: head-2008-01-28/arch/x86/kernel/process_32-xen.c
===================================================================
--- head-2008-01-28.orig/arch/x86/kernel/process_32-xen.c	2008-01-28 13:48:04.000000000 +0100
+++ head-2008-01-28/arch/x86/kernel/process_32-xen.c	2008-01-28 13:48:16.000000000 +0100
@@ -923,3 +923,10 @@ unsigned long arch_align_stack(unsigned 
 		sp -= get_random_int() % 8192;
 	return sp & ~0xf;
 }
+
+unsigned long arch_randomize_brk(struct mm_struct *mm)
+{
+	unsigned long range_end = mm->brk + 0x02000000;
+	return randomize_range(mm->brk, range_end, 0) ? : mm->brk;
+}
+
Index: head-2008-01-28/arch/x86/kernel/process_64-xen.c
===================================================================
--- head-2008-01-28.orig/arch/x86/kernel/process_64-xen.c	2008-01-28 13:46:47.000000000 +0100
+++ head-2008-01-28/arch/x86/kernel/process_64-xen.c	2008-01-28 13:48:16.000000000 +0100
@@ -892,6 +892,12 @@ unsigned long arch_align_stack(unsigned 
 	return sp & ~0xf;
 }
 
+unsigned long arch_randomize_brk(struct mm_struct *mm)
+{
+	unsigned long range_end = mm->brk + 0x02000000;
+	return randomize_range(mm->brk, range_end, 0) ? : mm->brk;
+}
+
 #ifndef CONFIG_SMP
 void _restore_vcpu(void)
 {
