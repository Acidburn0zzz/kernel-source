From: Thomas Renninger <trenn@suse.de>
Subject: x86 cpumask xen: Updates to support NR_CPUS=4096
References: Additional cpumask fixups
Patch-mainline: 2.6.28

Signed-off-by: Thomas Renninger <trenn@suse.de>

  * This patch modifies the Xen files to use cpumask_t pointers in
    function calls to the send_IPI_mask functions.

Signed-off-by: Mike Travis <travis@sgi.com>
Acked-by: Rusty Russell <rusty@rustcorp.com.au>
---
 arch/x86/kernel/genapic_xen_64.c     |   19 ++++++++++---------
 arch/x86/kernel/io_apic_64-xen.c     |    8 ++++----
 arch/x86/kernel/ipi-xen.c            |   24 +++++++++---------------
 arch/x86/kernel/smp-xen.c            |    6 +++---
 arch/x86/xen/smp.c                   |   13 ++++++-------
 include/asm-x86/mach-xen/mach_apic.h |    8 ++++----
 6 files changed, 36 insertions(+), 42 deletions(-)

Index: linux-2.6.27/arch/x86/kernel/genapic_xen_64.c
===================================================================
--- linux-2.6.27.orig/arch/x86/kernel/genapic_xen_64.c
+++ linux-2.6.27/arch/x86/kernel/genapic_xen_64.c
@@ -64,14 +64,15 @@ void xen_send_IPI_shortcut(unsigned int 
 	}
 }
 
-static cpumask_t xen_target_cpus(void)
+static cpumask_t* xen_target_cpus(cpumask_t *retmask)
 {
-	return cpu_online_map;
+	return &cpu_online_map;
 }
 
-static cpumask_t xen_vector_allocation_domain(int cpu)
+static void xen_vector_allocation_domain(int cpu, cpumask_t *retmask)
 {
-	return cpumask_of_cpu(cpu);
+	cpus_clear(*retmask);
+	cpu_set(cpu, *retmask);
 }
 
 /*
@@ -98,9 +99,9 @@ static void xen_send_IPI_all(int vector)
 	xen_send_IPI_shortcut(APIC_DEST_ALLINC, vector);
 }
 
-static void xen_send_IPI_mask(cpumask_t cpumask, int vector)
+static void xen_send_IPI_mask(const cpumask_t *cpumask, int vector)
 {
-	unsigned long mask = cpus_addr(cpumask)[0];
+	unsigned long mask = cpus_addr(*cpumask)[0];
 	unsigned int cpu;
 	unsigned long flags;
 
@@ -108,7 +109,7 @@ static void xen_send_IPI_mask(cpumask_t 
 	WARN_ON(mask & ~cpus_addr(cpu_online_map)[0]);
 
 	for_each_possible_cpu(cpu) {
-		if (cpu_isset(cpu, cpumask)) {
+		if (cpu_isset(cpu, *cpumask)) {
 			__send_IPI_one(cpu, vector);
 		}
 	}
@@ -123,9 +124,9 @@ static int xen_apic_id_registered(void)
 }
 #endif
 
-static unsigned int xen_cpu_mask_to_apicid(cpumask_t cpumask)
+static unsigned int xen_cpu_mask_to_apicid(const cpumask_t *cpumask)
 {
-	return cpus_addr(cpumask)[0];
+	return cpus_addr(*cpumask)[0];
 }
 
 static unsigned int phys_pkg_id(int index_msb)
Index: linux-2.6.27/arch/x86/kernel/io_apic_64-xen.c
===================================================================
--- linux-2.6.27.orig/arch/x86/kernel/io_apic_64-xen.c
+++ linux-2.6.27/arch/x86/kernel/io_apic_64-xen.c
@@ -854,7 +854,7 @@ static void setup_IO_APIC_irq(int apic, 
 	if (!IO_APIC_IRQ(irq))
 		return;
 
-	mask = TARGET_CPUS;
+	mask = *TARGET_CPUS;
 	if (assign_irq_vector(irq, mask))
 		return;
 
@@ -875,7 +875,7 @@ static void setup_IO_APIC_irq(int apic, 
 
 	entry.delivery_mode = INT_DELIVERY_MODE;
 	entry.dest_mode = INT_DEST_MODE;
-	entry.dest = cpu_mask_to_apicid(mask);
+	entry.dest = cpu_mask_to_apicid(&mask);
 	entry.mask = 0;				/* enable IRQ */
 	entry.trigger = trigger;
 	entry.polarity = polarity;
@@ -1381,7 +1381,7 @@ static int ioapic_retrigger_irq(unsigned
 	unsigned long flags;
 
 	spin_lock_irqsave(&vector_lock, flags);
-	send_IPI_mask(cpumask_of_cpu(first_cpu(cfg->domain)), cfg->vector);
+	send_IPI_mask(&cpumask_of_cpu(first_cpu(cfg->domain)), cfg->vector);
 	spin_unlock_irqrestore(&vector_lock, flags);
 
 	return 1;
@@ -1446,7 +1446,7 @@ static void irq_complete_move(unsigned i
 
 		cpus_and(cleanup_mask, cfg->old_domain, cpu_online_map);
 		cfg->move_cleanup_count = cpus_weight(cleanup_mask);
-		send_IPI_mask(cleanup_mask, IRQ_MOVE_CLEANUP_VECTOR);
+		send_IPI_mask(&cleanup_mask, IRQ_MOVE_CLEANUP_VECTOR);
 		cfg->move_in_progress = 0;
 	}
 }
Index: linux-2.6.27/arch/x86/kernel/ipi-xen.c
===================================================================
--- linux-2.6.27.orig/arch/x86/kernel/ipi-xen.c
+++ linux-2.6.27/arch/x86/kernel/ipi-xen.c
@@ -148,12 +148,11 @@ static inline void __send_IPI_dest_field
 /*
  * This is only used on smaller machines.
  */
-void send_IPI_mask_bitmask(cpumask_t cpumask, int vector)
+void send_IPI_mask_bitmask(const cpumask_t *cpumask, int vector)
 {
 #ifndef CONFIG_XEN
-	unsigned long mask = cpus_addr(cpumask)[0];
+	unsigned long mask = cpus_addr(*cpumask)[0];
 #else
-	cpumask_t mask;
 	unsigned int cpu;
 #endif
 	unsigned long flags;
@@ -163,16 +162,14 @@ void send_IPI_mask_bitmask(cpumask_t cpu
 	WARN_ON(mask & ~cpus_addr(cpu_online_map)[0]);
 	__send_IPI_dest_field(mask, vector);
 #else
-	cpus_andnot(mask, cpumask, cpu_online_map);
-	WARN_ON(!cpus_empty(mask));
-	for_each_online_cpu(cpu)
-		if (cpu_isset(cpu, cpumask))
-			__send_IPI_one(cpu, vector);
+	WARN_ON(!cpus_subset(*cpumask, cpu_online_map));
+	for_each_cpu_mask_and(cpu, *cpumask, cpu_online_map)
+		__send_IPI_one(cpu, vector);
 #endif
 	local_irq_restore(flags);
 }
 
-void send_IPI_mask_sequence(cpumask_t mask, int vector)
+void send_IPI_mask_sequence(const cpumask_t *mask, int vector)
 {
 #ifndef CONFIG_XEN
 	unsigned long flags;
@@ -185,12 +182,9 @@ void send_IPI_mask_sequence(cpumask_t ma
 	 */
 
 	local_irq_save(flags);
-	for_each_possible_cpu(query_cpu) {
-		if (cpu_isset(query_cpu, mask)) {
-			__send_IPI_dest_field(cpu_to_logical_apicid(query_cpu),
-					      vector);
-		}
-	}
+	for_each_cpu_mask(query_cpu, *mask)
+		__send_IPI_dest_field(cpu_to_logical_apicid(query_cpu), vector);
+
 	local_irq_restore(flags);
 #else
 	send_IPI_mask_bitmask(mask, vector);
Index: linux-2.6.27/arch/x86/xen/smp.c
===================================================================
--- linux-2.6.27.orig/arch/x86/xen/smp.c
+++ linux-2.6.27/arch/x86/xen/smp.c
@@ -157,7 +157,7 @@ static void __init xen_fill_possible_map
 {
 	int i, rc;
 
-	for (i = 0; i < NR_CPUS; i++) {
+	for (i = 0; i < nr_cpu_ids; i++) {
 		rc = HYPERVISOR_vcpu_op(VCPUOP_is_up, i, NULL);
 		if (rc >= 0) {
 			num_processors++;
@@ -195,7 +195,7 @@ static void __init xen_smp_prepare_cpus(
 
 	/* Restrict the possible_map according to max_cpus. */
 	while ((num_possible_cpus() > 1) && (num_possible_cpus() > max_cpus)) {
-		for (cpu = NR_CPUS - 1; !cpu_possible(cpu); cpu--)
+		for (cpu = nr_cpu_ids - 1; !cpu_possible(cpu); cpu--)
 			continue;
 		cpu_clear(cpu, cpu_possible_map);
 	}
@@ -361,13 +361,11 @@ static void xen_smp_send_reschedule(int 
 	xen_send_IPI_one(cpu, XEN_RESCHEDULE_VECTOR);
 }
 
-static void xen_send_IPI_mask(cpumask_t mask, enum ipi_vector vector)
+static void xen_send_IPI_mask(const cpumask_t *mask, enum ipi_vector vector)
 {
 	unsigned cpu;
 
-	cpus_and(mask, mask, cpu_online_map);
-
-	for_each_cpu_mask_nr(cpu, mask)
+	for_each_cpu_mask_and(cpu, *mask, cpu_online_map)
 		xen_send_IPI_one(cpu, vector);
 }
 
@@ -388,7 +386,8 @@ static void xen_smp_send_call_function_i
 
 static void xen_smp_send_call_function_single_ipi(int cpu)
 {
-	xen_send_IPI_mask(cpumask_of_cpu(cpu), XEN_CALL_FUNCTION_SINGLE_VECTOR);
+	xen_send_IPI_mask(&cpumask_of_cpu(cpu),
+			  XEN_CALL_FUNCTION_SINGLE_VECTOR);
 }
 
 static irqreturn_t xen_call_function_interrupt(int irq, void *dev_id)
Index: linux-2.6.27/include/asm-x86/mach-xen/mach_apic.h
===================================================================
--- linux-2.6.27.orig/include/asm-x86/mach-xen/mach_apic.h
+++ linux-2.6.27/include/asm-x86/mach-xen/mach_apic.h
@@ -19,9 +19,9 @@ extern void setup_apic_routing(void);
 #else
 
 #ifdef CONFIG_SMP
-#define TARGET_CPUS cpu_online_map
+#define TARGET_CPUS &cpu_online_map
 #else
-#define TARGET_CPUS cpumask_of_cpu(0)
+#define TARGET_CPUS &cpumask_of_cpu(0)
 #endif
 
 #define INT_DELIVERY_MODE dest_LowestPrio
@@ -46,9 +46,9 @@ static inline int apicid_to_node(int log
 	return 0;
 }
 
-static inline unsigned int cpu_mask_to_apicid(cpumask_t cpumask)
+static inline unsigned int cpu_mask_to_apicid(const cpumask_t *cpumask)
 {
-	return cpus_addr(cpumask)[0];
+	return cpus_addr(*cpumask)[0];
 }
 
 #endif /* CONFIG_X86_64 */
Index: linux-2.6.27/arch/x86/kernel/smp-xen.c
===================================================================
--- linux-2.6.27.orig/arch/x86/kernel/smp-xen.c
+++ linux-2.6.27/arch/x86/kernel/smp-xen.c
@@ -118,17 +118,17 @@ void xen_smp_send_reschedule(int cpu)
 		WARN_ON(1);
 		return;
 	}
-	send_IPI_mask(cpumask_of_cpu(cpu), RESCHEDULE_VECTOR);
+	send_IPI_mask(&cpumask_of_cpu(cpu), RESCHEDULE_VECTOR);
 }
 
 void xen_send_call_func_single_ipi(int cpu)
 {
-	send_IPI_mask(cpumask_of_cpu(cpu), CALL_FUNC_SINGLE_VECTOR);
+	send_IPI_mask(&cpumask_of_cpu(cpu), CALL_FUNC_SINGLE_VECTOR);
 }
 
 void xen_send_call_func_ipi(cpumask_t mask)
 {
-	send_IPI_mask(mask, CALL_FUNCTION_VECTOR);
+	send_IPI_mask(&mask, CALL_FUNCTION_VECTOR);
 }
 
 static void stop_this_cpu(void *dummy)
