From: Kurt Garloff <garloff@suse.de>
Subject: [PATCH] X86(Xen): sysctl to allow panic on IOCK NMI error
References: bnc427979

This patch introduces a sysctl /proc/sys/kernel/panic_on_io_nmi.,
which defaults to 0 (off).
When enabled, the kernel panics when the kernel receives an NMI
caused by an IO error.

The IO error triggered NMI indicates a serious system condition,
which could result in IO data corruption. Rather than contiuing,
panicing and dumping might be a better choice, so one can figure
out what's causing the IO error.
This could be especially important to companies running IO intensive
applications where corruption must be avoided, e.g. a banks databases.


Signed-off-by: Roberto Angelino <robertangelino@gmail.com>

diff -Nrp -U6 linux-2.6.27/arch/x86/kernel/traps_64-xen.c linux-2.6.27.nmi/arch/x86/kernel/traps_64-xen.c
--- linux-2.6.27/arch/x86/kernel/traps_64-xen.c	2008-11-18 09:54:58.000000000 +0100
+++ linux-2.6.27.nmi/arch/x86/kernel/traps_64-xen.c	2008-11-18 10:12:34.000000000 +0100
@@ -53,12 +53,13 @@
 #include <asm/pda.h>
 #include <asm/traps.h>
 
 #include <mach_traps.h>
 
 int panic_on_unrecovered_nmi;
+int panic_on_io_nmi;
 int kstack_depth_to_print = 12;
 static unsigned int code_bytes = 64;
 #ifdef CONFIG_STACK_UNWIND
 static int call_trace = 1;
 #else
 #define call_trace (-1)
@@ -838,12 +839,15 @@ mem_parity_error(unsigned char reason, s
 static notrace __kprobes void
 io_check_error(unsigned char reason, struct pt_regs *regs)
 {
 	printk("NMI: IOCK error (debug interrupt?)\n");
 	show_registers(regs);
 
+	if (panic_on_io_nmi)
+		panic("NMI IOCK error: Not continuing");
+
 	/* Re-enable the IOCK line, wait for a few seconds */
 	clear_io_check_error(reason);
 }
 
 static notrace __kprobes void
 unknown_nmi_error(unsigned char reason, struct pt_regs * regs)
diff -Nrp -U6 linux-2.6.27/arch/x86/kernel/traps_32-xen.c linux-2.6.27.nmi/arch/x86/kernel/traps_32-xen.c
--- linux-2.6.27/arch/x86/kernel/traps_32-xen.c	2008-11-18 09:54:58.000000000 +0100
+++ linux-2.6.27.nmi/arch/x86/kernel/traps_32-xen.c	2008-11-18 10:12:27.000000000 +0100
@@ -80,12 +80,13 @@ char ignore_fpu_irq;
  */
 gate_desc idt_table[256]
 	__attribute__((__section__(".data.idt"))) = { { { { 0, 0 } } }, };
 #endif
 
 int panic_on_unrecovered_nmi;
+int panic_on_io_nmi;
 int kstack_depth_to_print = 24;
 static unsigned int code_bytes = 64;
 #ifdef CONFIG_STACK_UNWIND
 static int call_trace = 1;
 #else
 #define call_trace (-1)
@@ -735,12 +736,15 @@ mem_parity_error(unsigned char reason, s
 static notrace __kprobes void
 io_check_error(unsigned char reason, struct pt_regs *regs)
 {
 	printk(KERN_EMERG "NMI: IOCK error (debug interrupt?)\n");
 	show_registers(regs);
 
+	if (panic_on_io_nmi)
+		panic("NMI IOCK error: Not continuing");
+
 	/* Re-enable the IOCK line, wait for a few seconds */
 	clear_io_check_error(reason);
 }
 
 static notrace __kprobes void
 unknown_nmi_error(unsigned char reason, struct pt_regs *regs)

