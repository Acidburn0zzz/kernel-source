From: jbeulich@novell.com
Subject: get rid of the E820 tables
References: 160861

... to make clear that no relevant state is actually maintained in there.

Index: head-2006-05-26/arch/i386/kernel/setup-xen.c
===================================================================
--- head-2006-05-26.orig/arch/i386/kernel/setup-xen.c	2006-05-31 15:43:00.000000000 +0200
+++ head-2006-05-26/arch/i386/kernel/setup-xen.c	2006-05-31 15:58:44.000000000 +0200
@@ -152,7 +152,9 @@ struct ist_info ist_info;
 	defined(CONFIG_X86_SPEEDSTEP_SMI_MODULE)
 EXPORT_SYMBOL(ist_info);
 #endif
+#ifndef CONFIG_XEN
 struct e820map e820;
+#endif
 
 extern void early_cpu_init(void);
 extern void generic_apic_probe(char *);
@@ -394,6 +396,7 @@ EXPORT_SYMBOL(phys_to_machine_mapping);
 start_info_t *xen_start_info;
 EXPORT_SYMBOL(xen_start_info);
 
+#ifndef CONFIG_XEN
 static void __init limit_regions(unsigned long long size)
 {
 	unsigned long long current_addr = 0;
@@ -487,7 +490,6 @@ static void __init print_memory_map(char
 	}
 }
 
-#if 0
 /*
  * Sanitize the BIOS e820 map.
  *
@@ -742,7 +744,9 @@ static void __init parse_cmdline_early (
 {
 	char c = ' ', *to = command_line, *from = saved_command_line;
 	int len = 0, max_cmdline;
+#ifndef CONFIG_XEN
 	int userdef = 0;
+#endif
 
 	if ((max_cmdline = MAX_GUEST_CMDLINE) > COMMAND_LINE_SIZE)
 		max_cmdline = COMMAND_LINE_SIZE;
@@ -790,6 +794,7 @@ static void __init parse_cmdline_early (
 			}
 		}
 
+#ifndef CONFIG_XEN
 		else if (!memcmp(from, "memmap=", 7)) {
 			if (to != command_line)
 				to--;
@@ -831,6 +836,7 @@ static void __init parse_cmdline_early (
 				}
 			}
 		}
+#endif
 
 		else if (!memcmp(from, "noexec=", 7))
 			noexec_setup(from + 7);
@@ -975,10 +981,12 @@ static void __init parse_cmdline_early (
 	}
 	*to = '\0';
 	*cmdline_p = command_line;
+#ifndef CONFIG_XEN
 	if (userdef) {
 		printk(KERN_INFO "user-defined physical RAM map:\n");
 		print_memory_map("user");
 	}
+#endif
 }
 
 #if 0 /* !XEN */
@@ -1181,6 +1189,7 @@ unsigned long __init find_max_low_pfn(vo
 	return max_low_pfn;
 }
 
+#ifndef CONFIG_XEN
 /*
  * Free all available memory for boot time allocation.  Used
  * as a callback function by efi_memory_walk()
@@ -1199,11 +1208,14 @@ free_available_memory(unsigned long star
 
 	return 0;
 }
+#endif
+
 /*
  * Register fully available low RAM pages with the bootmem allocator.
  */
 static void __init register_bootmem_low_pages(unsigned long max_low_pfn)
 {
+#ifndef CONFIG_XEN
 	int i;
 
 	if (efi_enabled) {
@@ -1241,6 +1253,13 @@ static void __init register_bootmem_low_
 		size = last_pfn - curr_pfn;
 		free_bootmem(PFN_PHYS(curr_pfn), PFN_PHYS(size));
 	}
+#else
+	unsigned long size = xen_start_info->nr_pages;
+
+	if (size > max_low_pfn)
+		size = max_low_pfn;
+	free_bootmem(0, PFN_PHYS(size));
+#endif
 }
 
 #ifndef CONFIG_XEN
@@ -1774,12 +1793,14 @@ void __init setup_arch(char **cmdline_p)
 	setup_xen_features();
 
 	ARCH_SETUP
+#ifndef CONFIG_XEN
 	if (efi_enabled)
 		efi_init();
 	else {
 		printk(KERN_INFO "BIOS-provided physical RAM map:\n");
 		print_memory_map(machine_specific_memory_setup());
 	}
+#endif
 
 	copy_edd();
 
Index: head-2006-05-26/arch/x86_64/kernel/e820-xen.c
===================================================================
--- head-2006-05-26.orig/arch/x86_64/kernel/e820-xen.c	2006-05-31 15:43:00.000000000 +0200
+++ head-2006-05-26/arch/x86_64/kernel/e820-xen.c	2006-05-31 15:53:07.000000000 +0200
@@ -33,9 +33,10 @@ unsigned long pci_mem_start = 0xaeedbabe
  */
 unsigned long end_pfn; 
 EXPORT_SYMBOL(end_pfn);
-unsigned long end_user_pfn = MAXMEM>>PAGE_SHIFT;  
+static unsigned long __initdata end_user_pfn;
 unsigned long end_pfn_map; 
 
+#ifndef CONFIG_XEN
 /* 
  * Add a memory region to the kernel e820 map.
  */ 
@@ -54,8 +55,6 @@ void __init add_memory_region(unsigned l
 	e820.nr_map++;
 }
 
-#ifndef CONFIG_XEN
-
 /* 
  * end_pfn only includes RAM, while end_pfn_map includes all e820 entries.
  * The direct mapping extends to end_pfn_map, so that we can directly access
@@ -352,6 +351,7 @@ int __init e820_all_mapped(unsigned long
 }
 #endif /* CONFIG_XEN */
 
+#ifndef CONFIG_XEN
 void __init e820_print_map(char *who)
 {
 	int i;
@@ -378,7 +378,6 @@ void __init e820_print_map(char *who)
 	}
 }
 
-#ifndef CONFIG_XEN
 /*
  * Sanitize the BIOS e820 map.
  *
@@ -636,19 +635,18 @@ void __init setup_memory_region(void)
 
 #else  /* CONFIG_XEN */
 
-extern unsigned long xen_override_max_pfn;
 extern union xen_start_info_union xen_start_info_union;
 
 unsigned long __init e820_end_of_ram(void)
 {
 	unsigned long max_end_pfn;
 
-	if (xen_override_max_pfn == 0) {
+	if (end_user_pfn == 0) {
 		max_end_pfn = xen_start_info->nr_pages;
 		/* Default 8MB slack (to balance backend allocations). */
 		max_end_pfn += 8 << (20 - PAGE_SHIFT);
-	} else if (xen_override_max_pfn > xen_start_info->nr_pages) {
-		max_end_pfn = xen_override_max_pfn;
+	} else if (end_user_pfn > xen_start_info->nr_pages) {
+		max_end_pfn = end_user_pfn;
 	} else {
 		max_end_pfn = xen_start_info->nr_pages;
 	}
@@ -733,9 +731,9 @@ void __init parse_memopt(char *p, char *
 { 
 	end_user_pfn = memparse(p, from);
 	end_user_pfn >>= PAGE_SHIFT;	
-	xen_override_max_pfn = (unsigned long) end_user_pfn;
 } 
 
+#ifndef CONFIG_XEN
 void __init parse_memmapopt(char *p, char **from)
 {
 	unsigned long long start_at, mem_size;
@@ -756,6 +754,7 @@ void __init parse_memmapopt(char *p, cha
 	}
 	p = *from;
 }
+#endif
 
 /*
  * Search for the biggest gap in the low 32 bits of the e820
Index: head-2006-05-26/arch/x86_64/kernel/setup-xen.c
===================================================================
--- head-2006-05-26.orig/arch/x86_64/kernel/setup-xen.c	2006-05-31 15:43:00.000000000 +0200
+++ head-2006-05-26/arch/x86_64/kernel/setup-xen.c	2006-05-31 15:58:44.000000000 +0200
@@ -88,9 +88,6 @@ EXPORT_SYMBOL(HYPERVISOR_shared_info);
 extern char hypercall_page[PAGE_SIZE];
 EXPORT_SYMBOL(hypercall_page);
 
-/* Allows setting of maximum possible memory size  */
-unsigned long xen_override_max_pfn;
-
 unsigned long *phys_to_machine_mapping;
 unsigned long *pfn_to_mfn_frame_list_list, *pfn_to_mfn_frame_list[512];
 
@@ -137,7 +134,9 @@ struct sys_desc_table_struct {
 };
 
 struct edid_info edid_info;
+#ifndef CONFIG_XEN
 struct e820map e820;
+#endif
 
 extern int root_mountflags;
 
@@ -316,7 +315,9 @@ static __init void parse_cmdline_early (
 {
 	char c = ' ', *to = command_line, *from = COMMAND_LINE;
 	int len = 0;
+#ifndef CONFIG_XEN
 	int userdef = 0;
+#endif
 
 	for (;;) {
 		if (c != ' ') 
@@ -396,6 +397,7 @@ static __init void parse_cmdline_early (
 		if (!memcmp(from, "mem=", 4))
 			parse_memopt(from+4, &from); 
 
+#ifndef CONFIG_XEN
 		if (!memcmp(from, "memmap=", 7)) {
 			/* exactmap option is for used defined memory */
 			if (!memcmp(from+7, "exactmap", 8)) {
@@ -417,6 +419,7 @@ static __init void parse_cmdline_early (
 				userdef = 1;
 			}
 		}
+#endif
 
 #ifdef CONFIG_NUMA
 		if (!memcmp(from, "numa=", 5))
@@ -476,10 +479,12 @@ static __init void parse_cmdline_early (
 			break;
 		*(to++) = c;
 	}
+#ifndef CONFIG_XEN
 	if (userdef) {
 		printk(KERN_INFO "user-defined physical RAM map:\n");
 		e820_print_map("user");
 	}
+#endif
 	*to = '\0';
 	*cmdline_p = command_line;
 }
Index: head-2006-05-26/include/asm-i386/mach-xen/setup_arch_post.h
===================================================================
--- head-2006-05-26.orig/include/asm-i386/mach-xen/setup_arch_post.h	2006-05-31 15:43:00.000000000 +0200
+++ head-2006-05-26/include/asm-i386/mach-xen/setup_arch_post.h	2006-05-08 16:04:28.000000000 +0200
@@ -1,21 +1,9 @@
 /**
- * machine_specific_memory_setup - Hook for machine specific memory setup.
- *
  * Description:
  *	This is included late in kernel/setup.c so that it can make
  *	use of all of the static functions.
  **/
 
-static char * __init machine_specific_memory_setup(void)
-{
-	unsigned long max_pfn = xen_start_info->nr_pages;
-
-	e820.nr_map = 0;
-	add_memory_region(0, PFN_PHYS(max_pfn), E820_RAM);
-
-	return "Xen";
-}
-
 extern void hypervisor_callback(void);
 extern void failsafe_callback(void);
 extern void nmi(void);
Index: head-2006-05-26/include/asm-i386/mach-xen/setup_arch_pre.h
===================================================================
--- head-2006-05-26.orig/include/asm-i386/mach-xen/setup_arch_pre.h	2006-05-31 15:43:00.000000000 +0200
+++ head-2006-05-26/include/asm-i386/mach-xen/setup_arch_pre.h	2006-05-08 16:04:28.000000000 +0200
@@ -3,3 +3,9 @@
 #define ARCH_SETUP machine_specific_arch_setup();
 
 static void __init machine_specific_arch_setup(void);
+
+static inline char * machine_specific_memory_setup(void)
+{
+	return "Xen";
+}
+
