From: jbeulich@novell.com
Subject: miscellaneous initialization code cleanup
Patch-mainline: obsolete

Index: head-2007-10-23/arch/x86_64/kernel/head-xen.S
===================================================================
--- head-2007-10-23.orig/arch/x86_64/kernel/head-xen.S	2007-10-23 11:08:03.000000000 +0200
+++ head-2007-10-23/arch/x86_64/kernel/head-xen.S	2007-10-18 16:28:18.000000000 +0200
@@ -52,7 +52,6 @@ ENTRY(name)
 
 NEXT_PAGE(init_level4_pgt)
 	.fill	512,8,0
-NEXT_PAGE(init_level4_user_pgt)
         /*
          * We update two pgd entries to make kernel and user pgd consistent
          * at pgd_populate(). It can be used for kernel modules. So we place 
Index: head-2007-10-23/arch/x86_64/kernel/setup-xen.c
===================================================================
--- head-2007-10-23.orig/arch/x86_64/kernel/setup-xen.c	2007-10-23 16:34:20.000000000 +0200
+++ head-2007-10-23/arch/x86_64/kernel/setup-xen.c	2007-10-23 16:34:36.000000000 +0200
@@ -437,28 +437,18 @@ void __init setup_arch(char **cmdline_p)
         */
        acpi_reserve_bootmem();
 #endif
-#ifdef CONFIG_XEN
 #ifdef CONFIG_BLK_DEV_INITRD
+#ifndef CONFIG_XEN
+	if (LOADER_TYPE && INITRD_START) {
+#else
 	if (xen_start_info->mod_start) {
-		if (INITRD_START + INITRD_SIZE <= (end_pfn << PAGE_SHIFT)) {
-			/*reserve_bootmem_generic(INITRD_START, INITRD_SIZE);*/
-			initrd_start = INITRD_START + PAGE_OFFSET;
-			initrd_end = initrd_start+INITRD_SIZE;
-			initrd_below_start_ok = 1;
-		} else {
-			printk(KERN_ERR "initrd extends beyond end of memory "
-				"(0x%08lx > 0x%08lx)\ndisabling initrd\n",
-				(unsigned long)(INITRD_START + INITRD_SIZE),
-				(unsigned long)(end_pfn << PAGE_SHIFT));
-			initrd_start = 0;
-		}
-	}
 #endif
-#else	/* CONFIG_XEN */
-#ifdef CONFIG_BLK_DEV_INITRD
-	if (LOADER_TYPE && INITRD_START) {
 		if (INITRD_START + INITRD_SIZE <= (end_pfn << PAGE_SHIFT)) {
+#ifndef CONFIG_XEN
 			reserve_bootmem_generic(INITRD_START, INITRD_SIZE);
+#else
+			initrd_below_start_ok = 1;
+#endif
 			initrd_start = INITRD_START + PAGE_OFFSET;
 			initrd_end = initrd_start+INITRD_SIZE;
 		}
@@ -471,7 +461,6 @@ void __init setup_arch(char **cmdline_p)
 		}
 	}
 #endif
-#endif	/* !CONFIG_XEN */
 #ifdef CONFIG_KEXEC
 #ifdef CONFIG_XEN
 	xen_machine_kexec_setup_resources();
Index: head-2007-10-23/arch/x86_64/mm/init-xen.c
===================================================================
--- head-2007-10-23.orig/arch/x86_64/mm/init-xen.c	2007-10-24 14:20:41.000000000 +0200
+++ head-2007-10-23/arch/x86_64/mm/init-xen.c	2007-10-24 14:21:12.000000000 +0200
@@ -61,6 +61,8 @@ unsigned int __kernel_page_user;
 EXPORT_SYMBOL(__kernel_page_user);
 #endif
 
+int after_bootmem;
+
 extern unsigned long *contiguous_bitmap;
 
 DEFINE_PER_CPU(struct mmu_gather, mmu_gathers);
@@ -89,6 +91,11 @@ static void __meminit early_make_page_re
 	if (xen_feature(feature))
 		return;
 
+	if (after_bootmem) {
+		make_page_readonly(va, feature);
+		return;
+	}
+
 	addr = (unsigned long) page[pgd_index(_va)];
 	addr_to_page(addr, page);
 
@@ -217,8 +224,6 @@ void show_mem(void)
 	printk(KERN_INFO "%lu pages swap cached\n",cached);
 }
 
-int after_bootmem;
-
 static __init void *spp_getpage(void)
 { 
 	void *ptr;
@@ -494,9 +499,9 @@ phys_pmd_init(pmd_t *pmd_page, unsigned 
 		for (k = 0; k < PTRS_PER_PTE; pte++, k++, address += PTE_SIZE) {
 			unsigned long pteval = address | _PAGE_NX | _KERNPG_TABLE;
 
-			if ((address >= end) ||
-			    ((address >> PAGE_SHIFT) >=
-			     xen_start_info->nr_pages))
+			if (address >= (after_bootmem
+			                ? end
+			                : xen_start_info->nr_pages << PAGE_SHIFT))
 				pteval = 0;
 			else if (make_readonly(address))
 				pteval &= ~_PAGE_RW;
@@ -696,7 +701,7 @@ static void __init find_early_table_spac
 		(table_start << PAGE_SHIFT) + tables);
 }
 
-static void xen_finish_init_mapping(void)
+static void __init xen_finish_init_mapping(void)
 {
 	unsigned long i, start, end;
 
