From: jbeulich@novell.com
Subject: miscellaneous initialization code cleanup
Patch-mainline: obsolete

Index: head-2008-07-15/arch/x86/mm/init_64-xen.c
===================================================================
--- head-2008-07-15.orig/arch/x86/mm/init_64-xen.c	2008-07-15 18:54:48.000000000 +0200
+++ head-2008-07-15/arch/x86/mm/init_64-xen.c	2008-07-15 18:57:40.000000000 +0200
@@ -57,6 +57,8 @@ unsigned int __kernel_page_user;
 EXPORT_SYMBOL(__kernel_page_user);
 #endif
 
+int after_bootmem;
+
 extern unsigned long *contiguous_bitmap;
 
 DEFINE_PER_CPU(struct mmu_gather, mmu_gathers);
@@ -118,6 +120,8 @@ void __meminit early_make_page_readonly(
 	pte_t pte, *ptep;
 	unsigned long *page = (unsigned long *) init_level4_pgt;
 
+	BUG_ON(after_bootmem);
+
 	if (xen_feature(feature))
 		return;
 
@@ -182,7 +186,6 @@ void show_mem(void)
 
 static unsigned long __meminitdata table_start;
 static unsigned long __meminitdata table_end;
-int after_bootmem;
 
 static __init void *spp_getpage(void)
 {
@@ -302,6 +305,12 @@ set_pte_phys_ma(unsigned long vaddr, uns
 	new_pte = pfn_pte_ma(phys >> PAGE_SHIFT, prot);
 
 	pte = pte_offset_kernel(pmd, vaddr);
+	if (!pte_none(*pte) && __pte_val(new_pte) &&
+	    /* __acpi_map_table() fails to properly call clear_fixmap() */
+	    (vaddr < __fix_to_virt(FIX_ACPI_END) ||
+	     vaddr > __fix_to_virt(FIX_ACPI_BEGIN)) &&
+	    __pte_val(*pte) != (__pte_val(new_pte) & __supported_pte_mask))
+		pte_ERROR(*pte);
 	set_pte(pte, new_pte);
 
 	/*
@@ -385,11 +394,6 @@ static __meminit void *alloc_static_page
 
 #define PTE_SIZE PAGE_SIZE
 
-static inline void __set_pte(pte_t *dst, pte_t val)
-{
-	*dst = val;
-}
-
 static inline int __meminit make_readonly(unsigned long paddr)
 {
 	extern char __vsyscall_0;
@@ -484,13 +488,8 @@ phys_pmd_init(pmd_t *pmd_page, unsigned 
 		pte_t *pte, *pte_save;
 		int k;
 
-		if (address >= end) {
-			if (!after_bootmem) {
-				for (; i < PTRS_PER_PMD; i++, pmd++)
-					set_pmd(pmd, __pmd(0));
-			}
+		if (address >= end)
 			break;
-		}
 
 		if (__pmd_val(*pmd)) {
 			address += PMD_SIZE;
@@ -502,17 +501,21 @@ phys_pmd_init(pmd_t *pmd_page, unsigned 
 		for (k = 0; k < PTRS_PER_PTE; pte++, k++, address += PTE_SIZE) {
 			unsigned long pteval = address | _PAGE_NX | _KERNPG_TABLE;
 
-			if ((address >= end) ||
-			    ((address >> PAGE_SHIFT) >=
-			     xen_start_info->nr_pages))
+			if (address >= (after_bootmem
+			                ? end
+			                : xen_start_info->nr_pages << PAGE_SHIFT))
 				pteval = 0;
 			else if (make_readonly(address))
 				pteval &= ~_PAGE_RW;
-			__set_pte(pte, __pte(pteval & __supported_pte_mask));
+			set_pte(pte, __pte(pteval & __supported_pte_mask));
+		}
+		if (!after_bootmem) {
+			early_make_page_readonly(pte_save, XENFEAT_writable_page_tables);
+			*pmd = __pmd(pte_phys | _KERNPG_TABLE);
+		} else {
+			make_page_readonly(pte_save, XENFEAT_writable_page_tables);
+			set_pmd(pmd, __pmd(pte_phys | _KERNPG_TABLE));
 		}
-		pte = pte_save;
-		early_make_page_readonly(pte, XENFEAT_writable_page_tables);
-		set_pmd(pmd, __pmd(pte_phys | _KERNPG_TABLE));
 	}
 	return address;
 }
@@ -558,12 +561,13 @@ phys_pud_init(pud_t *pud_page, unsigned 
 		}
 
 		pmd = alloc_static_page(&pmd_phys);
-		early_make_page_readonly(pmd, XENFEAT_writable_page_tables);
 
 		spin_lock(&init_mm.page_table_lock);
-		set_pud(pud, __pud(pmd_phys | _KERNPG_TABLE));
+		*pud = __pud(pmd_phys | _KERNPG_TABLE);
 		last_map_addr = phys_pmd_init(pmd, addr, end);
 		spin_unlock(&init_mm.page_table_lock);
+
+		early_make_page_readonly(pmd, XENFEAT_writable_page_tables);
 	}
 	__flush_tlb_all();
 
@@ -939,20 +943,18 @@ unsigned long __init_refok init_memory_m
 		unsigned long pud_phys;
 		pud_t *pud;
 
-		if (after_bootmem) {
+		if (after_bootmem)
 			pud = pud_offset(pgd, start & PGDIR_MASK);
-			make_page_readonly(pud, XENFEAT_writable_page_tables);
-			pud_phys = __pa(pud);
-		} else {
+		else
 			pud = alloc_static_page(&pud_phys);
-			early_make_page_readonly(pud, XENFEAT_writable_page_tables);
-		}
 		next = start + PGDIR_SIZE;
 		if (next > end)
 			next = end;
 		last_map_addr = phys_pud_init(pud, __pa(start), __pa(next));
-		if (!after_bootmem)
+		if (!after_bootmem) {
+			early_make_page_readonly(pud, XENFEAT_writable_page_tables);
 			set_pgd(pgd_offset_k(start), mk_kernel_pgd(pud_phys));
+		}
 	}
 
 	if (!after_bootmem) {
Index: head-2008-07-15/arch/x86/kernel/process_64-xen.c
===================================================================
--- head-2008-07-15.orig/arch/x86/kernel/process_64-xen.c	2008-07-15 18:54:48.000000000 +0200
+++ head-2008-07-15/arch/x86/kernel/process_64-xen.c	2008-07-15 14:50:23.000000000 +0200
@@ -900,9 +900,3 @@ unsigned long arch_randomize_brk(struct 
 	unsigned long range_end = mm->brk + 0x02000000;
 	return randomize_range(mm->brk, range_end, 0) ? : mm->brk;
 }
-
-#ifndef CONFIG_SMP
-void _restore_vcpu(void)
-{
-}
-#endif
