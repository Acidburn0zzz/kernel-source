Subject: xen3 x86 build fixes.
From: jbeulich@novell.com
Patch-mainline: obsolete

Index: head-2007-12-11/arch/x86/kernel/Makefile_64
===================================================================
--- head-2007-12-11.orig/arch/x86/kernel/Makefile_64	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/arch/x86/kernel/Makefile_64	2007-12-11 10:46:05.000000000 +0100
@@ -25,8 +25,7 @@ obj-$(CONFIG_X86_XEN_GENAPIC)	+= genapic
 obj-y				+= io_apic_64.o mpparse_64.o genapic_64.o genapic_flat_64.o
 obj-$(CONFIG_KEXEC)		+= machine_kexec_64.o relocate_kernel_64.o crash.o
 obj-$(CONFIG_CRASH_DUMP)	+= crash_dump_64.o
-obj-$(CONFIG_SOFTWARE_SUSPEND)	+= suspend_64.o
-obj-$(CONFIG_ACPI_SLEEP)	+= suspend_64.o
+obj-$(CONFIG_PM)		+= suspend_64.o
 obj-$(CONFIG_HIBERNATION)	+= suspend_asm_64.o
 obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o
 obj-$(CONFIG_GART_IOMMU)	+= pci-gart_64.o aperture_64.o
@@ -49,5 +48,5 @@ CFLAGS_vsyscall_64.o		:= $(PROFILING) -g
 time-$(CONFIG_XEN)		+= ../../i386/kernel/time.o
 pci-dma-$(CONFIG_XEN)		+= ../../i386/kernel/pci-dma.o
 
-disabled-obj-$(CONFIG_XEN)	:= i8259.o reboot.o smpboot.o trampoline.o
+disabled-obj-$(CONFIG_XEN)	:= i8259.o reboot.o smpboot.o suspend.o trampoline.o
 %/head.o %/head.s: $(if $(CONFIG_XEN),EXTRA_AFLAGS,dummy) :=
Index: head-2007-12-11/arch/x86/kernel/crash.c
===================================================================
--- head-2007-12-11.orig/arch/x86/kernel/crash.c	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/arch/x86/kernel/crash.c	2007-12-11 10:46:05.000000000 +0100
@@ -32,10 +32,10 @@
 #include <asm/mach_apic.h>
 #endif
 
+#ifndef CONFIG_XEN
 /* This keeps a track of which one is crashing cpu. */
 static int crashing_cpu;
 
-#ifndef CONFIG_XEN
 #if defined(CONFIG_SMP) && defined(CONFIG_X86_LOCAL_APIC)
 static atomic_t waiting_for_crash_ipi;
 
@@ -136,9 +136,9 @@ void machine_crash_shutdown(struct pt_re
 	/* The kernel is broken so disable interrupts */
 	local_irq_disable();
 
+#ifndef CONFIG_XEN
 	/* Make a note of crashing cpu. Will be used in NMI callback.*/
 	crashing_cpu = safe_smp_processor_id();
-#ifndef CONFIG_XEN
 	nmi_shootdown_cpus();
 	lapic_shutdown();
 #if defined(CONFIG_X86_IO_APIC)
Index: head-2007-12-11/arch/x86/kernel/pci-swiotlb_64-xen.c
===================================================================
--- head-2007-12-11.orig/arch/x86/kernel/pci-swiotlb_64-xen.c	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/arch/x86/kernel/pci-swiotlb_64-xen.c	2007-12-11 10:46:05.000000000 +0100
@@ -13,6 +13,8 @@ int swiotlb __read_mostly;
 EXPORT_SYMBOL(swiotlb);
 #endif
 
+void swiotlb_init(void);
+
 struct dma_mapping_ops swiotlb_dma_ops = {
 #if 0
 	.mapping_error = swiotlb_dma_mapping_error,
Index: head-2007-12-11/arch/x86/kernel/process_64-xen.c
===================================================================
--- head-2007-12-11.orig/arch/x86/kernel/process_64-xen.c	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/arch/x86/kernel/process_64-xen.c	2007-12-11 10:46:05.000000000 +0100
@@ -465,13 +465,6 @@ out:
 	return err;
 }
 
-static inline void __save_init_fpu( struct task_struct *tsk )
-{
-	asm volatile( "rex64 ; fxsave %0 ; fnclex"
-		      : "=m" (tsk->thread.i387.fxsave));
-	tsk->thread_info->status &= ~TS_USEDFPU;
-}
-
 /*
  *	switch_to(x,y) should switch tasks from x to y.
  *
Index: head-2007-12-11/arch/x86/kernel/suspend_64.c
===================================================================
--- head-2007-12-11.orig/arch/x86/kernel/suspend_64.c	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/arch/x86/kernel/suspend_64.c	2007-12-11 10:46:05.000000000 +0100
@@ -115,14 +115,12 @@ void restore_processor_state(void)
 
 void fix_processor_context(void)
 {
-#ifndef CONFIG_X86_NO_TSS    
 	int cpu = smp_processor_id();
 	struct tss_struct *t = &per_cpu(init_tss, cpu);
 
 	set_tss_desc(cpu,t);	/* This just modifies memory; should not be necessary. But... This is necessary, because 386 hardware has concept of busy TSS or some similar stupidity. */
 
 	cpu_gdt(cpu)[GDT_ENTRY_TSS].type = 9;
-#endif
 
 	syscall_init();                         /* This sets MSR_*STAR and related */
 	load_TR_desc();				/* This does ltr */
Index: head-2007-12-11/arch/x86/power/Makefile
===================================================================
--- head-2007-12-11.orig/arch/x86/power/Makefile	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/arch/x86/power/Makefile	2007-12-11 11:51:38.000000000 +0100
@@ -1,4 +1,4 @@
-obj-$(subst m,y,$(CONFIG_APM))	+= cpu.o
-obj-$(CONFIG_SOFTWARE_SUSPEND)	+= cpu.o
-obj-$(CONFIG_ACPI_SLEEP)	+= cpu.o
+obj-$(CONFIG_PM)		+= cpu.o
 obj-$(CONFIG_HIBERNATION)	+= swsusp.o suspend.o
+
+disabled-obj-$(CONFIG_XEN)	:= cpu.o
Index: head-2007-12-11/include/asm-x86/i387_64.h
===================================================================
--- head-2007-12-11.orig/include/asm-x86/i387_64.h	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/include/asm-x86/i387_64.h	2007-12-11 10:46:05.000000000 +0100
@@ -191,10 +191,15 @@ static inline void kernel_fpu_end(void)
 	preempt_enable();
 }
 
-static inline void save_init_fpu(struct task_struct *tsk)
+static inline void __save_init_fpu(struct task_struct *tsk)
 {
  	__fxsave_clear(tsk);
 	task_thread_info(tsk)->status &= ~TS_USEDFPU;
+}
+
+static inline void save_init_fpu(struct task_struct *tsk)
+{
+	__save_init_fpu(tsk);
 	stts();
 }
 
Index: head-2007-12-11/kdb/kdba_bt_x86.c
===================================================================
--- head-2007-12-11.orig/kdb/kdba_bt_x86.c	2007-12-11 11:51:08.000000000 +0100
+++ head-2007-12-11/kdb/kdba_bt_x86.c	2007-12-11 10:46:05.000000000 +0100
@@ -3164,6 +3164,9 @@ bb_usage_mov(const struct bb_operand *sr
 	    bb_is_int_reg(dst->base_rc) &&
 	    full_register_dst) {
 #ifndef	CONFIG_X86_64
+#ifndef TSS_sysenter_esp0
+#define TSS_sysenter_esp0 SYSENTER_stack_esp0
+#endif
 		/* mov from TSS_sysenter_esp0+offset to esp to fix up the
 		 * sysenter stack, it leaves esp well defined.  mov
 		 * TSS_sysenter_esp0+offset(%esp),%esp is followed by up to 5
