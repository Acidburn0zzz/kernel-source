Subject: xen3: 2.6.13 adaptions (i386).
From: jbeulich@novell.com

$subject says all.

Signed-off-by: Gerd Knorr <kraxel@suse.de>
Index: xen-2005-08-19/include/asm-xen/asm-i386/io.h
===================================================================
--- xen-2005-08-19.orig/include/asm-xen/asm-i386/io.h	2005-08-19 14:40:55.956896792 +0200
+++ xen-2005-08-19/include/asm-xen/asm-i386/io.h	2005-08-19 14:41:47.283094024 +0200
@@ -362,7 +362,7 @@
 #endif
 
 
-#if __UNSAFE_IO__
+#ifdef __UNSAFE_IO__
 #define ____BUILDIO(bwl,bw,type) \
 static inline void out##bwl##_local(unsigned type value, int port) { \
 	__asm__ __volatile__("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port)); \
Index: xen-2005-08-19/drivers/xen/blktap/blktap_controlmsg.c
===================================================================
--- xen-2005-08-19.orig/drivers/xen/blktap/blktap_controlmsg.c	2005-08-19 14:40:55.955896944 +0200
+++ xen-2005-08-19/drivers/xen/blktap/blktap_controlmsg.c	2005-08-19 14:41:47.286093568 +0200
@@ -8,8 +8,8 @@
  *
  */
  
-#include "blktap.h"
 #include <asm-xen/evtchn.h>
+#include "blktap.h"
 
 static char *blkif_state_name[] = {
     [BLKIF_STATE_CLOSED]       = "closed",
Index: xen-2005-08-19/arch/xen/kernel/vmlinux-i386.lds.S
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xen-2005-08-19/arch/xen/kernel/vmlinux-i386.lds.S	2005-08-19 14:41:47.287093416 +0200
@@ -0,0 +1,134 @@
+/* ld script to make i386 Linux kernel
+ * Written by Martin Mares <mj@atrey.karlin.mff.cuni.cz>;
+ */
+
+#include <asm-generic/vmlinux.lds.h>
+#include <asm/thread_info.h>
+#include <asm/page.h>
+
+OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
+OUTPUT_ARCH(i386)
+ENTRY(startup_32)
+jiffies = jiffies_64;
+SECTIONS
+{
+  . = __PAGE_OFFSET + 0x100000;
+  /* read-only */
+  _text = .;			/* Text and read-only data */
+  .text : {
+	*(.text)
+	SCHED_TEXT
+	LOCK_TEXT
+	*(.fixup)
+	*(.gnu.warning)
+	} = 0x9090
+
+  _etext = .;			/* End of text section */
+
+  . = ALIGN(16);		/* Exception table */
+  __start___ex_table = .;
+  __ex_table : { *(__ex_table) }
+  __stop___ex_table = .;
+
+  RODATA
+
+  /* writeable */
+  .data : {			/* Data */
+	*(.data)
+	CONSTRUCTORS
+	}
+
+  . = ALIGN(4096);
+  __nosave_begin = .;
+  .data_nosave : { *(.data.nosave) }
+  . = ALIGN(4096);
+  __nosave_end = .;
+
+  . = ALIGN(4096);
+  .data.page_aligned : { *(.data.idt) }
+
+  . = ALIGN(32);
+  .data.cacheline_aligned : { *(.data.cacheline_aligned) }
+
+  _edata = .;			/* End of data section */
+
+  . = ALIGN(THREAD_SIZE);	/* init_task */
+  .data.init_task : { *(.data.init_task) }
+
+  /* will be freed after init */
+  . = ALIGN(4096);		/* Init code and data */
+  __init_begin = .;
+  .init.text : {
+	_sinittext = .;
+	*(.init.text)
+	_einittext = .;
+  }
+  .init.data : { *(.init.data) }
+  . = ALIGN(16);
+  __setup_start = .;
+  .init.setup : { *(.init.setup) }
+  __setup_end = .;
+  __initcall_start = .;
+  .initcall.init : {
+	*(.initcall1.init)
+	*(.initcall2.init)
+	*(.initcall3.init)
+	*(.initcall4.init)
+	*(.initcall5.init)
+	*(.initcall6.init)
+	*(.initcall7.init)
+  }
+  __initcall_end = .;
+  __con_initcall_start = .;
+  .con_initcall.init : { *(.con_initcall.init) }
+  __con_initcall_end = .;
+  SECURITY_INIT
+  . = ALIGN(4);
+  __alt_instructions = .;
+  .altinstructions : { *(.altinstructions) }
+  __alt_instructions_end = .;
+ .altinstr_replacement : { *(.altinstr_replacement) }
+  /* .exit.text is discard at runtime, not link time, to deal with references
+     from .altinstructions and .eh_frame */
+  .exit.text : { *(.exit.text) }
+  .exit.data : { *(.exit.data) }
+  . = ALIGN(4096);
+  __initramfs_start = .;
+  .init.ramfs : { *(.init.ramfs) }
+  __initramfs_end = .;
+  . = ALIGN(32);
+  __per_cpu_start = .;
+  .data.percpu  : { *(.data.percpu) }
+  __per_cpu_end = .;
+  . = ALIGN(4096);
+  __init_end = .;
+  /* freed after init ends here */
+
+  __bss_start = .;		/* BSS */
+  .bss : {
+	*(.bss.page_aligned)
+	*(.bss)
+  }
+  . = ALIGN(4);
+  __bss_stop = .;
+
+  _end = . ;
+
+  /* This is where the kernel creates the early boot page tables */
+  . = ALIGN(4096);
+  pg0 = .;
+
+  /* Sections to be discarded */
+  /DISCARD/ : {
+	*(.exitcall.exit)
+	}
+
+  /* Stabs debugging sections.  */
+  .stab 0 : { *(.stab) }
+  .stabstr 0 : { *(.stabstr) }
+  .stab.excl 0 : { *(.stab.excl) }
+  .stab.exclstr 0 : { *(.stab.exclstr) }
+  .stab.index 0 : { *(.stab.index) }
+  .stab.indexstr 0 : { *(.stab.indexstr) }
+  .comment 0 : { *(.comment) }
+}
Index: xen-2005-08-19/arch/xen/kernel/Makefile
===================================================================
--- xen-2005-08-19.orig/arch/xen/kernel/Makefile	2005-08-19 14:40:55.954897096 +0200
+++ xen-2005-08-19/arch/xen/kernel/Makefile	2005-08-19 14:41:47.289093112 +0200
@@ -7,7 +7,7 @@
 CPPFLAGS_vmlinux.lds += -U$(XENARCH)
 
 $(obj)/vmlinux.lds.S:
-	@ln -fsn $(srctree)/arch/$(XENARCH)/kernel/vmlinux.lds.S $@
+	@ln -fsn $(srctree)/arch/xen/kernel/vmlinux-$(XENARCH).lds.S $@
 
 extra-y += vmlinux.lds
 
Index: xen-2005-08-19/arch/i386/power/cpu.c
===================================================================
--- xen-2005-08-19.orig/arch/i386/power/cpu.c	2005-08-19 08:48:43.000000000 +0200
+++ xen-2005-08-19/arch/i386/power/cpu.c	2005-08-19 15:10:39.238796736 +0200
@@ -84,6 +84,9 @@
 	struct tss_struct * t = &per_cpu(init_tss, cpu);
 
 	set_tss_desc(cpu,t);	/* This just modifies memory; should not be necessary. But... This is necessary, because 386 hardware has concept of busy TSS or some similar stupidity. */
+ #ifndef CONFIG_XEN
+ 	/* set_tss_desc already clears the busy bit on xen*/
         per_cpu(cpu_gdt_table, cpu)[GDT_ENTRY_TSS].b &= 0xfffffdff;
+ #endif
 
 	load_TR_desc();				/* This does ltr */
 	load_LDT(&current->active_mm->context);	/* This does lldt */
