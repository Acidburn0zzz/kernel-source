From: www.kernel.org
Subject: Linux 2.6.18
Patch-mainline: 2.6.18

Automatically created from "patches.kernel.org/patch-2.6.18" by xen-port-patches.py

Acked-by: jbeulich@novell.com

Index: head-2008-07-21/arch/x86/Kconfig
===================================================================
--- head-2008-07-21.orig/arch/x86/Kconfig	2008-07-21 14:13:10.000000000 +0200
+++ head-2008-07-21/arch/x86/Kconfig	2008-07-21 14:21:46.000000000 +0200
@@ -37,7 +37,6 @@ config GENERIC_LOCKBREAK
 
 config GENERIC_TIME
 	def_bool y
-	depends on !X86_XEN
 
 config GENERIC_CMOS_UPDATE
 	def_bool y
Index: head-2008-07-21/arch/x86/kernel/Makefile
===================================================================
--- head-2008-07-21.orig/arch/x86/kernel/Makefile	2008-07-21 13:28:37.000000000 +0200
+++ head-2008-07-21/arch/x86/kernel/Makefile	2008-07-21 14:21:46.000000000 +0200
@@ -111,5 +111,5 @@ ifeq ($(CONFIG_X86_64),y)
 	pci-dma_64-$(CONFIG_XEN)	+= pci-dma_32.o
 endif
 
-disabled-obj-$(CONFIG_XEN) := i8259_$(BITS).o reboot.o smpboot_$(BITS).o
+disabled-obj-$(CONFIG_XEN) := i8253.o i8259_$(BITS).o reboot.o smpboot_$(BITS).o tsc_$(BITS).o
 %/head_$(BITS).o %/head_$(BITS).s: $(if $(CONFIG_XEN),EXTRA_AFLAGS,dummy) :=
Index: head-2008-07-21/arch/x86/kernel/entry_32-xen.S
===================================================================
--- head-2008-07-21.orig/arch/x86/kernel/entry_32-xen.S	2007-12-10 08:47:31.000000000 +0100
+++ head-2008-07-21/arch/x86/kernel/entry_32-xen.S	2008-07-21 14:21:46.000000000 +0200
@@ -388,8 +388,10 @@ ENTRY(sysenter_entry_pv)
 	movl %ebp,12(%esp)
 	movl $__USER_CS,4(%esp)
 	addl $4,%esp
+	CFI_ADJUST_CFA_OFFSET -4
 	/* +5*4 is SS:ESP,EFLAGS,CS:EIP. +8 is esp0 setting. */
 	pushl (TI_sysenter_return-THREAD_SIZE+8+4*4)(%esp)
+	CFI_ADJUST_CFA_OFFSET 4
 /*
  * Load the potential sixth argument from user stack.
  * Careful about security.
Index: head-2008-07-21/arch/x86/kernel/time_32-xen.c
===================================================================
--- head-2008-07-21.orig/arch/x86/kernel/time_32-xen.c	2008-07-21 11:00:32.000000000 +0200
+++ head-2008-07-21/arch/x86/kernel/time_32-xen.c	2008-07-21 14:21:46.000000000 +0200
@@ -76,8 +76,13 @@
 
 #if defined (__i386__)
 #include <asm/i8259.h>
+#include <asm/i8253.h>
+DEFINE_SPINLOCK(i8253_lock);
+EXPORT_SYMBOL(i8253_lock);
 #endif
 
+#define XEN_SHIFT 22
+
 int pit_latch_buggy;              /* extern */
 
 #if defined(__x86_64__)
@@ -97,10 +102,6 @@ extern unsigned long wall_jiffies;
 DEFINE_SPINLOCK(rtc_lock);
 EXPORT_SYMBOL(rtc_lock);
 
-extern struct init_timer_opts timer_tsc_init;
-extern struct timer_opts timer_tsc;
-#define timer_none timer_tsc
-
 /* These are peridically updated in shared_info, and then copied here. */
 struct shadow_time_info {
 	u64 tsc_timestamp;     /* TSC at last update of time vals.  */
@@ -256,6 +257,7 @@ static u64 get_nsec_offset(struct shadow
 	return scale_delta(delta, shadow->tsc_to_nsec_mul, shadow->tsc_shift);
 }
 
+#ifdef CONFIG_X86_64
 static unsigned long get_usec_offset(struct shadow_time_info *shadow)
 {
 	u64 now, delta;
@@ -263,6 +265,7 @@ static unsigned long get_usec_offset(str
 	delta = now - shadow->tsc_timestamp;
 	return scale_delta(delta, shadow->tsc_to_usec_mul, shadow->tsc_shift);
 }
+#endif
 
 static void __update_wallclock(time_t sec, long nsec)
 {
@@ -372,6 +375,8 @@ void rtc_cmos_write(unsigned char val, u
 }
 EXPORT_SYMBOL(rtc_cmos_write);
 
+#ifdef CONFIG_X86_64
+
 /*
  * This version of gettimeofday has microsecond resolution
  * and better than microsecond precision on fast x86 machines with TSC.
@@ -506,6 +511,8 @@ int do_settimeofday(struct timespec *tv)
 
 EXPORT_SYMBOL(do_settimeofday);
 
+#endif
+
 static void sync_xen_wallclock(unsigned long dummy);
 static DEFINE_TIMER(sync_xen_wallclock_timer, sync_xen_wallclock, 0, 0);
 static void sync_xen_wallclock(unsigned long dummy)
@@ -557,11 +564,15 @@ static int set_rtc_mmss(unsigned long no
 	return retval;
 }
 
+#ifdef CONFIG_X86_64
 /* monotonic_clock(): returns # of nanoseconds passed since time_init()
  *		Note: This function is required to return accurate
  *		time even in the absence of multiple timer ticks.
  */
 unsigned long long monotonic_clock(void)
+#else
+unsigned long long sched_clock(void)
+#endif
 {
 	unsigned int cpu = get_cpu();
 	struct shadow_time_info *shadow = &per_cpu(shadow_time, cpu);
@@ -581,9 +592,9 @@ unsigned long long monotonic_clock(void)
 
 	return time;
 }
+#ifdef CONFIG_X86_64
 EXPORT_SYMBOL(monotonic_clock);
 
-#ifdef __x86_64__
 unsigned long long sched_clock(void)
 {
 	return monotonic_clock();
@@ -753,6 +764,87 @@ irqreturn_t timer_interrupt(int irq, voi
 	return IRQ_HANDLED;
 }
 
+#ifndef CONFIG_X86_64
+
+void tsc_init(void)
+{
+	init_cpu_khz();
+	printk(KERN_INFO "Xen reported: %u.%03u MHz processor.\n",
+	       cpu_khz / 1000, cpu_khz % 1000);
+
+	use_tsc_delay();
+}
+
+#include <linux/clocksource.h>
+
+void mark_tsc_unstable(void)
+{
+#ifndef CONFIG_XEN /* XXX Should tell the hypervisor about this fact. */
+	tsc_unstable = 1;
+#endif
+}
+EXPORT_SYMBOL_GPL(mark_tsc_unstable);
+
+static cycle_t xen_clocksource_read(void)
+{
+	cycle_t ret = sched_clock();
+
+#ifdef CONFIG_SMP
+	for (;;) {
+		static cycle_t last_ret;
+#ifndef CONFIG_64BIT
+		cycle_t last = cmpxchg64(&last_ret, 0, 0);
+#else
+		cycle_t last = last_ret;
+#define cmpxchg64 cmpxchg
+#endif
+
+		if ((s64)(ret - last) < 0) {
+			if (last - ret > permitted_clock_jitter
+			    && printk_ratelimit()) {
+				unsigned int cpu = get_cpu();
+				struct shadow_time_info *shadow = &per_cpu(shadow_time, cpu);
+
+				printk(KERN_WARNING "clocksource/%u: "
+				       "Time went backwards: "
+				       "ret=%Lx delta=%Ld shadow=%Lx offset=%Lx\n",
+				       cpu, ret, ret - last,
+				       shadow->system_timestamp,
+				       get_nsec_offset(shadow));
+				put_cpu();
+			}
+			ret = last;
+		}
+		if (cmpxchg64(&last_ret, last, ret) == last)
+			break;
+	}
+#endif
+
+	return ret;
+}
+
+static struct clocksource clocksource_xen = {
+	.name			= "xen",
+	.rating			= 400,
+	.read			= xen_clocksource_read,
+	.mask			= CLOCKSOURCE_MASK(64),
+	.mult			= 1 << XEN_SHIFT,		/* time directly in nanoseconds */
+	.shift			= XEN_SHIFT,
+	.is_continuous		= 1,
+};
+
+static int __init init_xen_clocksource(void)
+{
+	clocksource_xen.mult = clocksource_khz2mult(cpu_khz,
+						clocksource_xen.shift);
+
+	return clocksource_register(&clocksource_xen);
+}
+
+module_init(init_xen_clocksource);
+
+#endif
+
 static void init_missing_ticks_accounting(unsigned int cpu)
 {
 	struct vcpu_register_runstate_memory_area area;
@@ -941,11 +1033,11 @@ void __init time_init(void)
 
 	update_wallclock();
 
+#ifdef CONFIG_X86_64
 	init_cpu_khz();
 	printk(KERN_INFO "Xen reported: %u.%03u MHz processor.\n",
 	       cpu_khz / 1000, cpu_khz % 1000);
 
-#if defined(__x86_64__)
 	vxtime.mode = VXTIME_TSC;
 	vxtime.quot = (1000000L << 32) / vxtime_hz;
 	vxtime.tsc_quot = (1000L << 32) / cpu_khz;
Index: head-2008-07-21/include/asm-x86/mach-xen/asm/pgtable_64.h
===================================================================
--- head-2008-07-21.orig/include/asm-x86/mach-xen/asm/pgtable_64.h	2008-07-21 11:00:33.000000000 +0200
+++ head-2008-07-21/include/asm-x86/mach-xen/asm/pgtable_64.h	2008-07-21 14:21:46.000000000 +0200
@@ -392,7 +392,6 @@ static inline int pmd_large(pmd_t pte) {
 
 /*
  * Level 4 access.
- * Never use these in the common code.
  */
 #define pgd_page(pgd) ((unsigned long) __va(pgd_val(pgd) & PTE_MASK))
 #define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD-1))
Index: head-2008-07-21/include/asm-x86/mach-xen/asm/processor_32.h
===================================================================
--- head-2008-07-21.orig/include/asm-x86/mach-xen/asm/processor_32.h	2008-01-28 12:24:19.000000000 +0100
+++ head-2008-07-21/include/asm-x86/mach-xen/asm/processor_32.h	2008-07-21 14:21:46.000000000 +0200
@@ -23,7 +23,7 @@
 #include <xen/interface/physdev.h>
 
 /* flag for disabling the tsc */
-extern int tsc_disable;
+#define tsc_disable 0
 
 struct desc_struct {
 	unsigned long a,b;
Index: head-2008-07-21/include/asm-x86/thread_info_32.h
===================================================================
--- head-2008-07-21.orig/include/asm-x86/thread_info_32.h	2008-07-21 11:21:18.000000000 +0200
+++ head-2008-07-21/include/asm-x86/thread_info_32.h	2008-07-21 14:21:46.000000000 +0200
@@ -168,11 +168,15 @@ static inline struct thread_info *curren
 #define _TIF_ALLWORK_MASK	(0x0000FFFF & ~_TIF_SECCOMP)
 
 /* flags to check in __switch_to() */
+#ifndef CONFIG_XEN
 #define _TIF_WORK_CTXSW						\
 	(_TIF_IO_BITMAP | _TIF_NOTSC | _TIF_DEBUGCTLMSR |	\
 	 _TIF_DS_AREA_MSR | _TIF_BTS_TRACE_TS)
 #define _TIF_WORK_CTXSW_PREV _TIF_WORK_CTXSW
 #define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW | _TIF_DEBUG)
+#else
+#define _TIF_WORK_CTXSW _TIF_DEBUG
+#endif
 
 
 /*
