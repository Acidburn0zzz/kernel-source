From: www.kernel.org
Subject: Linux 2.6.18
Patch-mainline: 2.6.18

Automatically created from "patches.kernel.org/patch-2.6.18" by xen-port-patches.py
Acked-by: jbeulich@novell.com

2.6.35/kernel/time.c change removed (no longer applicable)

--- head.orig/arch/x86/Kconfig	2014-01-07 16:12:57.000000000 +0100
+++ head/arch/x86/Kconfig	2014-01-07 16:13:22.000000000 +0100
@@ -1720,7 +1720,7 @@ config KEXEC_JUMP
 	  code in physical address mode via KEXEC
 
 config PHYSICAL_START
-	hex "Physical address where the kernel is loaded" if (EXPERT || CRASH_DUMP)
+	hex "Physical address where the kernel is loaded" if (EXPERT || CRASH_DUMP || XEN)
 	default "0x1000000"
 	---help---
 	  This gives the physical address where the kernel is loaded.
--- head.orig/arch/x86/kernel/Makefile	2013-12-02 16:31:07.000000000 +0100
+++ head/arch/x86/kernel/Makefile	2013-12-02 16:43:31.000000000 +0100
@@ -130,5 +130,5 @@ ifeq ($(CONFIG_X86_64),y)
 	pci-dma_64-$(CONFIG_XEN)	+= pci-dma_32.o
 endif
 
-disabled-obj-$(CONFIG_XEN) := i8237.o i8259_$(BITS).o reboot.o smpboot_$(BITS).o
+disabled-obj-$(CONFIG_XEN) := i8237.o i8253.o i8259_$(BITS).o reboot.o smpboot_$(BITS).o tsc_$(BITS).o
 %/head_$(BITS).o %/head_$(BITS).s: $(if $(CONFIG_XEN),EXTRA_AFLAGS,dummy) :=
--- head.orig/arch/x86/kernel/quirks.c	2013-07-01 00:13:29.000000000 +0200
+++ head/arch/x86/kernel/quirks.c	2013-01-14 13:48:49.000000000 +0100
@@ -6,7 +6,7 @@
 
 #include <asm/hpet.h>
 
-#if defined(CONFIG_X86_IO_APIC) && defined(CONFIG_SMP) && defined(CONFIG_PCI)
+#if defined(CONFIG_X86_IO_APIC) && (defined(CONFIG_SMP) || defined(CONFIG_XEN)) && defined(CONFIG_PCI)
 
 static void quirk_intel_irqbalance(struct pci_dev *dev)
 {
@@ -34,10 +34,21 @@ static void quirk_intel_irqbalance(struc
 	if (!(word & (1 << 13))) {
 		dev_info(&dev->dev, "Intel E7520/7320/7525 detected; "
 			"disabling irq balancing and affinity\n");
+#ifndef CONFIG_XEN
 		noirqdebug_setup("");
 #ifdef CONFIG_PROC_FS
 		no_irq_affinity = 1;
 #endif
+#else
+		{
+			struct xen_platform_op op = {
+				.cmd = XENPF_platform_quirk,
+				.u.platform_quirk.quirk_id = QUIRK_NOIRQBALANCING
+			};
+
+			WARN_ON(HYPERVISOR_platform_op(&op));
+		}
+#endif
 	}
 
 	/* put back the original value for config space*/
--- head.orig/arch/x86/kernel/time-xen.c	2013-10-29 08:26:20.000000000 +0100
+++ head/arch/x86/kernel/time-xen.c	2013-10-29 10:08:02.000000000 +0100
@@ -75,8 +75,13 @@
 
 #if defined (__i386__)
 #include <asm/i8259.h>
+#include <asm/i8253.h>
+DEFINE_SPINLOCK(i8253_lock);
+EXPORT_SYMBOL(i8253_lock);
 #endif
 
+#define XEN_SHIFT 22
+
 int pit_latch_buggy;              /* extern */
 
 #if defined(__x86_64__)
@@ -222,6 +227,7 @@ static u64 get_nsec_offset(struct shadow
 	return scale_delta(delta, shadow->tsc_to_nsec_mul, shadow->tsc_shift);
 }
 
+#ifdef CONFIG_X86_64
 static unsigned long get_usec_offset(struct shadow_time_info *shadow)
 {
 	u64 now, delta;
@@ -229,6 +235,7 @@ static unsigned long get_usec_offset(str
 	delta = now - shadow->tsc_timestamp;
 	return scale_delta(delta, shadow->tsc_to_usec_mul, shadow->tsc_shift);
 }
+#endif
 
 static void __update_wallclock(time_t sec, long nsec)
 {
@@ -343,6 +350,8 @@ void rtc_cmos_write(unsigned char val, u
 }
 EXPORT_SYMBOL(rtc_cmos_write);
 
+#ifdef CONFIG_X86_64
+
 static struct {
 	spinlock_t lock;
 	struct timeval tv;
@@ -436,16 +445,25 @@ static inline void monotonic_reset(void)
 }
 
 int do_settimeofday(struct timespec *tv)
+#elif defined(CONFIG_XEN_PRIVILEGED_GUEST)
+int xen_update_wallclock(const struct timespec *tv)
+#endif
+#if defined(CONFIG_X86_64) || defined(CONFIG_XEN_PRIVILEGED_GUEST)
 {
 	time_t sec;
 	s64 nsec;
 	unsigned int cpu;
 	struct shadow_time_info *shadow;
 	struct xen_platform_op op;
+#ifdef CONFIG_X86_64
+	int warp = 0;
 
 	if (unlikely(!tv)) {
 		monotonic_reset();
-		return 0;
+		if (!is_initial_xendomain() || independent_wallclock)
+			return 0;
+		tv = &xtime;
+		warp = 1;
 	}
 
 	if ((unsigned long)tv->tv_nsec >= NSEC_PER_SEC)
@@ -453,11 +471,18 @@ int do_settimeofday(struct timespec *tv)
 
 	if (!is_initial_xendomain() && !independent_wallclock)
 		return -EPERM;
+#else
+	if (!is_initial_xendomain() || independent_wallclock)
+		return -EPERM;
+#endif
 
 	cpu = get_cpu();
 	shadow = &per_cpu(shadow_time, cpu);
 
-	write_seqlock_irq(&xtime_lock);
+#ifdef CONFIG_X86_64
+	if (!warp)
+		write_seqlock_irq(&xtime_lock);
+#endif
 
 	/*
 	 * Ensure we don't get blocked for a long time so that our time delta
@@ -480,24 +505,37 @@ int do_settimeofday(struct timespec *tv)
 		op.u.settime.system_time = shadow->system_timestamp;
 		WARN_ON(HYPERVISOR_platform_op(&op));
 		update_wallclock();
+#ifdef CONFIG_X86_64
+		if (warp) {
+			put_cpu();
+			return 0;
+		}
+#endif
 	} else if (independent_wallclock) {
 		nsec -= shadow->system_timestamp;
 		__normalize_time(&sec, &nsec);
 		__update_wallclock(sec, nsec);
 	}
+#ifdef CONFIG_X86_64
 	ntp_clear();
 
 	monotonic_reset();
 
 	write_sequnlock_irq(&xtime_lock);
+#endif
 
 	put_cpu();
 
+#ifdef CONFIG_X86_64
 	clock_was_set();
+#endif
 	return 0;
 }
+#endif
 
+#ifdef CONFIG_X86_64
 EXPORT_SYMBOL(do_settimeofday);
+#endif
 
 static void sync_xen_wallclock(unsigned long dummy);
 static DEFINE_TIMER(sync_xen_wallclock_timer, sync_xen_wallclock, 0, 0);
@@ -550,11 +588,15 @@ static int set_rtc_mmss(unsigned long no
 	return retval;
 }
 
+#ifdef CONFIG_X86_64
 /* monotonic_clock(): returns # of nanoseconds passed since time_init()
  *		Note: This function is required to return accurate
  *		time even in the absence of multiple timer ticks.
  */
 unsigned long long monotonic_clock(void)
+#else
+unsigned long long sched_clock(void)
+#endif
 {
 	unsigned int cpu = get_cpu();
 	struct shadow_time_info *shadow = &per_cpu(shadow_time, cpu);
@@ -574,9 +616,9 @@ unsigned long long monotonic_clock(void)
 
 	return time;
 }
+#ifdef CONFIG_X86_64
 EXPORT_SYMBOL(monotonic_clock);
 
-#ifdef __x86_64__
 unsigned long long sched_clock(void)
 {
 	return monotonic_clock();
@@ -749,6 +791,89 @@ irqreturn_t timer_interrupt(int irq, voi
 	return IRQ_HANDLED;
 }
 
+#ifndef CONFIG_X86_64
+
+void tsc_init(void)
+{
+	init_cpu_khz();
+	printk(KERN_INFO "Xen reported: %u.%03u MHz processor.\n",
+	       cpu_khz / 1000, cpu_khz % 1000);
+
+	use_tsc_delay();
+}
+
+#include <linux/clocksource.h>
+
+void mark_tsc_unstable(void)
+{
+#ifndef CONFIG_XEN /* XXX Should tell the hypervisor about this fact. */
+	tsc_unstable = 1;
+#endif
+}
+EXPORT_SYMBOL_GPL(mark_tsc_unstable);
+
+static cycle_t xen_clocksource_read(void)
+{
+#ifdef CONFIG_SMP
+	static cycle_t last_ret;
+#ifndef CONFIG_64BIT
+	cycle_t last = cmpxchg64(&last_ret, 0, 0);
+#else
+	cycle_t last = last_ret;
+#define cmpxchg64 cmpxchg
+#endif
+	cycle_t ret = sched_clock();
+
+	if (unlikely((s64)(ret - last) < 0)) {
+		if (last - ret > permitted_clock_jitter
+		    && printk_ratelimit()) {
+			unsigned int cpu = get_cpu();
+			struct shadow_time_info *shadow = &per_cpu(shadow_time, cpu);
+
+			printk(KERN_WARNING "clocksource/%u: "
+			       "Time went backwards: "
+			       "ret=%Lx delta=%Ld shadow=%Lx offset=%Lx\n",
+			       cpu, ret, ret - last, shadow->system_timestamp,
+			       get_nsec_offset(shadow));
+			put_cpu();
+		}
+		return last;
+	}
+
+	for (;;) {
+		cycle_t cur = cmpxchg64(&last_ret, last, ret);
+
+		if (cur == last || (s64)(ret - cur) < 0)
+			return ret;
+		last = cur;
+	}
+#else
+	return sched_clock();
+#endif
+}
+
+static struct clocksource clocksource_xen = {
+	.name			= "xen",
+	.rating			= 400,
+	.read			= xen_clocksource_read,
+	.mask			= CLOCKSOURCE_MASK(64),
+	.mult			= 1 << XEN_SHIFT,		/* time directly in nanoseconds */
+	.shift			= XEN_SHIFT,
+	.is_continuous		= 1,
+};
+
+static int __init init_xen_clocksource(void)
+{
+	clocksource_xen.mult = clocksource_khz2mult(cpu_khz,
+						clocksource_xen.shift);
+
+	return clocksource_register(&clocksource_xen);
+}
+
+module_init(init_xen_clocksource);
+
+#endif
+
 static void init_missing_ticks_accounting(unsigned int cpu)
 {
 	struct vcpu_register_runstate_memory_area area;
@@ -937,11 +1062,11 @@ void __init time_init(void)
 
 	update_wallclock();
 
+#ifdef CONFIG_X86_64
 	init_cpu_khz();
 	printk(KERN_INFO "Xen reported: %u.%03u MHz processor.\n",
 	       cpu_khz / 1000, cpu_khz % 1000);
 
-#if defined(__x86_64__)
 	vxtime.mode = VXTIME_TSC;
 	vxtime.quot = (1000000L << 32) / vxtime_hz;
 	vxtime.tsc_quot = (1000L << 32) / cpu_khz;
--- head.orig/arch/x86/pci/irq.c	2011-07-22 04:17:23.000000000 +0200
+++ head/arch/x86/pci/irq.c	2011-08-09 10:33:29.000000000 +0200
@@ -94,13 +94,18 @@ static struct irq_routing_table * __init
 	u8 *addr;
 	struct irq_routing_table *rt;
 
+#ifdef CONFIG_XEN
+	if (!is_initial_xendomain())
+		return NULL;
+#endif
 	if (pirq_table_addr) {
-		rt = pirq_check_routing_table((u8 *) __va(pirq_table_addr));
+		rt = pirq_check_routing_table((u8 *) isa_bus_to_virt(pirq_table_addr));
 		if (rt)
 			return rt;
 		printk(KERN_WARNING "PCI: PIRQ table NOT found at pirqaddr\n");
 	}
-	for (addr = (u8 *) __va(0xf0000); addr < (u8 *) __va(0x100000); addr += 16) {
+	for (addr = (u8 *) isa_bus_to_virt(0xf0000);
+	     addr < (u8 *) isa_bus_to_virt(0x100000); addr += 16) {
 		rt = pirq_check_routing_table(addr);
 		if (rt)
 			return rt;
--- head.orig/drivers/acpi/processor_perflib.c	2013-12-02 16:28:10.000000000 +0100
+++ head/drivers/acpi/processor_perflib.c	2013-12-02 16:43:22.000000000 +0100
@@ -621,6 +621,8 @@ end:
 	return result;
 }
 
+#ifndef CONFIG_PROCESSOR_EXTERNAL_CONTROL
+
 int acpi_processor_preregister_performance(
 		struct acpi_processor_performance __percpu *performance)
 {
@@ -834,3 +836,5 @@ acpi_processor_unregister_performance(st
 }
 
 EXPORT_SYMBOL(acpi_processor_unregister_performance);
+
+#endif /* !CONFIG_PROCESSOR_EXTERNAL_CONTROL */
--- head.orig/drivers/xen/blkfront/blkfront.c	2012-10-04 11:18:40.000000000 +0200
+++ head/drivers/xen/blkfront/blkfront.c	2013-12-11 09:49:28.000000000 +0100
@@ -187,8 +187,8 @@ again:
 		message = "writing event-channel";
 		goto abort_transaction;
 	}
-	err = xenbus_printf(xbt, dev->nodename, "protocol", "%s",
-			    XEN_IO_PROTO_ABI_NATIVE);
+	err = xenbus_write(xbt, dev->nodename, "protocol",
+			   XEN_IO_PROTO_ABI_NATIVE);
 	if (err) {
 		message = "writing protocol";
 		goto abort_transaction;
--- head.orig/drivers/xen/fbfront/xenfb.c	2013-01-30 10:25:34.000000000 +0100
+++ head/drivers/xen/fbfront/xenfb.c	2013-12-11 09:51:04.000000000 +0100
@@ -760,11 +760,11 @@ static int xenfb_connect_backend(struct 
 			    irq_to_evtchn_port(irq));
 	if (ret)
 		goto error_xenbus;
-	ret = xenbus_printf(xbt, dev->nodename, "protocol", "%s",
-			    XEN_IO_PROTO_ABI_NATIVE);
+	ret = xenbus_write(xbt, dev->nodename, "protocol",
+			   XEN_IO_PROTO_ABI_NATIVE);
 	if (ret)
 		goto error_xenbus;
-	ret = xenbus_printf(xbt, dev->nodename, "feature-update", "1");
+	ret = xenbus_write(xbt, dev->nodename, "feature-update", "1");
 	if (ret)
 		goto error_xenbus;
 	ret = xenbus_transaction_end(xbt, 0);
--- head.orig/drivers/xen/fbfront/xenkbd.c	2012-10-04 11:18:40.000000000 +0200
+++ head/drivers/xen/fbfront/xenkbd.c	2013-12-11 09:51:45.000000000 +0100
@@ -126,7 +126,7 @@ int __devinit xenkbd_probe(struct xenbus
 	if (xenbus_scanf(XBT_NIL, dev->otherend, "feature-abs-pointer", "%d", &abs) < 0)
 		abs = 0;
 	if (abs)
-		xenbus_printf(XBT_NIL, dev->nodename, "request-abs-pointer", "1");
+		xenbus_write(XBT_NIL, dev->nodename, "request-abs-pointer", "1");
 
 	/* keyboard */
 	kbd = input_allocate_device();
@@ -294,8 +294,8 @@ static void xenkbd_backend_changed(struc
 		if (ret < 0)
 			val = 0;
 		if (val) {
-			ret = xenbus_printf(XBT_NIL, info->xbdev->nodename,
-					    "request-abs-pointer", "1");
+			ret = xenbus_write(XBT_NIL, info->xbdev->nodename,
+					   "request-abs-pointer", "1");
 			if (ret)
 				; /* FIXME */
 		}
--- head.orig/drivers/xen/netback/xenbus.c	2012-01-06 10:19:49.000000000 +0100
+++ head/drivers/xen/netback/xenbus.c	2013-12-11 09:48:20.000000000 +0100
@@ -107,8 +107,7 @@ static int netback_probe(struct xenbus_d
 		}
 
 		/* We support rx-copy path. */
-		err = xenbus_printf(xbt, dev->nodename,
-				    "feature-rx-copy", "%d", 1);
+		err = xenbus_write(xbt, dev->nodename, "feature-rx-copy", "1");
 		if (err) {
 			message = "writing feature-rx-copy";
 			goto abort_transaction;
@@ -118,8 +117,7 @@ static int netback_probe(struct xenbus_d
 		 * We don't support rx-flip path (except old guests who don't
 		 * grok this feature flag).
 		 */
-		err = xenbus_printf(xbt, dev->nodename,
-				    "feature-rx-flip", "%d", 0);
+		err = xenbus_write(xbt, dev->nodename, "feature-rx-flip", "0");
 		if (err) {
 			message = "writing feature-rx-flip";
 			goto abort_transaction;
--- head.orig/drivers/xen/netfront/netfront.c	2014-01-07 16:08:37.000000000 +0100
+++ head/drivers/xen/netfront/netfront.c	2013-12-11 09:47:26.000000000 +0100
@@ -37,6 +37,7 @@
 #include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/string.h>
+#include <linux/stringify.h>
 #include <linux/errno.h>
 #include <linux/netdevice.h>
 #include <linux/inetdevice.h>
@@ -100,7 +101,7 @@ static const int MODPARM_rx_flip = 0;
 #if defined(NETIF_F_GSO)
 #define HAVE_GSO			1
 #define HAVE_TSO			1 /* TSO is a subset of GSO */
-#define HAVE_CSUM_OFFLOAD		1
+#define NO_CSUM_OFFLOAD			0
 static inline void dev_disable_gso_features(struct net_device *dev)
 {
 	/* Turn off all GSO bits except ROBUST. */
@@ -116,7 +117,7 @@ static inline void dev_disable_gso_featu
  * with the presence of NETIF_F_TSO but it appears to be a good first
  * approximiation.
  */
-#define HAVE_CSUM_OFFLOAD              0
+#define NO_CSUM_OFFLOAD			1
 
 #define gso_size tso_size
 #define gso_segs tso_segs
@@ -143,7 +144,7 @@ static inline int netif_needs_gso(struct
 #else
 #define HAVE_GSO			0
 #define HAVE_TSO			0
-#define HAVE_CSUM_OFFLOAD		0
+#define NO_CSUM_OFFLOAD			1
 #define netif_needs_gso(dev, skb)	0
 #define dev_disable_gso_features(dev)	((void)0)
 #define ethtool_op_set_tso(dev, data)	(-ENOSYS)
@@ -420,27 +421,27 @@ again:
 		goto abort_transaction;
 	}
 
-	err = xenbus_printf(xbt, dev->nodename, "feature-rx-notify", "%d", 1);
+	err = xenbus_write(xbt, dev->nodename, "feature-rx-notify", "1");
 	if (err) {
 		message = "writing feature-rx-notify";
 		goto abort_transaction;
 	}
 
-	err = xenbus_printf(xbt, dev->nodename, "feature-no-csum-offload",
-			    "%d", !HAVE_CSUM_OFFLOAD);
+	err = xenbus_write(xbt, dev->nodename, "feature-no-csum-offload",
+			   __stringify(NO_CSUM_OFFLOAD));
 	if (err) {
 		message = "writing feature-no-csum-offload";
 		goto abort_transaction;
 	}
 
-	err = xenbus_printf(xbt, dev->nodename, "feature-sg", "%d", 1);
+	err = xenbus_write(xbt, dev->nodename, "feature-sg", "1");
 	if (err) {
 		message = "writing feature-sg";
 		goto abort_transaction;
 	}
 
-	err = xenbus_printf(xbt, dev->nodename, "feature-gso-tcpv4", "%d",
-			    HAVE_TSO);
+	err = xenbus_write(xbt, dev->nodename, "feature-gso-tcpv4",
+			   __stringify(HAVE_TSO));
 	if (err) {
 		message = "writing feature-gso-tcpv4";
 		goto abort_transaction;
--- head.orig/drivers/xen/pcifront/xenbus.c	2012-10-04 11:18:40.000000000 +0200
+++ head/drivers/xen/pcifront/xenbus.c	2013-12-11 09:53:21.000000000 +0100
@@ -124,8 +124,8 @@ static int pcifront_publish_info(struct 
 		err = xenbus_printf(trans, pdev->xdev->nodename,
 				    "event-channel", "%u", pdev->evtchn);
 	if (!err)
-		err = xenbus_printf(trans, pdev->xdev->nodename,
-				    "magic", XEN_PCI_MAGIC);
+		err = xenbus_write(trans, pdev->xdev->nodename, "magic",
+				   XEN_PCI_MAGIC);
 
 	if (err) {
 		xenbus_transaction_end(trans, 1);
--- head.orig/drivers/xen/tpmback/xenbus.c	2011-12-21 10:02:58.000000000 +0100
+++ head/drivers/xen/tpmback/xenbus.c	2013-12-11 09:55:00.000000000 +0100
@@ -176,7 +176,6 @@ static void connect(struct backend_info 
 	struct xenbus_transaction xbt;
 	int err;
 	struct xenbus_device *dev = be->dev;
-	unsigned long ready = 1;
 
 again:
 	err = xenbus_transaction_start(&xbt);
@@ -185,8 +184,7 @@ again:
 		return;
 	}
 
-	err = xenbus_printf(xbt, be->dev->nodename,
-			    "ready", "%lu", ready);
+	err = xenbus_write(xbt, be->dev->nodename, "ready", "1");
 	if (err) {
 		xenbus_dev_fatal(be->dev, err, "writing 'ready'");
 		goto abort;
--- head.orig/arch/x86/include/mach-xen/asm/processor_32.h	2008-01-28 12:24:19.000000000 +0100
+++ head/arch/x86/include/mach-xen/asm/processor_32.h	2011-01-31 17:02:29.000000000 +0100
@@ -23,7 +23,7 @@
 #include <xen/interface/physdev.h>
 
 /* flag for disabling the tsc */
-extern int tsc_disable;
+#define tsc_disable 0
 
 struct desc_struct {
 	unsigned long a,b;
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ head/arch/x86/include/mach-xen/asm/time.h	2011-07-11 10:35:24.000000000 +0200
@@ -0,0 +1,6 @@
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+struct timespec;
+int xen_update_wallclock(const struct timespec *);
+#endif
+
+#include_next <asm/time.h>
--- head.orig/arch/x86/include/asm/thread_info.h	2013-12-02 15:42:07.000000000 +0100
+++ head/arch/x86/include/asm/thread_info.h	2013-12-02 16:44:49.000000000 +0100
@@ -147,11 +147,15 @@ struct thread_info {
 	 _TIF_USER_RETURN_NOTIFY)
 
 /* flags to check in __switch_to() */
+#ifndef CONFIG_XEN
 #define _TIF_WORK_CTXSW							\
 	(_TIF_IO_BITMAP|_TIF_NOTSC|_TIF_BLOCKSTEP)
 
 #define _TIF_WORK_CTXSW_PREV (_TIF_WORK_CTXSW|_TIF_USER_RETURN_NOTIFY)
 #define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW)
+#else
+#define _TIF_WORK_CTXSW _TIF_DEBUG
+#endif
 
 #ifdef CONFIG_X86_32
 
--- head.orig/kernel/time/timekeeping.c	2013-12-10 10:31:36.000000000 +0100
+++ head/kernel/time/timekeeping.c	2013-08-09 12:15:28.000000000 +0200
@@ -22,6 +22,9 @@
 #include <linux/tick.h>
 #include <linux/stop_machine.h>
 #include <linux/pvclock_gtod.h>
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+#include <asm/time.h>
+#endif
 
 #include "tick-internal.h"
 #include "ntp_internal.h"
@@ -515,6 +518,10 @@ int do_settimeofday(const struct timespe
 
 	timekeeping_update(tk, TK_CLEAR_NTP | TK_MIRROR | TK_CLOCK_WAS_SET);
 
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+	xen_update_wallclock(tv);
+#endif
+
 	write_seqcount_end(&timekeeper_seq);
 	raw_spin_unlock_irqrestore(&timekeeper_lock, flags);
 
