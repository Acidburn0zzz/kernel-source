From nobody Mon Sep 17 00:00:00 2001
From: Linus Torvalds <torvalds@osdl.org>
Date: Wed Feb 22 15:50:30 2006 -0800
Subject: [PATCH 29/49] PCI: resource address mismatch
Patch-mainline: 2.6.17

On Tue, 21 Feb 2006, Ivan Kokshaysky wrote:
> There are two bogus entries in the BIOS memory map table which are
> conflicting with a prefetchable memory range of the AGP bridge:
>
>  BIOS-e820: 00000000fec00000 - 00000000fec01000 (reserved)
>  BIOS-e820: 00000000fee00000 - 00000000fee01000 (reserved)
>
> 0000:00:02.0 PCI bridge: Silicon Integrated Systems [SiS] Virtual PCI-to-PCI bridge (AGP) (prog-if 00 [Normal decode])
> 	Flags: bus master, fast devsel, latency 0
> 	Bus: primary=00, secondary=01, subordinate=01, sec-latency=0
> 	I/O behind bridge: 0000c000-0000cfff
> 	Memory behind bridge: e7e00000-e7efffff
> 	Prefetchable memory behind bridge: fec00000-ffcfffff
> 					   ^^^^^^^^^^^^^^^^^

Yes. However, it's pretty clear that the e820 entries are there for a
reason. Probably they are a hack by the BIOS maintainers to keep Windows
from stomping/moving that region, exactly because they want to keep the
bridge where it is (or, it's actually for the BIOS itself - the BIOS
tables are a horrid mess, and BIOS engineers are pretty hacky people:
they'll add random entries to make their own broken algorithms do the
"right thing").

> Starting from 2.6.13, kernel tries to resolve that sort of conflicts,
> so that prefetch window of the bridge and the framebuffer memory behind
> it get moved to 0x10000000.

I think we could (and probably should) solve this another way: consider
the ACPI "reserved regions" from the e820 map exactly the same way that we
do other ACPI hints - they should restrict _new_ allocations, but not
impact stuff we figure out on our own.

Basically, right now we assign _unassigned_ resources at "fs_initcall"
time. If we were to add in the e820 "reserved region" stuff before that
(but after we've done PCI discovery), we'd probably do the right thing.

Right now we do the e820 reserved regions very early indeed: we call
"register_memory()" from setup_arch(). We could move at least part of it
(the part that registers the resources) down a bit.

Here's a test-patch. I'm not saying we should absolutely do this, but it
might be interesting to try...

Cc: "Antonino A. Daplas" <adaplas@pol.net>
Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
Cc: <bjk@luxsci.net>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Automatically created from "patches.drivers/pci-0029-resource-address-mismatch.patch" by xen-port-patches.py

diff --git a/arch/i386/kernel/setup-xen.c b/arch/i386/kernel/setup-xen.c
index 2d87829..d313a11 100644
Index: head-2006-04-05/arch/i386/kernel/setup-xen.c
===================================================================
--- head-2006-04-05.orig/arch/i386/kernel/setup-xen.c	2006-04-06 12:46:29.000000000 +0200
+++ head-2006-04-05/arch/i386/kernel/setup-xen.c	2006-04-06 13:57:12.000000000 +0200
@@ -1354,6 +1354,7 @@ legacy_init_iomem_resources(struct resou
 	struct dom0_memory_map_entry *map;
 	unsigned long gapstart, gapsize;
 	unsigned long long last;
+	struct page *page;
 #endif
 
 #ifdef CONFIG_XEN_PRIVILEGED_GUEST
@@ -1361,7 +1362,9 @@ legacy_init_iomem_resources(struct resou
 #endif
 
 #ifdef CONFIG_XEN
-	map = alloc_bootmem_low_pages(PAGE_SIZE);
+	page = alloc_page(GFP_ATOMIC);
+	BUG_ON(!page);
+	map = page_address(page);
 	op.cmd = DOM0_PHYSICAL_MEMORY_MAP;
 	op.u.physical_memory_map.memory_map = map;
 	op.u.physical_memory_map.max_map_entries =
@@ -1384,7 +1387,7 @@ legacy_init_iomem_resources(struct resou
 
 		if (map[i].end > 0x100000000ULL)
 			continue;
-		res = alloc_bootmem_low(sizeof(struct resource));
+		res = kzalloc(sizeof(struct resource), GFP_ATOMIC);
 		res->name = map[i].is_ram ? "System RAM" : "reserved";
 		res->start = map[i].start;
 		res->end = map[i].end - 1;
@@ -1392,7 +1395,7 @@ legacy_init_iomem_resources(struct resou
 		request_resource(&iomem_resource, res);
 	}
 
-	free_bootmem(__pa(map), PAGE_SIZE);
+	__free_page(page);
 
 	/*
 	 * Start allocating dynamic PCI memory a bit into the gap,
@@ -1411,7 +1414,7 @@ legacy_init_iomem_resources(struct resou
 		struct resource *res;
 		if (e820.map[i].addr + e820.map[i].size > 0x100000000ULL)
 			continue;
-		res = alloc_bootmem_low(sizeof(struct resource));
+		res = kzalloc(sizeof(struct resource), GFP_ATOMIC);
 		switch (e820.map[i].type) {
 		case E820_RAM:	res->name = "System RAM"; break;
 		case E820_ACPI:	res->name = "ACPI Tables"; break;
@@ -1445,19 +1448,19 @@ legacy_init_iomem_resources(struct resou
 
 /*
  * Request address space for all standard resources
+ *
+ * This is called just before pcibios_assign_resources(), which is also
+ * an fs_initcall, but is linked in later (in arch/i386/pci/i386.c).
  */
-static void __init register_memory(void)
+static int __init request_standard_resources(void)
 {
-#ifndef CONFIG_XEN
-	unsigned long gapstart, gapsize, round;
-	unsigned long long last;
-#endif
-	int	      i;
+	int i;
 
 	/* Nothing to do if not running in dom0. */
 	if (!(xen_start_info->flags & SIF_INITDOMAIN))
-		return;
+		return 0;
 
+	printk("Setting up standard PCI resources\n");
 	if (efi_enabled)
 		efi_initialize_iomem_resources(&code_resource, &data_resource);
 	else
@@ -1469,8 +1472,18 @@ static void __init register_memory(void)
 	/* request I/O space for devices used on all i[345]86 PCs */
 	for (i = 0; i < STANDARD_IO_RESOURCES; i++)
 		request_resource(&ioport_resource, &standard_io_resources[i]);
+	return 0;
+}
 
+fs_initcall(request_standard_resources);
+
+static void __init register_memory(void)
+{
 #ifndef CONFIG_XEN
+	unsigned long gapstart, gapsize, round;
+	unsigned long long last;
+	int i;
+
 	/*
 	 * Search for the bigest gap in the low 32 bits of the e820
 	 * memory space.
