From: jbeulich@novell.com
Subject: fix issues with the assignment of huge amounts of memory
Patch-mainline: obsolete

At the same time remove the non-applicable and broken support for the
memmap= command line option.
Also fix the overlap of the modules area with the fixmaps on x86-64.

Index: head-2008-09-01/arch/x86/kernel/e820-xen.c
===================================================================
--- head-2008-09-01.orig/arch/x86/kernel/e820-xen.c	2008-09-01 14:15:12.000000000 +0200
+++ head-2008-09-01/arch/x86/kernel/e820-xen.c	2008-09-01 14:17:48.000000000 +0200
@@ -1235,6 +1235,26 @@ static int __init parse_memopt(char *p)
 
 	i = e820.nr_map - 1;
 	current_end = e820.map[i].addr + e820.map[i].size;
+
+	/*
+	 * A little less than 2% of available memory are needed for page
+	 * tables, p2m map, and mem_map. Hence the maximum amount of memory
+	 * we can potentially balloon up to can in no case exceed about 50
+	 * times of what we've been given initially. Since even with that we
+	 * won't be able to boot (due to various calculations done based on
+	 * the total number of pages) we further restrict this to factor 32.
+	 */
+	if ((mem_size >> (PAGE_SHIFT + 5)) > xen_start_info->nr_pages) {
+		u64 size = (u64)xen_start_info->nr_pages << 5;
+
+		printk(KERN_WARNING "mem=%Luk is invalid for an initial"
+				    " allocation of %luk, using %Luk\n",
+		       (unsigned long long)mem_size >> 10,
+		       xen_start_info->nr_pages << (PAGE_SHIFT - 10),
+		       (unsigned long long)size << (PAGE_SHIFT - 10));
+		mem_size = size << PAGE_SHIFT;
+	}
+
 	if (current_end < mem_size) {
 		/*
 		 * The e820 map ends before our requested size so
@@ -1294,6 +1314,7 @@ static int __init parse_memmap_opt(char 
 	return *p == '\0' ? 0 : -EINVAL;
 }
 early_param("memmap", parse_memmap_opt);
+#endif
 
 void __init finish_e820_parsing(void)
 {
@@ -1308,7 +1329,6 @@ void __init finish_e820_parsing(void)
 		e820_print_map("user");
 	}
 }
-#endif
 
 static inline const char *e820_type_to_string(int e820_type)
 {
Index: head-2008-09-01/arch/x86/kernel/setup-xen.c
===================================================================
--- head-2008-09-01.orig/arch/x86/kernel/setup-xen.c	2008-09-01 14:14:56.000000000 +0200
+++ head-2008-09-01/arch/x86/kernel/setup-xen.c	2008-09-01 14:17:48.000000000 +0200
@@ -130,12 +130,7 @@ static struct notifier_block xen_panic_b
 unsigned long *phys_to_machine_mapping;
 EXPORT_SYMBOL(phys_to_machine_mapping);
 
-unsigned long *pfn_to_mfn_frame_list_list,
-#ifdef CONFIG_X86_64
-	*pfn_to_mfn_frame_list[512];
-#else
-	*pfn_to_mfn_frame_list[128];
-#endif
+unsigned long *pfn_to_mfn_frame_list_list, **pfn_to_mfn_frame_list;
 
 /* Raw start-of-day parameters from the hypervisor. */
 start_info_t *xen_start_info;
@@ -1015,17 +1010,25 @@ void __init setup_arch(char **cmdline_p)
 		p2m_pages = xen_start_info->nr_pages;
 
 	if (!xen_feature(XENFEAT_auto_translated_physmap)) {
-		unsigned long i, j;
+		extern unsigned long *contiguous_bitmap;
+		unsigned long i, j, size;
 		unsigned int k, fpp;
 
+#ifdef CONFIG_X86_32
+#define max_pfn max_low_pfn
+#endif
+		contiguous_bitmap = alloc_bootmem((max_pfn + 2*BITS_PER_LONG)
+						  >> 3);
+#undef max_pfn
+
 		/* Make sure we have a large enough P->M table. */
 		phys_to_machine_mapping = alloc_bootmem_pages(
 			max_pfn * sizeof(unsigned long));
-		memset(phys_to_machine_mapping, ~0,
-		       max_pfn * sizeof(unsigned long));
 		memcpy(phys_to_machine_mapping,
 		       (unsigned long *)xen_start_info->mfn_list,
 		       p2m_pages * sizeof(unsigned long));
+		memset(phys_to_machine_mapping + p2m_pages, ~0,
+		       (max_pfn - p2m_pages) * sizeof(unsigned long));
 		free_bootmem(
 			__pa(xen_start_info->mfn_list),
 			PFN_PHYS(PFN_UP(xen_start_info->nr_pages *
@@ -1035,15 +1038,24 @@ void __init setup_arch(char **cmdline_p)
 		 * Initialise the list of the frames that specify the list of
 		 * frames that make up the p2m table. Used by save/restore.
 		 */
-		pfn_to_mfn_frame_list_list = alloc_bootmem_pages(PAGE_SIZE);
-
 		fpp = PAGE_SIZE/sizeof(unsigned long);
+		size = (max_pfn + fpp - 1) / fpp;
+		size = (size + fpp - 1) / fpp;
+		size *= sizeof(unsigned long);
+		pfn_to_mfn_frame_list_list = alloc_bootmem_pages(size);
+		if (size > PAGE_SIZE
+		    && xen_create_contiguous_region((unsigned long)
+						    pfn_to_mfn_frame_list_list,
+						    get_order(size), 0))
+			BUG();
+		pfn_to_mfn_frame_list = alloc_bootmem(size);
+
 		for (i = j = 0, k = -1; i < max_pfn; i += fpp, j++) {
 			if (j == fpp)
 				j = 0;
 			if (j == 0) {
 				k++;
-				BUG_ON(k>=ARRAY_SIZE(pfn_to_mfn_frame_list));
+				BUG_ON(k * sizeof(unsigned long) >= size);
 				pfn_to_mfn_frame_list[k] =
 					alloc_bootmem_pages(PAGE_SIZE);
 				pfn_to_mfn_frame_list_list[k] =
Index: head-2008-09-01/arch/x86/mm/init_32-xen.c
===================================================================
--- head-2008-09-01.orig/arch/x86/mm/init_32-xen.c	2008-09-01 14:15:16.000000000 +0200
+++ head-2008-09-01/arch/x86/mm/init_32-xen.c	2008-09-01 14:17:48.000000000 +0200
@@ -52,8 +52,6 @@
 #include <asm/setup.h>
 #include <asm/cacheflush.h>
 
-extern unsigned long *contiguous_bitmap;
-
 unsigned int __VMALLOC_RESERVE = 128 << 20;
 
 unsigned long max_low_pfn_mapped;
@@ -957,11 +955,6 @@ void __init mem_init(void)
 	int tmp;
 	unsigned long pfn;
 
-	contiguous_bitmap = alloc_bootmem_low_pages(
-		(max_low_pfn + 2*BITS_PER_LONG) >> 3);
-	BUG_ON(!contiguous_bitmap);
-	memset(contiguous_bitmap, 0, (max_low_pfn + 2*BITS_PER_LONG) >> 3);
-
 	pci_iommu_alloc();
 
 #ifdef CONFIG_FLATMEM
Index: head-2008-09-01/arch/x86/mm/init_64-xen.c
===================================================================
--- head-2008-09-01.orig/arch/x86/mm/init_64-xen.c	2008-09-12 11:57:46.000000000 +0200
+++ head-2008-09-01/arch/x86/mm/init_64-xen.c	2008-09-12 11:57:56.000000000 +0200
@@ -68,8 +68,6 @@ EXPORT_SYMBOL(__kernel_page_user);
 
 int after_bootmem;
 
-extern unsigned long *contiguous_bitmap;
-
 DEFINE_PER_CPU(struct mmu_gather, mmu_gathers);
 
 extern pmd_t level2_fixmap_pgt[PTRS_PER_PMD];
@@ -655,6 +653,13 @@ static void __init extend_init_mapping(u
 	while (va < (__START_KERNEL_map
 		     + (table_cur << PAGE_SHIFT)
 		     + tables_space)) {
+		if (!pmd_index(va) && !pte_index(va)) {
+			page = (unsigned long *)init_level4_pgt;
+			addr = page[pgd_index(va)];
+			addr_to_page(addr, page);
+			addr = page[pud_index(va)];
+			addr_to_page(addr, page);
+		}
 		pmd = (pmd_t *)&page[pmd_index(va)];
 		if (pmd_none(*pmd)) {
 			pte_page = alloc_static_page(&phys);
@@ -1073,11 +1078,6 @@ void __init mem_init(void)
 	long codesize, reservedpages, datasize, initsize;
 	unsigned long pfn;
 
-	contiguous_bitmap = alloc_bootmem_low_pages(
-		(max_pfn + 2*BITS_PER_LONG) >> 3);
-	BUG_ON(!contiguous_bitmap);
-	memset(contiguous_bitmap, 0, (max_pfn + 2*BITS_PER_LONG) >> 3);
-
 	pci_iommu_alloc();
 
 	/* clear_bss() already clear the empty_zero_page */
Index: head-2008-09-01/drivers/xen/core/machine_reboot.c
===================================================================
--- head-2008-09-01.orig/drivers/xen/core/machine_reboot.c	2008-09-01 14:17:17.000000000 +0200
+++ head-2008-09-01/drivers/xen/core/machine_reboot.c	2008-09-01 14:17:48.000000000 +0200
@@ -75,7 +75,7 @@ static void post_suspend(int suspend_can
 	unsigned long shinfo_mfn;
 	extern unsigned long max_pfn;
 	extern unsigned long *pfn_to_mfn_frame_list_list;
-	extern unsigned long *pfn_to_mfn_frame_list[];
+	extern unsigned long **pfn_to_mfn_frame_list;
 
 	if (suspend_cancelled) {
 		xen_start_info->store_mfn =
Index: head-2008-09-01/include/asm-x86/mach-xen/asm/pgtable_64.h
===================================================================
--- head-2008-09-01.orig/include/asm-x86/mach-xen/asm/pgtable_64.h	2008-09-01 14:16:33.000000000 +0200
+++ head-2008-09-01/include/asm-x86/mach-xen/asm/pgtable_64.h	2008-09-01 14:17:48.000000000 +0200
@@ -166,7 +166,7 @@ static inline void xen_set_pgd(pgd_t *pg
 #define PGDIR_MASK	(~(PGDIR_SIZE - 1))
 
 
-#define MAXMEM		 _AC(0x00003fffffffffff, UL)
+#define MAXMEM		 _AC(0x000000dfffffffff, UL)
 #define VMALLOC_START    _AC(0xffffc20000000000, UL)
 #define VMALLOC_END      _AC(0xffffe1ffffffffff, UL)
 #define VMEMMAP_START	 _AC(0xffffe20000000000, UL)
