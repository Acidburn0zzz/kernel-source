Subject: Fix xen build.
From: jbeulich@novell.com
Patch-mainline: obsolete

--- head-2009-02-18.orig/drivers/acpi/acpica/hwsleep.c	2009-02-18 13:39:41.000000000 +0100
+++ head-2009-02-18/drivers/acpi/acpica/hwsleep.c	2009-02-18 13:58:23.000000000 +0100
@@ -416,6 +416,7 @@ ACPI_EXPORT_SYMBOL(acpi_enter_sleep_stat
  *              THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED
  *
  ******************************************************************************/
+#ifndef CONFIG_XEN
 acpi_status asmlinkage acpi_enter_sleep_state_s4bios(void)
 {
 	u32 in_value;
@@ -465,6 +466,7 @@ acpi_status asmlinkage acpi_enter_sleep_
 }
 
 ACPI_EXPORT_SYMBOL(acpi_enter_sleep_state_s4bios)
+#endif
 
 /*******************************************************************************
  *
--- head-2009-02-18.orig/drivers/base/cpu.c	2009-02-06 10:27:53.000000000 +0100
+++ head-2009-02-18/drivers/base/cpu.c	2009-02-18 13:58:23.000000000 +0100
@@ -78,7 +78,7 @@ static inline void register_cpu_control(
 }
 #endif /* CONFIG_HOTPLUG_CPU */
 
-#ifdef CONFIG_KEXEC
+#if defined(CONFIG_KEXEC) && !defined(CONFIG_XEN)
 #include <linux/kexec.h>
 
 static ssize_t show_crash_notes(struct sys_device *dev, struct sysdev_attribute *attr,
@@ -217,7 +217,7 @@ int __cpuinit register_cpu(struct cpu *c
 	if (!error)
 		register_cpu_under_node(num, cpu_to_node(num));
 
-#ifdef CONFIG_KEXEC
+#if defined(CONFIG_KEXEC) && !defined(CONFIG_XEN)
 	if (!error)
 		error = sysdev_create_file(&cpu->sysdev, &attr_crash_notes);
 #endif
--- head-2009-02-18.orig/drivers/ide/ide-lib.c	2009-02-18 13:39:41.000000000 +0100
+++ head-2009-02-18/drivers/ide/ide-lib.c	2009-02-18 13:58:23.000000000 +0100
@@ -175,6 +175,16 @@ void ide_toggle_bounce(ide_drive_t *driv
 {
 	u64 addr = BLK_BOUNCE_HIGH;	/* dma64_addr_t */
 
+#ifndef CONFIG_XEN
+	if (!PCI_DMA_BUS_IS_PHYS) {
+		addr = BLK_BOUNCE_ANY;
+	} else if (on && drive->media == ide_disk) {
+		struct device *dev = drive->hwif->dev;
+
+		if (dev && dev->dma_mask)
+			addr = *dev->dma_mask;
+	}
+#else
 	if (on && drive->media == ide_disk) {
 		struct device *dev = drive->hwif->dev;
 
@@ -183,6 +193,7 @@ void ide_toggle_bounce(ide_drive_t *driv
 		else if (dev && dev->dma_mask)
 			addr = *dev->dma_mask;
 	}
+#endif
 
 	if (drive->queue)
 		blk_queue_bounce_limit(drive->queue, addr);
--- head-2009-02-18.orig/include/linux/mm.h	2009-02-18 13:39:41.000000000 +0100
+++ head-2009-02-18/include/linux/mm.h	2009-02-18 13:58:23.000000000 +0100
@@ -200,10 +200,12 @@ struct vm_operations_struct {
 	int (*access)(struct vm_area_struct *vma, unsigned long addr,
 		      void *buf, int len, int write);
 
+#ifdef CONFIG_XEN
 	/* Area-specific function for clearing the PTE at @ptep. Returns the
 	 * original value of @ptep. */
 	pte_t (*zap_pte)(struct vm_area_struct *vma, 
 			 unsigned long addr, pte_t *ptep, int is_fullmm);
+#endif
 #ifdef CONFIG_NUMA
 	/*
 	 * set_policy() op must add a reference to any non-NULL @new mempolicy
--- head-2009-02-18.orig/kernel/kexec.c	2009-02-18 13:58:13.000000000 +0100
+++ head-2009-02-18/kernel/kexec.c	2009-02-18 13:58:23.000000000 +0100
@@ -45,8 +45,10 @@
 #include <linux/kdb.h>
 #endif
 
+#ifndef CONFIG_XEN
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
+#endif
 int dump_after_notifier;
 
 /* vmcoreinfo stuff */
@@ -1168,6 +1170,7 @@ static void final_note(u32 *buf)
 	memcpy(buf, &note, sizeof(note));
 }
 
+#ifndef CONFIG_XEN
 void crash_save_cpu(struct pt_regs *regs, int cpu)
 {
 	struct elf_prstatus prstatus;
@@ -1193,6 +1196,7 @@ void crash_save_cpu(struct pt_regs *regs
 		      	      &prstatus, sizeof(prstatus));
 	final_note(buf);
 }
+#endif
 
 #ifdef CONFIG_SYSCTL
 static ctl_table dump_after_notifier_table[] = {
@@ -1220,6 +1224,7 @@ static ctl_table kexec_sys_table[] = {
 
 static int __init crash_notes_memory_init(void)
 {
+#ifndef CONFIG_XEN
 	/* Allocate memory for saving cpu registers. */
 	crash_notes = alloc_percpu(note_buf_t);
 	if (!crash_notes) {
@@ -1227,6 +1232,7 @@ static int __init crash_notes_memory_ini
 		" states failed\n");
 		return -ENOMEM;
 	}
+#endif
 #ifdef CONFIG_SYSCTL
 	register_sysctl_table(kexec_sys_table);
 #endif
--- head-2009-02-18.orig/mm/memory.c	2009-02-18 13:39:41.000000000 +0100
+++ head-2009-02-18/mm/memory.c	2009-02-18 13:58:23.000000000 +0100
@@ -814,10 +814,12 @@ static unsigned long zap_pte_range(struc
 				     page->index > details->last_index))
 					continue;
 			}
+#ifdef CONFIG_XEN
 			if (unlikely(vma->vm_ops && vma->vm_ops->zap_pte))
 				ptent = vma->vm_ops->zap_pte(vma, addr, pte,
 							     tlb->fullmm);
 			else
+#endif
 				ptent = ptep_get_and_clear_full(mm, addr, pte,
 								tlb->fullmm);
 			tlb_remove_tlb_entry(tlb, pte, addr);
