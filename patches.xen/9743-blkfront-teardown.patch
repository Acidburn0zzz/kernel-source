# HG changeset 9743 patch
From: kaf24@firebug.cl.cam.ac.uk
# Node ID 6ce2965720ee2ed191700834102e867009ea14ce
# Parent  98a4aad0751a6d0f594b8f17864ea9cfb9fe4d15
Subject: blkfront: More care over device teardown.
 1. We must ensure gnttab callbacks are disabled and all work
    flushed before tearing down device state. A new gnttab interface
    call is added for this purpose.
 2. blkif_free() must check for a request_queue before deref'ing it.
Signed-off-by: Keir Fraser <keir@xensource.com>
xen-unstable changeset:   10346:5552bc2c3716e9e0f57dbba80f61332b895a0f2a
xen-unstable date:        Wed Jun 14 11:19:53 2006 +0100

Extended by exporting of gnttab_cancel_free_callback.

Acked-by: Jan Beulich <jbeulich@novell.com>

Index: head-2006-06-13/drivers/xen/blkfront/blkfront.c
===================================================================
--- head-2006-06-13.orig/drivers/xen/blkfront/blkfront.c	2006-06-16 10:57:23.000000000 +0200
+++ head-2006-06-13/drivers/xen/blkfront/blkfront.c	2006-06-16 10:58:58.000000000 +0200
@@ -342,9 +342,21 @@ static void connect(struct blkfront_info
 static void blkfront_closing(struct xenbus_device *dev)
 {
 	struct blkfront_info *info = dev->data;
+	unsigned long flags;
 
 	DPRINTK("blkfront_closing: %s removed\n", dev->nodename);
 
+	if (info->rq == NULL)
+		return;
+
+	spin_lock_irqsave(&blkif_io_lock, flags);
+	/* No more blkif_request(). */
+	blk_stop_queue(info->rq);
+	/* No more gnttab callback work. */
+	gnttab_cancel_free_callback(&info->callback);
+	flush_scheduled_work();
+	spin_unlock_irqrestore(&blkif_io_lock, flags);
+
 	xlvbd_del(info);
 
 	xenbus_switch_state(dev, XenbusStateClosed);
@@ -696,7 +708,12 @@ static void blkif_free(struct blkfront_i
 	spin_lock_irq(&blkif_io_lock);
 	info->connected = suspend ?
 		BLKIF_STATE_SUSPENDED : BLKIF_STATE_DISCONNECTED;
-	blk_stop_queue(info->rq); /* no more blkif_request() */
+	/* No more blkif_request(). */
+	if (info->rq)
+		blk_stop_queue(info->rq);
+	/* No more gnttab callback work. */
+	gnttab_cancel_free_callback(&info->callback);
+	flush_scheduled_work();
 	spin_unlock_irq(&blkif_io_lock);
 
 	/* Free resources associated with old device channel. */
Index: head-2006-06-13/drivers/xen/core/gnttab.c
===================================================================
--- head-2006-06-13.orig/drivers/xen/core/gnttab.c	2006-06-13 08:35:17.000000000 +0200
+++ head-2006-06-13/drivers/xen/core/gnttab.c	2006-06-16 10:58:58.000000000 +0200
@@ -68,6 +68,7 @@ EXPORT_SYMBOL_GPL(gnttab_free_grant_refe
 EXPORT_SYMBOL_GPL(gnttab_claim_grant_reference);
 EXPORT_SYMBOL_GPL(gnttab_release_grant_reference);
 EXPORT_SYMBOL_GPL(gnttab_request_free_callback);
+EXPORT_SYMBOL_GPL(gnttab_cancel_free_callback);
 EXPORT_SYMBOL_GPL(gnttab_grant_foreign_access_ref);
 EXPORT_SYMBOL_GPL(gnttab_grant_foreign_transfer_ref);
 
@@ -359,6 +360,21 @@ gnttab_request_free_callback(struct gntt
 	spin_unlock_irqrestore(&gnttab_list_lock, flags);
 }
 
+void gnttab_cancel_free_callback(struct gnttab_free_callback *callback)
+{
+	struct gnttab_free_callback **pcb;
+	unsigned long flags;
+
+	spin_lock_irqsave(&gnttab_list_lock, flags);
+	for (pcb = &gnttab_free_callback_list; *pcb; pcb = &(*pcb)->next) {
+		if (*pcb == callback) {
+			*pcb = callback->next;
+			break;
+		}
+	}
+	spin_unlock_irqrestore(&gnttab_list_lock, flags);
+}
+
 #ifndef __ia64__
 static int map_pte_fn(pte_t *pte, struct page *pmd_page,
 		      unsigned long addr, void *data)
Index: head-2006-06-13/include/xen/gnttab.h
===================================================================
--- head-2006-06-13.orig/include/xen/gnttab.h	2006-06-13 08:35:17.000000000 +0200
+++ head-2006-06-13/include/xen/gnttab.h	2006-06-16 10:58:58.000000000 +0200
@@ -97,6 +97,7 @@ void gnttab_release_grant_reference(gran
 
 void gnttab_request_free_callback(struct gnttab_free_callback *callback,
 				  void (*fn)(void *), void *arg, u16 count);
+void gnttab_cancel_free_callback(struct gnttab_free_callback *callback);
 
 void gnttab_grant_foreign_access_ref(grant_ref_t ref, domid_t domid,
 				     unsigned long frame, int readonly);
