Subject: code changes using Xen's feature flag logic

# HG changeset 8924 patch
# User Ian.Campbell@xensource.com
# Node ID 229c602a075a9fe16cb8797a6d5d718eb2deb18c
# Parent  b41e196442712ce92ed482c1310db33354ea7fc8
From: Ian Campbell <Ian.Campbell@XenSource.com>
Allow Xen to truncate x86_32 segment limits to the correct value
rather than hardcoding them in each guest kernel.

Signed-off-by: Ian Campbell <Ian.Campbell@XenSource.com>

# HG changeset 8926 patch
# User Ian.Campbell@xensource.com
# Node ID 32a74fa9e221fa6e60ec150fab8e74d7a4494f04
# Parent  2d3124df8a0e3ad3045798df44980fb9e4827b49
From: Ian Campbell <Ian.Campbell@XenSource.com>
List supported feature flags in __xen_guest section.

Signed-off-by: Ian Campbell <Ian.Campbell@XenSource.com>

# HG changeset 8945 patch
# User kaf24@firebug.cl.cam.ac.uk
# Node ID b883ef5fad48486365537d15d20336c0bbcace83
# Parent  3dde684846837f45f83bb254b755bf2632e8cbcf
From: Keir Fraser <keir@xensource.com>
Remove some unnecessary diffs vs. native Linux. We now don't use the Xen
FLAT_foo segment selectors at all.

Signed-off-by: Keir Fraser <keir@xensource.com>

Acked-by: Jan Beulich <jbeulich@novell.com>

Index: head-2006-03-02/arch/i386/kernel/head-xen.S
===================================================================
--- head-2006-03-02.orig/arch/i386/kernel/head-xen.S	2006-03-02 11:44:35.000000000 +0100
+++ head-2006-03-02/arch/i386/kernel/head-xen.S	2006-03-02 11:44:49.000000000 +0100
@@ -147,17 +147,10 @@ ENTRY(cpu_gdt_table)
 	.quad 0x0000000000000000	/* 0x53 reserved */
 	.quad 0x0000000000000000	/* 0x5b reserved */
 
-#ifdef CONFIG_X86_PAE
-	.quad 0x00cfba00000067ff	/* 0x60 kernel 4GB code at 0x00000000 */
-	.quad 0x00cfb200000067ff	/* 0x68 kernel 4GB data at 0x00000000 */
-	.quad 0x00cffa00000067ff	/* 0x73 user 4GB code at 0x00000000 */
-	.quad 0x00cff200000067ff	/* 0x7b user 4GB data at 0x00000000 */
-#else
-	.quad 0x00cfba000000c3ff	/* 0x60 kernel 4GB code at 0x00000000 */
-	.quad 0x00cfb2000000c3ff	/* 0x68 kernel 4GB data at 0x00000000 */
-	.quad 0x00cffa000000c3ff	/* 0x73 user 4GB code at 0x00000000 */
-	.quad 0x00cff2000000c3ff	/* 0x7b user 4GB data at 0x00000000 */
-#endif
+	.quad 0x00cfba000000ffff	/* 0x60 kernel 4GB code at 0x00000000 */
+	.quad 0x00cfb2000000ffff	/* 0x68 kernel 4GB data at 0x00000000 */
+	.quad 0x00cffa000000ffff	/* 0x73 user 4GB code at 0x00000000 */
+	.quad 0x00cff2000000ffff	/* 0x7b user 4GB data at 0x00000000 */
 
 	.quad 0x0000000000000000	/* 0x80 TSS descriptor */
 	.quad 0x0000000000000000	/* 0x88 LDT descriptor */
@@ -204,6 +197,9 @@ ENTRY(cpu_gdt_table)
 	.ascii	",XEN_VER=xen-3.0"
 	.ascii	",VIRT_BASE=0x"; utoh __PAGE_OFFSET
 	.ascii	",HYPERCALL_PAGE=0x"; utoh ((__PHYSICAL_START+HYPERCALL_PAGE_OFFSET)>>PAGE_SHIFT)
+	.ascii  ",FEATURES=writable_page_tables"
+	.ascii	         "|writable_descriptor_tables"
+	.ascii	         "|auto_translated_physmap"
 #ifdef CONFIG_X86_PAE
 	.ascii	",PAE=yes"
 #else
Index: head-2006-03-02/arch/i386/kernel/traps-xen.c
===================================================================
--- head-2006-03-02.orig/arch/i386/kernel/traps-xen.c	2006-03-02 11:44:35.000000000 +0100
+++ head-2006-03-02/arch/i386/kernel/traps-xen.c	2006-03-02 11:44:49.000000000 +0100
@@ -1050,12 +1050,6 @@ void __init trap_init(void)
 void smp_trap_init(trap_info_t *trap_ctxt)
 {
 	trap_info_t *t = trap_table;
-	int i;
-
-	for (i = 0; i < 256; i++) {
-		trap_ctxt[i].vector = i;
-		trap_ctxt[i].cs     = FLAT_KERNEL_CS;
-	}
 
 	for (t = trap_table; t->address; t++) {
 		trap_ctxt[t->vector].flags = t->flags;
Index: head-2006-03-02/arch/x86_64/kernel/head-xen.S
===================================================================
--- head-2006-03-02.orig/arch/x86_64/kernel/head-xen.S	2006-03-02 11:44:47.000000000 +0100
+++ head-2006-03-02/arch/x86_64/kernel/head-xen.S	2006-03-02 11:44:49.000000000 +0100
@@ -182,5 +182,8 @@ gdt_end:
 	.ascii	",XEN_VER=xen-3.0"
 	.ascii	",VIRT_BASE=0x"; utoh __START_KERNEL_map
 	.ascii	",HYPERCALL_PAGE=0x"; utoh (phys_hypercall_page >> PAGE_SHIFT)
+	.ascii  ",FEATURES=writable_page_tables"
+	.ascii		 "|writable_descriptor_tables"
+	.ascii		 "|auto_translated_physmap"
 	.ascii	",LOADER=generic"
 	.byte	0
Index: head-2006-03-02/arch/x86_64/kernel/traps-xen.c
===================================================================
--- head-2006-03-02.orig/arch/x86_64/kernel/traps-xen.c	2006-03-02 11:44:47.000000000 +0100
+++ head-2006-03-02/arch/x86_64/kernel/traps-xen.c	2006-03-02 11:44:49.000000000 +0100
@@ -993,12 +993,6 @@ void __init trap_init(void)
 void smp_trap_init(trap_info_t *trap_ctxt)
 {
 	trap_info_t *t = trap_table;
-	int i;
-
-	for (i = 0; i < 256; i++) {
-		trap_ctxt[i].vector = i;
-		trap_ctxt[i].cs     = FLAT_KERNEL_CS;
-	}
 
 	for (t = trap_table; t->address; t++) {
 		trap_ctxt[t->vector].flags = t->flags;
Index: head-2006-03-02/include/asm-i386/mach-xen/asm/segment.h
===================================================================
--- head-2006-03-02.orig/include/asm-i386/mach-xen/asm/segment.h	2006-03-02 11:34:24.000000000 +0100
+++ head-2006-03-02/include/asm-i386/mach-xen/asm/segment.h	2006-03-02 11:44:49.000000000 +0100
@@ -85,9 +85,11 @@
 
 /* Simple and small GDT entries for booting only */
 
-#define __BOOT_CS	FLAT_KERNEL_CS
+#define GDT_ENTRY_BOOT_CS		2
+#define __BOOT_CS	(GDT_ENTRY_BOOT_CS * 8)
 
-#define __BOOT_DS	FLAT_KERNEL_DS
+#define GDT_ENTRY_BOOT_DS		(GDT_ENTRY_BOOT_CS + 1)
+#define __BOOT_DS	(GDT_ENTRY_BOOT_DS * 8)
 
 /* The PnP BIOS entries in the GDT */
 #define GDT_ENTRY_PNPBIOS_CS32		(GDT_ENTRY_PNPBIOS_BASE + 0)
