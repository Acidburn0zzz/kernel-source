From: jbeulich@novell.com
Subject: adjust head.S

$subject says it all.

Index: head-2006-03-02/arch/i386/kernel/head-xen.S
===================================================================
--- head-2006-03-02.orig/arch/i386/kernel/head-xen.S	2006-03-02 11:22:26.000000000 +0100
+++ head-2006-03-02/arch/i386/kernel/head-xen.S	2006-03-02 11:44:01.000000000 +0100
@@ -1,27 +1,14 @@
-
 #include <linux/config.h>
-
-.section __xen_guest
-	.ascii	"GUEST_OS=linux,GUEST_VER=2.6"
-	.ascii	",XEN_VER=xen-3.0"
-	.ascii	",VIRT_BASE=0xC0000000"
-	.ascii	",HYPERCALL_PAGE=0x104" /* __pa(hypercall_page) >> 12 */
-#ifdef CONFIG_X86_PAE
-	.ascii	",PAE=yes"
-#else
-	.ascii	",PAE=no"
-#endif
-	.ascii	",LOADER=generic"
-	.byte	0
-
-.text
 #include <linux/threads.h>
 #include <linux/linkage.h>
 #include <asm/segment.h>
+#include <asm/page.h>
 #include <asm/thread_info.h>
 #include <asm/asm-offsets.h>
 #include <xen/interface/arch-x86_32.h>
 
+.text
+
 /*
  * References to members of the new_cpu_data structure.
  */
@@ -45,7 +32,7 @@ ENTRY(startup_32_smp)
 	cld
 
 	/* Set up the stack pointer */
-	lss stack_start,%esp
+	movl $(init_thread_union+THREAD_SIZE),%esp
 
 checkCPUtype:
 
@@ -102,9 +89,28 @@ ENTRY(lgdt_finish)
 	pushl %eax
 	lret
 
-ENTRY(stack_start)
-	.long init_thread_union+THREAD_SIZE
-	.long __BOOT_DS
+#define HYPERCALL_PAGE_OFFSET 0x1000
+.org HYPERCALL_PAGE_OFFSET
+ENTRY(hypercall_page)
+.skip 0x1000
+
+/*
+ * Real beginning of normal "text" segment
+ */
+ENTRY(stext)
+ENTRY(_stext)
+
+/*
+ * BSS section
+ */
+.section ".bss.page_aligned","w"
+ENTRY(empty_zero_page)
+	.fill 4096,1,0
+
+/*
+ * This starts the data section.
+ */
+.data
 
 ready:	.byte 0
 
@@ -125,10 +131,6 @@ cpu_gdt_descr:
 
 	.fill NR_CPUS-1,8,0		# space for the other GDT descriptors
 
-.org 0x1000
-ENTRY(empty_zero_page)
-
-.org 0x2000
 ENTRY(cpu_gdt_table)
 	.quad 0x0000000000000000	/* NULL descriptor */
 	.quad 0x0000000000000000	/* 0x0b reserved */
@@ -144,15 +146,15 @@ ENTRY(cpu_gdt_table)
 	.quad 0x0000000000000000	/* 0x5b reserved */
 
 #ifdef CONFIG_X86_PAE
-	.quad 0x00cfbb00000067ff	/* 0x60 kernel 4GB code at 0x00000000 */
-	.quad 0x00cfb300000067ff	/* 0x68 kernel 4GB data at 0x00000000 */
-	.quad 0x00cffb00000067ff	/* 0x73 user 4GB code at 0x00000000 */
-	.quad 0x00cff300000067ff	/* 0x7b user 4GB data at 0x00000000 */
+	.quad 0x00cfba00000067ff	/* 0x60 kernel 4GB code at 0x00000000 */
+	.quad 0x00cfb200000067ff	/* 0x68 kernel 4GB data at 0x00000000 */
+	.quad 0x00cffa00000067ff	/* 0x73 user 4GB code at 0x00000000 */
+	.quad 0x00cff200000067ff	/* 0x7b user 4GB data at 0x00000000 */
 #else
-	.quad 0x00cfbb000000c3ff	/* 0x60 kernel 4GB code at 0x00000000 */
-	.quad 0x00cfb3000000c3ff	/* 0x68 kernel 4GB data at 0x00000000 */
-	.quad 0x00cffb000000c3ff	/* 0x73 user 4GB code at 0x00000000 */
-	.quad 0x00cff3000000c3ff	/* 0x7b user 4GB data at 0x00000000 */
+	.quad 0x00cfba000000c3ff	/* 0x60 kernel 4GB code at 0x00000000 */
+	.quad 0x00cfb2000000c3ff	/* 0x68 kernel 4GB data at 0x00000000 */
+	.quad 0x00cffa000000c3ff	/* 0x73 user 4GB code at 0x00000000 */
+	.quad 0x00cff2000000c3ff	/* 0x7b user 4GB data at 0x00000000 */
 #endif
 
 	.quad 0x0000000000000000	/* 0x80 TSS descriptor */
@@ -177,25 +179,33 @@ ENTRY(cpu_gdt_table)
 	.quad 0x0000000000000000	/* 0xc0 APM CS 16 code (16 bit) */
 	.quad 0x0000000000000000	/* 0xc8 APM DS    data */
 
-	.quad 0x0000000000000000	/* 0xd0 - ESPFIX 16-bit SS */
-	.quad 0x0000000000000000	/* 0xd8 - unused */
-	.quad 0x0000000000000000	/* 0xe0 - unused */
-	.quad 0x0000000000000000	/* 0xe8 - unused */
-	.quad 0x0000000000000000	/* 0xf0 - unused */
-	.quad 0x0000000000000000	/* 0xf8 - GDT entry 31: double-fault TSS */
+	.fill GDT_ENTRIES - (.-cpu_gdt_table) / 8,8,0
 
-	/* Be sure this is zeroed to avoid false validations in Xen */
-	.fill PAGE_SIZE_asm / 8 - GDT_ENTRIES,8,0
-
-.org 0x3000
-ENTRY(default_ldt)
-
-.org 0x4000
-ENTRY(hypercall_page)
-
-.org 0x5000
 /*
- * Real beginning of normal "text" segment
+ * __xen_guest information
  */
-ENTRY(stext)
-ENTRY(_stext)
+.macro utoh value
+ .if (\value) < 0
+	utoh (((\value)>>4)&0x0fffffff)
+ .elseif (\value) >= 0x10
+	utoh ((\value)>>4)
+ .endif
+ .if ((\value) & 0xf) < 10
+  .byte '0' + ((\value) & 0xf)
+ .else
+  .byte 'A' + ((\value) & 0xf) - 10
+ .endif
+.endm
+
+.section __xen_guest
+	.ascii	"GUEST_OS=linux,GUEST_VER=2.6"
+	.ascii	",XEN_VER=xen-3.0"
+	.ascii	",VIRT_BASE=0x"; utoh __PAGE_OFFSET
+	.ascii	",HYPERCALL_PAGE=0x"; utoh ((__PHYSICAL_START+HYPERCALL_PAGE_OFFSET)>>PAGE_SHIFT)
+#ifdef CONFIG_X86_PAE
+	.ascii	",PAE=yes"
+#else
+	.ascii	",PAE=no"
+#endif
+	.ascii	",LOADER=generic"
+	.byte	0
Index: head-2006-03-02/arch/i386/kernel/traps-xen.c
===================================================================
--- head-2006-03-02.orig/arch/i386/kernel/traps-xen.c	2006-03-02 11:34:25.000000000 +0100
+++ head-2006-03-02/arch/i386/kernel/traps-xen.c	2006-03-02 11:41:02.000000000 +0100
@@ -58,6 +58,8 @@
 
 asmlinkage int system_call(void);
 
+struct desc_struct default_ldt[] = { { 0, 0 }, { 0, 0 }, { 0, 0 },
+		{ 0, 0 }, { 0, 0 } };
 /* Do we ignore FPU interrupts ? */
 char ignore_fpu_irq = 0;
 
@@ -495,20 +497,6 @@ DO_ERROR_INFO(32, SIGSEGV, "iret excepti
 fastcall void __kprobes do_general_protection(struct pt_regs * regs,
 					      long error_code)
 {
-	/*
-	 * If we trapped on an LDT access then ensure that the default_ldt is
-	 * loaded, if nothing else. We load default_ldt lazily because LDT
-	 * switching costs time and many applications don't need it.
-	 */
-	if (unlikely((error_code & 6) == 4)) {
-		unsigned long ldt;
-		__asm__ __volatile__ ("sldt %0" : "=r" (ldt));
-		if (ldt == 0) {
-			xen_set_ldt((unsigned long)&default_ldt[0], 5);
-			return;
-		}
-	}
-
 	current->thread.error_code = error_code;
 	current->thread.trap_no = 13;
 
@@ -1069,13 +1057,6 @@ void __init trap_init(void)
 	}
 
 	/*
-	 * default LDT is a single-entry callgate to lcall7 for iBCS
-	 * and a callgate to lcall27 for Solaris/x86 binaries
-	 */
-	make_lowmem_page_readonly(
-		&default_ldt[0], XENFEAT_writable_descriptor_tables);
-
-	/*
 	 * Should be a barrier for any external CPU state.
 	 */
 	cpu_init();
