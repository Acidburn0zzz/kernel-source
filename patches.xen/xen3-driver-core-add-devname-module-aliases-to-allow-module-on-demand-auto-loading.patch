From 578454ff7eab61d13a26b568f99a89a2c9edc881 Mon Sep 17 00:00:00 2001
From: Kay Sievers <kay.sievers@vrfy.org>
Date: Thu, 20 May 2010 18:07:20 +0200
Subject: driver core: add devname module aliases to allow module on-demand auto-loading
Patch-mainline: 2.6.35

From: Kay Sievers <kay.sievers@vrfy.org>

commit 578454ff7eab61d13a26b568f99a89a2c9edc881 upstream.

This adds:
  alias: devname:<name>
to some common kernel modules, which will allow the on-demand loading
of the kernel module when the device node is accessed.

Ideally all these modules would be compiled-in, but distros seems too
much in love with their modularization that we need to cover the common
cases with this new facility. It will allow us to remove a bunch of pretty
useless init scripts and modprobes from init scripts.

The static device node aliases will be carried in the module itself. The
program depmod will extract this information to a file in the module directory:
  $ cat /lib/modules/2.6.34-00650-g537b60d-dirty/modules.devname
  # Device nodes to trigger on-demand module loading.
  microcode cpu/microcode c10:184
  fuse fuse c10:229
  ppp_generic ppp c108:0
  tun net/tun c10:200
  dm_mod mapper/control c10:235

Udev will pick up the depmod created file on startup and create all the
static device nodes which the kernel modules specify, so that these modules
get automatically loaded when the device node is accessed:
  $ /sbin/udevd --debug
  ...
  static_dev_create_from_modules: mknod '/dev/cpu/microcode' c10:184
  static_dev_create_from_modules: mknod '/dev/fuse' c10:229
  static_dev_create_from_modules: mknod '/dev/ppp' c108:0
  static_dev_create_from_modules: mknod '/dev/net/tun' c10:200
  static_dev_create_from_modules: mknod '/dev/mapper/control' c10:235
  udev_rules_apply_static_dev_perms: chmod '/dev/net/tun' 0666
  udev_rules_apply_static_dev_perms: chmod '/dev/fuse' 0666

A few device nodes are switched to statically allocated numbers, to allow
the static nodes to work. This might also useful for systems which still run
a plain static /dev, which is completely unsafe to use with any dynamic minor
numbers.

Note:
The devname aliases must be limited to the *common* and *single*instance*
device nodes, like the misc devices, and never be used for conceptually limited
systems like the loop devices, which should rather get fixed properly and get a
control node for losetup to talk to, instead of creating a random number of
device nodes in advance, regardless if they are ever used.

This facility is to hide the mess distros are creating with too modualized
kernels, and just to hide that these modules are not compiled-in, and not to
paper-over broken concepts. Thanks! :)

Cc: Greg Kroah-Hartman <gregkh@suse.de>
Cc: David S. Miller <davem@davemloft.net>
Cc: Miklos Szeredi <miklos@szeredi.hu>
Cc: Chris Mason <chris.mason@oracle.com>
Cc: Alasdair G Kergon <agk@redhat.com>
Cc: Tigran Aivazian <tigran@aivazian.fsnet.co.uk>
Cc: Ian Kent <raven@themaw.net>
Signed-Off-By: Kay Sievers <kay.sievers@vrfy.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Automatically created from "patches.drivers/driver-core-add-devname-module-aliases-to-allow-module-on-demand-auto-loading.patch" by xen-port-patches.py

--- head-2010-06-18.orig/arch/x86/kernel/microcode_core-xen.c	2010-03-24 16:00:05.000000000 +0100
+++ head-2010-06-18/arch/x86/kernel/microcode_core-xen.c	2010-06-18 13:28:17.000000000 +0200
@@ -145,6 +145,7 @@ static void microcode_dev_exit(void)
 }
 
 MODULE_ALIAS_MISCDEV(MICROCODE_MINOR);
+MODULE_ALIAS("devname:cpu/microcode");
 #else
 #define microcode_dev_init()	0
 #define microcode_dev_exit()	do { } while (0)
--- head-2010-06-18.orig/drivers/xen/blktap/blktap.c	2010-06-18 13:41:33.000000000 +0200
+++ head-2010-06-18/drivers/xen/blktap/blktap.c	2010-06-18 13:41:55.000000000 +0200
@@ -1778,3 +1778,5 @@ static int __init blkif_init(void)
 module_init(blkif_init);
 
 MODULE_LICENSE("Dual BSD/GPL");
+MODULE_ALIAS("devname:xen/blktap0");
+MODULE_ALIAS("devname:blktap0");
--- head-2010-06-18.orig/drivers/xen/evtchn.c	2010-06-18 13:42:03.000000000 +0200
+++ head-2010-06-18/drivers/xen/evtchn.c	2010-06-18 13:42:11.000000000 +0200
@@ -512,3 +512,5 @@ module_init(evtchn_init);
 module_exit(evtchn_cleanup);
 
 MODULE_LICENSE("GPL");
+MODULE_ALIAS("devname:xen/evtchn");
+MODULE_ALIAS("devname:evtchn");
--- head-2010-06-18.orig/drivers/xen/gntdev/gntdev.c	2010-04-15 11:13:05.000000000 +0200
+++ head-2010-06-18/drivers/xen/gntdev/gntdev.c	2010-06-18 13:45:55.000000000 +0200
@@ -44,6 +44,10 @@ MODULE_LICENSE("GPL");
 MODULE_AUTHOR(DRIVER_AUTHOR);
 MODULE_DESCRIPTION(DRIVER_DESC);
 
+#define GNTDEV_NAME "gntdev"
+MODULE_ALIAS("devname:xen/" GNTDEV_NAME);
+MODULE_ALIAS("devname:" GNTDEV_NAME);
+
 #define MAX_GRANTS_LIMIT   1024
 #define DEFAULT_MAX_GRANTS 128
 
@@ -162,8 +166,6 @@ static struct vm_operations_struct gntde
 /* The driver major number, for use when unregistering the driver. */
 static int gntdev_major;
 
-#define GNTDEV_NAME "gntdev"
-
 /* Memory mapping functions
  * ------------------------
  *
