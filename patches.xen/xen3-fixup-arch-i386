Subject: xen3 i386 build fixes.
From: kraxel@suse.de.

Index: head-2006-02-03/include/asm-i386/system.h
===================================================================
--- head-2006-02-03.orig/include/asm-i386/system.h	2006-01-23 15:23:27.000000000 +0100
+++ head-2006-02-03/include/asm-i386/system.h	2006-01-13 12:09:49.000000000 +0100
@@ -336,7 +336,7 @@ static inline unsigned long long __cmpxc
 				      unsigned long long new)
 {
 	unsigned long long prev;
-	__asm__ __volatile__(LOCK_PREFIX "cmpxchg8b %3"
+	__asm__ __volatile__(LOCK "cmpxchg8b %3"
 			     : "=A"(prev)
 			     : "b"((unsigned long)new),
 			       "c"((unsigned long)(new >> 32)),
Index: head-2006-02-03/include/asm-i386/mach-xen/asm/pgtable.h
===================================================================
--- head-2006-02-03.orig/include/asm-i386/mach-xen/asm/pgtable.h	2006-02-03 13:32:24.000000000 +0100
+++ head-2006-02-03/include/asm-i386/mach-xen/asm/pgtable.h	2006-01-13 12:09:49.000000000 +0100
@@ -2,6 +2,7 @@
 #define _I386_PGTABLE_H
 
 #include <linux/config.h>
+#include <linux/sched.h>
 #include <asm/hypervisor.h>
 
 /*
Index: head-2006-02-03/arch/i386/power/Makefile
===================================================================
--- head-2006-02-03.orig/arch/i386/power/Makefile	2006-02-03 13:32:24.000000000 +0100
+++ head-2006-02-03/arch/i386/power/Makefile	2006-01-18 17:08:38.000000000 +0100
@@ -1,2 +1,4 @@
-obj-$(CONFIG_PM)		+= cpu.o
+obj-$(CONFIG_PM_LEGACY)		+= cpu.o
+obj-$(CONFIG_SOFTWARE_SUSPEND)	+= cpu.o
+obj-$(CONFIG_ACPI_SLEEP)	+= cpu.o
 obj-$(CONFIG_SOFTWARE_SUSPEND)	+= swsusp.o
Index: head-2006-02-03/arch/i386/xen/kernel/cpu/mtrr/main.c
===================================================================
--- head-2006-02-03.orig/arch/i386/xen/kernel/cpu/mtrr/main.c	2006-02-03 13:32:24.000000000 +0100
+++ head-2006-02-03/arch/i386/xen/kernel/cpu/mtrr/main.c	2006-02-03 15:45:42.390631920 +0100
@@ -67,8 +67,10 @@ int mtrr_add_page(unsigned long base, un
 	op.u.add_memtype.pfn     = base;
 	op.u.add_memtype.nr_pfns = size;
 	op.u.add_memtype.type    = type;
-	if ((error = HYPERVISOR_dom0_op(&op)))
+	if ((error = HYPERVISOR_dom0_op(&op))) {
+		BUG_ON(error > 0);
 		return error;
+	}
 
 	if (increment)
 		++usage_table[op.u.add_memtype.reg];
@@ -131,8 +133,12 @@ int mtrr_del_page(int reg, unsigned long
 	if (--usage_table[reg] < 1) {
 		op.cmd = DOM0_DEL_MEMTYPE;
 		op.u.del_memtype.handle = 0;
-		op.u.add_memtype.reg    = reg;
-		(void)HYPERVISOR_dom0_op(&op);
+		op.u.del_memtype.reg    = reg;
+		error = HYPERVISOR_dom0_op(&op);
+		if (error) {
+			BUG_ON(error > 0);
+			goto out;
+		}
 	}
 	error = reg;
  out:
Index: head-2006-02-03/arch/i386/xen/mm/ioremap.c
===================================================================
--- head-2006-02-03.orig/arch/i386/xen/mm/ioremap.c	2006-02-03 13:32:24.000000000 +0100
+++ head-2006-02-03/arch/i386/xen/mm/ioremap.c	2006-01-24 17:27:56.000000000 +0100
@@ -52,8 +52,8 @@ static int __direct_remap_pfn_range(stru
 				    pgprot_t prot,
 				    domid_t  domid)
 {
-	int i, rc;
-	unsigned long start_address;
+	int rc;
+	unsigned long i, start_address;
 	mmu_update_t *u, *v, *w;
 
 	u = v = w = (mmu_update_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
@@ -93,8 +93,10 @@ static int __direct_remap_pfn_range(stru
 
 	if (v != u) {
 		/* get the ptep's filled in */
-		generic_page_range(mm, start_address, address - start_address,
+		rc = generic_page_range(mm, start_address, address - start_address,
 				   direct_remap_area_pte_fn, &w);
+		if (rc)
+			goto out;
 		rc = -EFAULT;
 		if (unlikely(HYPERVISOR_mmu_update(u, v - u, NULL, domid) < 0))
 			goto out;
Index: head-2006-02-03/arch/i386/xen/kernel/mpparse.c
===================================================================
--- head-2006-02-03.orig/arch/i386/xen/kernel/mpparse.c	2006-02-03 09:49:20.000000000 +0100
+++ head-2006-02-03/arch/i386/xen/kernel/mpparse.c	2006-02-03 15:47:21.232605656 +0100
@@ -241,8 +241,14 @@ static void __devinit MP_processor_info 
 	bios_cpu_apicid[num_processors - 1] = m->mpc_apicid;
 }
 #else
-void __init MP_processor_info (struct mpc_config_processor *m)
+static void __init MP_processor_info (struct mpc_config_processor *m)
 {
+	if (num_processors >= NR_CPUS) {
+		printk(KERN_WARNING "WARNING: NR_CPUS limit of %i reached."
+			" Processor ignored.\n", NR_CPUS);
+		return;
+	}
+	cpu_set(num_processors, cpu_possible_map);
 	num_processors++;
 }
 #endif /* CONFIG_XEN */
