Subject: xen3 i386 build fixes.
From: kraxel@suse.de.

$subject says all.

Index: head-2006-04-05/arch/i386/kernel/Makefile
===================================================================
--- head-2006-04-05.orig/arch/i386/kernel/Makefile	2006-04-06 11:50:40.000000000 +0200
+++ head-2006-04-05/arch/i386/kernel/Makefile	2006-04-06 11:51:38.000000000 +0200
@@ -83,7 +83,7 @@ $(obj)/built-in.o: ld_flags += -R $(obj)
 
 SYSCFLAGS_vsyscall-syms.o = -r
 $(obj)/vsyscall-syms.o: $(src)/vsyscall.lds \
-			$(foreach F,$(VSYSCALL_TYPES-y),$(obj)/vsyscall-$F.o) \
+			$(obj)/vsyscall-$(if $(CONFIG_X86_SYSENTER),sysenter,int80).o \
 			$(obj)/$(vsyscall_note) FORCE
 	$(call if_changed,syscall)
 
Index: head-2006-04-05/arch/i386/kernel/sysenter.c
===================================================================
--- head-2006-04-05.orig/arch/i386/kernel/sysenter.c	2006-04-06 11:50:40.000000000 +0200
+++ head-2006-04-05/arch/i386/kernel/sysenter.c	2006-04-06 11:51:38.000000000 +0200
@@ -48,11 +48,20 @@ void enable_sep_cpu(void)
  */
 extern const char vsyscall_int80_start, vsyscall_int80_end;
 extern const char vsyscall_sysenter_start, vsyscall_sysenter_end;
+#ifdef CONFIG_XEN
 static void *syscall_page;
+#endif
 
 int __init sysenter_setup(void)
 {
+#ifndef CONFIG_XEN
+	void *syscall_page;
+#endif
+
 	syscall_page = (void *)get_zeroed_page(GFP_ATOMIC);
+#ifndef CONFIG_XEN
+	__set_fixmap(FIX_VSYSCALL, __pa(syscall_page), PAGE_READONLY_EXEC);
+#endif
 
 #ifdef CONFIG_X86_SYSENTER
 	if (boot_cpu_has(X86_FEATURE_SEP)) {
@@ -70,6 +79,7 @@ int __init sysenter_setup(void)
 	return 0;
 }
 
+#ifdef CONFIG_XEN
 static struct page*
 syscall_nopage(struct vm_area_struct *vma, unsigned long adr, int *type)
 {
@@ -135,3 +145,4 @@ int in_gate_area_no_task(unsigned long a
 {
 	return 0;
 }
+#endif
Index: head-2006-04-05/include/asm-i386/a.out.h
===================================================================
--- head-2006-04-05.orig/include/asm-i386/a.out.h	2006-04-06 11:50:40.000000000 +0200
+++ head-2006-04-05/include/asm-i386/a.out.h	2006-04-06 11:51:38.000000000 +0200
@@ -1,6 +1,8 @@
 #ifndef __I386_A_OUT_H__
 #define __I386_A_OUT_H__
 
+#include <linux/config.h>
+
 struct exec
 {
   unsigned long a_info;		/* Use macros N_MAGIC, etc for access */
@@ -19,7 +21,11 @@ struct exec
 
 #ifdef __KERNEL__
 
+#ifndef CONFIG_XEN
+#define STACK_TOP	TASK_SIZE
+#else
 #define STACK_TOP	(TASK_SIZE - 3*PAGE_SIZE)
+#endif
 
 #endif
 
Index: head-2006-04-05/include/asm-i386/elf.h
===================================================================
--- head-2006-04-05.orig/include/asm-i386/elf.h	2006-04-06 11:50:40.000000000 +0200
+++ head-2006-04-05/include/asm-i386/elf.h	2006-04-06 11:51:38.000000000 +0200
@@ -129,15 +129,21 @@ extern int dump_task_extended_fpu (struc
 #define ELF_CORE_COPY_FPREGS(tsk, elf_fpregs) dump_task_fpu(tsk, elf_fpregs)
 #define ELF_CORE_COPY_XFPREGS(tsk, elf_xfpregs) dump_task_extended_fpu(tsk, elf_xfpregs)
 
+#ifndef CONFIG_XEN
+#define VSYSCALL_BASE	(__fix_to_virt(FIX_VSYSCALL))
+#else
 #define VSYSCALL_BASE	(PAGE_OFFSET - 2*PAGE_SIZE)
+#endif
 #define VSYSCALL_EHDR	((const struct elfhdr *) VSYSCALL_BASE)
 #define VSYSCALL_ENTRY	((unsigned long) &__kernel_vsyscall)
 extern void __kernel_vsyscall;
 
+#ifdef CONFIG_XEN
 #define ARCH_HAS_SETUP_ADDITIONAL_PAGES
 struct linux_binprm;
 extern int arch_setup_additional_pages(struct linux_binprm *bprm,
                                        int executable_stack);
+#endif
 
 #define ARCH_DLINFO						\
 do {								\
