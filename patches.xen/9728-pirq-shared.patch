# HG changeset 9728 patch
From: kaf24@firebug.cl.cam.ac.uk
# Node ID 3a12ae277cbcde84400a9166705c5d7804c46bcf
# Parent  1de04b7a58366cf659876239036bf2323eb0b3b3
Subject: Only trigger unhandled irq path if irq is not shared across
multiple guests (another guest may have handled the interrupt).
Signed-off-by: Keir Fraser <keir@xensource.com>
xen-unstable changeset:   10298:6fb0d5ad63d74ef272d1f1754b9eabd83000577e
xen-unstable date:        Thu Jun  8 10:11:04 2006 +0100

Extended by the interface header change from c/s 9726, the removal of the
shared_info member pirq_shared (due to a dropped patch on the Xen side),
and the removal of the noirqdebug enforcement on i386.

Acked-by: Jan Beulich <jbeulich@novell.com>

Index: head-2006-06-13/arch/i386/kernel/setup-xen.c
===================================================================
--- head-2006-06-13.orig/arch/i386/kernel/setup-xen.c	2006-06-14 09:20:37.000000000 +0200
+++ head-2006-06-13/arch/i386/kernel/setup-xen.c	2006-06-09 09:35:16.000000000 +0200
@@ -1848,10 +1848,6 @@ void __init setup_arch(char **cmdline_p)
 		get_smp_config();
 #endif
 
-	/* XXX Disable irqdebug until we have a way to avoid interrupt
-	 * conflicts. */
-	noirqdebug_setup("");
-
 	register_memory();
 
 	if (xen_start_info->flags & SIF_INITDOMAIN) {
Index: head-2006-06-13/drivers/xen/Kconfig
===================================================================
--- head-2006-06-13.orig/drivers/xen/Kconfig	2006-06-14 09:20:37.000000000 +0200
+++ head-2006-06-13/drivers/xen/Kconfig	2006-06-09 09:35:16.000000000 +0200
@@ -216,6 +216,10 @@ config HAVE_ARCH_DEV_ALLOC_SKB
 	bool
 	default y
 
+config HAVE_IRQ_IGNORE_UNHANDLED
+	bool
+	default y
+
 config NO_IDLE_HZ
 	bool
 	default y
Index: head-2006-06-13/drivers/xen/core/evtchn.c
===================================================================
--- head-2006-06-13.orig/drivers/xen/core/evtchn.c	2006-06-14 09:20:37.000000000 +0200
+++ head-2006-06-13/drivers/xen/core/evtchn.c	2006-06-09 09:35:16.000000000 +0200
@@ -669,6 +669,15 @@ static struct hw_interrupt_type pirq_typ
 	set_affinity_irq
 };
 
+int irq_ignore_unhandled(unsigned int irq)
+{
+	physdev_op_t op;
+	op.cmd = PHYSDEVOP_IRQ_STATUS_QUERY;
+	op.u.irq_status_query.irq = irq;
+	(void)HYPERVISOR_physdev_op(&op);
+	return !!(op.u.irq_status_query.flags & PHYSDEVOP_IRQ_SHARED);
+}
+
 void hw_resend_irq(struct hw_interrupt_type *h, unsigned int i)
 {
 	int evtchn = evtchn_from_irq(i);
Index: head-2006-06-13/include/linux/interrupt.h
===================================================================
--- head-2006-06-13.orig/include/linux/interrupt.h	2006-06-14 09:20:37.000000000 +0200
+++ head-2006-06-13/include/linux/interrupt.h	2006-06-09 09:37:17.000000000 +0200
@@ -58,6 +58,12 @@ extern void disable_irq(unsigned int irq
 extern void enable_irq(unsigned int irq);
 #endif
 
+#ifdef CONFIG_HAVE_IRQ_IGNORE_UNHANDLED
+int irq_ignore_unhandled(unsigned int irq);
+#else
+#define irq_ignore_unhandled(irq) 0
+#endif
+
 #ifndef __ARCH_SET_SOFTIRQ_PENDING
 #define set_softirq_pending(x) (local_softirq_pending() = (x))
 #define or_softirq_pending(x)  (local_softirq_pending() |= (x))
Index: head-2006-06-13/include/xen/interface/physdev.h
===================================================================
--- head-2006-06-13.orig/include/xen/interface/physdev.h	2006-06-14 09:20:37.000000000 +0200
+++ head-2006-06-13/include/xen/interface/physdev.h	2006-06-09 09:35:16.000000000 +0200
@@ -17,6 +17,8 @@ typedef struct physdevop_irq_status_quer
     /* OUT */
 /* Need to call PHYSDEVOP_IRQ_UNMASK_NOTIFY when the IRQ has been serviced? */
 #define PHYSDEVOP_IRQ_NEEDS_UNMASK_NOTIFY (1<<0)
+/* IRQ shared by multiple guests? */
+#define PHYSDEVOP_IRQ_SHARED              (1<<1)
     uint32_t flags;
 } physdevop_irq_status_query_t;
 
Index: head-2006-06-13/include/xen/interface/xen.h
===================================================================
--- head-2006-06-13.orig/include/xen/interface/xen.h	2006-06-13 08:35:16.000000000 +0200
+++ head-2006-06-13/include/xen/interface/xen.h	2006-06-14 09:24:18.000000000 +0200
@@ -370,14 +370,6 @@ typedef struct shared_info {
 
     arch_shared_info_t arch;
 
-    /*
-     * Indicator which PIRQs are shared with other domains, allowing the guest
-     * to not consider respective interrupts spurious even if no handler claims
-     * them, while still being able to detect spurious occurrences of un-shared
-     * interrupts.
-     */
-    unsigned long pirq_shared[256 / (8 * sizeof(unsigned long))];
-
 } shared_info_t;
 
 /*
Index: head-2006-06-13/kernel/irq/spurious.c
===================================================================
--- head-2006-06-13.orig/kernel/irq/spurious.c	2006-03-20 06:53:29.000000000 +0100
+++ head-2006-06-13/kernel/irq/spurious.c	2006-06-09 09:35:16.000000000 +0200
@@ -137,7 +137,8 @@ void note_interrupt(unsigned int irq, ir
 			struct pt_regs *regs)
 {
 	if (action_ret != IRQ_HANDLED) {
-		desc->irqs_unhandled++;
+		if (!irq_ignore_unhandled(irq))
+			desc->irqs_unhandled++;
 		if (action_ret != IRQ_NONE)
 			report_bad_irq(irq, desc, action_ret);
 	}
