From: jbeulich@novell.com
Subject: make i386 and x86 NMI code consistent, disable all APIC-related stuff
Patch-mainline: obsolete
References: 191115

Index: head-2007-01-16/arch/i386/kernel/nmi.c
===================================================================
--- head-2007-01-16.orig/arch/i386/kernel/nmi.c	2007-01-16 15:23:22.000000000 +0100
+++ head-2007-01-16/arch/i386/kernel/nmi.c	2007-01-19 16:14:24.000000000 +0100
@@ -32,6 +32,11 @@
 #include "mach_traps.h"
 
 int unknown_nmi_panic;
+
+extern void die_nmi(struct pt_regs *, const char *msg);
+
+#ifndef CONFIG_XEN
+
 int nmi_watchdog_enabled;
 
 /* perfctr_nmi_owner tracks the ownership of the perfctr registers:
@@ -888,8 +893,6 @@ void touch_nmi_watchdog (void)
 }
 EXPORT_SYMBOL(touch_nmi_watchdog);
 
-extern void die_nmi(struct pt_regs *, const char *msg);
-
 __kprobes int nmi_watchdog_tick(struct pt_regs * regs, unsigned reason)
 {
 
@@ -986,6 +989,19 @@ done:
 	return rc;
 }
 
+#else /* CONFIG_XEN */
+
+static inline int reserve_lapic_nmi(void)
+{
+	return 0;
+}
+
+static inline void release_lapic_nmi(void)
+{
+}
+
+#endif /* CONFIG_XEN */
+
 int do_nmi_callback(struct pt_regs * regs, int cpu)
 {
 #ifdef CONFIG_SYSCTL
@@ -1048,6 +1064,7 @@ int proc_nmi_enabled(struct ctl_table *t
 
 #endif
 
+#ifndef CONFIG_XEN
 void __trigger_all_cpu_backtrace(void)
 {
 	int i;
@@ -1071,3 +1088,4 @@ EXPORT_SYMBOL(reserve_evntsel_nmi);
 EXPORT_SYMBOL(release_evntsel_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
+#endif
Index: head-2007-01-16/arch/i386/kernel/traps-xen.c
===================================================================
--- head-2007-01-16.orig/arch/i386/kernel/traps-xen.c	2007-01-19 15:45:56.000000000 +0100
+++ head-2007-01-16/arch/i386/kernel/traps-xen.c	2007-01-19 16:14:34.000000000 +0100
@@ -694,15 +694,15 @@ static __kprobes void default_do_nmi(str
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 							== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
 		 */
 		if (nmi_watchdog_tick(regs, reason))
 			return;
-		if (!do_nmi_callback(regs, smp_processor_id()))
 #endif
+		if (!do_nmi_callback(regs, smp_processor_id()))
 			unknown_nmi_error(reason, regs);
 
 		return;
Index: head-2007-01-16/arch/x86_64/kernel/nmi.c
===================================================================
--- head-2007-01-16.orig/arch/x86_64/kernel/nmi.c	2007-01-16 15:23:30.000000000 +0100
+++ head-2007-01-16/arch/x86_64/kernel/nmi.c	2007-01-19 16:11:38.000000000 +0100
@@ -30,6 +30,9 @@
 #include <asm/intel_arch_perfmon.h>
 
 int unknown_nmi_panic;
+
+#ifndef CONFIG_XEN
+
 int nmi_watchdog_enabled;
 int panic_on_unrecovered_nmi;
 
@@ -880,6 +883,19 @@ done:
 	return rc;
 }
 
+#elif defined(CONFIG_X86_LOCAL_APIC) && defined(CONFIG_SYSCTL)
+
+static inline int reserve_lapic_nmi(void)
+{
+	return 0;
+}
+
+static inline void release_lapic_nmi(void)
+{
+}
+
+#endif
+
 asmlinkage __kprobes void do_nmi(struct pt_regs * regs, long error_code)
 {
 	nmi_enter();
@@ -897,7 +913,7 @@ int do_nmi_callback(struct pt_regs * reg
 	return 0;
 }
 
-#ifdef CONFIG_SYSCTL
+#if defined(CONFIG_X86_LOCAL_APIC) && defined(CONFIG_SYSCTL)
 
 static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu)
 {
@@ -959,6 +975,7 @@ void __trigger_all_cpu_backtrace(void)
 	}
 }
 
+#ifndef CONFIG_XEN
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
 EXPORT_SYMBOL(avail_to_resrv_perfctr_nmi);
@@ -970,3 +987,4 @@ EXPORT_SYMBOL(release_evntsel_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
 EXPORT_SYMBOL(touch_nmi_watchdog);
+#endif /* CONFIG_XEN */
Index: head-2007-01-16/arch/x86_64/kernel/traps-xen.c
===================================================================
--- head-2007-01-16.orig/arch/x86_64/kernel/traps-xen.c	2007-01-19 15:31:39.000000000 +0100
+++ head-2007-01-16/arch/x86_64/kernel/traps-xen.c	2007-01-19 15:59:40.000000000 +0100
@@ -781,7 +781,7 @@ asmlinkage __kprobes void default_do_nmi
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 								== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2007-01-16/include/asm-i386/irq.h
===================================================================
--- head-2007-01-16.orig/include/asm-i386/irq.h	2007-01-16 15:24:04.000000000 +0100
+++ head-2007-01-16/include/asm-i386/irq.h	2007-01-19 15:59:40.000000000 +0100
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 # define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2007-01-16/include/asm-i386/nmi.h
===================================================================
--- head-2007-01-16.orig/include/asm-i386/nmi.h	2007-01-16 15:24:04.000000000 +0100
+++ head-2007-01-16/include/asm-i386/nmi.h	2007-01-19 16:17:39.000000000 +0100
@@ -7,8 +7,6 @@
 #include <linux/pm.h>
 #include <asm/irq.h>
 
-#ifdef ARCH_HAS_NMI_WATCHDOG
-
 /**
  * do_nmi_callback
  *
@@ -17,6 +15,8 @@
  */
 int do_nmi_callback(struct pt_regs *regs, int cpu);
 
+#ifdef ARCH_HAS_NMI_WATCHDOG
+
 extern int nmi_watchdog_enabled;
 extern int avail_to_resrv_perfctr_nmi_bit(unsigned int);
 extern int avail_to_resrv_perfctr_nmi(unsigned int);
Index: head-2007-01-16/include/asm-x86_64/mach-xen/asm/nmi.h
===================================================================
--- head-2007-01-16.orig/include/asm-x86_64/mach-xen/asm/nmi.h	2007-01-19 13:47:56.000000000 +0100
+++ head-2007-01-16/include/asm-x86_64/mach-xen/asm/nmi.h	2007-01-19 15:59:40.000000000 +0100
@@ -61,6 +61,8 @@ extern int panic_on_timeout;
 extern int unknown_nmi_panic;
 extern int nmi_watchdog_enabled;
 
+#ifndef CONFIG_XEN
+
 extern int check_nmi_watchdog(void);
 extern int avail_to_resrv_perfctr_nmi_bit(unsigned int);
 extern int avail_to_resrv_perfctr_nmi(unsigned int);
@@ -96,4 +98,6 @@ extern int unknown_nmi_panic;
 void __trigger_all_cpu_backtrace(void);
 #define trigger_all_cpu_backtrace() __trigger_all_cpu_backtrace()
 
+#endif
+
 #endif /* ASM_NMI_H */
Index: head-2007-01-16/include/asm-x86_64/mach-xen/setup_arch_post.h
===================================================================
--- head-2007-01-16.orig/include/asm-x86_64/mach-xen/setup_arch_post.h	2007-01-17 10:09:52.000000000 +0100
+++ head-2007-01-16/include/asm-x86_64/mach-xen/setup_arch_post.h	2007-01-19 16:18:57.000000000 +0100
@@ -27,12 +27,10 @@ static void __init machine_specific_arch
 		.type = CALLBACKTYPE_syscall,
 		.address = (unsigned long)system_call,
 	};
-#ifdef CONFIG_X86_LOCAL_APIC
 	static struct callback_register __initdata nmi_cb = {
 		.type = CALLBACKTYPE_nmi,
 		.address = (unsigned long)nmi,
 	};
-#endif
 
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &event);
 	if (ret == 0)
@@ -48,7 +46,6 @@ static void __init machine_specific_arch
 #endif
 	BUG_ON(ret);
 
-#ifdef CONFIG_X86_LOCAL_APIC
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &nmi_cb);
 #ifdef CONFIG_XEN_COMPAT_030002
 	if (ret == -ENOSYS) {
@@ -59,5 +56,4 @@ static void __init machine_specific_arch
 		HYPERVISOR_nmi_op(XENNMI_register_callback, &cb);
 	}
 #endif
-#endif
 }
