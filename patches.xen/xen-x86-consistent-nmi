From: jbeulich@novell.com
Subject: make i386 and x86 NMI code consistent, disable all APIC-related stuff
Patch-mainline: obsolete
References: 191115

Index: head-2007-04-27/arch/i386/kernel/nmi.c
===================================================================
--- head-2007-04-27.orig/arch/i386/kernel/nmi.c	2007-04-27 12:34:26.000000000 +0200
+++ head-2007-04-27/arch/i386/kernel/nmi.c	2007-04-27 15:31:27.000000000 +0200
@@ -32,7 +32,15 @@
 
 #include "mach_traps.h"
 
+#ifdef CONFIG_SYSCTL
 int unknown_nmi_panic;
+static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
+#endif
+
+extern void die_nmi(struct pt_regs *, const char *msg);
+
+#ifndef CONFIG_XEN
+
 int nmi_watchdog_enabled;
 
 /* perfctr_nmi_owner tracks the ownership of the perfctr registers:
@@ -73,10 +81,7 @@ struct nmi_watchdog_ctlblk {
 static DEFINE_PER_CPU(struct nmi_watchdog_ctlblk, nmi_watchdog_ctlblk);
 
 /* local prototypes */
-static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
-
 extern void show_registers(struct pt_regs *regs);
-extern int unknown_nmi_panic;
 
 /* converts an msr to an appropriate reservation bit */
 static inline unsigned int nmi_perfctr_msr_to_bit(unsigned int msr)
@@ -998,8 +1003,6 @@ void touch_nmi_watchdog (void)
 }
 EXPORT_SYMBOL(touch_nmi_watchdog);
 
-extern void die_nmi(struct pt_regs *, const char *msg);
-
 __kprobes int nmi_watchdog_tick(struct pt_regs * regs, unsigned reason)
 {
 
@@ -1105,6 +1108,8 @@ done:
 	return rc;
 }
 
+#endif /* CONFIG_XEN */
+
 int do_nmi_callback(struct pt_regs * regs, int cpu)
 {
 #ifdef CONFIG_SYSCTL
@@ -1126,6 +1131,7 @@ static int unknown_nmi_panic_callback(st
 	return 0;
 }
 
+#ifndef CONFIG_XEN
 /*
  * proc handler for /proc/sys/kernel/nmi
  */
@@ -1164,9 +1170,11 @@ int proc_nmi_enabled(struct ctl_table *t
 	}
 	return 0;
 }
+#endif
 
 #endif
 
+#ifndef CONFIG_XEN
 void __trigger_all_cpu_backtrace(void)
 {
 	int i;
@@ -1190,3 +1198,4 @@ EXPORT_SYMBOL(reserve_evntsel_nmi);
 EXPORT_SYMBOL(release_evntsel_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
+#endif
Index: head-2007-04-27/arch/i386/kernel/traps-xen.c
===================================================================
--- head-2007-04-27.orig/arch/i386/kernel/traps-xen.c	2007-04-27 15:30:52.000000000 +0200
+++ head-2007-04-27/arch/i386/kernel/traps-xen.c	2007-04-27 15:31:27.000000000 +0200
@@ -698,12 +698,14 @@ static __kprobes void default_do_nmi(str
 							== NOTIFY_STOP)
 			return;
 #ifdef CONFIG_X86_LOCAL_APIC
+#ifndef CONFIG_XEN
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
 		 */
 		if (nmi_watchdog_tick(regs, reason))
 			return;
+#endif
 		if (!do_nmi_callback(regs, smp_processor_id()))
 #endif
 			unknown_nmi_error(reason, regs);
Index: head-2007-04-27/arch/x86_64/kernel/nmi.c
===================================================================
--- head-2007-04-27.orig/arch/x86_64/kernel/nmi.c	2007-04-27 12:34:26.000000000 +0200
+++ head-2007-04-27/arch/x86_64/kernel/nmi.c	2007-04-27 15:31:27.000000000 +0200
@@ -29,10 +29,17 @@
 #include <asm/mce.h>
 #include <asm/intel_arch_perfmon.h>
 
+#ifdef CONFIG_SYSCTL
 int unknown_nmi_panic;
-int nmi_watchdog_enabled;
+static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
+#endif
+
 int panic_on_unrecovered_nmi;
 
+#ifndef CONFIG_XEN
+
+int nmi_watchdog_enabled;
+
 /* perfctr_nmi_owner tracks the ownership of the perfctr registers:
  * evtsel_nmi_owner tracks the ownership of the event selection
  * - different performance counters/ event selection may be reserved for
@@ -72,9 +79,6 @@ struct nmi_watchdog_ctlblk {
 };
 static DEFINE_PER_CPU(struct nmi_watchdog_ctlblk, nmi_watchdog_ctlblk);
 
-/* local prototypes */
-static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
-
 /* converts an msr to an appropriate reservation bit */
 static inline unsigned int nmi_perfctr_msr_to_bit(unsigned int msr)
 {
@@ -986,6 +990,8 @@ done:
 	return rc;
 }
 
+#endif
+
 asmlinkage __kprobes void do_nmi(struct pt_regs * regs, long error_code)
 {
 	nmi_enter();
@@ -1015,6 +1021,7 @@ static int unknown_nmi_panic_callback(st
 	return 0;
 }
 
+#ifndef CONFIG_XEN
 /*
  * proc handler for /proc/sys/kernel/nmi
  */
@@ -1049,9 +1056,11 @@ int proc_nmi_enabled(struct ctl_table *t
 	}
 	return 0;
 }
+#endif
 
 #endif
 
+#ifndef CONFIG_XEN
 void __trigger_all_cpu_backtrace(void)
 {
 	int i;
@@ -1076,3 +1085,4 @@ EXPORT_SYMBOL(release_evntsel_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
 EXPORT_SYMBOL(touch_nmi_watchdog);
+#endif /* CONFIG_XEN */
Index: head-2007-04-27/arch/x86_64/kernel/traps-xen.c
===================================================================
--- head-2007-04-27.orig/arch/x86_64/kernel/traps-xen.c	2007-04-27 15:30:41.000000000 +0200
+++ head-2007-04-27/arch/x86_64/kernel/traps-xen.c	2007-04-27 15:31:27.000000000 +0200
@@ -781,7 +781,7 @@ asmlinkage __kprobes void default_do_nmi
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 								== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2007-04-27/include/asm-i386/irq.h
===================================================================
--- head-2007-04-27.orig/include/asm-i386/irq.h	2007-04-27 12:34:26.000000000 +0200
+++ head-2007-04-27/include/asm-i386/irq.h	2007-04-27 15:31:27.000000000 +0200
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 # define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2007-04-27/include/asm-i386/nmi.h
===================================================================
--- head-2007-04-27.orig/include/asm-i386/nmi.h	2007-04-27 12:34:26.000000000 +0200
+++ head-2007-04-27/include/asm-i386/nmi.h	2007-04-27 15:31:27.000000000 +0200
@@ -7,8 +7,6 @@
 #include <linux/pm.h>
 #include <asm/irq.h>
 
-#ifdef ARCH_HAS_NMI_WATCHDOG
-
 /**
  * do_nmi_callback
  *
@@ -17,6 +15,8 @@
  */
 int do_nmi_callback(struct pt_regs *regs, int cpu);
 
+#ifdef ARCH_HAS_NMI_WATCHDOG
+
 extern int nmi_watchdog_enabled;
 extern int avail_to_resrv_perfctr_nmi_bit(unsigned int);
 extern int avail_to_resrv_perfctr_nmi(unsigned int);
@@ -43,11 +43,12 @@ struct ctl_table;
 struct file;
 extern int proc_nmi_enabled(struct ctl_table *, int , struct file *,
 			void __user *, size_t *, loff_t *);
-extern int unknown_nmi_panic;
 
 void __trigger_all_cpu_backtrace(void);
 #define trigger_all_cpu_backtrace() __trigger_all_cpu_backtrace()
 
 #endif
 
+extern int unknown_nmi_panic;
+
 #endif /* ASM_NMI_H */
Index: head-2007-04-27/include/asm-x86_64/mach-xen/asm/irq.h
===================================================================
--- head-2007-04-27.orig/include/asm-x86_64/mach-xen/asm/irq.h	2007-04-27 13:26:30.000000000 +0200
+++ head-2007-04-27/include/asm-x86_64/mach-xen/asm/irq.h	2007-04-27 15:31:27.000000000 +0200
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#ifndef CONFIG_XEN
 #define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2007-04-27/include/asm-x86_64/mach-xen/asm/nmi.h
===================================================================
--- head-2007-04-27.orig/include/asm-x86_64/mach-xen/asm/nmi.h	2007-04-27 15:01:12.000000000 +0200
+++ head-2007-04-27/include/asm-x86_64/mach-xen/asm/nmi.h	2007-04-27 15:31:27.000000000 +0200
@@ -59,6 +59,9 @@ static inline unsigned char get_nmi_reas
 
 extern int panic_on_timeout;
 extern int unknown_nmi_panic;
+
+#ifndef CONFIG_XEN
+
 extern int nmi_watchdog_enabled;
 
 extern int check_nmi_watchdog(void);
@@ -96,4 +99,6 @@ extern int unknown_nmi_panic;
 void __trigger_all_cpu_backtrace(void);
 #define trigger_all_cpu_backtrace() __trigger_all_cpu_backtrace()
 
+#endif
+
 #endif /* ASM_NMI_H */
Index: head-2007-04-27/include/asm-x86_64/mach-xen/setup_arch_post.h
===================================================================
--- head-2007-04-27.orig/include/asm-x86_64/mach-xen/setup_arch_post.h	2007-04-27 13:26:30.000000000 +0200
+++ head-2007-04-27/include/asm-x86_64/mach-xen/setup_arch_post.h	2007-04-27 15:31:27.000000000 +0200
@@ -27,12 +27,10 @@ static void __init machine_specific_arch
 		.type = CALLBACKTYPE_syscall,
 		.address = (unsigned long)system_call,
 	};
-#ifdef CONFIG_X86_LOCAL_APIC
 	static struct callback_register __initdata nmi_cb = {
 		.type = CALLBACKTYPE_nmi,
 		.address = (unsigned long)nmi,
 	};
-#endif
 
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &event);
 	if (ret == 0)
@@ -48,7 +46,6 @@ static void __init machine_specific_arch
 #endif
 	BUG_ON(ret);
 
-#ifdef CONFIG_X86_LOCAL_APIC
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &nmi_cb);
 #if CONFIG_XEN_COMPAT <= 0x030002
 	if (ret == -ENOSYS) {
@@ -59,5 +56,4 @@ static void __init machine_specific_arch
 		HYPERVISOR_nmi_op(XENNMI_register_callback, &cb);
 	}
 #endif
-#endif
 }
Index: head-2007-04-27/kernel/sysctl.c
===================================================================
--- head-2007-04-27.orig/kernel/sysctl.c	2007-04-27 12:34:26.000000000 +0200
+++ head-2007-04-27/kernel/sysctl.c	2007-04-27 15:31:27.000000000 +0200
@@ -520,6 +520,7 @@ static ctl_table kern_table[] = {
 		.mode           = 0644,
 		.proc_handler   = &proc_dointvec,
 	},
+#ifndef CONFIG_XEN
 	{
 		.ctl_name       = KERN_NMI_WATCHDOG,
 		.procname       = "nmi_watchdog",
@@ -529,6 +530,7 @@ static ctl_table kern_table[] = {
 		.proc_handler   = &proc_nmi_enabled,
 	},
 #endif
+#endif
 #if defined(CONFIG_X86)
 	{
 		.ctl_name	= KERN_PANIC_ON_NMI,
