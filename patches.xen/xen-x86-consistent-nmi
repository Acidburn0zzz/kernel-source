From: jbeulich@novell.com
Subject: make i386 and x86 NMI code consistent, disable all APIC-related stuff
Patch-mainline: obsolete
References: 191115

Index: head-2006-10-16/arch/i386/kernel/nmi.c
===================================================================
--- head-2006-10-16.orig/arch/i386/kernel/nmi.c	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/arch/i386/kernel/nmi.c	2006-10-26 10:30:56.000000000 +0200
@@ -28,8 +28,13 @@
 
 #include "mach_traps.h"
 
-unsigned int nmi_watchdog = NMI_NONE;
+extern void die_nmi(struct pt_regs *, const char *msg);
+
 extern int unknown_nmi_panic;
+
+#ifndef CONFIG_XEN
+
+unsigned int nmi_watchdog = NMI_NONE;
 static unsigned int nmi_hz = HZ;
 static unsigned int nmi_perfctr_msr;	/* the MSR to reset in NMI handler */
 static unsigned int nmi_p4_cccr_val;
@@ -577,8 +582,6 @@ void touch_nmi_watchdog (void)
 }
 EXPORT_SYMBOL(touch_nmi_watchdog);
 
-extern void die_nmi(struct pt_regs *, const char *msg);
-
 void nmi_watchdog_tick (struct pt_regs * regs)
 {
 
@@ -630,6 +633,19 @@ void nmi_watchdog_tick (struct pt_regs *
 	}
 }
 
+#else /* CONFIG_XEN */
+
+static inline int reserve_lapic_nmi(void)
+{
+	return 0;
+}
+
+static inline void release_lapic_nmi(void)
+{
+}
+
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_SYSCTL
 
 static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu)
@@ -673,9 +689,11 @@ int proc_unknown_nmi_panic(ctl_table *ta
 
 #endif
 
+#ifndef CONFIG_XEN
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
 EXPORT_SYMBOL(reserve_lapic_nmi);
 EXPORT_SYMBOL(release_lapic_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
+#endif
Index: head-2006-10-16/arch/i386/kernel/traps-xen.c
===================================================================
--- head-2006-10-16.orig/arch/i386/kernel/traps-xen.c	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/arch/i386/kernel/traps-xen.c	2006-10-26 10:30:56.000000000 +0200
@@ -687,7 +687,7 @@ static void default_do_nmi(struct pt_reg
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 							== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2006-10-16/arch/x86_64/kernel/Makefile
===================================================================
--- head-2006-10-16.orig/arch/x86_64/kernel/Makefile	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/arch/x86_64/kernel/Makefile	2006-10-26 10:30:56.000000000 +0200
@@ -4,7 +4,7 @@
 
 extra-y 	:= head.o head64.o init_task.o vmlinux.lds
 EXTRA_AFLAGS	:= -traditional
-obj-y	:= process.o signal.o entry.o traps.o irq.o \
+obj-y	:= process.o signal.o entry.o traps.o irq.o nmi.o \
 		ptrace.o time.o ioport.o ldt.o setup.o i8259.o sys_x86_64.o \
 		x8664_ksyms.o i387.o syscall.o vsyscall.o \
 		setup64.o bootflag.o e820.o reboot.o quirks.o i8237.o \
@@ -20,7 +20,7 @@ obj-$(CONFIG_X86_MSR)		+= msr.o
 obj-$(CONFIG_MICROCODE)		+= microcode.o
 obj-$(CONFIG_X86_CPUID)		+= cpuid.o
 obj-$(CONFIG_SMP)		+= smp.o smpboot.o trampoline.o
-obj-$(CONFIG_X86_LOCAL_APIC)	+= apic.o  nmi.o
+obj-$(CONFIG_X86_LOCAL_APIC)	+= apic.o
 obj-$(CONFIG_X86_XEN_GENAPIC)	+= genapic.o genapic_xen.o
 obj-$(CONFIG_X86_IO_APIC)	+= io_apic.o mpparse.o \
 		genapic.o genapic_cluster.o genapic_flat.o
Index: head-2006-10-16/arch/x86_64/kernel/entry-xen.S
===================================================================
--- head-2006-10-16.orig/arch/x86_64/kernel/entry-xen.S	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/arch/x86_64/kernel/entry-xen.S	2006-10-26 10:30:56.000000000 +0200
@@ -922,7 +922,6 @@ ENTRY(do_hypervisor_callback)   # do_hyp
 	jmp  error_exit
 END(do_hypervisor_callback)
 
-#ifdef CONFIG_X86_LOCAL_APIC
 KPROBE_ENTRY(nmi)
 	zeroentry do_nmi_callback
 ENTRY(do_nmi_callback)
@@ -938,7 +937,6 @@ ENTRY(do_nmi_callback)
 	CFI_ENDPROC
 	.previous .text
 END(nmi)
-#endif
 
         ALIGN
 restore_all_enable_events:  
Index: head-2006-10-16/arch/x86_64/kernel/nmi.c
===================================================================
--- head-2006-10-16.orig/arch/x86_64/kernel/nmi.c	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/arch/x86_64/kernel/nmi.c	2006-10-26 10:30:56.000000000 +0200
@@ -28,6 +28,8 @@
 #include <asm/mce.h>
 #include <asm/intel_arch_perfmon.h>
 
+#ifndef CONFIG_XEN
+
 /*
  * lapic_nmi_owner tracks the ownership of the lapic NMI hardware:
  * - it may be reserved by some other driver, or not
@@ -583,6 +585,19 @@ void __kprobes nmi_watchdog_tick(struct 
 	}
 }
 
+#elif defined(CONFIG_X86_LOCAL_APIC) && defined(CONFIG_SYSCTL)
+
+static inline int reserve_lapic_nmi(void)
+{
+	return 0;
+}
+
+static inline void release_lapic_nmi(void)
+{
+}
+
+#endif
+
 static __kprobes int dummy_nmi_callback(struct pt_regs * regs, int cpu)
 {
 	return 0;
@@ -614,7 +629,7 @@ void unset_nmi_callback(void)
 }
 EXPORT_SYMBOL_GPL(unset_nmi_callback);
 
-#ifdef CONFIG_SYSCTL
+#if defined(CONFIG_X86_LOCAL_APIC) && defined(CONFIG_SYSCTL)
 
 static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu)
 {
@@ -657,6 +672,7 @@ int proc_unknown_nmi_panic(struct ctl_ta
 
 #endif
 
+#ifndef CONFIG_XEN
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
 EXPORT_SYMBOL(reserve_lapic_nmi);
@@ -664,3 +680,4 @@ EXPORT_SYMBOL(release_lapic_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
 EXPORT_SYMBOL(touch_nmi_watchdog);
+#endif /* CONFIG_XEN */
Index: head-2006-10-16/arch/x86_64/kernel/traps-xen.c
===================================================================
--- head-2006-10-16.orig/arch/x86_64/kernel/traps-xen.c	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/arch/x86_64/kernel/traps-xen.c	2006-10-26 10:30:56.000000000 +0200
@@ -586,8 +586,8 @@ void __kprobes die_nmi(char *str, struct
 	show_registers(regs);
 	if (kexec_should_crash(current))
 		crash_kexec(regs);
-	if (panic_on_timeout || panic_on_oops)
-		panic("nmi watchdog");
+	if (panic_on_oops)
+		panic("Non-maskable interrupt");
 	printk("console shuts up ...\n");
 	oops_end(flags);
 	nmi_exit();
@@ -785,7 +785,7 @@ asmlinkage __kprobes void default_do_nmi
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 								== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2006-10-16/include/asm-i386/irq.h
===================================================================
--- head-2006-10-16.orig/include/asm-i386/irq.h	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/include/asm-i386/irq.h	2006-10-26 10:30:56.000000000 +0200
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 # define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2006-10-16/include/asm-i386/nmi.h
===================================================================
--- head-2006-10-16.orig/include/asm-i386/nmi.h	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/include/asm-i386/nmi.h	2006-10-26 10:30:56.000000000 +0200
@@ -25,6 +25,8 @@ void set_nmi_callback(nmi_callback_t cal
  */
 void unset_nmi_callback(void);
 
+#ifndef CONFIG_XEN
+
 extern void setup_apic_nmi_watchdog (void);
 extern int reserve_lapic_nmi(void);
 extern void release_lapic_nmi(void);
@@ -39,4 +41,6 @@ extern unsigned int nmi_watchdog;
 #define NMI_LOCAL_APIC	2
 #define NMI_INVALID	3
 
+#endif
+
 #endif /* ASM_NMI_H */
Index: head-2006-10-16/include/asm-x86_64/mach-xen/asm/irq.h
===================================================================
--- head-2006-10-16.orig/include/asm-x86_64/mach-xen/asm/irq.h	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/include/asm-x86_64/mach-xen/asm/irq.h	2006-10-26 10:30:56.000000000 +0200
@@ -21,9 +21,6 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
-#define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
-#endif
 
 #define KDB_VECTOR	0xf9
 
Index: head-2006-10-16/include/asm-x86_64/mach-xen/asm/nmi.h
===================================================================
--- head-2006-10-16.orig/include/asm-x86_64/mach-xen/asm/nmi.h	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/include/asm-x86_64/mach-xen/asm/nmi.h	2006-10-26 10:30:56.000000000 +0200
@@ -71,6 +71,8 @@ static inline unsigned char get_nmi_reas
 extern int panic_on_timeout;
 extern int unknown_nmi_panic;
 
+#ifndef CONFIG_XEN
+
 extern int check_nmi_watchdog(void);
  
 extern void setup_apic_nmi_watchdog (void);
@@ -90,4 +92,6 @@ extern unsigned int nmi_watchdog;
 #define NMI_LOCAL_APIC	2
 #define NMI_INVALID	3
 
+#endif
+
 #endif /* ASM_NMI_H */
Index: head-2006-10-16/include/asm-x86_64/mach-xen/setup_arch_post.h
===================================================================
--- head-2006-10-16.orig/include/asm-x86_64/mach-xen/setup_arch_post.h	2006-10-26 10:30:51.000000000 +0200
+++ head-2006-10-16/include/asm-x86_64/mach-xen/setup_arch_post.h	2006-10-26 10:30:56.000000000 +0200
@@ -27,12 +27,10 @@ static void __init machine_specific_arch
 		.type = CALLBACKTYPE_syscall,
 		.address = (unsigned long)system_call,
 	};
-#ifdef CONFIG_X86_LOCAL_APIC
 	struct callback_register nmi_cb = {
 		.type = CALLBACKTYPE_nmi,
 		.address = (unsigned long)nmi,
 	};
-#endif
 
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &event);
 	if (ret == 0)
@@ -46,7 +44,6 @@ static void __init machine_specific_arch
 			syscall.address);
 	BUG_ON(ret);
 
-#ifdef CONFIG_X86_LOCAL_APIC
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &nmi_cb);
 	if (ret == -ENOSYS) {
 		struct xennmi_callback cb;
@@ -54,5 +51,4 @@ static void __init machine_specific_arch
 		cb.handler_address = nmi_cb.address;
 		HYPERVISOR_nmi_op(XENNMI_register_callback, &cb);
 	}
-#endif
 }
