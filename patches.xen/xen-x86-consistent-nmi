From: jbeulich@novell.com
Subject: make i386 and x86 NMI code consistent, disable all APIC-related stuff
Patch-mainline: obsolete
References: 191115

Index: head-2008-01-08/arch/x86/kernel/cpu/Makefile
===================================================================
--- head-2008-01-08.orig/arch/x86/kernel/cpu/Makefile	2008-01-08 11:43:13.000000000 +0100
+++ head-2008-01-08/arch/x86/kernel/cpu/Makefile	2008-01-08 12:26:11.000000000 +0100
@@ -17,4 +17,6 @@ obj-$(CONFIG_X86_MCE)	+= mcheck/
 obj-$(CONFIG_MTRR)	+= mtrr/
 obj-$(CONFIG_CPU_FREQ)	+= cpufreq/
 
+ifneq ($(CONFIG_XEN),y)
 obj-$(CONFIG_X86_LOCAL_APIC) += perfctr-watchdog.o
+endif
Index: head-2008-01-08/arch/x86/kernel/nmi_32.c
===================================================================
--- head-2008-01-08.orig/arch/x86/kernel/nmi_32.c	2008-01-08 11:43:13.000000000 +0100
+++ head-2008-01-08/arch/x86/kernel/nmi_32.c	2008-01-08 12:26:11.000000000 +0100
@@ -29,7 +29,15 @@
 
 #include "mach_traps.h"
 
+#ifdef CONFIG_SYSCTL
 int unknown_nmi_panic;
+static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
+#endif
+
+extern void die_nmi(struct pt_regs *, const char *msg);
+
+#ifndef CONFIG_XEN
+
 int nmi_watchdog_enabled;
 
 static cpumask_t backtrace_mask = CPU_MASK_NONE;
@@ -47,9 +55,6 @@ static unsigned int nmi_hz = HZ;
 
 static DEFINE_PER_CPU(short, wd_enabled);
 
-/* local prototypes */
-static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
-
 static int endflag __initdata = 0;
 
 /* The performance counters used by NMI_LOCAL_APIC don't trigger when
@@ -321,8 +326,6 @@ void touch_nmi_watchdog(void)
 }
 EXPORT_SYMBOL(touch_nmi_watchdog);
 
-extern void die_nmi(struct pt_regs *, const char *msg);
-
 __kprobes int nmi_watchdog_tick(struct pt_regs * regs, unsigned reason)
 {
 
@@ -394,6 +397,8 @@ __kprobes int nmi_watchdog_tick(struct p
 	return rc;
 }
 
+#endif /* CONFIG_XEN */
+
 int do_nmi_callback(struct pt_regs * regs, int cpu)
 {
 #ifdef CONFIG_SYSCTL
@@ -415,6 +420,7 @@ static int unknown_nmi_panic_callback(st
 	return 0;
 }
 
+#ifndef CONFIG_XEN
 /*
  * proc handler for /proc/sys/kernel/nmi
  */
@@ -453,9 +459,11 @@ int proc_nmi_enabled(struct ctl_table *t
 	}
 	return 0;
 }
+#endif
 
 #endif
 
+#ifndef CONFIG_XEN
 void __trigger_all_cpu_backtrace(void)
 {
 	int i;
@@ -471,3 +479,4 @@ void __trigger_all_cpu_backtrace(void)
 
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
+#endif
Index: head-2008-01-08/arch/x86/kernel/nmi_64.c
===================================================================
--- head-2008-01-08.orig/arch/x86/kernel/nmi_64.c	2008-01-08 11:43:13.000000000 +0100
+++ head-2008-01-08/arch/x86/kernel/nmi_64.c	2008-01-08 12:26:11.000000000 +0100
@@ -26,10 +26,17 @@
 #include <asm/proto.h>
 #include <asm/mce.h>
 
+#ifdef CONFIG_SYSCTL
 int unknown_nmi_panic;
-int nmi_watchdog_enabled;
+static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
+#endif
+
 int panic_on_unrecovered_nmi;
 
+#ifndef CONFIG_XEN
+
+int nmi_watchdog_enabled;
+
 static cpumask_t backtrace_mask = CPU_MASK_NONE;
 
 /* nmi_active:
@@ -46,9 +53,6 @@ static unsigned int nmi_hz = HZ;
 
 static DEFINE_PER_CPU(short, wd_enabled);
 
-/* local prototypes */
-static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu);
-
 /* Run after command line and cpu_init init, but before all other checks */
 void nmi_watchdog_default(void)
 {
@@ -383,6 +387,8 @@ int __kprobes nmi_watchdog_tick(struct p
 	return rc;
 }
 
+#endif /* CONFIG_XEN */
+
 static unsigned ignore_nmis;
 
 asmlinkage __kprobes void do_nmi(struct pt_regs * regs, long error_code)
@@ -427,6 +433,7 @@ static int unknown_nmi_panic_callback(st
 	return 0;
 }
 
+#ifndef CONFIG_XEN
 /*
  * proc handler for /proc/sys/kernel/nmi
  */
@@ -461,9 +468,11 @@ int proc_nmi_enabled(struct ctl_table *t
 	}
 	return 0;
 }
+#endif
 
 #endif
 
+#ifndef CONFIG_XEN
 void __trigger_all_cpu_backtrace(void)
 {
 	int i;
@@ -480,3 +489,4 @@ void __trigger_all_cpu_backtrace(void)
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
 EXPORT_SYMBOL(touch_nmi_watchdog);
+#endif /* CONFIG_XEN */
Index: head-2008-01-08/arch/x86/kernel/traps_32-xen.c
===================================================================
--- head-2008-01-08.orig/arch/x86/kernel/traps_32-xen.c	2008-01-08 12:25:55.000000000 +0100
+++ head-2008-01-08/arch/x86/kernel/traps_32-xen.c	2008-01-08 12:26:11.000000000 +0100
@@ -770,12 +770,14 @@ static __kprobes void default_do_nmi(str
 							== NOTIFY_STOP)
 			return;
 #ifdef CONFIG_X86_LOCAL_APIC
+#ifndef CONFIG_XEN
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
 		 */
 		if (nmi_watchdog_tick(regs, reason))
 			return;
+#endif
 		if (!do_nmi_callback(regs, smp_processor_id()))
 #endif
 			unknown_nmi_error(reason, regs);
Index: head-2008-01-08/arch/x86/kernel/traps_64-xen.c
===================================================================
--- head-2008-01-08.orig/arch/x86/kernel/traps_64-xen.c	2008-01-08 12:25:38.000000000 +0100
+++ head-2008-01-08/arch/x86/kernel/traps_64-xen.c	2008-01-08 12:26:11.000000000 +0100
@@ -851,7 +851,7 @@ asmlinkage __kprobes void default_do_nmi
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 								== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2008-01-08/include/asm-x86/irq_32.h
===================================================================
--- head-2008-01-08.orig/include/asm-x86/irq_32.h	2008-01-08 11:43:13.000000000 +0100
+++ head-2008-01-08/include/asm-x86/irq_32.h	2008-01-08 12:26:11.000000000 +0100
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 # define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2008-01-08/include/asm-x86/nmi_32.h
===================================================================
--- head-2008-01-08.orig/include/asm-x86/nmi_32.h	2008-01-08 11:43:13.000000000 +0100
+++ head-2008-01-08/include/asm-x86/nmi_32.h	2008-01-08 12:26:11.000000000 +0100
@@ -7,8 +7,6 @@
 #include <linux/pm.h>
 #include <asm/irq.h>
 
-#ifdef ARCH_HAS_NMI_WATCHDOG
-
 /**
  * do_nmi_callback
  *
@@ -17,6 +15,8 @@
  */
 int do_nmi_callback(struct pt_regs *regs, int cpu);
 
+#ifdef ARCH_HAS_NMI_WATCHDOG
+
 extern int nmi_watchdog_enabled;
 extern int avail_to_resrv_perfctr_nmi_bit(unsigned int);
 extern int avail_to_resrv_perfctr_nmi(unsigned int);
@@ -44,13 +44,10 @@ struct ctl_table;
 struct file;
 extern int proc_nmi_enabled(struct ctl_table *, int , struct file *,
 			void __user *, size_t *, loff_t *);
-extern int unknown_nmi_panic;
 
 void __trigger_all_cpu_backtrace(void);
 #define trigger_all_cpu_backtrace() __trigger_all_cpu_backtrace()
 
-#endif
-
 void lapic_watchdog_stop(void);
 int lapic_watchdog_init(unsigned nmi_hz);
 int lapic_wd_event(unsigned nmi_hz);
@@ -58,7 +55,12 @@ unsigned lapic_adjust_nmi_hz(unsigned hz
 int lapic_watchdog_ok(void);
 void disable_lapic_nmi_watchdog(void);
 void enable_lapic_nmi_watchdog(void);
+
+#endif
+
 void stop_nmi(void);
 void restart_nmi(void);
 
+extern int unknown_nmi_panic;
+
 #endif /* ASM_NMI_H */
Index: head-2008-01-08/include/asm-x86/nmi_64.h
===================================================================
--- head-2008-01-08.orig/include/asm-x86/nmi_64.h	2008-01-08 11:43:13.000000000 +0100
+++ head-2008-01-08/include/asm-x86/nmi_64.h	2008-01-08 12:26:11.000000000 +0100
@@ -43,6 +43,9 @@ extern void die_nmi(char *str, struct pt
 
 extern int panic_on_timeout;
 extern int unknown_nmi_panic;
+
+#ifndef CONFIG_XEN
+
 extern int nmi_watchdog_enabled;
 
 extern int check_nmi_watchdog(void);
@@ -89,6 +92,9 @@ unsigned lapic_adjust_nmi_hz(unsigned hz
 int lapic_watchdog_ok(void);
 void disable_lapic_nmi_watchdog(void);
 void enable_lapic_nmi_watchdog(void);
+
+#endif
+
 void stop_nmi(void);
 void restart_nmi(void);
 
Index: head-2008-01-08/include/asm-x86/mach-xen/asm/irq_64.h
===================================================================
--- head-2008-01-08.orig/include/asm-x86/mach-xen/asm/irq_64.h	2007-06-12 13:14:13.000000000 +0200
+++ head-2008-01-08/include/asm-x86/mach-xen/asm/irq_64.h	2008-01-08 12:26:11.000000000 +0100
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#ifndef CONFIG_XEN
 #define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2008-01-08/include/asm-x86/mach-xen/setup_arch_post.h
===================================================================
--- head-2008-01-08.orig/include/asm-x86/mach-xen/setup_arch_post.h	2007-06-12 13:14:13.000000000 +0200
+++ head-2008-01-08/include/asm-x86/mach-xen/setup_arch_post.h	2008-01-08 12:26:11.000000000 +0100
@@ -27,12 +27,10 @@ static void __init machine_specific_arch
 		.type = CALLBACKTYPE_syscall,
 		.address = (unsigned long)system_call,
 	};
-#ifdef CONFIG_X86_LOCAL_APIC
 	static struct callback_register __initdata nmi_cb = {
 		.type = CALLBACKTYPE_nmi,
 		.address = (unsigned long)nmi,
 	};
-#endif
 
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &event);
 	if (ret == 0)
@@ -48,7 +46,6 @@ static void __init machine_specific_arch
 #endif
 	BUG_ON(ret);
 
-#ifdef CONFIG_X86_LOCAL_APIC
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &nmi_cb);
 #if CONFIG_XEN_COMPAT <= 0x030002
 	if (ret == -ENOSYS) {
@@ -59,5 +56,4 @@ static void __init machine_specific_arch
 		HYPERVISOR_nmi_op(XENNMI_register_callback, &cb);
 	}
 #endif
-#endif
 }
Index: head-2008-01-08/kernel/sysctl.c
===================================================================
--- head-2008-01-08.orig/kernel/sysctl.c	2008-01-08 12:02:48.000000000 +0100
+++ head-2008-01-08/kernel/sysctl.c	2008-01-08 12:26:11.000000000 +0100
@@ -662,6 +662,7 @@ static struct ctl_table kern_table[] = {
 		.mode           = 0644,
 		.proc_handler   = &proc_dointvec,
 	},
+#ifndef CONFIG_XEN
 	{
 		.procname       = "nmi_watchdog",
 		.data           = &nmi_watchdog_enabled,
@@ -670,6 +671,7 @@ static struct ctl_table kern_table[] = {
 		.proc_handler   = &proc_nmi_enabled,
 	},
 #endif
+#endif
 #if defined(CONFIG_X86)
 	{
 		.ctl_name	= KERN_PANIC_ON_NMI,
