From: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Linux: 2.6.36-rc4
Patch-mainline: 2.6.36-rc4

 This patch contains the differences between 2.6.36-rc3 and -rc4.

Acked-by: Jiri Slaby <jslaby@suse.cz>
Automatically created from "patches.kernel.org/patch-2.6.36-rc3-rc4" by xen-port-patches.py

--- head-2010-09-16.orig/arch/x86/include/mach-xen/asm/pci.h	2010-06-22 11:51:35.000000000 +0200
+++ head-2010-09-16/arch/x86/include/mach-xen/asm/pci.h	2010-09-16 17:41:39.000000000 +0200
@@ -30,6 +30,9 @@ extern struct pci_bus *pci_scan_bus_on_n
 					    int node);
 extern struct pci_bus *pci_scan_bus_with_sysdata(int busno);
 
+#ifdef CONFIG_PCI
+
+#ifdef CONFIG_PCI_DOMAINS
 static inline int pci_domain_nr(struct pci_bus *bus)
 {
 	struct pci_sysdata *sd = bus->sysdata;
@@ -40,13 +43,12 @@ static inline int pci_proc_domain(struct
 {
 	return pci_domain_nr(bus);
 }
-
+#endif
 
 /* Can be used to override the logic in pci_scan_bus for skipping
    already-configured bus numbers - to be used for buggy BIOSes
    or architectures with incomplete PCI setup by the loader */
 
-#ifdef CONFIG_PCI
 extern unsigned int pcibios_assign_all_busses(void);
 extern int pci_legacy_init(void);
 # ifdef CONFIG_ACPI
--- head-2010-09-16.orig/arch/x86/mm/iomap_32-xen.c	2010-06-22 11:48:53.000000000 +0200
+++ head-2010-09-16/arch/x86/mm/iomap_32-xen.c	2010-09-16 17:41:39.000000000 +0200
@@ -75,7 +75,7 @@ void *kmap_atomic_prot_pfn(unsigned long
 /*
  * Map 'mfn' using fixed map 'type' and protections 'prot'
  */
-void *
+void __iomem *
 iomap_atomic_prot_pfn(unsigned long mfn, enum km_type type, pgprot_t prot)
 {
 	/*
@@ -88,12 +88,12 @@ iomap_atomic_prot_pfn(unsigned long mfn,
 		prot = PAGE_KERNEL_UC_MINUS;
 
 	pgprot_val(prot) |= _PAGE_IOMAP;
-	return kmap_atomic_prot_pfn(mfn, type, prot);
+	return (void __force __iomem *) kmap_atomic_prot_pfn(mfn, type, prot);
 }
 EXPORT_SYMBOL_GPL(iomap_atomic_prot_pfn);
 
 void
-iounmap_atomic(void *kvaddr, enum km_type type)
+iounmap_atomic(void __iomem *kvaddr, enum km_type type)
 {
 	unsigned long vaddr = (unsigned long) kvaddr & PAGE_MASK;
 	enum fixed_addresses idx = type + KM_TYPE_NR*smp_processor_id();
