Subject: Fix x86_64 xen build.
From: kraxel@suse.de

$subject says all.

Index: head-2006-01-16/include/asm-x86_64/mach-xen/asm/swiotlb.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ head-2006-01-16/include/asm-x86_64/mach-xen/asm/swiotlb.h	2006-01-16 14:14:17.000000000 +0100
@@ -0,0 +1 @@
+#include <asm-i386/mach-xen/asm/swiotlb.h>
Index: head-2006-01-16/arch/x86_64/xen/kernel/mpparse.c
===================================================================
--- head-2006-01-16.orig/arch/x86_64/xen/kernel/mpparse.c	2006-01-16 17:13:41.494467808 +0100
+++ head-2006-01-16/arch/x86_64/xen/kernel/mpparse.c	2006-01-16 10:20:25.000000000 +0100
@@ -174,8 +174,14 @@ static void __init MP_processor_info (st
 	cpu_set(cpu, cpu_present_map);
 }
 #else
-void __init MP_processor_info (struct mpc_config_processor *m)
+static void __init MP_processor_info (struct mpc_config_processor *m)
 {
+	if (num_processors >= NR_CPUS) {
+		printk(KERN_WARNING "WARNING: NR_CPUS limit of %i reached."
+			" Processor ignored.\n", NR_CPUS);
+		return;
+	}
+	cpu_set(num_processors, cpu_possible_map);
 	num_processors++;
 }
 #endif /* CONFIG_XEN */
Index: head-2006-01-16/drivers/xen/core/smpboot.c
===================================================================
--- head-2006-01-16.orig/drivers/xen/core/smpboot.c	2006-01-16 17:14:19.952621280 +0100
+++ head-2006-01-16/drivers/xen/core/smpboot.c	2006-01-16 17:15:01.970233632 +0100
@@ -272,9 +272,9 @@ void __init smp_prepare_cpus(unsigned in
 
 void __devinit smp_prepare_boot_cpu(void)
 {
-	cpu_possible_map = cpumask_of_cpu(0);
-	cpu_present_map  = cpumask_of_cpu(0);
-	cpu_online_map   = cpumask_of_cpu(0);
+	cpu_set(0, cpu_possible_map);
+	cpu_set(0, cpu_present_map);
+	cpu_set(0, cpu_online_map);
 }
 
 #ifdef CONFIG_HOTPLUG_CPU
Index: head-2006-01-16/arch/x86_64/xen/kernel/process.c
===================================================================
--- head-2006-01-16.orig/arch/x86_64/xen/kernel/process.c	2006-01-16 10:14:19.000000000 +0100
+++ head-2006-01-16/arch/x86_64/xen/kernel/process.c	2006-01-16 10:20:25.000000000 +0100
@@ -452,13 +452,6 @@ out:
 	return err;
 }
 
-static inline void __save_init_fpu( struct task_struct *tsk )
-{
-	asm volatile( "rex64 ; fxsave %0 ; fnclex"
-		      : "=m" (tsk->thread.i387.fxsave));
-	tsk->thread_info->status &= ~TS_USEDFPU;
-}
-
 /*
  *	switch_to(x,y) should switch tasks from x to y.
  *
Index: head-2006-01-16/include/asm-x86_64/i387.h
===================================================================
--- head-2006-01-16.orig/include/asm-x86_64/i387.h	2006-01-16 17:13:41.510465376 +0100
+++ head-2006-01-16/include/asm-x86_64/i387.h	2006-01-16 13:59:29.000000000 +0100
@@ -170,10 +170,15 @@ static inline void kernel_fpu_end(void)
 	preempt_enable();
 }
 
-static inline void save_init_fpu(struct task_struct *tsk)
+static inline void __save_init_fpu(struct task_struct *tsk)
 {
  	__fxsave_clear(tsk);
 	task_thread_info(tsk)->status &= ~TS_USEDFPU;
+}
+
+static inline void save_init_fpu(struct task_struct *tsk)
+{
+	__save_init_fpu(tsk);
 	stts();
 }
 
Index: head-2006-01-19/include/asm-x86_64/mach-xen/asm/pgtable.h
===================================================================
--- head-2006-01-19.orig/include/asm-x86_64/mach-xen/asm/pgtable.h	2006-01-19 09:25:48.000000000 +0100
+++ head-2006-01-19/include/asm-x86_64/mach-xen/asm/pgtable.h	2006-01-23 14:19:27.000000000 +0100
@@ -440,12 +440,7 @@ static inline pud_t *__pud_offset_k(pud_
    Other CPUs get synced lazily via the page fault handler. */
 static inline pud_t *pud_offset_k(unsigned long address)
 {
-	unsigned long addr;
-
-	addr = pgd_val(init_level4_pgt[pud_index(address)]);
-	addr &= PHYSICAL_PAGE_MASK; /* machine physical */
-        addr = machine_to_phys(addr);
-	return __pud_offset_k((pud_t *)__va(addr), address);
+	return pud_offset(pgd_offset_k(address), address);
 }
 
 /* PMD  - Level 2 access */
