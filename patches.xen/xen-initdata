From: jbeulich@novell.com
Subject: use __initdata where possible
Patch-mainline: obsolete

Index: head-2006-10-30/arch/i386/kernel/sysenter.c
===================================================================
--- head-2006-10-30.orig/arch/i386/kernel/sysenter.c	2006-10-30 13:37:28.000000000 +0100
+++ head-2006-10-30/arch/i386/kernel/sysenter.c	2006-10-30 13:38:38.000000000 +0100
@@ -45,7 +45,7 @@ extern asmlinkage void sysenter_entry(vo
 #ifdef CONFIG_XEN
 #include <xen/interface/callback.h>
 
-static struct callback_register sysenter_cb = {
+static struct callback_register __initdata sysenter_cb = {
 	.type = CALLBACKTYPE_sysenter,
 	.address = { __KERNEL_CS, (unsigned long)sysenter_entry },
 };
Index: head-2006-10-30/arch/i386/mach-xen/setup.c
===================================================================
--- head-2006-10-30.orig/arch/i386/mach-xen/setup.c	2006-10-30 13:37:28.000000000 +0100
+++ head-2006-10-30/arch/i386/mach-xen/setup.c	2006-10-31 08:44:31.000000000 +0100
@@ -88,15 +88,15 @@ void __init machine_specific_arch_setup(
 	struct xen_machphys_mapping mapping;
 	unsigned long machine_to_phys_nr_ents;
 	struct xen_platform_parameters pp;
-	struct callback_register event = {
+	static struct callback_register __initdata event = {
 		.type = CALLBACKTYPE_event,
 		.address = { __KERNEL_CS, (unsigned long)hypervisor_callback },
 	};
-	struct callback_register failsafe = {
+	static struct callback_register __initdata failsafe = {
 		.type = CALLBACKTYPE_failsafe,
 		.address = { __KERNEL_CS, (unsigned long)failsafe_callback },
 	};
-	struct callback_register nmi_cb = {
+	static struct callback_register __initdata nmi_cb = {
 		.type = CALLBACKTYPE_nmi,
 		.address = { __KERNEL_CS, (unsigned long)nmi },
 	};
@@ -112,9 +112,10 @@ void __init machine_specific_arch_setup(
 
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &nmi_cb);
 	if (ret == -ENOSYS) {
-		struct xennmi_callback cb;
+		static struct xennmi_callback __initdata cb = {
+			.handler_address = (unsigned long)nmi
+		};
 
-		cb.handler_address = nmi_cb.address.eip;
 		HYPERVISOR_nmi_op(XENNMI_register_callback, &cb);
 	}
 
Index: head-2006-10-30/include/asm-x86_64/mach-xen/setup_arch_post.h
===================================================================
--- head-2006-10-30.orig/include/asm-x86_64/mach-xen/setup_arch_post.h	2006-10-30 13:38:31.000000000 +0100
+++ head-2006-10-30/include/asm-x86_64/mach-xen/setup_arch_post.h	2006-10-31 08:46:13.000000000 +0100
@@ -15,19 +15,19 @@ extern void nmi(void);
 static void __init machine_specific_arch_setup(void)
 {
 	int ret;
-	struct callback_register event = {
+	static struct callback_register __initdata event = {
 		.type = CALLBACKTYPE_event,
 		.address = (unsigned long) hypervisor_callback,
 	};
-	struct callback_register failsafe = {
+	static struct callback_register __initdata failsafe = {
 		.type = CALLBACKTYPE_failsafe,
 		.address = (unsigned long)failsafe_callback,
 	};
-	struct callback_register syscall = {
+	static struct callback_register __initdata syscall = {
 		.type = CALLBACKTYPE_syscall,
 		.address = (unsigned long)system_call,
 	};
-	struct callback_register nmi_cb = {
+	static struct callback_register __initdata nmi_cb = {
 		.type = CALLBACKTYPE_nmi,
 		.address = (unsigned long)nmi,
 	};
@@ -46,9 +46,10 @@ static void __init machine_specific_arch
 
 	ret = HYPERVISOR_callback_op(CALLBACKOP_register, &nmi_cb);
 	if (ret == -ENOSYS) {
-		struct xennmi_callback cb;
+		static struct xennmi_callback __initdata cb = {
+			.handler_address = (unsigned long)nmi
+		};
 
-		cb.handler_address = nmi_cb.address;
 		HYPERVISOR_nmi_op(XENNMI_register_callback, &cb);
 	}
 }
