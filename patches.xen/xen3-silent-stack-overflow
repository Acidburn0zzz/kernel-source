From: Andrea Arcangeli <andrea@suse.de>
Subject: avoid silent stack overflow over the heap
Patch-mainline: no
References: SUSE44807

x

Signed-off-by: Andrea Arcangeli <andrea@suse.de>

Automatically created from "patches.suse/silent-stack-overflow" by xen-port-patches.py
Further porting to arch/xen by jbeulich

Index: xen-2005-08-19/arch/xen/i386/mm/fault.c
===================================================================
--- xen-2005-08-19.orig/arch/xen/i386/mm/fault.c	2005-08-19 12:12:42.720874168 +0200
+++ xen-2005-08-19/arch/xen/i386/mm/fault.c	2005-08-19 12:43:16.045166512 +0200
@@ -276,7 +276,7 @@
 {
 	struct task_struct *tsk;
 	struct mm_struct *mm;
-	struct vm_area_struct * vma;
+	struct vm_area_struct *vma, *prev_vma;
 	int write;
 	siginfo_t info;
 
@@ -370,7 +370,13 @@
 		if (address + 32 < regs->esp)
 			goto bad_area;
 	}
-	if (expand_stack(vma, address))
+	/*
+	 * find_vma_prev is just a bit slower, because it cannot
+	 * use the mmap_cache, so we run it only in the growsdown
+	 * slow path and we leave find_vma in the fast path.
+	 */
+	find_vma_prev(current->mm, address, &prev_vma);
+	if (expand_stack(vma, address, prev_vma))
 		goto bad_area;
 /*
  * Ok, we have a good vm_area for this memory access, so
Index: xen-2005-08-19/arch/xen/x86_64/mm/fault.c
===================================================================
--- xen-2005-08-19.orig/arch/xen/x86_64/mm/fault.c	2005-08-19 12:42:04.505042264 +0200
+++ xen-2005-08-19/arch/xen/x86_64/mm/fault.c	2005-08-19 12:43:16.047166208 +0200
@@ -318,7 +318,7 @@
 {
 	struct task_struct *tsk;
 	struct mm_struct *mm;
-	struct vm_area_struct * vma;
+	struct vm_area_struct *vma, *prev_vma;
 	const struct exception_table_entry *fixup;
 	int write;
 	siginfo_t info;
@@ -426,7 +426,13 @@
 		if (address + 128 < regs->rsp)
 			goto bad_area;
 	}
-	if (expand_stack(vma, address))
+	/*
+	 * find_vma_prev is just a bit slower, because it cannot
+	 * use the mmap_cache, so we run it only in the growsdown
+	 * slow path and we leave find_vma in the fast path.
+	 */
+	find_vma_prev(current->mm, address, &prev_vma);
+	if (expand_stack(vma, address, prev_vma))
 		goto bad_area;
 /*
  * Ok, we have a good vm_area for this memory access, so
