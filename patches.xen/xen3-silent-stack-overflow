From: Andrea Arcangeli <andrea@suse.de>
Subject: avoid silent stack overflow over the heap
Patch-mainline: no
References: SUSE44807

x

Signed-off-by: Andrea Arcangeli <andrea@suse.de>

 arch/alpha/mm/fault.c                  |    2 -
 arch/arm/mm/fault.c                    |    2 -
 arch/arm26/mm/fault.c                  |    2 -
 arch/cris/mm/fault.c                   |    2 -
 arch/frv/mm/fault.c                    |    2 -
 arch/i386/mm/fault.c                   |   10 ++++++-
 arch/ia64/mm/fault.c                   |    2 -
 arch/m32r/mm/fault.c                   |    2 -
 arch/m68k/mm/fault.c                   |    2 -
 arch/mips/mm/fault.c                   |    2 -
 arch/parisc/mm/fault.c                 |    2 -
 arch/powerpc/mm/fault.c                |    5 ++-
 arch/powerpc/platforms/cell/spu_base.c |    2 -
 arch/ppc/mm/fault.c                    |    5 ++-
 arch/s390/mm/fault.c                   |    2 -
 arch/sh/mm/fault.c                     |    2 -
 arch/sh64/mm/fault.c                   |    2 -
 arch/sparc/mm/fault.c                  |    4 +--
 arch/sparc64/mm/fault.c                |    2 -
 arch/um/kernel/trap_kern.c             |    9 ++++---
 arch/x86_64/kernel/sys_x86_64.c        |   10 +++++++
 arch/x86_64/mm/fault.c                 |   10 ++++++-
 arch/xtensa/mm/fault.c                 |    2 -
 include/linux/mm.h                     |    5 +++
 include/linux/sysctl.h                 |    1 
 kernel/sysctl.c                        |    8 ++++++
 mm/mmap.c                              |   42 +++++++++++++++++++++++++--------
 27 files changed, 101 insertions(+), 40 deletions(-)

Automatically created from "patches.suse/silent-stack-overflow" by xen-port-patches.py

Index: sles10/arch/i386/mm/fault-xen.c
--- sles10/arch/i386/mm/fault-xen.c.orig	2006-01-16 13:42:29.000000000 +0100
+++ sles10/arch/i386/mm/fault-xen.c	2006-03-18 12:09:37.000000000 +0100
@@ -229,7 +229,7 @@ fastcall void __kprobes do_page_fault(st
 {
 	struct task_struct *tsk;
 	struct mm_struct *mm;
-	struct vm_area_struct * vma;
+	struct vm_area_struct * vma, * prev_vma;
 	unsigned long address;
 	unsigned long page;
 	int write, si_code;
@@ -319,7 +319,13 @@ fastcall void __kprobes do_page_fault(st
 		if (address + 32 < regs->esp)
 			goto bad_area;
 	}
-	if (expand_stack(vma, address))
+	/*
+	 * find_vma_prev is just a bit slower, because it cannot
+	 * use the mmap_cache, so we run it only in the growsdown
+	 * slow path and we leave find_vma in the fast path.
+	 */
+	find_vma_prev(current->mm, address, &prev_vma);
+	if (expand_stack(vma, address, prev_vma))
 		goto bad_area;
 /*
  * Ok, we have a good vm_area for this memory access, so
Index: sles10/arch/x86_64/mm/fault-xen.c
--- sles10/arch/x86_64/mm/fault-xen.c.orig	2006-03-18 12:08:40.000000000 +0100
+++ sles10/arch/x86_64/mm/fault-xen.c	2006-03-18 12:09:42.000000000 +0100
@@ -305,7 +305,7 @@ asmlinkage void __kprobes do_page_fault(
 {
 	struct task_struct *tsk;
 	struct mm_struct *mm;
-	struct vm_area_struct * vma;
+	struct vm_area_struct * vma, * prev_vma;
 	unsigned long address;
 	const struct exception_table_entry *fixup;
 	int write;
@@ -407,7 +407,13 @@ asmlinkage void __kprobes do_page_fault(
 		if (address + 128 < regs->rsp)
 			goto bad_area;
 	}
-	if (expand_stack(vma, address))
+	/*
+	 * find_vma_prev is just a bit slower, because it cannot
+	 * use the mmap_cache, so we run it only in the growsdown
+	 * slow path and we leave find_vma in the fast path.
+	 */
+	find_vma_prev(current->mm, address, &prev_vma);
+	if (expand_stack(vma, address, prev_vma))
 		goto bad_area;
 /*
  * Ok, we have a good vm_area for this memory access, so
