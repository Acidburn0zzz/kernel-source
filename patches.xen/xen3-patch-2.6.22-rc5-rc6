From: www.kernel.org
Subject: Update to 2.6.22-rc6
Patch-mainline: 2.6.22-rc6

Automatically created from "patches.kernel.org/patch-2.6.22-rc5-rc6" by xen-port-patches.py

Acked-by: jbeulich@novell.com

Index: head-2007-07-02/arch/i386/Kconfig.cpu
===================================================================
--- head-2007-07-02.orig/arch/i386/Kconfig.cpu	2007-07-02 13:28:46.000000000 +0200
+++ head-2007-07-02/arch/i386/Kconfig.cpu	2007-07-02 14:11:39.000000000 +0200
@@ -299,7 +299,7 @@ config X86_POPAD_OK
 
 config X86_CMPXCHG64
 	bool
-	depends on X86_PAE
+	depends on X86_PAE || X86_XEN
 	default y
 
 config X86_ALIGNMENT_16
Index: head-2007-07-02/arch/i386/kernel/cpu/mtrr/main-xen.c
===================================================================
--- head-2007-07-02.orig/arch/i386/kernel/cpu/mtrr/main-xen.c	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/i386/kernel/cpu/mtrr/main-xen.c	2007-07-02 13:53:23.000000000 +0200
@@ -166,7 +166,7 @@ mtrr_del(int reg, unsigned long base, un
 EXPORT_SYMBOL(mtrr_add);
 EXPORT_SYMBOL(mtrr_del);
 
-void mtrr_bp_init(void)
+__init void mtrr_bp_init(void)
 {
 }
 
Index: head-2007-07-02/arch/i386/kernel/pci-dma-xen.c
===================================================================
--- head-2007-07-02.orig/arch/i386/kernel/pci-dma-xen.c	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/i386/kernel/pci-dma-xen.c	2007-07-02 13:57:58.000000000 +0200
@@ -13,6 +13,7 @@
 #include <linux/pci.h>
 #include <linux/module.h>
 #include <linux/version.h>
+#include <linux/pci.h>
 #include <asm/io.h>
 #include <xen/balloon.h>
 #include <asm/swiotlb.h>
@@ -312,6 +313,32 @@ void *dma_mark_declared_memory_occupied(
 EXPORT_SYMBOL(dma_mark_declared_memory_occupied);
 #endif /* ARCH_HAS_DMA_DECLARE_COHERENT_MEMORY */
 
+#if defined(CONFIG_PCI) && !defined(CONFIG_XEN)
+/* Many VIA bridges seem to corrupt data for DAC. Disable it here */
+
+int forbid_dac;
+EXPORT_SYMBOL(forbid_dac);
+
+static __devinit void via_no_dac(struct pci_dev *dev)
+{
+	if ((dev->class >> 8) == PCI_CLASS_BRIDGE_PCI && forbid_dac == 0) {
+		printk(KERN_INFO "PCI: VIA PCI bridge detected. Disabling DAC.\n");
+		forbid_dac = 1;
+	}
+}
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_VIA, PCI_ANY_ID, via_no_dac);
+
+static int check_iommu(char *s)
+{
+	if (!strcmp(s, "usedac")) {
+		forbid_dac = -1;
+		return 1;
+	}
+	return 0;
+}
+__setup("iommu=", check_iommu);
+#endif
+
 dma_addr_t
 dma_map_single(struct device *dev, void *ptr, size_t size,
 	       enum dma_data_direction direction)
Index: head-2007-07-02/arch/i386/mm/init-xen.c
===================================================================
--- head-2007-07-02.orig/arch/i386/mm/init-xen.c	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/i386/mm/init-xen.c	2007-07-02 13:52:32.000000000 +0200
@@ -857,6 +857,7 @@ void mark_rodata_ro(void)
 	unsigned long start = PFN_ALIGN(_text);
 	unsigned long size = PFN_ALIGN(_etext) - start;
 
+#ifndef CONFIG_KPROBES
 #ifdef CONFIG_HOTPLUG_CPU
 	/* It must still be possible to apply SMP alternatives. */
 	if (num_possible_cpus() <= 1)
@@ -866,7 +867,7 @@ void mark_rodata_ro(void)
 		                 size >> PAGE_SHIFT, PAGE_KERNEL_RX);
 		printk("Write protecting the kernel text: %luk\n", size >> 10);
 	}
-
+#endif
 	start += size;
 	size = (unsigned long)__end_rodata - start;
 	change_page_attr(virt_to_page(start),
Index: head-2007-07-02/arch/x86_64/ia32/ia32entry-xen.S
===================================================================
--- head-2007-07-02.orig/arch/x86_64/ia32/ia32entry-xen.S	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/x86_64/ia32/ia32entry-xen.S	2007-07-02 13:52:32.000000000 +0200
@@ -647,7 +647,7 @@ ia32_sys_call_table:
 	.quad quiet_ni_syscall		/* tux */
 	.quad quiet_ni_syscall    	/* security */
 	.quad sys_gettid	
-	.quad sys_readahead	/* 225 */
+	.quad sys32_readahead	/* 225 */
 	.quad sys_setxattr
 	.quad sys_lsetxattr
 	.quad sys_fsetxattr
@@ -672,7 +672,7 @@ ia32_sys_call_table:
 	.quad compat_sys_io_getevents
 	.quad compat_sys_io_submit
 	.quad sys_io_cancel
-	.quad sys_fadvise64		/* 250 */
+	.quad sys32_fadvise64		/* 250 */
 	.quad quiet_ni_syscall 	/* free_huge_pages */
 	.quad sys_exit_group
 	.quad sys32_lookup_dcookie
@@ -736,7 +736,7 @@ ia32_sys_call_table:
 	.quad compat_sys_set_robust_list
 	.quad compat_sys_get_robust_list
 	.quad sys_splice
-	.quad sys_sync_file_range
+	.quad sys32_sync_file_range
 	.quad sys_tee			/* 315 */
 	.quad compat_sys_vmsplice
 	.quad compat_sys_move_pages
Index: head-2007-07-02/arch/x86_64/kernel/entry-xen.S
===================================================================
--- head-2007-07-02.orig/arch/x86_64/kernel/entry-xen.S	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/x86_64/kernel/entry-xen.S	2007-07-02 13:52:32.000000000 +0200
@@ -1261,3 +1261,10 @@ ENTRY(call_softirq)
 	ret
 	CFI_ENDPROC
 ENDPROC(call_softirq)
+
+KPROBE_ENTRY(ignore_sysret)
+	CFI_STARTPROC
+	mov $-ENOSYS,%eax
+	sysret
+	CFI_ENDPROC
+ENDPROC(ignore_sysret)
Index: head-2007-07-02/arch/x86_64/kernel/setup64-xen.c
===================================================================
--- head-2007-07-02.orig/arch/x86_64/kernel/setup64-xen.c	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/x86_64/kernel/setup64-xen.c	2007-07-02 13:52:32.000000000 +0200
@@ -206,6 +206,8 @@ char boot_exception_stacks[(N_EXCEPTION_
 __attribute__((section(".bss.page_aligned")));
 #endif
 
+extern asmlinkage void ignore_sysret(void);
+
 /* May not be marked __init: used by software suspend */
 void syscall_init(void)
 {
@@ -217,6 +219,7 @@ void syscall_init(void)
 	 */ 
 	wrmsrl(MSR_STAR,  ((u64)__USER32_CS)<<48  | ((u64)__KERNEL_CS)<<32); 
 	wrmsrl(MSR_LSTAR, system_call); 
+	wrmsrl(MSR_CSTAR, ignore_sysret);
 
 	/* Flags to clear on syscall */
 	wrmsrl(MSR_SYSCALL_MASK, EF_TF|EF_DF|EF_IE|0x3000); 
Index: head-2007-07-02/arch/x86_64/mm/init-xen.c
===================================================================
--- head-2007-07-02.orig/arch/x86_64/mm/init-xen.c	2007-06-21 09:11:28.000000000 +0200
+++ head-2007-07-02/arch/x86_64/mm/init-xen.c	2007-07-02 13:52:32.000000000 +0200
@@ -1050,6 +1050,11 @@ void mark_rodata_ro(void)
 	if (num_possible_cpus() > 1)
 		start = (unsigned long)_etext;
 #endif
+
+#ifdef CONFIG_KPROBES
+	start = (unsigned long)__start_rodata;
+#endif
+	
 	end = (unsigned long)__end_rodata;
 	start = (start + PAGE_SIZE - 1) & PAGE_MASK;
 	end &= PAGE_MASK;
Index: head-2007-07-02/arch/x86_64/mm/pageattr-xen.c
===================================================================
--- head-2007-07-02.orig/arch/x86_64/mm/pageattr-xen.c	2007-07-02 14:10:19.000000000 +0200
+++ head-2007-07-02/arch/x86_64/mm/pageattr-xen.c	2007-07-02 13:52:32.000000000 +0200
@@ -268,10 +268,11 @@ static void flush_kernel_map(void *arg)
 	struct page *pg;
 
 	/* When clflush is available always use it because it is
-	   much cheaper than WBINVD */
-	if (!cpu_has_clflush)
+	   much cheaper than WBINVD. Disable clflush for now because
+	   the high level code is not ready yet */
+	if (1 || !cpu_has_clflush)
 		asm volatile("wbinvd" ::: "memory");
-	list_for_each_entry(pg, l, lru) {
+	else list_for_each_entry(pg, l, lru) {
 		void *adr = page_address(pg);
 		if (cpu_has_clflush)
 			cache_flush_page(adr);
