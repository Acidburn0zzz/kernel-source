From: jbeulich@novell.com
Subject: Disallow all accesses to the local APIC page
Patch-mainline: obsolete
References: 191115

Index: head-2006-09-21/arch/i386/kernel/acpi/boot-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/acpi/boot-xen.c	2006-09-21 10:35:59.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/acpi/boot-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -76,7 +76,7 @@ acpi_interrupt_flags acpi_sci_flags __in
 int acpi_sci_override_gsi __initdata;
 int acpi_skip_timer_override __initdata;
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 static u64 acpi_lapic_addr __initdata = APIC_DEFAULT_PHYS_BASE;
 #endif
 
@@ -227,12 +227,14 @@ static int __init acpi_parse_madt(unsign
 		return -ENODEV;
 	}
 
+#ifndef CONFIG_XEN
 	if (madt->lapic_address) {
 		acpi_lapic_addr = (u64) madt->lapic_address;
 
 		printk(KERN_DEBUG PREFIX "Local APIC address 0x%08x\n",
 		       madt->lapic_address);
 	}
+#endif
 
 	acpi_madt_oem_check(madt->header.oem_id, madt->header.oem_table_id);
 
@@ -272,6 +274,7 @@ static int __init
 acpi_parse_lapic_addr_ovr(acpi_table_entry_header * header,
 			  const unsigned long end)
 {
+#ifndef CONFIG_XEN
 	struct acpi_table_lapic_addr_ovr *lapic_addr_ovr = NULL;
 
 	lapic_addr_ovr = (struct acpi_table_lapic_addr_ovr *)header;
@@ -280,6 +283,7 @@ acpi_parse_lapic_addr_ovr(acpi_table_ent
 		return -EINVAL;
 
 	acpi_lapic_addr = lapic_addr_ovr->address;
+#endif
 
 	return 0;
 }
@@ -714,7 +718,9 @@ static int __init acpi_parse_madt_lapic_
 		return count;
 	}
 
+#ifndef CONFIG_XEN
 	mp_register_lapic_address(acpi_lapic_addr);
+#endif
 
 	count = acpi_table_parse_madt(ACPI_MADT_LAPIC, acpi_parse_lapic,
 				      MAX_APICS);
Index: head-2006-09-21/arch/i386/kernel/acpi/earlyquirk.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/acpi/earlyquirk.c	2006-09-21 09:56:19.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/acpi/earlyquirk.c	2006-09-21 10:48:38.000000000 +0200
@@ -11,7 +11,7 @@
 #include <asm/acpi.h>
 #include <asm/apic.h>
 
-#ifdef CONFIG_ACPI
+#if defined(CONFIG_ACPI) && !defined(CONFIG_XEN)
 
 static int nvidia_hpet_detected __initdata;
 
@@ -24,6 +24,7 @@ static int __init nvidia_hpet_check(unsi
 
 static int __init check_bridge(int vendor, int device)
 {
+#ifndef CONFIG_XEN
 #ifdef CONFIG_ACPI
 	/* According to Nvidia all timer overrides are bogus unless HPET
 	   is enabled. */
@@ -40,6 +41,7 @@ static int __init check_bridge(int vendo
 		printk(KERN_INFO "ATI board detected. Disabling timer routing "
 				"over 8254.\n");
 	}
+#endif
 	return 0;
 }
 
Index: head-2006-09-21/arch/i386/kernel/apic-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/apic-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/apic-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -66,6 +66,7 @@ int apic_verbosity;
 void ack_bad_irq(unsigned int irq)
 {
 	printk("unexpected IRQ trap at vector %02x\n", irq);
+#ifndef CONFIG_XEN
 	/*
 	 * Currently unexpected vectors happen only on SMP and APIC.
 	 * We _must_ ack these because every local APIC has only N
@@ -77,6 +78,7 @@ void ack_bad_irq(unsigned int irq)
 	 */
 	if (cpu_has_apic)
 		ack_APIC_irq();
+#endif
 }
 
 int get_physical_broadcast(void)
Index: head-2006-09-21/arch/i386/kernel/io_apic-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/io_apic-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/io_apic-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -91,7 +91,9 @@ static struct { int pin, apic; } ioapic_
 
 static DEFINE_SPINLOCK(ioapic_lock);
 
+#ifndef CONFIG_XEN
 int timer_over_8254 __initdata = 1;
+#endif
 
 /*
  *	Is the SiS APIC rmw bug present ?
@@ -104,7 +106,9 @@ int sis_apic_bug = -1;
  */
 int nr_ioapic_registers[MAX_IO_APICS];
 
+#ifndef CONFIG_XEN
 int disable_timer_pin_1 __initdata;
+#endif
 
 /*
  * Rough estimation of how many shared IRQs there are, can
@@ -2473,6 +2477,7 @@ void __init setup_IO_APIC(void)
 		print_IO_APIC();
 }
 
+#ifndef CONFIG_XEN
 static int __init setup_disable_8254_timer(char *s)
 {
 	timer_over_8254 = -1;
@@ -2486,6 +2491,7 @@ static int __init setup_enable_8254_time
 
 __setup("disable_8254_timer", setup_disable_8254_timer);
 __setup("enable_8254_timer", setup_enable_8254_timer);
+#endif
 
 /*
  *	Called after all the initialization is done. If we didnt find any
Index: head-2006-09-21/arch/i386/kernel/mpparse-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/mpparse-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/mpparse-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -61,7 +61,9 @@ int mp_irq_entries;
 int nr_ioapics;
 
 int pic_mode;
+#ifndef CONFIG_XEN
 unsigned long mp_lapic_addr;
+#endif
 
 unsigned int def_to_bigsmp = 0;
 
@@ -425,6 +427,7 @@ static int __init smp_read_mpc(struct mp
 
 	mps_oem_check(mpc, oem, str);
 
+#ifndef CONFIG_XEN
 	printk("APIC at: 0x%lX\n",mpc->mpc_lapic);
 
 	/* 
@@ -433,6 +436,7 @@ static int __init smp_read_mpc(struct mp
 	 */
 	if (!acpi_lapic)
 		mp_lapic_addr = mpc->mpc_lapic;
+#endif
 
 	/*
 	 *	Now process the configuration blocks.
@@ -585,10 +589,12 @@ static inline void __init construct_defa
 	int linttypes[2] = { mp_ExtINT, mp_NMI };
 	int i;
 
+#ifndef CONFIG_XEN
 	/*
 	 * local APIC has default address
 	 */
 	mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
+#endif
 
 	/*
 	 * 2 CPUs, numbered 0 & 1.
@@ -838,10 +844,10 @@ int es7000_plat;
 
 #ifdef CONFIG_ACPI
 
+#ifndef CONFIG_XEN
 void __init mp_register_lapic_address (
 	u64			address)
 {
-#ifndef CONFIG_XEN
 	mp_lapic_addr = (unsigned long) address;
 
 	set_fixmap_nocache(FIX_APIC_BASE, mp_lapic_addr);
@@ -850,8 +856,8 @@ void __init mp_register_lapic_address (
 		boot_cpu_physical_apicid = GET_APIC_ID(apic_read(APIC_ID));
 
 	Dprintk("Boot CPU = %d\n", boot_cpu_physical_apicid);
-#endif
 }
+#endif
 
 
 void __devinit mp_register_lapic (
Index: head-2006-09-21/arch/i386/kernel/nmi.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/nmi.c	2006-09-21 09:56:19.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/nmi.c	2006-09-21 10:48:38.000000000 +0200
@@ -28,8 +28,13 @@
 
 #include "mach_traps.h"
 
-unsigned int nmi_watchdog = NMI_NONE;
+extern void die_nmi(struct pt_regs *, const char *msg);
+
 extern int unknown_nmi_panic;
+
+#ifndef CONFIG_XEN
+
+unsigned int nmi_watchdog = NMI_NONE;
 static unsigned int nmi_hz = HZ;
 static unsigned int nmi_perfctr_msr;	/* the MSR to reset in NMI handler */
 static unsigned int nmi_p4_cccr_val;
@@ -577,8 +582,6 @@ void touch_nmi_watchdog (void)
 }
 EXPORT_SYMBOL(touch_nmi_watchdog);
 
-extern void die_nmi(struct pt_regs *, const char *msg);
-
 void nmi_watchdog_tick (struct pt_regs * regs)
 {
 
@@ -630,6 +633,19 @@ void nmi_watchdog_tick (struct pt_regs *
 	}
 }
 
+#else /* CONFIG_XEN */
+
+static inline int reserve_lapic_nmi(void)
+{
+	return 0;
+}
+
+static inline void release_lapic_nmi(void)
+{
+}
+
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_SYSCTL
 
 static int unknown_nmi_panic_callback(struct pt_regs *regs, int cpu)
@@ -673,9 +689,11 @@ int proc_unknown_nmi_panic(ctl_table *ta
 
 #endif
 
+#ifndef CONFIG_XEN
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
 EXPORT_SYMBOL(reserve_lapic_nmi);
 EXPORT_SYMBOL(release_lapic_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
+#endif
Index: head-2006-09-21/arch/i386/kernel/setup-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/setup-xen.c	2006-09-21 10:47:49.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/setup-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -899,7 +899,7 @@ static void __init parse_cmdline_early (
 		else if (!memcmp(from, "acpi_sci=low", 12))
 			acpi_sci_flags.polarity = 3;
 
-#ifdef CONFIG_X86_IO_APIC
+#if defined(CONFIG_X86_IO_APIC) && !defined(CONFIG_XEN)
 		else if (!memcmp(from, "acpi_skip_timer_override", 24))
 			acpi_skip_timer_override = 1;
 
Index: head-2006-09-21/arch/i386/kernel/smp-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/smp-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/smp-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -115,6 +115,7 @@ DEFINE_PER_CPU(struct tlb_state, cpu_tlb
  * We use 'broadcast', CPU->CPU IPIs and self-IPIs too.
  */
 
+#ifndef CONFIG_XEN
 static inline int __prepare_ICR (unsigned int shortcut, int vector)
 {
 	unsigned int icr = shortcut | APIC_DEST_LOGICAL;
@@ -134,6 +135,7 @@ static inline int __prepare_ICR2 (unsign
 {
 	return SET_APIC_DEST_FIELD(mask);
 }
+#endif
 
 DECLARE_PER_CPU(int, ipi_to_irq[NR_IPIS]);
 
Index: head-2006-09-21/arch/i386/kernel/traps-xen.c
===================================================================
--- head-2006-09-21.orig/arch/i386/kernel/traps-xen.c	2006-09-21 10:40:03.000000000 +0200
+++ head-2006-09-21/arch/i386/kernel/traps-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -687,7 +687,7 @@ static void default_do_nmi(struct pt_reg
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 							== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2006-09-21/arch/x86_64/kernel/Makefile
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/Makefile	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/Makefile	2006-09-21 10:48:38.000000000 +0200
@@ -65,7 +65,8 @@ pci-dma-y			+= ../../i386/kernel/pci-dma
 microcode-$(subst m,y,$(CONFIG_MICROCODE))  := ../../i386/kernel/microcode-xen.o
 quirks-y			:= ../../i386/kernel/quirks-xen.o
 
-n-obj-xen := i8259.o reboot.o i8237.o smpboot.o trampoline.o
+n-obj-xen := genapic_cluster.o genapic_flat.o i8237.o i8259.o reboot.o \
+		smpboot.o trampoline.o
 
 include $(srctree)/scripts/Makefile.xen
 
Index: head-2006-09-21/arch/x86_64/kernel/apic-xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/apic-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/apic-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -44,17 +44,6 @@ int apic_verbosity;
 void ack_bad_irq(unsigned int irq)
 {
 	printk("unexpected IRQ trap at vector %02x\n", irq);
-	/*
-	 * Currently unexpected vectors happen only on SMP and APIC.
-	 * We _must_ ack these because every local APIC has only N
-	 * irq slots per priority level, and a 'hanging, unacked' IRQ
-	 * holds up an irq slot - in excessive cases (when multiple
-	 * unexpected vectors occur) that might lock up the APIC
-	 * completely.
-  	 * But don't ack when the APIC is disabled. -AK
-	 */
-	if (!disable_apic)
-		ack_APIC_irq();
 }
 
 int setup_profiling_timer(unsigned int multiplier)
@@ -62,125 +51,6 @@ int setup_profiling_timer(unsigned int m
 	return -EINVAL;
 }
 
-void smp_local_timer_interrupt(struct pt_regs *regs)
-{
-	profile_tick(CPU_PROFILING, regs);
-#ifndef CONFIG_XEN
-#ifdef CONFIG_SMP
-		update_process_times(user_mode(regs));
-#endif
-#endif
-	/*
-	 * We take the 'long' return path, and there every subsystem
-	 * grabs the appropriate locks (kernel lock/ irq lock).
-	 *
-	 * we might want to decouple profiling from the 'long path',
-	 * and do the profiling totally in assembly.
-	 *
-	 * Currently this isn't too much of an issue (performance wise),
-	 * we can take more than 100K local irqs per second on a 100 MHz P5.
-	 */
-}
-
-/*
- * Local APIC timer interrupt. This is the most natural way for doing
- * local interrupts, but local timer interrupts can be emulated by
- * broadcast interrupts too. [in case the hw doesn't support APIC timers]
- *
- * [ if a single-CPU system runs an SMP kernel then we call the local
- *   interrupt as well. Thus we cannot inline the local irq ... ]
- */
-void smp_apic_timer_interrupt(struct pt_regs *regs)
-{
-	/*
-	 * the NMI deadlock-detector uses this.
-	 */
-	add_pda(apic_timer_irqs, 1);
-
-	/*
-	 * NOTE! We'd better ACK the irq immediately,
-	 * because timer handling can be slow.
-	 */
-	ack_APIC_irq();
-	/*
-	 * update_process_times() expects us to have done irq_enter().
-	 * Besides, if we don't timer interrupts ignore the global
-	 * interrupt lock, which is the WrongThing (tm) to do.
-	 */
-	exit_idle();
-	irq_enter();
-	smp_local_timer_interrupt(regs);
-	irq_exit();
-}
-
-/*
- * This interrupt should _never_ happen with our APIC/SMP architecture
- */
-asmlinkage void smp_spurious_interrupt(void)
-{
-	unsigned int v;
-	exit_idle();
-	irq_enter();
-	/*
-	 * Check if this really is a spurious interrupt and ACK it
-	 * if it is a vectored one.  Just in case...
-	 * Spurious interrupts should not be ACKed.
-	 */
-	v = apic_read(APIC_ISR + ((SPURIOUS_APIC_VECTOR & ~0x1f) >> 1));
-	if (v & (1 << (SPURIOUS_APIC_VECTOR & 0x1f)))
-		ack_APIC_irq();
-
-#if 0
-	static unsigned long last_warning; 
-	static unsigned long skipped; 
-
-	/* see sw-dev-man vol 3, chapter 7.4.13.5 */
-	if (time_before(last_warning+30*HZ,jiffies)) { 
-		printk(KERN_INFO "spurious APIC interrupt on CPU#%d, %ld skipped.\n",
-		       smp_processor_id(), skipped);
-		last_warning = jiffies; 
-		skipped = 0;
-	} else { 
-		skipped++; 
-	} 
-#endif 
-	irq_exit();
-}
-
-/*
- * This interrupt should never happen with our APIC/SMP architecture
- */
-
-asmlinkage void smp_error_interrupt(void)
-{
-	unsigned int v, v1;
-
-	exit_idle();
-	irq_enter();
-	/* First tickle the hardware, only then report what went on. -- REW */
-	v = apic_read(APIC_ESR);
-	apic_write(APIC_ESR, 0);
-	v1 = apic_read(APIC_ESR);
-	ack_APIC_irq();
-	atomic_inc(&irq_err_count);
-
-	/* Here is what the APIC error bits mean:
-	   0: Send CS error
-	   1: Receive CS error
-	   2: Send accept error
-	   3: Receive accept error
-	   4: Reserved
-	   5: Send illegal vector
-	   6: Received illegal vector
-	   7: Illegal register address
-	*/
-	printk (KERN_DEBUG "APIC error on CPU%d: %02x(%02x)\n",
-	        smp_processor_id(), v , v1);
-	irq_exit();
-}
-
-int disable_apic;
-
 /*
  * This initializes the IO-APIC and APIC hardware if this is
  * a UP kernel.
Index: head-2006-09-21/arch/x86_64/kernel/genapic-xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/genapic-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/genapic-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -130,7 +130,7 @@ print:
 /* Same for both flat and clustered. */
 
 #ifdef CONFIG_XEN
-extern void xen_send_IPI_shortcut(unsigned int shortcut, int vector, unsigned int dest);
+extern void xen_send_IPI_shortcut(unsigned int shortcut, int vector);
 #endif
 
 void send_IPI_self(int vector)
@@ -138,6 +138,6 @@ void send_IPI_self(int vector)
 #ifndef CONFIG_XEN
 	__send_IPI_shortcut(APIC_DEST_SELF, vector, APIC_DEST_PHYSICAL);
 #else
-	xen_send_IPI_shortcut(APIC_DEST_SELF, vector, APIC_DEST_PHYSICAL);
+	xen_send_IPI_shortcut(APIC_DEST_SELF, vector);
 #endif
 }
Index: head-2006-09-21/arch/x86_64/kernel/genapic_xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/genapic_xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/genapic_xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -35,7 +35,7 @@ static inline void __send_IPI_one(unsign
 	notify_remote_via_irq(irq);
 }
 
-void xen_send_IPI_shortcut(unsigned int shortcut, int vector, unsigned int dest)
+void xen_send_IPI_shortcut(unsigned int shortcut, int vector)
 {
 	int cpu;
 
@@ -90,13 +90,13 @@ static void xen_send_IPI_allbutself(int 
 	 */
 	Dprintk("%s\n", __FUNCTION__);
 	if (num_online_cpus() > 1)
-		xen_send_IPI_shortcut(APIC_DEST_ALLBUT, vector, APIC_DEST_LOGICAL);
+		xen_send_IPI_shortcut(APIC_DEST_ALLBUT, vector);
 }
 
 static void xen_send_IPI_all(int vector)
 {
 	Dprintk("%s\n", __FUNCTION__);
-	xen_send_IPI_shortcut(APIC_DEST_ALLINC, vector, APIC_DEST_LOGICAL);
+	xen_send_IPI_shortcut(APIC_DEST_ALLINC, vector);
 }
 
 static void xen_send_IPI_mask(cpumask_t cpumask, int vector)
@@ -146,8 +146,7 @@ struct genapic apic_xen =  {
 #ifdef CONFIG_XEN_PRIVILEGED_GUEST
 	.int_delivery_mode = dest_LowestPrio,
 #endif
-	.int_dest_mode = (APIC_DEST_LOGICAL != 0),
-	.int_delivery_dest = APIC_DEST_LOGICAL | APIC_DM_LOWEST,
+	.int_dest_mode = 1,
 	.target_cpus = xen_target_cpus,
 #ifdef CONFIG_XEN_PRIVILEGED_GUEST
 	.apic_id_registered = xen_apic_id_registered,
Index: head-2006-09-21/arch/x86_64/kernel/head64-xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/head64-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/head64-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -149,7 +149,7 @@ void __init x86_64_start_kernel(char * r
 	if (s != NULL)
 		numa_setup(s+5);
 #endif
-#ifdef CONFIG_X86_IO_APIC
+#if defined(CONFIG_X86_IO_APIC) && !defined(CONFIG_XEN)
 	if (strstr(saved_command_line, "disableapic"))
 		disable_apic = 1;
 #endif
Index: head-2006-09-21/arch/x86_64/kernel/io_apic-xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/io_apic-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/io_apic-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -48,9 +48,9 @@ int sis_apic_bug; /* not actually suppor
 
 static int no_timer_check;
 
+#ifndef CONFIG_XEN
 int disable_timer_pin_1 __initdata;
 
-#ifndef CONFIG_XEN
 int timer_over_8254 __initdata = 0;
 
 /* Where if anywhere is the i8259 connect in external int mode */
Index: head-2006-09-21/arch/x86_64/kernel/mpparse-xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/mpparse-xen.c	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/mpparse-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -57,8 +57,9 @@ int mp_irq_entries;
 
 int nr_ioapics;
 int pic_mode;
+#ifndef CONFIG_XEN
 unsigned long mp_lapic_addr = 0;
-
+#endif
 
 
 /* Processor that is doing the boot up */
@@ -293,11 +294,13 @@ static int __init smp_read_mpc(struct mp
 	str[12]=0;
 	printk("Product ID: %s ",str);
 
+#ifndef CONFIG_XEN
 	printk("APIC at: 0x%X\n",mpc->mpc_lapic);
 
 	/* save the local APIC address, it might be non-default */
 	if (!acpi_lapic)
 	mp_lapic_addr = mpc->mpc_lapic;
+#endif
 
 	/*
 	 *	Now process the configuration blocks.
@@ -442,10 +445,12 @@ static inline void __init construct_defa
 	int linttypes[2] = { mp_ExtINT, mp_NMI };
 	int i;
 
+#ifndef CONFIG_XEN
 	/*
 	 * local APIC has default address
 	 */
 	mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
+#endif
 
 	/*
 	 * 2 CPUs, numbered 0 & 1.
@@ -677,10 +682,10 @@ void __init find_smp_config (void)
 
 #ifdef CONFIG_ACPI
 
+#ifndef CONFIG_XEN
 void __init mp_register_lapic_address (
 	u64			address)
 {
-#ifndef CONFIG_XEN
 	mp_lapic_addr = (unsigned long) address;
 
 	set_fixmap_nocache(FIX_APIC_BASE, mp_lapic_addr);
@@ -689,8 +694,8 @@ void __init mp_register_lapic_address (
 		boot_cpu_id = GET_APIC_ID(apic_read(APIC_ID));
 
 	Dprintk("Boot CPU = %d\n", boot_cpu_physical_apicid);
-#endif
 }
+#endif
 
 
 void __cpuinit mp_register_lapic (
Index: head-2006-09-21/arch/x86_64/kernel/nmi.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/nmi.c	2006-09-21 09:56:20.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/nmi.c	2006-09-21 10:48:38.000000000 +0200
@@ -28,6 +28,8 @@
 #include <asm/mce.h>
 #include <asm/intel_arch_perfmon.h>
 
+#ifndef CONFIG_XEN
+
 /*
  * lapic_nmi_owner tracks the ownership of the lapic NMI hardware:
  * - it may be reserved by some other driver, or not
@@ -583,6 +585,19 @@ void __kprobes nmi_watchdog_tick(struct 
 	}
 }
 
+#else /* CONFIG_XEN */
+
+static inline int reserve_lapic_nmi(void)
+{
+	return 0;
+}
+
+static inline void release_lapic_nmi(void)
+{
+}
+
+#endif /* CONFIG_XEN */
+
 static __kprobes int dummy_nmi_callback(struct pt_regs * regs, int cpu)
 {
 	return 0;
@@ -657,6 +672,7 @@ int proc_unknown_nmi_panic(struct ctl_ta
 
 #endif
 
+#ifndef CONFIG_XEN
 EXPORT_SYMBOL(nmi_active);
 EXPORT_SYMBOL(nmi_watchdog);
 EXPORT_SYMBOL(reserve_lapic_nmi);
@@ -664,3 +680,4 @@ EXPORT_SYMBOL(release_lapic_nmi);
 EXPORT_SYMBOL(disable_timer_nmi_watchdog);
 EXPORT_SYMBOL(enable_timer_nmi_watchdog);
 EXPORT_SYMBOL(touch_nmi_watchdog);
+#endif /* CONFIG_XEN */
Index: head-2006-09-21/arch/x86_64/kernel/traps-xen.c
===================================================================
--- head-2006-09-21.orig/arch/x86_64/kernel/traps-xen.c	2006-09-21 10:39:53.000000000 +0200
+++ head-2006-09-21/arch/x86_64/kernel/traps-xen.c	2006-09-21 10:48:38.000000000 +0200
@@ -586,8 +586,8 @@ void __kprobes die_nmi(char *str, struct
 	show_registers(regs);
 	if (kexec_should_crash(current))
 		crash_kexec(regs);
-	if (panic_on_timeout || panic_on_oops)
-		panic("nmi watchdog");
+	if (panic_on_oops)
+		panic("Non-maskable interrupt");
 	printk("console shuts up ...\n");
 	oops_end(flags);
 	nmi_exit();
@@ -785,7 +785,7 @@ asmlinkage __kprobes void default_do_nmi
 		if (notify_die(DIE_NMI_IPI, "nmi_ipi", regs, reason, 2, SIGINT)
 								== NOTIFY_STOP)
 			return;
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 		/*
 		 * Ok, so this is none of the documented NMI sources,
 		 * so it must be the NMI watchdog.
Index: head-2006-09-21/include/asm-i386/apic.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/apic.h	2006-09-21 09:58:37.000000000 +0200
+++ head-2006-09-21/include/asm-i386/apic.h	2006-09-21 10:48:38.000000000 +0200
@@ -42,7 +42,7 @@ static inline void lapic_enable(void)
 	} while (0)
 
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 
 /*
  * Basic functions accessing APICs.
@@ -119,20 +119,23 @@ extern void enable_NMI_through_LVT0 (voi
 
 extern int disable_timer_pin_1;
 
-#ifndef CONFIG_XEN
 void smp_send_timer_broadcast_ipi(struct pt_regs *regs);
 void switch_APIC_timer_to_ipi(void *cpumask);
 void switch_ipi_to_APIC_timer(void *cpumask);
 #define ARCH_APICTIMER_STOPS_ON_C3	1
-#endif
 
 extern int timer_over_8254;
 
 extern void dmi_check_apic(void);
 
-#else /* !CONFIG_X86_LOCAL_APIC */
+#else /* !CONFIG_X86_LOCAL_APIC || CONFIG_XEN */
+
 static inline void lapic_shutdown(void) { }
 
+#ifdef CONFIG_X86_LOCAL_APIC
+extern int APIC_init_uniprocessor (void);
+#endif
+
 #endif /* !CONFIG_X86_LOCAL_APIC */
 
 #endif /* __ASM_APIC_H */
Index: head-2006-09-21/include/asm-i386/apicdef.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/apicdef.h	2006-09-21 09:56:20.000000000 +0200
+++ head-2006-09-21/include/asm-i386/apicdef.h	2006-09-21 10:48:38.000000000 +0200
@@ -1,6 +1,8 @@
 #ifndef __ASM_APICDEF_H
 #define __ASM_APICDEF_H
 
+#ifndef CONFIG_XEN
+
 /*
  * Constants for various Intel APICs. (local APIC, IOAPIC, etc.)
  *
@@ -111,8 +113,20 @@
 
 #define APIC_BASE (fix_to_virt(FIX_APIC_BASE))
 
+#else /* CONFIG_XEN */
+
+enum {
+	APIC_DEST_ALLBUT = 0x1,
+	APIC_DEST_SELF,
+	APIC_DEST_ALLINC
+};
+
+#endif /* CONFIG_XEN */
+
 #define MAX_IO_APICS 64
 
+#ifndef CONFIG_XEN
+
 /*
  * the local APIC register structure, memory mapped. Not terribly well
  * tested, but we might eventually use this one in the future - the
@@ -372,4 +386,6 @@ struct local_apic {
 
 #undef u32
 
+#endif /* CONFIG_XEN */
+
 #endif
Index: head-2006-09-21/include/asm-i386/irq.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/irq.h	2006-09-21 09:56:20.000000000 +0200
+++ head-2006-09-21/include/asm-i386/irq.h	2006-09-21 10:48:38.000000000 +0200
@@ -20,7 +20,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 # define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2006-09-21/include/asm-i386/mach-xen/asm/fixmap.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/mach-xen/asm/fixmap.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-i386/mach-xen/asm/fixmap.h	2006-09-21 10:48:38.000000000 +0200
@@ -53,7 +53,7 @@ extern unsigned long __FIXADDR_TOP;
 enum fixed_addresses {
 	FIX_HOLE,
 	FIX_VDSO,
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 	FIX_APIC_BASE,	/* local (CPU) APIC) -- required for SMP or not */
 #endif
 #ifdef CONFIG_X86_IO_APIC
Index: head-2006-09-21/include/asm-i386/mach-xen/asm/hw_irq.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/mach-xen/asm/hw_irq.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-i386/mach-xen/asm/hw_irq.h	2006-09-21 10:48:38.000000000 +0200
@@ -19,8 +19,6 @@
 
 struct hw_interrupt_type;
 
-#define NMI_VECTOR		0x02
-
 /*
  * Various low-level irq details needed by irq.c, process.c,
  * time.c, io_apic.c and smp.c
Index: head-2006-09-21/include/asm-i386/mach-xen/asm/smp.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/mach-xen/asm/smp.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-i386/mach-xen/asm/smp.h	2006-09-21 10:48:38.000000000 +0200
@@ -67,7 +67,7 @@ static inline int num_booting_cpus(void)
 	return cpus_weight(cpu_possible_map);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 
 #ifdef APIC_DEFINITION
 extern int hard_smp_processor_id(void);
Index: head-2006-09-21/include/asm-i386/mach-xen/mach_apic.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ head-2006-09-21/include/asm-i386/mach-xen/mach_apic.h	2006-09-21 10:48:38.000000000 +0200
@@ -0,0 +1,44 @@
+#ifndef __ASM_MACH_APIC_H
+#define __ASM_MACH_APIC_H
+
+#include <mach_apicdef.h>
+#include <asm/smp.h>
+
+static inline cpumask_t target_cpus(void)
+{
+#ifdef CONFIG_SMP
+	return cpu_online_map;
+#else
+	return cpumask_of_cpu(0);
+#endif
+}
+#define TARGET_CPUS (target_cpus())
+
+#define INT_DELIVERY_MODE dest_LowestPrio
+#define INT_DEST_MODE 1     /* logical delivery broadcast to all procs */
+
+static inline void clustered_apic_check(void)
+{
+}
+
+static inline int multi_timer_check(int apic, int irq)
+{
+	return 0;
+}
+
+static inline int apicid_to_node(int logical_apicid)
+{
+	return 0;
+}
+
+static inline unsigned int cpu_mask_to_apicid(cpumask_t cpumask)
+{
+	return cpus_addr(cpumask)[0];
+}
+
+static inline u32 phys_pkg_id(u32 cpuid_apic, int index_msb)
+{
+	return cpuid_apic >> index_msb;
+}
+
+#endif /* __ASM_MACH_APIC_H */
Index: head-2006-09-21/include/asm-i386/nmi.h
===================================================================
--- head-2006-09-21.orig/include/asm-i386/nmi.h	2006-09-21 09:56:20.000000000 +0200
+++ head-2006-09-21/include/asm-i386/nmi.h	2006-09-21 10:48:38.000000000 +0200
@@ -25,6 +25,8 @@ void set_nmi_callback(nmi_callback_t cal
  */
 void unset_nmi_callback(void);
 
+#ifndef CONFIG_XEN
+
 extern void setup_apic_nmi_watchdog (void);
 extern int reserve_lapic_nmi(void);
 extern void release_lapic_nmi(void);
@@ -39,4 +41,6 @@ extern unsigned int nmi_watchdog;
 #define NMI_LOCAL_APIC	2
 #define NMI_INVALID	3
 
+#endif
+
 #endif /* ASM_NMI_H */
Index: head-2006-09-21/include/asm-x86_64/apic.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/apic.h	2006-09-21 09:58:48.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/apic.h	2006-09-21 10:48:38.000000000 +0200
@@ -29,7 +29,7 @@ extern int apic_runs_main_timer;
 			printk(s, ##a);    \
 	} while (0)
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 
 struct pt_regs;
 
@@ -98,13 +98,16 @@ extern void setup_APIC_extened_lvt(unsig
 extern int disable_timer_pin_1;
 
 
-#ifndef CONFIG_XEN
 void smp_send_timer_broadcast_ipi(void);
 void switch_APIC_timer_to_ipi(void *cpumask);
 void switch_ipi_to_APIC_timer(void *cpumask);
 
 #define ARCH_APICTIMER_STOPS_ON_C3	1
-#endif
+
+#elif defined(CONFIG_X86_LOCAL_APIC)
+
+extern int APIC_init_uniprocessor (void);
+extern void clustered_apic_check(void);
 
 #endif /* CONFIG_X86_LOCAL_APIC */
 
Index: head-2006-09-21/include/asm-x86_64/apicdef.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/apicdef.h	2006-09-21 09:56:20.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/apicdef.h	2006-09-21 10:48:38.000000000 +0200
@@ -1,6 +1,8 @@
 #ifndef __ASM_APICDEF_H
 #define __ASM_APICDEF_H
 
+#ifndef CONFIG_XEN
+
 /*
  * Constants for various Intel APICs. (local APIC, IOAPIC, etc.)
  *
@@ -114,7 +116,22 @@
 
 #define APIC_BASE (fix_to_virt(FIX_APIC_BASE))
 
+#else /* CONFIG_XEN */
+
+#define			APIC_ALL_CPUS		0xFFu
+
+enum {
+	APIC_DEST_ALLBUT = 0x1,
+	APIC_DEST_SELF,
+	APIC_DEST_ALLINC
+};
+
+#endif /* CONFIG_XEN */
+
 #define MAX_IO_APICS 128
+
+#ifndef CONFIG_XEN
+
 #define MAX_LOCAL_APIC 256
 
 /*
@@ -387,6 +404,8 @@ struct local_apic {
 
 #undef u32
 
+#endif /* CONFIG_XEN */
+
 #define BAD_APICID 0xFFu
 
 #endif
Index: head-2006-09-21/include/asm-x86_64/ipi.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/ipi.h	2006-09-21 09:56:20.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/ipi.h	2006-09-21 10:48:38.000000000 +0200
@@ -23,6 +23,8 @@
 #include <asm/apicdef.h>
 #include <asm/genapic.h>
 
+#ifndef CONFIG_XEN
+
 /*
  * the following functions deal with sending IPIs between CPUs.
  *
@@ -114,4 +116,6 @@ static inline void send_IPI_mask_sequenc
 	local_irq_restore(flags);
 }
 
+#endif /* CONFIG_XEN */
+
 #endif /* __ASM_IPI_H */
Index: head-2006-09-21/include/asm-x86_64/mach-xen/asm/fixmap.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/mach-xen/asm/fixmap.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/mach-xen/asm/fixmap.h	2006-09-21 10:48:38.000000000 +0200
@@ -39,7 +39,7 @@ enum fixed_addresses {
 	VSYSCALL_FIRST_PAGE = VSYSCALL_LAST_PAGE + ((VSYSCALL_END-VSYSCALL_START) >> PAGE_SHIFT) - 1,
 	VSYSCALL_HPET,
 	FIX_HPET_BASE,
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 	FIX_APIC_BASE,	/* local (CPU) APIC) -- required for SMP or not */
 #endif
 #ifdef CONFIG_X86_IO_APIC
Index: head-2006-09-21/include/asm-x86_64/mach-xen/asm/hw_irq.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/mach-xen/asm/hw_irq.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/mach-xen/asm/hw_irq.h	2006-09-21 10:48:38.000000000 +0200
@@ -23,7 +23,6 @@
 struct hw_interrupt_type;
 #endif
 
-#define NMI_VECTOR		0x02
 /*
  * IDT vectors usable for external interrupt sources start
  * at 0x20:
Index: head-2006-09-21/include/asm-x86_64/mach-xen/asm/irq.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/mach-xen/asm/irq.h	2006-09-21 09:57:46.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/mach-xen/asm/irq.h	2006-09-21 10:48:38.000000000 +0200
@@ -21,7 +21,7 @@ static __inline__ int irq_canonicalize(i
 	return ((irq == 2) ? 9 : irq);
 }
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 #define ARCH_HAS_NMI_WATCHDOG		/* See include/linux/nmi.h */
 #endif
 
Index: head-2006-09-21/include/asm-x86_64/mach-xen/asm/nmi.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/mach-xen/asm/nmi.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/mach-xen/asm/nmi.h	2006-09-21 10:48:38.000000000 +0200
@@ -71,6 +71,8 @@ static inline unsigned char get_nmi_reas
 extern int panic_on_timeout;
 extern int unknown_nmi_panic;
 
+#ifndef CONFIG_XEN
+
 extern int check_nmi_watchdog(void);
  
 extern void setup_apic_nmi_watchdog (void);
@@ -90,4 +92,6 @@ extern unsigned int nmi_watchdog;
 #define NMI_LOCAL_APIC	2
 #define NMI_INVALID	3
 
+#endif
+
 #endif /* ASM_NMI_H */
Index: head-2006-09-21/include/asm-x86_64/mach-xen/asm/smp.h
===================================================================
--- head-2006-09-21.orig/include/asm-x86_64/mach-xen/asm/smp.h	2006-09-21 10:33:12.000000000 +0200
+++ head-2006-09-21/include/asm-x86_64/mach-xen/asm/smp.h	2006-09-21 10:48:38.000000000 +0200
@@ -69,7 +69,7 @@ static inline int num_booting_cpus(void)
 
 #define raw_smp_processor_id() read_pda(cpunumber)
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 static inline int hard_smp_processor_id(void)
 {
 	/* we don't want to mark this access volatile - bad code generation */
@@ -131,7 +131,7 @@ static inline int cpu_present_to_apicid(
 #endif
 
 #ifndef __ASSEMBLY__
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 static __inline int logical_smp_processor_id(void)
 {
 	/* we don't want to mark this access volatile - bad code generation */
