From: jbeulich@novell.com
Subject: Disallow all accesses to the local APIC page
Patch-mainline: obsolete
References: 191115

--- head-2009-03-18.orig/arch/x86/include/asm/apic.h	2009-02-06 15:44:06.000000000 +0100
+++ head-2009-03-18/arch/x86/include/asm/apic.h	2009-03-18 16:09:08.000000000 +0100
@@ -5,7 +5,9 @@
 #include <linux/delay.h>
 
 #include <asm/alternative.h>
+#ifndef CONFIG_XEN
 #include <asm/fixmap.h>
+#endif
 #include <asm/apicdef.h>
 #include <asm/processor.h>
 #include <asm/system.h>
@@ -40,6 +42,7 @@ extern void generic_apic_probe(void);
 #ifdef CONFIG_X86_LOCAL_APIC
 
 extern unsigned int apic_verbosity;
+#ifndef CONFIG_XEN
 extern int local_apic_timer_c2_ok;
 
 extern int disable_apic;
@@ -154,6 +157,7 @@ static inline void ack_APIC_irq(void)
 	/* Docs say use 0 for future compatibility */
 	apic_write(APIC_EOI, 0);
 }
+#endif
 
 extern int lapic_get_maxlvt(void);
 extern void clear_local_APIC(void);
--- head-2009-03-18.orig/arch/x86/include/asm/apicdef.h	2009-03-18 11:04:12.000000000 +0100
+++ head-2009-03-18/arch/x86/include/asm/apicdef.h	2009-03-18 16:09:08.000000000 +0100
@@ -1,6 +1,8 @@
 #ifndef _ASM_X86_APICDEF_H
 #define _ASM_X86_APICDEF_H
 
+#ifndef CONFIG_XEN
+
 /*
  * Constants for various Intel APICs. (local APIC, IOAPIC, etc.)
  *
@@ -132,6 +134,16 @@
 #define APIC_BASE_MSR	0x800
 #define X2APIC_ENABLE	(1UL << 10)
 
+#else /* CONFIG_XEN */
+
+enum {
+	APIC_DEST_ALLBUT = 0x1,
+	APIC_DEST_SELF,
+	APIC_DEST_ALLINC
+};
+
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_X86_32
 # define MAX_IO_APICS 64
 #else
@@ -139,6 +151,8 @@
 # define MAX_LOCAL_APIC 32768
 #endif
 
+#ifndef CONFIG_XEN
+
 /*
  * All x86-64 systems are xAPIC compatible.
  * In the following, "apicid" is a physical APIC ID.
@@ -409,6 +423,8 @@ struct local_apic {
 
 #undef u32
 
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_X86_32
  #define BAD_APICID 0xFFu
 #else
--- head-2009-03-18.orig/arch/x86/include/asm/ipi.h	2009-03-18 11:04:12.000000000 +0100
+++ head-2009-03-18/arch/x86/include/asm/ipi.h	2009-03-18 16:09:08.000000000 +0100
@@ -1,6 +1,8 @@
 #ifndef _ASM_X86_IPI_H
 #define _ASM_X86_IPI_H
 
+#ifndef CONFIG_XEN
+
 /*
  * Copyright 2004 James Cleverdon, IBM.
  * Subject to the GNU Public License, v.2
@@ -154,4 +156,6 @@ static inline void send_IPI_mask_allbuts
 	local_irq_restore(flags);
 }
 
+#endif /* CONFIG_XEN */
+
 #endif /* _ASM_X86_IPI_H */
--- head-2009-03-18.orig/arch/x86/include/mach-xen/asm/fixmap_32.h	2009-03-18 16:08:38.000000000 +0100
+++ head-2009-03-18/arch/x86/include/mach-xen/asm/fixmap_32.h	2009-03-18 16:09:08.000000000 +0100
@@ -53,10 +53,10 @@ enum fixed_addresses {
 	FIX_VDSO,
 	FIX_DBGP_BASE,
 	FIX_EARLYCON_MEM_BASE,
+#ifndef CONFIG_XEN
 #ifdef CONFIG_X86_LOCAL_APIC
 	FIX_APIC_BASE,	/* local (CPU) APIC) -- required for SMP or not */
 #endif
-#ifndef CONFIG_XEN
 #ifdef CONFIG_X86_IO_APIC
 	FIX_IO_APIC_BASE_0,
 	FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + MAX_IO_APICS-1,
--- head-2009-03-18.orig/arch/x86/include/mach-xen/asm/fixmap_64.h	2009-03-18 16:08:47.000000000 +0100
+++ head-2009-03-18/arch/x86/include/mach-xen/asm/fixmap_64.h	2009-03-18 16:09:08.000000000 +0100
@@ -13,7 +13,6 @@
 
 #include <linux/kernel.h>
 #include <asm/acpi.h>
-#include <asm/apicdef.h>
 #include <asm/page.h>
 #include <asm/vsyscall.h>
 #include <asm/acpi.h>
@@ -40,10 +39,8 @@ enum fixed_addresses {
 	VSYSCALL_HPET,
 	FIX_DBGP_BASE,
 	FIX_EARLYCON_MEM_BASE,
-#ifdef CONFIG_X86_LOCAL_APIC
-	FIX_APIC_BASE,	/* local (CPU) APIC) -- required for SMP or not */
-#endif
 #ifndef CONFIG_XEN
+	FIX_APIC_BASE,	/* local (CPU) APIC) -- required for SMP or not */
 	FIX_IO_APIC_BASE_0,
 	FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + MAX_IO_APICS - 1,
 #endif
--- head-2009-03-18.orig/arch/x86/include/mach-xen/asm/smp.h	2009-03-18 16:08:41.000000000 +0100
+++ head-2009-03-18/arch/x86/include/mach-xen/asm/smp.h	2009-03-18 16:09:08.000000000 +0100
@@ -16,7 +16,7 @@
 # endif
 #endif
 #include <asm/pda.h>
-#include <asm/thread_info.h>
+#include <linux/thread_info.h>
 
 #ifdef CONFIG_X86_64
 
@@ -230,7 +230,7 @@ extern unsigned disabled_cpus __cpuinitd
 #define stack_smp_processor_id() 	0
 #endif
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 
 #ifndef CONFIG_X86_64
 static inline int logical_smp_processor_id(void)
@@ -270,6 +270,8 @@ static inline int hard_smp_processor_id(
 
 #endif /* CONFIG_X86_LOCAL_APIC */
 
+void xen_send_IPI_shortcut(unsigned int shortcut, int vector);
+
 #ifdef CONFIG_X86_HAS_BOOT_CPU_ID
 extern unsigned char boot_cpu_id;
 #else
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ head-2009-03-18/arch/x86/include/mach-xen/mach_apic.h	2009-03-18 16:09:08.000000000 +0100
@@ -0,0 +1,43 @@
+#ifndef _ASM_X86_MACH_XEN_MACH_APIC_H
+#define _ASM_X86_MACH_XEN_MACH_APIC_H
+
+#include <linux/cpumask.h>
+
+#ifdef CONFIG_X86_64
+
+#include <asm/genapic.h>
+#define INT_DELIVERY_MODE (genapic->int_delivery_mode)
+#define INT_DEST_MODE (genapic->int_dest_mode)
+#define TARGET_CPUS	  (genapic->target_cpus())
+#define phys_pkg_id	(genapic->phys_pkg_id)
+#define send_IPI_self (genapic->send_IPI_self)
+extern void setup_apic_routing(void);
+
+#else
+
+#ifdef CONFIG_SMP
+#define TARGET_CPUS cpu_online_mask
+#else
+#define TARGET_CPUS cpumask_of(0)
+#endif
+
+#define INT_DELIVERY_MODE dest_LowestPrio
+#define INT_DEST_MODE 1
+
+static inline u32 phys_pkg_id(u32 cpuid_apic, int index_msb)
+{
+	return cpuid_apic;
+}
+
+static inline void setup_apic_routing(void)
+{
+}
+
+static inline int apicid_to_node(int logical_apicid)
+{
+	return 0;
+}
+
+#endif /* CONFIG_X86_64 */
+
+#endif /* _ASM_X86_MACH_XEN_MACH_APIC_H */
--- head-2009-03-18.orig/arch/x86/kernel/Makefile	2009-03-18 16:09:07.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/Makefile	2009-03-18 16:09:08.000000000 +0100
@@ -133,6 +133,7 @@ ifeq ($(CONFIG_X86_64),y)
 	time_64-$(CONFIG_XEN)		+= time_32.o
 endif
 
-disabled-obj-$(CONFIG_XEN) := %_uv.o crash.o early-quirks.o genx2apic_%.o \
-	hpet.o i8253.o i8259.o irqinit_$(BITS).o pci-swiotlb_64.o reboot.o \
-	smpboot.o tlb_$(BITS).o tsc.o tsc_sync.o uv_%.o vsmp_64.o
+disabled-obj-$(CONFIG_XEN) := %_uv.o crash.o early-quirks.o genapic_flat_64.o \
+	genx2apic_%.o hpet.o i8253.o i8259.o irqinit_$(BITS).o \
+	pci-swiotlb_64.o reboot.o smpboot.o tlb_$(BITS).o tsc.o tsc_sync.o \
+	uv_%.o vsmp_64.o
--- head-2009-03-18.orig/arch/x86/kernel/acpi/boot.c	2009-03-18 16:08:24.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/acpi/boot.c	2009-03-18 16:09:08.000000000 +0100
@@ -88,13 +88,13 @@ int acpi_sci_override_gsi __initdata;
 #ifndef CONFIG_XEN
 int acpi_skip_timer_override __initdata;
 int acpi_use_timer_override __initdata;
-#else
-#define acpi_skip_timer_override 0
-#endif
 
 #ifdef CONFIG_X86_LOCAL_APIC
 static u64 acpi_lapic_addr __initdata = APIC_DEFAULT_PHYS_BASE;
 #endif
+#else
+#define acpi_skip_timer_override 0
+#endif
 
 #ifndef __HAVE_ARCH_CMPXCHG
 #warning ACPI uses CMPXCHG, i486 and later hardware
@@ -241,12 +241,14 @@ static int __init acpi_parse_madt(struct
 		return -ENODEV;
 	}
 
+#ifndef CONFIG_XEN
 	if (madt->address) {
 		acpi_lapic_addr = (u64) madt->address;
 
 		printk(KERN_DEBUG PREFIX "Local APIC address 0x%08x\n",
 		       madt->address);
 	}
+#endif
 
 	acpi_madt_oem_check(madt->header.oem_id, madt->header.oem_table_id);
 
@@ -319,6 +321,7 @@ static int __init
 acpi_parse_lapic_addr_ovr(struct acpi_subtable_header * header,
 			  const unsigned long end)
 {
+#ifndef CONFIG_XEN
 	struct acpi_madt_local_apic_override *lapic_addr_ovr = NULL;
 
 	lapic_addr_ovr = (struct acpi_madt_local_apic_override *)header;
@@ -327,6 +330,7 @@ acpi_parse_lapic_addr_ovr(struct acpi_su
 		return -EINVAL;
 
 	acpi_lapic_addr = lapic_addr_ovr->address;
+#endif
 
 	return 0;
 }
@@ -919,10 +923,12 @@ static int mp_find_ioapic(int gsi)
 static u8 __init uniq_ioapic_id(u8 id)
 {
 #ifdef CONFIG_X86_32
+#ifndef CONFIG_XEN
 	if ((boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) &&
 	    !APIC_XAPIC(apic_version[boot_cpu_physical_apicid]))
 		return io_apic_get_unique_id(nr_ioapics, id);
 	else
+#endif
 		return id;
 #else
 	int i;
@@ -1177,7 +1183,7 @@ int mp_register_gsi(u32 gsi, int trigger
 
 	ioapic_pin = gsi - mp_ioapic_routing[ioapic].gsi_base;
 
-#ifdef CONFIG_X86_32
+#if defined(CONFIG_X86_32) && !defined(CONFIG_XEN)
 	if (ioapic_renumber_irq)
 		gsi = ioapic_renumber_irq(ioapic, gsi);
 #endif
--- head-2009-03-18.orig/arch/x86/kernel/cpu/common-xen.c	2009-03-18 16:08:41.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/cpu/common-xen.c	2009-03-18 16:09:08.000000000 +0100
@@ -41,9 +41,6 @@
 #include <asm/hypervisor.h>
 
 #ifdef CONFIG_XEN
-#if defined(CONFIG_X86_32) && !defined(CONFIG_X86_LOCAL_APIC)
-#define phys_pkg_id(a,b) a
-#endif
 #include <xen/interface/callback.h>
 #endif
 
--- head-2009-03-18.orig/arch/x86/kernel/genapic_64-xen.c	2009-03-18 16:08:41.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/genapic_64-xen.c	2009-03-18 16:09:08.000000000 +0100
@@ -18,7 +18,6 @@
 #include <linux/hardirq.h>
 
 #include <asm/smp.h>
-#include <asm/ipi.h>
 #include <asm/genapic.h>
 #include <asm/setup.h>
 
@@ -71,16 +70,12 @@ void __init setup_apic_routing(void)
 
 /* Same for both flat and physical. */
 
-#ifdef CONFIG_XEN
-extern void xen_send_IPI_shortcut(unsigned int shortcut, int vector, unsigned int dest);
-#endif
-
 void apic_send_IPI_self(int vector)
 {
 #ifndef CONFIG_XEN
 	__send_IPI_shortcut(APIC_DEST_SELF, vector, APIC_DEST_PHYSICAL);
 #else
-	xen_send_IPI_shortcut(APIC_DEST_SELF, vector, APIC_DEST_PHYSICAL);
+	xen_send_IPI_shortcut(APIC_DEST_SELF, vector);
 #endif
 }
 
--- head-2009-03-18.orig/arch/x86/kernel/genapic_xen_64.c	2009-03-18 16:09:02.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/genapic_xen_64.c	2009-03-18 16:09:08.000000000 +0100
@@ -19,7 +19,6 @@
 #include <linux/hardirq.h>
 #ifdef CONFIG_XEN_PRIVILEGED_GUEST
 #include <asm/smp.h>
-#include <asm/ipi.h>
 #else
 #include <asm/apic.h>
 #endif
@@ -31,7 +30,7 @@ static inline void __send_IPI_one(unsign
 	notify_remote_via_ipi(vector, cpu);
 }
 
-void xen_send_IPI_shortcut(unsigned int shortcut, int vector, unsigned int dest)
+void xen_send_IPI_shortcut(unsigned int shortcut, int vector)
 {
 	int cpu;
 
@@ -62,19 +61,6 @@ static const struct cpumask *xen_target_
 	return cpu_online_mask;
 }
 
-static void xen_vector_allocation_domain(int cpu, struct cpumask *retmask)
-{
-	cpumask_copy(retmask, cpumask_of(cpu));
-}
-
-/*
- * Set up the logical destination ID.
- * Do nothing, not called now.
- */
-static void xen_init_apic_ldr(void)
-{
-}
-
 static void xen_send_IPI_allbutself(int vector)
 {
 	/*
@@ -83,12 +69,12 @@ static void xen_send_IPI_allbutself(int 
 	 * thus we have to avoid sending IPIs in this case.
 	 */
 	if (num_online_cpus() > 1)
-		xen_send_IPI_shortcut(APIC_DEST_ALLBUT, vector, APIC_DEST_LOGICAL);
+		xen_send_IPI_shortcut(APIC_DEST_ALLBUT, vector);
 }
 
 static void xen_send_IPI_all(int vector)
 {
-	xen_send_IPI_shortcut(APIC_DEST_ALLINC, vector, APIC_DEST_LOGICAL);
+	xen_send_IPI_shortcut(APIC_DEST_ALLINC, vector);
 }
 
 static inline void _xen_send_IPI_mask(const struct cpumask *cpumask,
@@ -116,28 +102,6 @@ static void xen_send_IPI_mask_allbutself
 	_xen_send_IPI_mask(cpumask, vector, smp_processor_id());
 }
 
-#ifdef CONFIG_XEN_PRIVILEGED_GUEST
-static int xen_apic_id_registered(void)
-{
-	/* better be set */
-	return physid_isset(smp_processor_id(), phys_cpu_present_map);
-}
-#endif
-
-static unsigned int xen_cpu_mask_to_apicid(const struct cpumask *cpumask)
-{
-	return cpumask_bits(cpumask)[0] & APIC_ALL_CPUS;
-}
-
-static unsigned int xen_cpu_mask_to_apicid_and(const struct cpumask *cpumask,
-					       const struct cpumask *andmask)
-{
-	unsigned long mask1 = cpumask_bits(cpumask)[0] & APIC_ALL_CPUS;
-	unsigned long mask2 = cpumask_bits(andmask)[0] & APIC_ALL_CPUS;
-
-	return mask1 & mask2;
-}
-
 static unsigned int phys_pkg_id(int index_msb)
 {
 	u32 ebx;
@@ -151,19 +115,12 @@ struct genapic apic_xen =  {
 #ifdef CONFIG_XEN_PRIVILEGED_GUEST
 	.int_delivery_mode = dest_LowestPrio,
 #endif
-	.int_dest_mode = (APIC_DEST_LOGICAL != 0),
+	.int_dest_mode = 1,
 	.target_cpus = xen_target_cpus,
-	.vector_allocation_domain = xen_vector_allocation_domain,
-#ifdef CONFIG_XEN_PRIVILEGED_GUEST
-	.apic_id_registered = xen_apic_id_registered,
-#endif
-	.init_apic_ldr = xen_init_apic_ldr,
 	.send_IPI_all = xen_send_IPI_all,
 	.send_IPI_allbutself = xen_send_IPI_allbutself,
 	.send_IPI_mask = xen_send_IPI_mask,
 	.send_IPI_mask_allbutself = xen_send_IPI_mask_allbutself,
 	.send_IPI_self = apic_send_IPI_self,
-	.cpu_mask_to_apicid = xen_cpu_mask_to_apicid,
-	.cpu_mask_to_apicid_and = xen_cpu_mask_to_apicid_and,
 	.phys_pkg_id = phys_pkg_id,
 };
--- head-2009-03-18.orig/arch/x86/kernel/io_apic-xen.c	2009-03-18 16:08:44.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/io_apic-xen.c	2009-03-18 16:09:08.000000000 +0100
@@ -63,7 +63,6 @@
 
 #include <mach_ipi.h>
 #include <mach_apic.h>
-#include <mach_apicdef.h>
 
 #ifdef CONFIG_XEN
 #include <xen/interface/xen.h>
@@ -1260,7 +1259,9 @@ static inline int irq_trigger(int idx)
 	return MPBIOS_trigger(idx);
 }
 
+#ifndef CONFIG_XEN
 int (*ioapic_renumber_irq)(int ioapic, int irq);
+#endif
 static int pin_2_irq(int idx, int apic, int pin)
 {
 	int irq, i;
@@ -1282,11 +1283,13 @@ static int pin_2_irq(int idx, int apic, 
 		while (i < apic)
 			irq += nr_ioapic_registers[i++];
 		irq += pin;
+#ifndef CONFIG_XEN
 		/*
                  * For MPS mode, so far only needed by ES7000 platform
                  */
 		if (ioapic_renumber_irq)
 			irq = ioapic_renumber_irq(apic, irq);
+#endif
 	}
 
 #ifdef CONFIG_X86_32
@@ -1623,7 +1626,7 @@ static void setup_IO_APIC_irq(int apic, 
 #ifndef CONFIG_XEN
 	dest = cpu_mask_to_apicid_and(cfg->domain, TARGET_CPUS);
 #else
-	dest = cpu_mask_to_apicid(TARGET_CPUS);
+	dest = 0; /* meaningless */
 #endif
 
 	apic_printk(APIC_VERBOSE,KERN_DEBUG
--- head-2009-03-18.orig/arch/x86/kernel/irq-xen.c	2009-03-18 16:08:41.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/irq-xen.c	2009-03-18 16:09:08.000000000 +0100
@@ -11,7 +11,9 @@
 #include <asm/io_apic.h>
 #include <asm/irq.h>
 
+#ifndef CONFIG_XEN
 atomic_t irq_err_count;
+#endif
 
 /*
  * 'what should we do if we get a hw irq event on an illegal vector'.
@@ -52,7 +54,7 @@ static int show_other_interrupts(struct 
 	for_each_online_cpu(j)
 		seq_printf(p, "%10u ", irq_stats(j)->__nmi_count);
 	seq_printf(p, "  Non-maskable interrupts\n");
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 	seq_printf(p, "%*s: ", prec, "LOC");
 	for_each_online_cpu(j)
 		seq_printf(p, "%10u ", irq_stats(j)->apic_timer_irqs);
@@ -86,6 +88,7 @@ static int show_other_interrupts(struct 
 	seq_printf(p, "  Threshold APIC interrupts\n");
 # endif
 #endif
+#ifndef CONFIG_XEN
 #ifdef CONFIG_X86_LOCAL_APIC
 	seq_printf(p, "%*s: ", prec, "SPU");
 	for_each_online_cpu(j)
@@ -96,6 +99,7 @@ static int show_other_interrupts(struct 
 #if defined(CONFIG_X86_IO_APIC)
 	seq_printf(p, "%*s: %10u\n", prec, "MIS", atomic_read(&irq_mis_count));
 #endif
+#endif
 	return 0;
 }
 
@@ -191,10 +195,14 @@ u64 arch_irq_stat_cpu(unsigned int cpu)
 
 u64 arch_irq_stat(void)
 {
+#ifndef CONFIG_XEN
 	u64 sum = atomic_read(&irq_err_count);
 
 #ifdef CONFIG_X86_IO_APIC
 	sum += atomic_read(&irq_mis_count);
 #endif
 	return sum;
+#else
+	return 0;
+#endif
 }
--- head-2009-03-18.orig/arch/x86/kernel/mpparse-xen.c	2009-03-18 16:08:41.000000000 +0100
+++ head-2009-03-18/arch/x86/kernel/mpparse-xen.c	2009-03-18 16:09:08.000000000 +0100
@@ -31,7 +31,6 @@
 
 #include <mach_apic.h>
 #ifdef CONFIG_X86_32
-#include <mach_apicdef.h>
 #include <mach_mpparse.h>
 #endif
 
@@ -284,7 +283,9 @@ static int __init smp_check_mpc(struct m
 
 	printk(KERN_INFO "MPTABLE: Product ID: %s\n", str);
 
+#ifndef CONFIG_XEN
 	printk(KERN_INFO "MPTABLE: APIC at: 0x%X\n", mpc->lapic);
+#endif
 
 	return 1;
 }
@@ -312,9 +313,11 @@ static int __init smp_read_mpc(struct mp
 	} else
 		mps_oem_check(mpc, oem, str);
 #endif
+#ifndef CONFIG_XEN
 	/* save the local APIC address, it might be non-default */
 	if (!acpi_lapic)
 		mp_lapic_addr = mpc->lapic;
+#endif
 
 	if (early)
 		return 1;
@@ -543,10 +546,12 @@ static inline void __init construct_defa
 	int linttypes[2] = { mp_ExtINT, mp_NMI };
 	int i;
 
+#ifndef CONFIG_XEN
 	/*
 	 * local APIC has default address
 	 */
 	mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
+#endif
 
 	/*
 	 * 2 CPUs, numbered 0 & 1.
@@ -622,10 +627,12 @@ static void __init __get_smp_config(unsi
 	 */
 	if (mpf->mpf_feature1 != 0) {
 		if (early) {
+#ifndef CONFIG_XEN
 			/*
 			 * local APIC has default address
 			 */
 			mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
+#endif
 			return;
 		}
 
--- head-2009-03-18.orig/drivers/xen/core/smpboot.c	2009-03-18 16:09:02.000000000 +0100
+++ head-2009-03-18/drivers/xen/core/smpboot.c	2009-03-18 16:09:08.000000000 +0100
@@ -346,7 +346,7 @@ void __init smp_prepare_cpus(unsigned in
 	 * Here we can be sure that there is an IO-APIC in the system. Let's
 	 * go and set it up:
 	 */
-	if (!skip_ioapic_setup && nr_ioapics)
+	if (cpu_has_apic && !skip_ioapic_setup && nr_ioapics)
 		setup_IO_APIC();
 #endif
 }
