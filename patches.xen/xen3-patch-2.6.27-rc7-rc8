From: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Linux: Update to 2.6.27-rc8
Patch-mainline: 2.6.27

 This patch contains the differences between 2.6.27-rc7 and -rc8.

Acked-by: Greg Kroah-Hartman <gregkh@suse.de>

Automatically created from "patches.kernel.org/patch-2.6.27-rc7-rc8" by xen-port-patches.py

Index: head-2008-10-01/arch/x86/kernel/process-xen.c
===================================================================
--- head-2008-10-01.orig/arch/x86/kernel/process-xen.c	2008-10-01 16:18:08.000000000 +0200
+++ head-2008-10-01/arch/x86/kernel/process-xen.c	2008-10-01 16:18:30.000000000 +0200
@@ -242,6 +242,14 @@ static int __cpuinit check_c1e_idle(cons
 	return 1;
 }
 
+static cpumask_t c1e_mask = CPU_MASK_NONE;
+static int c1e_detected;
+
+void c1e_remove_cpu(int cpu)
+{
+	cpu_clear(cpu, c1e_mask);
+}
+
 /*
  * C1E aware idle routine. We check for C1E active in the interrupt
  * pending message MSR. If we detect C1E, then we handle it the same
@@ -249,9 +257,6 @@ static int __cpuinit check_c1e_idle(cons
  */
 static void c1e_idle(void)
 {
-	static cpumask_t c1e_mask = CPU_MASK_NONE;
-	static int c1e_detected;
-
 	if (need_resched())
 		return;
 
@@ -261,8 +266,10 @@ static void c1e_idle(void)
 		rdmsr(MSR_K8_INT_PENDING_MSG, lo, hi);
 		if (lo & K8_INTP_C1E_ACTIVE_MASK) {
 			c1e_detected = 1;
-			mark_tsc_unstable("TSC halt in C1E");
-			printk(KERN_INFO "System has C1E enabled\n");
+			if (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC))
+				mark_tsc_unstable("TSC halt in AMD C1E");
+			printk(KERN_INFO "System has AMD C1E enabled\n");
+			set_cpu_cap(&boot_cpu_data, X86_FEATURE_AMDC1E);
 		}
 	}
 
Index: head-2008-10-01/arch/x86/kernel/process_32-xen.c
===================================================================
--- head-2008-10-01.orig/arch/x86/kernel/process_32-xen.c	2008-10-01 16:18:08.000000000 +0200
+++ head-2008-10-01/arch/x86/kernel/process_32-xen.c	2008-10-01 16:18:30.000000000 +0200
@@ -59,6 +59,7 @@
 #include <asm/tlbflush.h>
 #include <asm/cpu.h>
 #include <asm/kdebug.h>
+#include <asm/idle.h>
 
 asmlinkage void ret_from_fork(void) __asm__("ret_from_fork");
 asmlinkage void cstar_ret_from_fork(void) __asm__("cstar_ret_from_fork");
@@ -94,6 +95,7 @@ static void cpu_exit_clear(void)
 	cpu_clear(cpu, cpu_callin_map);
 
 	numa_remove_cpu(cpu);
+	c1e_remove_cpu(cpu);
 }
 #endif
 
Index: head-2008-10-01/arch/x86/kernel/process_64-xen.c
===================================================================
--- head-2008-10-01.orig/arch/x86/kernel/process_64-xen.c	2008-10-01 16:18:08.000000000 +0200
+++ head-2008-10-01/arch/x86/kernel/process_64-xen.c	2008-10-01 16:20:19.000000000 +0200
@@ -98,6 +98,9 @@ void exit_idle(void)
 static inline void play_dead(void)
 {
 	idle_task_exit();
+#ifndef CONFIG_XEN
+	c1e_remove_cpu(raw_smp_processor_id());
+#endif
 	local_irq_disable();
 	cpu_clear(smp_processor_id(), cpu_initialized);
 	preempt_enable_no_resched();
