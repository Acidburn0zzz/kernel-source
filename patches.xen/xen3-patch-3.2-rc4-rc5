Automatically created from "patches.korg/patch-3.2-rc4-rc5" by xen-port-patches.py

From: Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Subject: Linux: 3.2-rc5
Patch-mainline: 3.2-rc5

 This patch contains the differences between 3.2-rc4 and 3.2-rc5.

Acked-by: jbeulich@suse.com

--- head-2011-12-21.orig/arch/x86/include/mach-xen/asm/system.h	2011-07-01 15:27:28.000000000 +0200
+++ head-2011-12-21/arch/x86/include/mach-xen/asm/system.h	2011-12-21 11:56:23.000000000 +0100
@@ -388,6 +388,7 @@ extern unsigned long arch_align_stack(un
 extern void free_init_pages(char *what, unsigned long begin, unsigned long end);
 
 void xen_idle(void);
+bool set_pm_idle_to_default(void);
 
 void stop_this_cpu(void *dummy);
 
--- head-2011-12-21.orig/arch/x86/kernel/e820-xen.c	2011-11-17 15:56:06.000000000 +0100
+++ head-2011-12-21/arch/x86/kernel/e820-xen.c	2011-12-21 11:56:23.000000000 +0100
@@ -158,6 +158,7 @@ static void __init e820_print_type(u32 t
 		printk(KERN_CONT "(usable)");
 		break;
 	case E820_RESERVED:
+	case E820_RESERVED_EFI:
 		printk(KERN_CONT "(reserved)");
 		break;
 	case E820_ACPI:
@@ -881,7 +882,7 @@ u64 __init early_reserve_e820(u64 startt
 /*
  * Find the highest page frame number we have available
  */
-static unsigned long __init e820_end_pfn(unsigned long limit_pfn, unsigned type)
+unsigned long __init e820_end_pfn(unsigned long limit_pfn, unsigned type)
 {
 	int i;
 	unsigned long last_pfn = 0;
--- head-2011-12-21.orig/arch/x86/kernel/mpparse-xen.c	2011-07-01 15:19:35.000000000 +0200
+++ head-2011-12-21/arch/x86/kernel/mpparse-xen.c	2011-12-21 11:56:23.000000000 +0100
@@ -107,8 +107,8 @@ static void __init MP_bus_info(struct mp
 	}
 #endif
 
+	set_bit(m->busid, mp_bus_not_pci);
 	if (strncmp(str, BUSTYPE_ISA, sizeof(BUSTYPE_ISA) - 1) == 0) {
-		set_bit(m->busid, mp_bus_not_pci);
 #if defined(CONFIG_EISA) || defined(CONFIG_MCA)
 		mp_bus_id_to_type[m->busid] = MP_BUS_ISA;
 #endif
--- head-2011-12-21.orig/arch/x86/kernel/process-xen.c	2011-11-17 15:56:06.000000000 +0100
+++ head-2011-12-21/arch/x86/kernel/process-xen.c	2011-12-21 11:59:08.000000000 +0100
@@ -355,6 +355,14 @@ void xen_idle(void)
 EXPORT_SYMBOL(default_idle);
 #endif
 
+bool __init set_pm_idle_to_default(void)
+{
+	bool ret = !!pm_idle;
+
+	pm_idle = xen_idle;
+
+	return ret;
+}
 void stop_this_cpu(void *dummy)
 {
 	local_irq_disable();
--- head-2011-12-21.orig/arch/x86/kernel/setup-xen.c	2011-11-28 10:08:44.000000000 +0100
+++ head-2011-12-21/arch/x86/kernel/setup-xen.c	2011-12-21 11:56:23.000000000 +0100
@@ -763,6 +763,8 @@ early_param("reservelow", parse_reservel
 
 void __init setup_arch(char **cmdline_p)
 {
+	unsigned long end_pfn;
+
 #ifdef CONFIG_XEN
 	unsigned long p2m_pages;
 	struct physdev_set_iopl set_iopl;
@@ -1059,7 +1061,24 @@ void __init setup_arch(char **cmdline_p)
 	init_gbpages();
 
 	/* max_pfn_mapped is updated here */
-	max_low_pfn_mapped = init_memory_mapping(0, max_low_pfn<<PAGE_SHIFT);
+	end_pfn = max_low_pfn;
+
+#if defined(CONFIG_X86_64) && !defined(CONFIG_XEN)
+	/*
+	 * There may be regions after the last E820_RAM region that we
+	 * want to include in the kernel direct mapping, such as
+	 * EFI_RUNTIME_SERVICES_DATA.
+	 */
+	if (efi_enabled) {
+		unsigned long efi_end;
+
+		efi_end = e820_end_pfn(MAXMEM>>PAGE_SHIFT, E820_RESERVED_EFI);
+		if (efi_end > max_low_pfn)
+			end_pfn = efi_end;
+	}
+#endif
+
+	max_low_pfn_mapped = init_memory_mapping(0, end_pfn << PAGE_SHIFT);
 	max_pfn_mapped = max_low_pfn_mapped;
 
 #ifdef CONFIG_X86_64
--- head-2011-12-21.orig/arch/x86/mm/highmem_32-xen.c	2011-02-01 15:09:47.000000000 +0100
+++ head-2011-12-21/arch/x86/mm/highmem_32-xen.c	2011-12-21 11:56:23.000000000 +0100
@@ -45,6 +45,7 @@ void *kmap_atomic_prot(struct page *page
 	vaddr = __fix_to_virt(FIX_KMAP_BEGIN + idx);
 	BUG_ON(!pte_none(*(kmap_pte-idx)));
 	set_pte_at(&init_mm, vaddr, kmap_pte-idx, mk_pte(page, prot));
+	/*arch_flush_lazy_mmu_mode();*/
 
 	return (void *)vaddr;
 }
@@ -88,6 +89,7 @@ void __kunmap_atomic(void *kvaddr)
 		 */
 		kpte_clear_flush(kmap_pte-idx, vaddr);
 		kmap_atomic_idx_pop();
+		/*arch_flush_lazy_mmu_mode();*/
 	}
 #ifdef CONFIG_DEBUG_HIGHMEM
 	else {
