From: Jeff Mahoney <jeffm@suse.com>
Subject: [PATCH 11/15] ocfs2: allow per-resource node status queries

 This patch allows callers of o2hb_fill_node_map* and
 o2hb_check_{,local_}node_heartbeating* to specify a particular heartbeat
 resource to find status on.

 If the query is just to discover if the node is up *at all*, NULL can be
 specified.

 The disk heartbeat currently doesn't make a distinction between different
 resources and simply maintains a unified node map. The userspace
 heartbeat resource will allow distinct per-resource membership, so this
 is needed to lay the groundwork.

 The actual file system now queries the UUID sooner and uses it to discover
 membership in the resource for that UUID.

 fs/ocfs2/cluster/disk_heartbeat.c |    4 +++-
 fs/ocfs2/cluster/heartbeat.c      |   25 +++++++++++++++----------
 fs/ocfs2/cluster/heartbeat.h      |   13 ++++++++-----
 fs/ocfs2/cluster/tcp.c            |    2 +-
 fs/ocfs2/dlm/dlmdomain.c          |    7 ++++---
 fs/ocfs2/heartbeat.c              |   14 ++++++++++++--
 6 files changed, 43 insertions(+), 22 deletions(-)

Signed-off-by: Jeff Mahoney <jeffm@suse.com>

--- a/fs/ocfs2/cluster/disk_heartbeat.c	2008-02-08 15:53:41.000000000 -0500
+++ b/fs/ocfs2/cluster/disk_heartbeat.c	2008-02-08 15:53:42.000000000 -0500
@@ -799,11 +799,13 @@ static int o2hb_thread(void *data)
 }
 
 /* if we're already in a callback then we're already serialized by the sem */
-static void o2hb_disk_fill_node_map(unsigned long *map, size_t bytes)
+static int o2hb_disk_fill_node_map(const char *resource, unsigned long *map,
+                                                 size_t bytes)
 {
 	BUG_ON(bytes < (BITS_TO_LONGS(O2NM_MAX_NODES) * sizeof(unsigned long)));
 
 	memcpy(map, &o2hb_live_node_bitmap, bytes);
+	return 0;
 }
 
 /*
--- a/fs/ocfs2/cluster/heartbeat.c	2008-02-08 15:53:42.000000000 -0500
+++ b/fs/ocfs2/cluster/heartbeat.c	2008-02-08 15:53:42.000000000 -0500
@@ -161,23 +161,26 @@ void o2hb_init(void)
 	INIT_LIST_HEAD(&o2hb_node_events);
 }
 
-void o2hb_fill_node_map_from_callback(unsigned long *map, unsigned bytes)
+int o2hb_fill_node_map_from_callback(const char *resource, unsigned long *map,
+                                     unsigned bytes)
 {
-	o2hb_active_group->fill_node_map(map, bytes);
+	return o2hb_active_group->fill_node_map(resource, map, bytes);
 }
 
 /*
  * get a map of all nodes that are heartbeating in any regions
  */
-void o2hb_fill_node_map(unsigned long *map, unsigned bytes)
+int o2hb_fill_node_map(const char *resource, unsigned long *map, unsigned bytes)
 {
 	/* callers want to serialize this map and callbacks so that they
 	 * can trust that they don't miss nodes coming to the party */
+	int err;
 	down_read(&o2hb_callback_sem);
 	spin_lock(&o2hb_live_lock);
-	o2hb_fill_node_map_from_callback(map, bytes);
+	err = o2hb_fill_node_map_from_callback(resource, map, bytes);
 	spin_unlock(&o2hb_live_lock);
 	up_read(&o2hb_callback_sem);
+	return err;
 }
 EXPORT_SYMBOL_GPL(o2hb_fill_node_map);
 
@@ -462,11 +465,11 @@ int o2hb_unregister_heartbeat_group(stru
 }
 EXPORT_SYMBOL_GPL(o2hb_unregister_heartbeat_group);
 
-int o2hb_check_node_heartbeating(u8 node_num)
+int o2hb_check_node_heartbeating(const char *resource, u8 node_num)
 {
 	unsigned long testing_map[BITS_TO_LONGS(O2NM_MAX_NODES)];
 
-	o2hb_fill_node_map(testing_map, sizeof(testing_map));
+	o2hb_fill_node_map(resource, testing_map, sizeof(testing_map));
 	if (!test_bit(node_num, testing_map)) {
 		mlog(ML_HEARTBEAT,
 		     "node (%u) does not have heartbeating enabled.\n",
@@ -478,11 +481,13 @@ int o2hb_check_node_heartbeating(u8 node
 }
 EXPORT_SYMBOL_GPL(o2hb_check_node_heartbeating);
 
-int o2hb_check_node_heartbeating_from_callback(u8 node_num)
+int o2hb_check_node_heartbeating_from_callback(const char *resource,
+                                               u8 node_num)
 {
 	unsigned long testing_map[BITS_TO_LONGS(O2NM_MAX_NODES)];
 
-	o2hb_fill_node_map_from_callback(testing_map, sizeof(testing_map));
+	o2hb_fill_node_map_from_callback(resource, testing_map,
+	                                 sizeof(testing_map));
 	if (!test_bit(node_num, testing_map)) {
 		mlog(ML_HEARTBEAT,
 		     "node (%u) does not have heartbeating enabled.\n",
@@ -496,7 +501,7 @@ EXPORT_SYMBOL_GPL(o2hb_check_node_heartb
 
 /* Makes sure our local node is configured with a node number, and is
  * heartbeating. */
-int o2hb_check_local_node_heartbeating(void)
+int o2hb_check_local_node_heartbeating(const char *resource)
 {
 	u8 node_num;
 
@@ -507,6 +512,6 @@ int o2hb_check_local_node_heartbeating(v
 		return 0;
 	}
 
-	return o2hb_check_node_heartbeating(node_num);
+	return o2hb_check_node_heartbeating(resource, node_num);
 }
 EXPORT_SYMBOL_GPL(o2hb_check_local_node_heartbeating);
--- a/fs/ocfs2/cluster/heartbeat.h	2008-02-08 15:53:42.000000000 -0500
+++ b/fs/ocfs2/cluster/heartbeat.h	2008-02-08 15:53:42.000000000 -0500
@@ -47,7 +47,8 @@ struct o2hb_heartbeat_group {
 	const char *hs_name;
 	int (*init)(struct o2hb_heartbeat_group *hs);
 	void (*exit)(struct o2hb_heartbeat_group *hs);
-	void (*fill_node_map)(unsigned long *map, size_t bytes);
+	int (*fill_node_map)(const char *resource, unsigned long *map,
+	                     size_t bytes);
 	atomic_t hs_count;
 	struct list_head hs_list;
 };
@@ -114,12 +115,13 @@ void o2hb_setup_callback(struct o2hb_cal
 int o2hb_register_callback(const char *region_uuid,
 			   struct o2hb_callback_func *hc);
 void o2hb_unregister_callback(struct o2hb_callback_func *hc);
-void o2hb_fill_node_map(unsigned long *map,
+int o2hb_fill_node_map(const char *resource, unsigned long *map,
 			unsigned bytes);
 void o2hb_init(void);
-int o2hb_check_node_heartbeating(u8 node_num);
-int o2hb_check_node_heartbeating_from_callback(u8 node_num);
-int o2hb_check_local_node_heartbeating(void);
+int o2hb_check_node_heartbeating(const char *resource, u8 node_num);
+int o2hb_check_node_heartbeating_from_callback(const char *resource,
+                                               u8 node_num);
+int o2hb_check_local_node_heartbeating(const char *resource);
 
 static inline struct o2hb_heartbeat_group *to_o2hb_heartbeat_group(struct config_group *group)
 {
@@ -130,4 +132,5 @@ static inline struct o2hb_heartbeat_reso
 {
 	return container_of(item, struct o2hb_heartbeat_resource, hr_item);
 }
+
 #endif /* O2CLUSTER_HEARTBEAT_H */
--- a/fs/ocfs2/cluster/tcp.c	2008-02-08 15:53:41.000000000 -0500
+++ b/fs/ocfs2/cluster/tcp.c	2008-02-08 15:53:42.000000000 -0500
@@ -1700,7 +1700,7 @@ static int o2net_accept_one(struct socke
 
 	/* this happens all the time when the other node sees our heartbeat
 	 * and tries to connect before we see their heartbeat */
-	if (!o2hb_check_node_heartbeating_from_callback(node->nd_num)) {
+	if (!o2hb_check_node_heartbeating_from_callback(NULL, node->nd_num)) {
 		mlog(ML_CONN, "attempt to connect from node '%s' at "
 		     "%u.%u.%u.%u:%d but it isn't heartbeating\n",
 		     node->nd_name, NIPQUAD(sin.sin_addr.s_addr),
--- a/fs/ocfs2/dlm/dlmdomain.c	2008-02-08 15:53:41.000000000 -0500
+++ b/fs/ocfs2/dlm/dlmdomain.c	2008-02-08 15:53:42.000000000 -0500
@@ -686,7 +686,7 @@ static int dlm_query_join_handler(struct
 	 * to back off and try again.  This gives heartbeat a chance
 	 * to catch up.
 	 */
-	if (!o2hb_check_node_heartbeating(query->node_idx)) {
+	if (!o2hb_check_node_heartbeating(query->domain, query->node_idx)) {
 		mlog(0, "node %u is not in our live map yet\n",
 		     query->node_idx);
 
@@ -1048,7 +1048,8 @@ static int dlm_try_to_join_domain(struct
 	/* group sem locking should work for us here -- we're already
 	 * registered for heartbeat events so filling this should be
 	 * atomic wrt getting those handlers called. */
-	o2hb_fill_node_map(dlm->live_nodes_map, sizeof(dlm->live_nodes_map));
+	o2hb_fill_node_map(dlm->name, dlm->live_nodes_map,
+	                   sizeof(dlm->live_nodes_map));
 
 	spin_lock(&dlm->spinlock);
 	memcpy(ctxt->live_map, dlm->live_nodes_map, sizeof(ctxt->live_map));
@@ -1465,7 +1466,7 @@ struct dlm_ctxt * dlm_register_domain(co
 		goto leave;
 	}
 
-	if (!o2hb_check_local_node_heartbeating()) {
+	if (!o2hb_check_local_node_heartbeating(domain)) {
 		mlog(ML_ERROR, "the local node has not been configured, or is "
 		     "not heartbeating\n");
 		ret = -EPROTO;
--- a/fs/ocfs2/heartbeat.c	2008-02-08 15:53:41.000000000 -0500
+++ b/fs/ocfs2/heartbeat.c	2008-02-08 15:53:42.000000000 -0500
@@ -70,13 +70,23 @@ void ocfs2_init_node_maps(struct ocfs2_s
 	ocfs2_node_map_init(&osb->osb_recovering_orphan_dirs);
 }
 
+static void ocfs2_handle_fencing(int node_num, struct ocfs2_super *osb)
+{
+	/* I would much rather handle this by setting the file system
+	 * read only, but that's for a later date. -jdm */
+	panic("ocfs2 is very sorry to be fencing this system by panicing\n");
+}
+
 static void ocfs2_do_node_down(int node_num,
 			       struct ocfs2_super *osb)
 {
-	BUG_ON(osb->node_num == node_num);
-
 	mlog(0, "ocfs2: node down event for %d\n", node_num);
 
+	if (osb->node_num == node_num) {
+		ocfs2_handle_fencing(node_num, osb);
+		return;
+	}
+
 	if (!osb->dlm) {
 		/*
 		 * No DLM means we're not even ready to participate yet.
