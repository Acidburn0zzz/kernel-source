Date: Mon Jan  9 10:49:46 CST 2006
From: Bob Kierski <bobo@sgi.com>
Subject: VFS changes needed by DMAPI
Patch-mainline: never

This includes the open_exec(), mprotect() and build changes needed for
DMAPI in SLES10.

Acked-by: Andreas Gruenbacher <agruen@suse.de>

Index: linux-2.6.15/Documentation/filesystems/xfs.txt
===================================================================
--- linux-2.6.15.orig/Documentation/filesystems/xfs.txt
+++ linux-2.6.15/Documentation/filesystems/xfs.txt
@@ -57,6 +57,10 @@ When mounting an XFS filesystem, the fol
 	of zero is used, the value selected by the default algorithm
 	will be displayed in /proc/mounts.
 
+  dmapi
+	Enable the DMAPI (Data Management API) event callouts.
+	Use with the "mtpt" option.
+
   ikeep/noikeep
 	When inode clusters are emptied of inodes, keep them around
 	on the disk (ikeep) - this is the traditional XFS behaviour
@@ -114,6 +118,11 @@ When mounting an XFS filesystem, the fol
 	included in the DMAPI mount event, and should be the path of
 	the actual mountpoint that is used.
 
+  mtpt=mountpoint
+	Use with the "dmapi" option.  The value specified here will be
+	included in the DMAPI mount event, and should be the path of
+	the actual mountpoint that is used.
+
   noalign
 	Data allocations will not be aligned at stripe unit boundaries.
 
Index: linux-2.6.15/MAINTAINERS
===================================================================
--- linux-2.6.15.orig/MAINTAINERS
+++ linux-2.6.15/MAINTAINERS
@@ -2962,6 +2962,14 @@ L:	linux-xfs@oss.sgi.com
 W:	http://oss.sgi.com/projects/xfs
 S:	Supported
 
+DMAPI
+P:	Silicon Graphics Inc
+M:	xfs-masters@oss.sgi.com
+M:	bobo@sgi.com
+L:	linux-xfs@oss.sgi.com
+W:	http://oss.sgi.com/projects/xfs
+S:	Supported
+
 X86 3-LEVEL PAGING (PAE) SUPPORT
 P:	Ingo Molnar
 M:	mingo@redhat.com
Index: linux-2.6.15/fs/Kconfig
===================================================================
--- linux-2.6.15.orig/fs/Kconfig
+++ linux-2.6.15/fs/Kconfig
@@ -387,6 +387,25 @@ config INOTIFY
 
 	  If unsure, say Y.
 
+config DMAPI
+	tristate "DMAPI support"
+	help
+	  The Data Management API is a system interface used to implement
+	  the interface defined in the X/Open document:
+	  "Systems Management: Data Storage Management (XDSM) API",
+	  dated February 1997.  This interface is used by hierarchical
+	  storage management systems.
+
+	  If any DMAPI-capable filesystem is built into the kernel, then
+	  DMAPI must also be built into the kernel.
+
+config DMAPI_DEBUG
+	bool "DMAPI debugging support"
+	depends on DMAPI
+	help
+	  If you don't know whether you need it, then you don't need it:
+	  answer N.
+
 config QUOTA
 	bool "Quota support"
 	help
Index: linux-2.6.15/fs/Makefile
===================================================================
--- linux-2.6.15.orig/fs/Makefile
+++ linux-2.6.15/fs/Makefile
@@ -40,6 +40,8 @@ obj-$(CONFIG_QFMT_V1)		+= quota_v1.o
 obj-$(CONFIG_QFMT_V2)		+= quota_v2.o
 obj-$(CONFIG_QUOTACTL)		+= quota.o
 
+obj-$(CONFIG_DMAPI)		+= dmapi/
+
 obj-$(CONFIG_DNOTIFY)		+= dnotify.o
 
 obj-$(CONFIG_PROC_FS)		+= proc/
Index: linux-2.6.15/fs/exec.c
===================================================================
--- linux-2.6.15.orig/fs/exec.c
+++ linux-2.6.15/fs/exec.c
@@ -492,6 +492,13 @@ struct file *open_exec(const char *name)
 			if (!err) {
 				file = nameidata_to_filp(&nd, O_RDONLY);
 				if (!IS_ERR(file)) {
+					if (file->f_op && file->f_op->open_exec) {
+						err = file->f_op->open_exec(inode);
+						if (err) {
+							fput(file);
+							return ERR_PTR(err);
+						}
+					}
 					err = deny_write_access(file);
 					if (err) {
 						fput(file);
Index: linux-2.6.15/include/linux/mm.h
===================================================================
--- linux-2.6.15.orig/include/linux/mm.h
+++ linux-2.6.15/include/linux/mm.h
@@ -198,6 +198,8 @@ struct vm_operations_struct {
 	void (*close)(struct vm_area_struct * area);
 	struct page * (*nopage)(struct vm_area_struct * area, unsigned long address, int *type);
 	int (*populate)(struct vm_area_struct * area, unsigned long address, unsigned long len, pgprot_t prot, unsigned long pgoff, int nonblock);
+#define HAVE_VMOP_MPROTECT
+	int (*mprotect)(struct vm_area_struct * area, unsigned int newflags);
 #ifdef CONFIG_NUMA
 	int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
 	struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
Index: linux-2.6.15/include/linux/fs.h
===================================================================
--- linux-2.6.15.orig/include/linux/fs.h
+++ linux-2.6.15/include/linux/fs.h
@@ -995,6 +995,8 @@ struct file_operations {
 	int (*check_flags)(int);
 	int (*dir_notify)(struct file *filp, unsigned long arg);
 	int (*flock) (struct file *, int, struct file_lock *);
+#define HAVE_FOP_OPEN_EXEC
+	int (*open_exec) (struct inode *);
 };
 
 struct inode_operations {
Index: linux-2.6.15/mm/mprotect.c
===================================================================
--- linux-2.6.15.orig/mm/mprotect.c
+++ linux-2.6.15/mm/mprotect.c
@@ -257,6 +257,11 @@ sys_mprotect(unsigned long start, size_t
 		if (error)
 			goto out;
 
+		if (vma->vm_ops && vma->vm_ops->mprotect) {
+			error = vma->vm_ops->mprotect(vma, newflags);
+			if (error < 0)
+				goto out;
+		}
 		tmp = vma->vm_end;
 		if (tmp > end)
 			tmp = end;
Index: linux-2.6.15/mm/prio_tree.c
===================================================================
--- linux-2.6.15.orig/mm/prio_tree.c
+++ linux-2.6.15/mm/prio_tree.c
@@ -11,6 +11,7 @@
  * 02Feb2004	Initial version
  */
 
+#include <linux/module.h>
 #include <linux/mm.h>
 #include <linux/prio_tree.h>
 
@@ -205,3 +206,4 @@ struct vm_area_struct *vma_prio_tree_nex
 	} else
 		return NULL;
 }
+EXPORT_SYMBOL(vma_prio_tree_next);
