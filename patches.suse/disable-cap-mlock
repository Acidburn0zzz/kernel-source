diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/fs/hugetlbfs/inode.c sles/fs/hugetlbfs/inode.c
--- sles-ref/fs/hugetlbfs/inode.c	2004-04-02 05:25:56.346695952 +0200
+++ sles/fs/hugetlbfs/inode.c	2004-04-02 05:27:05.482185760 +0200
@@ -707,7 +707,7 @@ struct file *hugetlb_zero_setup(size_t s
 	struct qstr quick_string;
 	char buf[16];
 
-	if (!capable(CAP_IPC_LOCK))
+	if (!can_do_mlock())
 		return ERR_PTR(-EPERM);
 
 	if (!is_hugepage_mem_enough(size))
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/include/linux/sched.h sles/include/linux/sched.h
--- sles-ref/include/linux/sched.h	2004-04-02 05:26:24.080479776 +0200
+++ sles/include/linux/sched.h	2004-04-02 05:27:05.484185456 +0200
@@ -745,6 +745,12 @@ static inline int capable(int cap)
 }
 #endif
 
+extern int sysctl_disable_cap_mlock;
+static inline int can_do_mlock(void)
+{
+	return likely(sysctl_disable_cap_mlock || capable(CAP_IPC_LOCK));
+}
+
 /*
  * Routines for handling mm_structs
  */
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/include/linux/sysctl.h sles/include/linux/sysctl.h
--- sles-ref/include/linux/sysctl.h	2004-04-02 05:26:24.082479472 +0200
+++ sles/include/linux/sysctl.h	2004-04-02 05:27:19.480057760 +0200
@@ -166,6 +166,7 @@ enum
 	VM_MIN_FREE_KBYTES=21,	/* Minimum free kilobytes to maintain */
 	VM_LAPTOP_MODE=22,      /* vm laptop mode */
 	VM_BLOCK_DUMP=23,       /* block dump mode */
+	VM_DISABLE_CAP_MLOCK=24,/* disable CAP_IPC_LOCK checking */
 };
 
 
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/ipc/shm.c sles/ipc/shm.c
--- sles-ref/ipc/shm.c	2004-04-02 05:26:24.544409248 +0200
+++ sles/ipc/shm.c	2004-04-02 05:27:05.490184544 +0200
@@ -503,7 +503,7 @@ asmlinkage long sys_shmctl (int shmid, i
 /* Allow superuser to lock segment in memory */
 /* Should the pages be faulted in here or leave it to user? */
 /* need to determine interaction with current->swappable */
-		if (!capable(CAP_IPC_LOCK)) {
+		if (!can_do_mlock()) {
 			err = -EPERM;
 			goto out;
 		}
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/kernel/capability.c sles/kernel/capability.c
--- sles-ref/kernel/capability.c	2003-10-31 05:56:39.000000000 +0100
+++ sles/kernel/capability.c	2004-04-02 05:27:05.491184392 +0200
@@ -14,6 +14,7 @@
 
 unsigned securebits = SECUREBITS_DEFAULT; /* systemwide security settings */
 kernel_cap_t cap_bset = CAP_INIT_EFF_SET;
+int sysctl_disable_cap_mlock = 0;
 
 EXPORT_SYMBOL(securebits);
 EXPORT_SYMBOL(cap_bset);
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/kernel/sysctl.c sles/kernel/sysctl.c
--- sles-ref/kernel/sysctl.c	2004-04-02 05:26:24.090478256 +0200
+++ sles/kernel/sysctl.c	2004-04-02 05:27:05.494183936 +0200
@@ -814,6 +814,14 @@ static ctl_table vm_table[] = {
 		.strategy	= &sysctl_intvec,
 		.extra1		= &zero,
 	},
+	{
+		.ctl_name	= VM_DISABLE_CAP_MLOCK,
+		.procname	= "disable_cap_mlock",
+		.data		= &sysctl_disable_cap_mlock,
+		.maxlen		= sizeof(sysctl_disable_cap_mlock),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
 	{ .ctl_name = 0 }
 };
 
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/mm/mlock.c sles/mm/mlock.c
--- sles-ref/mm/mlock.c	2003-10-31 05:56:45.000000000 +0100
+++ sles/mm/mlock.c	2004-04-02 05:27:05.495183784 +0200
@@ -57,7 +57,7 @@ static int do_mlock(unsigned long start,
 	struct vm_area_struct * vma, * next;
 	int error;
 
-	if (on && !capable(CAP_IPC_LOCK))
+	if (on && !can_do_mlock())
 		return -EPERM;
 	len = PAGE_ALIGN(len);
 	end = start + len;
@@ -139,7 +139,7 @@ static int do_mlockall(int flags)
 	unsigned int def_flags;
 	struct vm_area_struct * vma;
 
-	if (!capable(CAP_IPC_LOCK))
+	if (!can_do_mlock())
 		return -EPERM;
 
 	def_flags = 0;
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/mm/mmap.c sles/mm/mmap.c
--- sles-ref/mm/mmap.c	2004-04-02 05:26:31.691322752 +0200
+++ sles/mm/mmap.c	2004-04-02 05:27:05.498183328 +0200
@@ -569,7 +569,7 @@ unsigned long __do_mmap_pgoff(struct mm_
 			mm->def_flags | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC;
 
 	if (flags & MAP_LOCKED) {
-		if (!capable(CAP_IPC_LOCK))
+		if (!can_do_mlock())
 			return -EPERM;
 		vm_flags |= VM_LOCKED;
 	}
