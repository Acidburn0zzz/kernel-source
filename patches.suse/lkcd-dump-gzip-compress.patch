diff -Naurp 2.6.orig/drivers/dump/dump_fmt.c 2.6/drivers/dump/dump_fmt.c
--- 2.6.orig/drivers/dump/dump_fmt.c	2004-02-10 13:33:26.000000000 -0600
+++ 2.6/drivers/dump/dump_fmt.c	2004-04-06 20:11:13.000000000 -0500
@@ -307,7 +307,8 @@ int dump_lcrash_add_data(unsigned long l
 		size = bytes = (len > PAGE_SIZE) ? PAGE_SIZE : len;	
 		/* check for compression */
 		if (dump_allow_compress(page, bytes)) {
-			size = dump_compress_data((char *)addr, bytes, (char *)buf);
+			size = dump_compress_data((char *)addr, bytes, 
+				(char *)buf, loc);
 		}
 		/* set the compressed flag if the page did compress */
 		if (size && (size < bytes)) {
diff -Naurp 2.6.orig/drivers/dump/dump_gzip.c 2.6/drivers/dump/dump_gzip.c
--- 2.6.orig/drivers/dump/dump_gzip.c	2003-10-01 03:56:18.000000000 -0500
+++ 2.6/drivers/dump/dump_gzip.c	2004-04-06 20:32:45.000000000 -0500
@@ -20,6 +20,7 @@
 #include <linux/vmalloc.h>
 
 static void *deflate_workspace;
+static unsigned long workspace_paddr[2];
 
 /*
  * Name: dump_compress_gzip()
@@ -27,14 +28,23 @@ static void *deflate_workspace;
  *       deflate functions similar to what's used in PPP).
  */
 static u16
-dump_compress_gzip(const u8 *old, u16 oldsize, u8 *new, u16 newsize)
+dump_compress_gzip(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+		unsigned long loc)
 {
 	/* error code and dump stream */
 	int err;
 	z_stream dump_stream;
-	
+	struct page *pg = (struct page *)loc;
+	unsigned long paddr =  page_to_pfn(pg) << PAGE_SHIFT;
+
 	dump_stream.workspace = deflate_workspace;
-	
+	if ((paddr == workspace_paddr[0]) || (paddr == workspace_paddr[1])) {
+		/* 
+		 * This page belongs to deflate_workspace used as temporary 
+		 * buffer for compression. Hence, dump them without compression.
+		 */
+		return(0);
+	}
 	if ((err = zlib_deflateInit(&dump_stream, Z_BEST_COMPRESSION)) != Z_OK) {
 		/* fall back to RLE compression */
 		printk("dump_compress_gzip(): zlib_deflateInit() "
@@ -87,6 +97,8 @@ static struct __dump_compress dump_gzip_
 static int __init
 dump_compress_gzip_init(void)
 {
+	struct page *pg;
+
 	deflate_workspace = vmalloc(zlib_deflate_workspacesize());
 	if (!deflate_workspace) {
 		printk("dump_compress_gzip_init(): Failed to "
@@ -94,6 +106,17 @@ dump_compress_gzip_init(void)
 			zlib_deflate_workspacesize());
 		return -ENOMEM;
 	}
+	/*
+	 * Need to find pages (workspace) that are used for compression.
+	 * Even though zlib_deflate_workspacesize() is 64 pages (approximately)
+	 * depends on the arch, we used only 2 pages. Hence, get the physical
+	 * addresses for these 2 pages and used them to not to compress those
+	 * pages.
+	 */
+	pg = vmalloc_to_page(deflate_workspace);
+	workspace_paddr[0] = page_to_pfn(pg) << PAGE_SHIFT;
+	pg = vmalloc_to_page(deflate_workspace + DUMP_PAGE_SIZE);
+	workspace_paddr[1] = page_to_pfn(pg) << PAGE_SHIFT;
 	dump_register_compression(&dump_gzip_compression);
 	return 0;
 }
diff -Naurp 2.6.orig/drivers/dump/dump_methods.h 2.6/drivers/dump/dump_methods.h
--- 2.6.orig/drivers/dump/dump_methods.h	2003-12-14 04:00:42.000000000 -0600
+++ 2.6/drivers/dump/dump_methods.h	2004-04-06 20:11:00.000000000 -0500
@@ -247,10 +247,11 @@ static inline int dump_add_data(unsigned
 }
 
 /* Compression operation */
-static inline int dump_compress_data(char *src, int slen, char *dst)
+static inline int dump_compress_data(char *src, int slen, char *dst,
+		unsigned long loc)
 {
 	return dump_config.dumper->compress->compress_func(src, slen, 
-		dst, DUMP_DPC_PAGE_SIZE);
+		dst, DUMP_DPC_PAGE_SIZE, loc);
 }
 
 
diff -Naurp 2.6.orig/drivers/dump/dump_rle.c 2.6/drivers/dump/dump_rle.c
--- 2.6.orig/drivers/dump/dump_rle.c	2003-10-01 03:56:18.000000000 -0500
+++ 2.6/drivers/dump/dump_rle.c	2004-04-06 20:10:52.000000000 -0500
@@ -22,7 +22,8 @@
  *       reasonable, if possible.  This is the same routine we use in IRIX.
  */
 static u16
-dump_compress_rle(const u8 *old, u16 oldsize, u8 *new, u16 newsize)
+dump_compress_rle(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+		unsigned long loc)
 {
 	u16 ri, wi, count = 0;
 	u_char value = 0, cur_byte;
diff -Naurp 2.6.orig/drivers/dump/dump_setup.c 2.6/drivers/dump/dump_setup.c
--- 2.6.orig/drivers/dump/dump_setup.c	2004-01-13 03:25:05.000000000 -0600
+++ 2.6/drivers/dump/dump_setup.c	2004-04-06 20:11:22.000000000 -0500
@@ -147,7 +147,8 @@ extern struct __dump_header dump_header;
 struct dump_dev *dump_dev = NULL;  /* Active dump device                   */
 static int dump_compress = 0;
 
-static u16 dump_compress_none(const u8 *old, u16 oldsize, u8 *new, u16 newsize);
+static u16 dump_compress_none(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+				unsigned long loc);
 struct __dump_compress dump_none_compression = {
 	.compress_type	= DUMP_COMPRESS_NONE,
 	.compress_func	= dump_compress_none,
@@ -278,7 +279,8 @@ static struct ctl_table_header *sysctl_h
  * Func: Don't do any compression, period.
  */
 static u16
-dump_compress_none(const u8 *old, u16 oldsize, u8 *new, u16 newsize)
+dump_compress_none(const u8 *old, u16 oldsize, u8 *new, u16 newsize,
+		unsigned long loc)
 {
 	/* just return the old size */
 	return oldsize;
diff -Naurp 2.6.orig/include/linux/dump.h 2.6/include/linux/dump.h
--- 2.6.orig/include/linux/dump.h	2004-02-19 00:38:36.000000000 -0600
+++ 2.6/include/linux/dump.h	2004-04-06 20:11:39.000000000 -0500
@@ -281,7 +281,7 @@ struct __dump_compress {
 	const char *compress_name;
 
 	/* the compression function to call */
-	u16 (*compress_func)(const u8 *, u16, u8 *, u16);
+	u16 (*compress_func)(const u8 *, u16, u8 *, u16, unsigned long);
 };
 
 /* functions for dump compression registration */
