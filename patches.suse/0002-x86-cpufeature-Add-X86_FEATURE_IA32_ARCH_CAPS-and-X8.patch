From: David Woodhouse <dwmw@amazon.co.uk>
Date: Fri, 15 Dec 2017 05:39:13 -0800
Subject: x86/cpufeature: Add X86_FEATURE_IA32_ARCH_CAPS and
 X86_FEATURE_IBRS_ATT
Patch-mainline: submitted on 2018/1/9
References: bnc#1068032 CVE-2017-5715

Enumerate future CPU that implements IBRS all the time in its architecture.

Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/include/asm/cpufeatures.h | 2 ++
 arch/x86/include/asm/msr-index.h   | 1 +
 arch/x86/kernel/cpu/scattered.c    | 8 ++++++++
 3 files changed, 11 insertions(+)

diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
index d24ab36f7170..8cb58ca5d298 100644
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@ -210,6 +210,8 @@
 
 #define X86_FEATURE_MBA			( 7*32+18) /* Memory Bandwidth Allocation */
 #define X86_FEATURE_SPEC_CTRL		( 7*32+19) /* Control Speculation Control */
+#define X86_FEATURE_IA32_ARCH_CAPS	( 7*32+21) /* Control Speculation Control */
+#define X86_FEATURE_IBRS_ATT		( 7*32+22) /* IBRS all the time */
 
 /* Virtualization flags: Linux defined, word 8 */
 #define X86_FEATURE_TPR_SHADOW		( 8*32+ 0) /* Intel TPR Shadow */
diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 38f35a02b3ed..c80a5373aaf5 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -60,6 +60,7 @@
 #define SNB_C3_AUTO_UNDEMOTE		(1UL << 28)
 
 #define MSR_MTRRcap			0x000000fe
+#define MSR_IA32_ARCH_CAPABILITIES	0x0000010a
 #define MSR_IA32_BBL_CR_CTL		0x00000119
 #define MSR_IA32_BBL_CR_CTL3		0x0000011e
 
diff --git a/arch/x86/kernel/cpu/scattered.c b/arch/x86/kernel/cpu/scattered.c
index bc50c40f73f0..b2123c67bf85 100644
--- a/arch/x86/kernel/cpu/scattered.c
+++ b/arch/x86/kernel/cpu/scattered.c
@@ -25,6 +25,7 @@ static const struct cpuid_bit cpuid_bits[] = {
 	{ X86_FEATURE_AVX512_4VNNIW,    CPUID_EDX,  2, 0x00000007, 0 },
 	{ X86_FEATURE_AVX512_4FMAPS,    CPUID_EDX,  3, 0x00000007, 0 },
 	{ X86_FEATURE_SPEC_CTRL,	CPUID_EDX, 26, 0x00000007, 0 },
+	{ X86_FEATURE_IA32_ARCH_CAPS,	CPUID_EDX, 29, 0x00000007, 0 },
 	{ X86_FEATURE_CAT_L3,		CPUID_EBX,  1, 0x00000010, 0 },
 	{ X86_FEATURE_CAT_L2,		CPUID_EBX,  2, 0x00000010, 0 },
 	{ X86_FEATURE_CDP_L3,		CPUID_ECX,  2, 0x00000010, 1 },
@@ -57,6 +58,13 @@ void init_scattered_cpuid_features(struct cpuinfo_x86 *c)
 		if (regs[cb->reg] & (1 << cb->bit))
 			set_cpu_cap(c, cb->feature);
 	}
+
+	if (cpu_has(c, X86_FEATURE_IA32_ARCH_CAPS)) {
+		u64 cap;
+		rdmsrl(MSR_IA32_ARCH_CAPABILITIES, cap);
+		if (cap & 2) /* IBRS all the time */
+			set_cpu_cap(c, X86_FEATURE_IBRS_ATT);
+	}
 }
 
 u32 get_scattered_cpuid_leaf(unsigned int level, unsigned int sub_leaf,
-- 
2.15.1

