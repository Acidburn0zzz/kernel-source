From: olh@suse.de
Subject: update to build with 2.6.13
Patch-mainline: never

cant pass NULL to sk_alloc

 drivers/macintosh/mol/sheep.c |   17 ++++++++++++++++-
 1 files changed, 16 insertions(+), 1 deletion(-)

Index: linux-2.6.13/drivers/macintosh/mol/sheep.c
===================================================================
--- linux-2.6.13.orig/drivers/macintosh/mol/sheep.c
+++ linux-2.6.13/drivers/macintosh/mol/sheep.c
@@ -71,8 +71,14 @@ struct SheepVars {
  * MOL:			fake_addr,	MOL_IP
  */
 
+static struct proto sheep_proto = {
+	.name = "SHEEP",
+	.owner = THIS_MODULE,
+	.obj_size = sizeof(struct sock),
+};
+
 #ifdef LINUX_26
-#define compat_sk_alloc(a,b,c)	sk_alloc( (a), (b), (c), NULL )
+#define compat_sk_alloc(a,b,c)	sk_alloc( (a), (b), &sheep_proto, (c))
 #define skt_set_dead(skt)	do {} while(0)
 #define wmem_alloc		sk_wmem_alloc
 #else
@@ -240,12 +246,19 @@ sheep_net_open( struct inode *inode, str
 {
 	static char fake_addr_[6] = { 0xFE, 0xFD, 0xDE, 0xAD, 0xBE, 0xEF };
 	struct SheepVars *v;
+	int rc;
 	D(bug("sheep_net: open\n"));
 
 	// Must be opened with read permissions
 	if( (f->f_flags & O_ACCMODE) == O_WRONLY )
 		return -EPERM;
 
+	rc = proto_register(&sheep_proto, 0);
+	if (rc) {
+		printk(KERN_INFO "Unable to register mol sheep protocol type: %d\n", rc);
+		return rc;
+	}
+
 	// Allocate private variables
 	if( !(v=f->private_data=kmalloc(sizeof(*v), GFP_USER)) )
 		return -ENOMEM;
@@ -278,6 +291,8 @@ sheep_net_release( struct inode *inode, 
 	while( (skb=skb_dequeue(&v->queue)) )
 		kfree_skb(skb);
 
+	proto_unregister(&sheep_proto);
+
 	// Free private variables
 	kfree(v);
 	return 0;
