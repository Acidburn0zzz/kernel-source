From: Hans Reiser <reiser@namesys.com>
Subject: add per filesystem sync_inodes call

This patch adds new operation to struct super_operations - sync_inodes,
generic implementaion and changes fs-writeback.c:sync_sb_inodes() to call
filesystem's sync_inodes if it is defined or generic implementaion otherwise. 
This new operation allows filesystem to decide itself what to flush.

Reiser4 flushes dirty pages on basic of atoms, not of inodes.  sync_sb_inodes
used to call address space flushing method (writepages) for every dirty inode.
 For reiser4 it caused having to commit atoms unnecessarily often.  This
turned into substantial slowdown.  Having this method helped to fix that
problem.

Signed-off-by: Andrew Morton <akpm@osdl.org>
Acked-by: Chris Mason <mason@suse.com>

Index: linux.h/fs/fs-writeback.c
===================================================================
--- linux.h.orig/fs/fs-writeback.c	2005-01-04 16:57:16.000000000 -0500
+++ linux.h/fs/fs-writeback.c	2005-01-05 09:54:37.787256872 -0500
@@ -301,7 +301,7 @@ __writeback_single_inode(struct inode *i
  * throttled threads: we don't want them all piling up on __wait_on_inode.
  */
 static void
-sync_sb_inodes(struct super_block *sb, struct writeback_control *wbc)
+generic_sync_sb_inodes(struct super_block *sb, struct writeback_control *wbc)
 {
 	const unsigned long start = jiffies;	/* livelock avoidance */
 
@@ -386,6 +386,15 @@ sync_sb_inodes(struct super_block *sb, s
 	return;		/* Leave any unwritten inodes on s_io */
 }
 
+static void
+sync_sb_inodes(struct super_block *sb, struct writeback_control *wbc)
+{
+	if (sb->s_op->sync_inodes)
+		sb->s_op->sync_inodes(sb, wbc);
+	else
+		generic_sync_sb_inodes(sb, wbc);
+}
+
 /*
  * Start writeback of dirty pagecache data against all unlocked inodes.
  *
Index: linux.h/include/linux/fs.h
===================================================================
--- linux.h.orig/include/linux/fs.h	2005-01-04 16:57:30.000000000 -0500
+++ linux.h/include/linux/fs.h	2005-01-05 09:54:37.807254479 -0500
@@ -991,6 +991,8 @@ struct super_operations {
 	void (*clear_inode) (struct inode *);
 	void (*umount_begin) (struct super_block *);
 
+	void (*sync_inodes) (struct super_block *sb,
+				struct writeback_control *wbc);
 	int (*show_options)(struct seq_file *, struct vfsmount *);
 };
 
