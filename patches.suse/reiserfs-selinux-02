Index: linux.lkcd/fs/reiserfs/Makefile
===================================================================
--- linux.lkcd.orig/fs/reiserfs/Makefile	2004-02-20 21:31:14.000000000 -0500
+++ linux.lkcd/fs/reiserfs/Makefile	2004-02-20 21:31:57.000000000 -0500
@@ -13,6 +13,10 @@
 reiserfs-objs += xattr.o xattr_user.o xattr_trusted.o
 endif
 
+ifeq ($(CONFIG_REISERFS_FS_SECURITY),y)
+reiserfs-objs += xattr_security.o
+endif
+
 ifeq ($(CONFIG_REISERFS_FS_POSIX_ACL),y)
 reiserfs-objs += xattr_acl.o
 endif
Index: linux.lkcd/fs/reiserfs/xattr.c
===================================================================
--- linux.lkcd.orig/fs/reiserfs/xattr.c	2004-02-20 21:31:14.000000000 -0500
+++ linux.lkcd/fs/reiserfs/xattr.c	2004-02-20 21:31:57.000000000 -0500
@@ -1171,6 +1171,9 @@
     /* Add the handlers */
     list_add_tail (&user_handler.handlers, &xattr_handlers);
     list_add_tail (&trusted_handler.handlers, &xattr_handlers);
+#ifdef CONFIG_REISERFS_FS_SECURITY
+    list_add_tail (&security_handler.handlers, &xattr_handlers);
+#endif
 #ifdef CONFIG_REISERFS_FS_POSIX_ACL
     list_add_tail (&posix_acl_access_handler.handlers, &xattr_handlers);
     list_add_tail (&posix_acl_default_handler.handlers, &xattr_handlers);
Index: linux.lkcd/fs/reiserfs/xattr_security.c
===================================================================
--- linux.lkcd.orig/fs/reiserfs/xattr_security.c	2003-09-23 13:59:22.000000000 -0400
+++ linux.lkcd/fs/reiserfs/xattr_security.c	2004-02-20 21:31:57.000000000 -0500
@@ -0,0 +1,69 @@
+#include <linux/reiserfs_fs.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+#include <linux/pagemap.h>
+#include <linux/xattr.h>
+#include <linux/reiserfs_xattr.h>
+#include <asm/uaccess.h>
+
+#define XATTR_SECURITY_PREFIX "security."
+
+static int
+security_get (struct inode *inode, const char *name, void *buffer, size_t size)
+{
+    if (strlen(name) < sizeof(XATTR_SECURITY_PREFIX))
+        return -EINVAL;
+
+    if (is_reiserfs_priv_object(inode))
+        return -EPERM;
+
+    return reiserfs_xattr_get (inode, name, buffer, size);
+}
+
+static int
+security_set (struct inode *inode, const char *name, const void *buffer,
+          size_t size, int flags)
+{
+    if (strlen(name) < sizeof(XATTR_SECURITY_PREFIX))
+        return -EINVAL;
+
+    if (is_reiserfs_priv_object(inode))
+        return -EPERM;
+
+    return reiserfs_xattr_set (inode, name, buffer, size, flags);
+}
+
+static int
+security_del (struct inode *inode, const char *name)
+{
+    if (strlen(name) < sizeof(XATTR_SECURITY_PREFIX))
+        return -EINVAL;
+
+    if (is_reiserfs_priv_object(inode))
+        return -EPERM;
+
+    return 0;
+}
+
+static int
+security_list (struct inode *inode, const char *name, int namelen, char *out)
+{
+    int len = namelen;
+
+    if (is_reiserfs_priv_object(inode))
+        return 0;
+
+    if (out)
+        memcpy (out, name, len);
+
+    return len;
+}
+
+
+struct reiserfs_xattr_handler security_handler = {
+    prefix: XATTR_SECURITY_PREFIX,
+    get: security_get,
+    set: security_set,
+    del: security_del,
+    list: security_list,
+};
Index: linux.lkcd/fs/Kconfig
===================================================================
--- linux.lkcd.orig/fs/Kconfig	2004-02-20 21:27:44.000000000 -0500
+++ linux.lkcd/fs/Kconfig	2004-02-20 21:31:57.000000000 -0500
@@ -266,6 +266,18 @@
 
 	  If you don't know what Access Control Lists are, say N
 
+config REISERFS_FS_SECURITY
+	bool "ReiserFS Security Labels"
+	depends on REISERFS_FS_XATTR
+	help
+	  Security labels support alternative access control models
+	  implemented by security modules like SELinux.  This option
+	  enables an extended attribute handler for file security
+	  labels in the ReiserFS filesystem.
+
+	  If you are not using a security module that requires using
+	  extended attributes for file security labels, say N.
+
 config JFS_FS
 	tristate "JFS filesystem support"
 	select NLS
Index: linux.lkcd/include/linux/reiserfs_xattr.h
===================================================================
--- linux.lkcd.orig/include/linux/reiserfs_xattr.h	2004-02-20 21:31:14.000000000 -0500
+++ linux.lkcd/include/linux/reiserfs_xattr.h	2004-02-20 21:31:57.000000000 -0500
@@ -51,6 +51,9 @@
 
 extern struct reiserfs_xattr_handler user_handler;
 extern struct reiserfs_xattr_handler trusted_handler;
+#ifdef CONFIG_REISERFS_FS_SECURITY
+extern struct reiserfs_xattr_handler security_handler;
+#endif
 
 int reiserfs_xattr_register_handlers (void) __init;
 void reiserfs_xattr_unregister_handlers (void);
