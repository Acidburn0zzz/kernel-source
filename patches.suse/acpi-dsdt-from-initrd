From: Andreas Gruenbacher <agruen@suse.de>
Subject: ACPI DSDT in initrd

Original patch from: http://gaugusch.at/kernel.shtml

"This patch is intended for people who like to hack their DSDT and don't
want to recompile their kernel after every change.  To find out what a
DSDT is, go to the ACPI page. The ACPI project integrates ACPI support
into the linux kernel. [...]"

Note that we started with (and are still using) a version that appends
a NULL character at the end of the signature in mkinitrd; don't break
this.

Index: linux-2.6.10/drivers/acpi/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/acpi/Kconfig	2005-01-03 16:28:13.000000000 +0100
+++ linux-2.6.10/drivers/acpi/Kconfig	2005-01-13 11:10:08.000000000 +0100
@@ -325,5 +325,19 @@ config X86_PM_TIMER
 	  kernel logs, and/or you are using this on a notebook which
 	  does not yet have an HPET, you should say "Y" here.
 
+config ACPI_INITRD
+	bool "Read DSDT from initrd"
+	depends on ACPI && BLK_DEV_INITRD && !ACPI_CUSTOM_DSDT
+	default y
+	help
+	  The DSDT (Differentiated System Description Table) often needs to be
+	  overridden because of broken BIOS implementations. If you want to use
+	  a customized DSDT, please use the mkinitrd tool (mkinitrd package) to 
+	  attach the  DSDT to the initrd) or see http://gaugusch.at/kernel.shtml 
+	  for instructions on using an existing initrd with ACPI. If there is no 
+	  one found in the initrd, the DSDT from the BIOS is used. Even you do not 
+	  need a new one at the moment, you may want to use a better implemented 
+	  DSDT later. It is save to say yes here
+
 endmenu
 
Index: linux-2.6.10/drivers/acpi/osl.c
===================================================================
--- linux-2.6.10.orig/drivers/acpi/osl.c	2005-01-03 16:28:13.000000000 +0100
+++ linux-2.6.10/drivers/acpi/osl.c	2005-01-13 11:10:20.000000000 +0100
@@ -35,6 +35,7 @@
 #include <linux/interrupt.h>
 #include <linux/kmod.h>
 #include <linux/delay.h>
+#include <linux/initrd.h>
 #include <linux/workqueue.h>
 #include <linux/nmi.h>
 #include <acpi/acpi.h>
@@ -245,6 +246,38 @@ acpi_os_predefined_override (const struc
 	return AE_OK;
 }
 
+#ifdef CONFIG_ACPI_INITRD
+static char *
+acpi_find_dsdt_initrd(void)
+{
+	static const char signature[] = "INITRDDSDT123DSDT123";
+	char *dsdt_start = NULL;
+
+	if (initrd_start) {
+		char *data = (char *)initrd_start;
+
+		printk(KERN_INFO PREFIX "Looking for DSDT in initrd...");
+
+		/* Search for the start signature */
+		while (data < (char *)initrd_end - sizeof(signature) - 4) {
+			if (!memcmp(data, signature, sizeof(signature))) {
+				data += sizeof(signature);
+				if (!memcmp(data, "DSDT", 4))
+					dsdt_start = data;
+				break;
+			}
+			data++;
+		}
+		if (dsdt_start != NULL)
+			printk(" found at offset %zu\n",
+			       dsdt_start - (char *)initrd_start);
+		else
+			printk(" not found!\n");
+	}
+	return dsdt_start;
+}
+#endif
+
 acpi_status
 acpi_os_table_override (struct acpi_table_header *existing_table,
 			struct acpi_table_header **new_table)
@@ -252,14 +285,16 @@ acpi_os_table_override (struct acpi_tabl
 	if (!existing_table || !new_table)
 		return AE_BAD_PARAMETER;
 
+	*new_table = NULL;
+	if (strncmp(existing_table->signature, "DSDT", 4) == 0) {
 #ifdef CONFIG_ACPI_CUSTOM_DSDT
-	if (strncmp(existing_table->signature, "DSDT", 4) == 0)
 		*new_table = (struct acpi_table_header*)AmlCode;
-	else
-		*new_table = NULL;
-#else
-	*new_table = NULL;
+#elif defined(CONFIG_ACPI_INITRD)
+		*new_table = (struct acpi_table_header*)acpi_find_dsdt_initrd();
 #endif
+		if (*new_table)
+			printk(KERN_INFO PREFIX "Using customized DSDT\n");
+	}
 	return AE_OK;
 }
 
