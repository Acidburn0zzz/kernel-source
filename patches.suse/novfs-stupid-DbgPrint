From: Jeff Mahoney <jeffm@suse.com>
Subject: [PATCH] novfs: Clean up debug printing

 Nearly every call site for DbgPrint uses the function name and
 a newline, which adds clutter.

 This patch moves the function and newline assignment into a macro.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/novfs/daemon.c  |  280 +++++++++------------
 fs/novfs/file.c    |  326 ++++++++++---------------
 fs/novfs/inode.c   |  687 ++++++++++++++++++++++-------------------------------
 fs/novfs/nwcapi.c  |  116 ++++----
 fs/novfs/proc.c    |   12 
 fs/novfs/profile.c |   12 
 fs/novfs/vfs.h     |    5 
 7 files changed, 609 insertions(+), 829 deletions(-)

--- a/fs/novfs/daemon.c
+++ b/fs/novfs/daemon.c
@@ -150,13 +150,13 @@ int Queue_Daemon_Command(void *request,
 
 	ts1 = get_nanosecond_time();
 
-	DbgPrint("Queue_Daemon_Command: 0x%p %d\n", request, reqlen);
+	DbgPrint("0x%p %d", request, reqlen);
 
 	if (atomic_read(&Daemon_Open_Count)) {
 
 		que = kmalloc(sizeof(*que), GFP_KERNEL);
 
-		DbgPrint("Queue_Daemon_Command: que=0x%p\n", que);
+		DbgPrint("que=0x%p", que);
 		if (que) {
 			atomic_set(&que->reference, 0);
 			que->status = QUEUE_SENDING;
@@ -242,7 +242,7 @@ int Queue_Daemon_Command(void *request,
 			 */
 			if ((QUEUE_TIMEOUT == que->status)
 			    && (NULL == que->reply)) {
-				DbgPrint("Queue_Daemon_Command: Timeout\n");
+				DbgPrint("Timeout");
 				retCode = -ETIME;
 			}
 			*reply = que->reply;
@@ -268,20 +268,20 @@ int Queue_Daemon_Command(void *request,
 	ts2 = get_nanosecond_time();
 	ts2 = ts2 - ts1;
 
-	DbgPrint("Queue_Daemon_Command: %llu retCode=%d \n", ts2, retCode);
+	DbgPrint("%llu retCode=%d", ts2, retCode);
 	return (retCode);
 }
 
 static void Queue_get(struct daemon_cmd * Que)
 {
-	DbgPrint("Queue_get: que=0x%p %d\n", Que, atomic_read(&Que->reference));
+	DbgPrint("que=0x%p %d", Que, atomic_read(&Que->reference));
 	atomic_inc(&Que->reference);
 }
 
 static void Queue_put(struct daemon_cmd * Que)
 {
 
-	DbgPrint("Queue_put: que=0x%p %d\n", Que, atomic_read(&Que->reference));
+	DbgPrint("que=0x%p %d", Que, atomic_read(&Que->reference));
 	spin_lock(&Daemon_Queue.lock);
 
 	if (atomic_dec_and_test(&Que->reference)) {
@@ -304,7 +304,7 @@ struct daemon_cmd *get_next_queue(int Se
 {
 	struct daemon_cmd *que;
 
-	DbgPrint("get_next_queue: que=0x%p\n", Daemon_Queue.list.next);
+	DbgPrint("que=0x%p", Daemon_Queue.list.next);
 
 	spin_lock(&Daemon_Queue.lock);
 	que = (struct daemon_cmd *) Daemon_Queue.list.next;
@@ -327,7 +327,7 @@ struct daemon_cmd *get_next_queue(int Se
 
 	spin_unlock(&Daemon_Queue.lock);
 
-	DbgPrint("get_next_queue: return=0x%p\n", que);
+	DbgPrint("return=0x%p", que);
 	return (que);
 }
 
@@ -335,7 +335,7 @@ static struct daemon_cmd *find_queue(uns
 {
 	struct daemon_cmd *que;
 
-	DbgPrint("find_queue: 0x%x\n", sequence);
+	DbgPrint("0x%x", sequence);
 
 	spin_lock(&Daemon_Queue.lock);
 	que = (struct daemon_cmd *) Daemon_Queue.list.next;
@@ -357,13 +357,13 @@ static struct daemon_cmd *find_queue(uns
 
 	spin_unlock(&Daemon_Queue.lock);
 
-	DbgPrint("find_queue: return 0x%p\n", que);
+	DbgPrint("return 0x%p", que);
 	return (que);
 }
 
 int novfs_daemon_open_control(struct inode *Inode, struct file *File)
 {
-	DbgPrint("Daemon_Open_Control: pid=%d Count=%d\n", current->pid,
+	DbgPrint("pid=%d Count=%d", current->pid,
 		 atomic_read(&Daemon_Open_Count));
 	atomic_inc(&Daemon_Open_Count);
 
@@ -374,7 +374,7 @@ int novfs_daemon_close_control(struct in
 {
 	struct daemon_cmd *que;
 
-	DbgPrint("Daemon_Close_Control: pid=%d Count=%d\n", current->pid,
+	DbgPrint("pid=%d Count=%d", current->pid,
 		 atomic_read(&Daemon_Open_Count));
 
 	if (atomic_dec_and_test(&Daemon_Open_Count)) {
@@ -413,14 +413,14 @@ ssize_t novfs_daemon_cmd_send(struct fil
 	char *vadr;
 	unsigned long cpylen;
 
-	DbgPrint("Daemon_Send_Command: %u %lld\n", len, *off);
+	DbgPrint("%u %lld", len, *off);
 	if (len > novfs_max_iosize) {
 		novfs_max_iosize = len;
 	}
 
 	while (!Finished) {
 		que = get_next_queue(1);
-		DbgPrint("Daemon_Send_Command: 0x%p\n", que);
+		DbgPrint("0x%p", que);
 		if (que) {
 			retValue = que->reqlen;
 			if (retValue > len) {
@@ -439,9 +439,9 @@ ssize_t novfs_daemon_cmd_send(struct fil
 				for (i = 0; i < dcnt; i++, dlist++) {
 					if (DLREAD == dlist->rwflag) {
 						bcnt = dlist->len;
-						DbgPrint
-						    ("Daemon_Send_Command%d: page=0x%p offset=0x%p len=%d\n",
-						     i, dlist->page,
+						DbgPrint("page=0x%p "
+						         "offset=0x%p len=%d",
+							 i, dlist->page,
 						     dlist->offset, dlist->len);
 						if ((bcnt + retValue) <= len) {
 							void *km_adr = NULL;
@@ -466,8 +466,7 @@ ssize_t novfs_daemon_cmd_send(struct fil
 									 vadr,
 									 bcnt);
 
-							DbgPrint
-							    ("Daemon_Send_Command: Copy %d from 0x%p to 0x%p.\n",
+							DbgPrint("Copy %d from 0x%p to 0x%p.",
 							     bcnt, vadr, buf);
 							if (bcnt > 0x80)
 								novfs_dump(0x80,
@@ -499,20 +498,18 @@ ssize_t novfs_daemon_cmd_send(struct fil
 		} else {
 			if ((error =
 			     down_interruptible(&Daemon_Queue.semaphore))) {
-				DbgPrint
-				    ("Daemon_Send_Command: after down_interruptible error...%d\n",
-				     error);
+				DbgPrint("after down_interruptible error...%d",
+					 error);
 				retValue = -EINTR;
 				break;
 			}
-			DbgPrint
-			    ("Daemon_Send_Command: after down_interruptible\n");
+			DbgPrint("after down_interruptible");
 		}
 	}
 
 	*off = *off;
 
-	DbgPrint("Daemon_Send_Command: return 0x%x\n", retValue);
+	DbgPrint("return 0x%x", retValue);
 
 	return (retValue);
 }
@@ -528,7 +525,7 @@ ssize_t novfs_daemon_recv_reply(struct f
 	char *vadr;
 	int i;
 
-	DbgPrint("Daemon_Receive_Reply: buf=0x%p nbytes=%d ppos=%llx\n", buf,
+	DbgPrint("buf=0x%p nbytes=%d ppos=%llx", buf,
 		 nbytes, *ppos);
 
 	/*
@@ -542,7 +539,7 @@ ssize_t novfs_daemon_recv_reply(struct f
 	 */
 	que = find_queue(sequence);
 
-	DbgPrint("Daemon_Receive_Reply: 0x%x 0x%p %d\n", sequence, que, nbytes);
+	DbgPrint("0x%x 0x%p %d", sequence, que, nbytes);
 	if (que) {
 		do {
 			retValue = nbytes;
@@ -559,13 +556,12 @@ ssize_t novfs_daemon_recv_reply(struct f
 				int thiscopy, left = nbytes;
 				retValue = 0;
 
-				DbgPrint
-				    ("Daemon_Receive_Reply: dlist=0x%p count=%d\n",
+				DbgPrint("dlist=0x%p count=%d",
 				     dlist, que->datalen);
 				for (i = 0;
 				     (i < que->datalen) && (retValue < nbytes);
 				     i++, dlist++) {
-					DbgPrint("Daemon_Receive_Reply:\n"
+					__DbgPrint("\n"
 						 "   dlist[%d].page:   0x%p\n"
 						 "   dlist[%d].offset: 0x%p\n"
 						 "   dlist[%d].len:    0x%x\n"
@@ -614,8 +610,7 @@ ssize_t novfs_daemon_recv_reply(struct f
 				que->replen = retValue;
 			} else {
 				reply = kmalloc(nbytes, GFP_KERNEL);
-				DbgPrint("Daemon_Receive_Reply: reply=0x%p\n",
-					 reply);
+				DbgPrint("reply=0x%p", reply);
 				if (reply) {
 					retValue = nbytes;
 					que->reply = reply;
@@ -644,7 +639,7 @@ ssize_t novfs_daemon_recv_reply(struct f
 		Queue_put(que);
 	}
 
-	DbgPrint("Daemon_Receive_Reply: return 0x%x\n", retValue);
+	DbgPrint("return 0x%x", retValue);
 
 	return (retValue);
 }
@@ -880,7 +875,7 @@ int novfs_daemon_create_sessionId(struct
 	unsigned long replylen = 0;
 	int retCode = 0;
 
-	DbgPrint("Daemon_CreateSessionId: %d\n", current->pid);
+	DbgPrint("%d", current->pid);
 
 	cmd.Command.CommandType = VFS_COMMAND_CREATE_CONTEXT;
 	cmd.Command.SequenceNumber = 0;
@@ -901,7 +896,7 @@ int novfs_daemon_create_sessionId(struct
 		}
 		kfree(reply);
 	}
-	DbgPrint("Daemon_CreateSessionId: SessionId=0x%llx\n", *SessionId);
+	DbgPrint("SessionId=0x%llx", *SessionId);
 	return (retCode);
 }
 
@@ -912,7 +907,7 @@ int novfs_daemon_destroy_sessionId(struc
 	unsigned long replylen = 0;
 	int retCode = 0;
 
-	DbgPrint("Daemon_DestroySessionId: 0x%p:%p\n", SessionId.hTypeId,
+	DbgPrint("0x%p:%p", SessionId.hTypeId,
 		 SessionId.hId);
 
 	cmd.Command.CommandType = VFS_COMMAND_DESTROY_CONTEXT;
@@ -963,7 +958,7 @@ int novfs_daemon_get_userspace(struct no
 	unsigned long replylen = 0;
 	int retCode = 0;
 
-	DbgPrint("Daemon_Get_UserSpace: 0x%p:%p\n", SessionId.hTypeId,
+	DbgPrint("0x%p:%p", SessionId.hTypeId,
 		 SessionId.hId);
 
 	cmd.Command.CommandType = VFS_COMMAND_GET_USER_SPACE;
@@ -976,10 +971,10 @@ int novfs_daemon_get_userspace(struct no
 	if (reply) {
 		if (!reply->Reply.ErrorCode) {
 
-			DbgPrint("TotalSpace:  %llu\n", reply->TotalSpace);
-			DbgPrint("FreeSpace:   %llu\n", reply->FreeSpace);
-			DbgPrint("TotalEnties: %llu\n", reply->TotalEnties);
-			DbgPrint("FreeEnties:  %llu\n", reply->FreeEnties);
+			__DbgPrint("TotalSpace:  %llu\n", reply->TotalSpace);
+			__DbgPrint("FreeSpace:   %llu\n", reply->FreeSpace);
+			__DbgPrint("TotalEnties: %llu\n", reply->TotalEnties);
+			__DbgPrint("FreeEnties:  %llu\n", reply->FreeEnties);
 
 			if (TotalSize)
 				*TotalSize = reply->TotalSpace;
@@ -1005,7 +1000,7 @@ int novfs_daemon_set_mnt_point(char *Pat
 	unsigned long replylen, cmdlen;
 	int retCode = -ENOMEM;
 
-	DbgPrint("Daemon_SetMountPoint: %s\n", Path);
+	DbgPrint("%s", Path);
 
 	replylen = strlen(Path);
 
@@ -1048,7 +1043,7 @@ int novfs_daemon_debug_cmd_send(char *Co
 
 	int retCode = -ENOMEM;
 
-	DbgPrint("Daemon_SendDebugCmd: %s\n", Command);
+	DbgPrint("%s", Command);
 
 	dlist[0].page = NULL;
 	dlist[0].offset = (char *)Command;
@@ -1132,8 +1127,7 @@ int novfs_daemon_ioctl(struct inode *ino
 
 			switch (data.xfunction) {
 			case NWC_GET_MOUNT_PATH:
-				DbgPrint
-				    ("[Daemon_ioctl] Call NwdGetMountPath\n");
+				DbgPrint("Call NwdGetMountPath");
 				retCode = NwdGetMountPath(&data);
 				break;
 			}
@@ -1152,13 +1146,12 @@ static int daemon_added_resource(struct
 	struct daemon_resource *resource;
 
 	if (FHandle)
-		DbgPrint
-		    ("Daemon_Added_Resource: DHandle=0x%p Type=%d CHandle=0x%p FHandle=0x%x Mode=0x%x Size=%d\n",
-		     DHandle, Type, CHandle, *(u32 *) & FHandle[2], Mode, Size);
+		DbgPrint("DHandle=0x%p Type=%d CHandle=0x%p FHandle=0x%x "
+			 "Mode=0x%x Size=%d", DHandle, Type, CHandle,
+			 *(u32 *) & FHandle[2], Mode, Size);
 	else
-		DbgPrint
-		    ("Daemon_Added_Resource: DHandle=0x%p Type=%d CHandle=0x%p\n",
-		     DHandle, Type, CHandle);
+		DbgPrint("DHandle=0x%p Type=%d CHandle=0x%p\n",
+			 DHandle, Type, CHandle);
 
 	resource = kmalloc(sizeof(struct daemon_resource), GFP_KERNEL);
 	if (!resource)
@@ -1176,8 +1169,7 @@ static int daemon_added_resource(struct
 	write_lock(&DHandle->lock);
 	list_add(&resource->list, &DHandle->list);
 	write_unlock(&DHandle->lock);
-	DbgPrint("Daemon_Added_Resource: Adding resource=0x%p\n",
-			resource);
+	DbgPrint("Adding resource=0x%p", resource);
 	return 0;
 }
 
@@ -1188,9 +1180,8 @@ static int daemon_remove_resource(struct
 	struct list_head *l;
 	int retVal = -ENOMEM;
 
-	DbgPrint
-	    ("Daemon_Remove_Resource: DHandle=0x%p Type=%d CHandle=0x%p FHandle=0x%x\n",
-	     DHandle, Type, CHandle, FHandle);
+	DbgPrint("DHandle=0x%p Type=%d CHandle=0x%p FHandle=0x%x",
+		 DHandle, Type, CHandle, FHandle);
 
 	write_lock(&DHandle->lock);
 
@@ -1199,9 +1190,7 @@ static int daemon_remove_resource(struct
 
 		if ((Type == resource->type) &&
 		    (resource->connection == CHandle)) {
-			DbgPrint
-			    ("Daemon_Remove_Resource: Found resource=0x%p\n",
-			     resource);
+			DbgPrint("Found resource=0x%p", resource);
 			l = l->prev;
 			list_del(&resource->list);
 			kfree(resource);
@@ -1218,7 +1207,7 @@ int novfs_daemon_lib_open(struct inode *
 {
 	struct daemon_handle *dh;
 
-	DbgPrint("Daemon_Library_open: inode=0x%p file=0x%p\n", inode, file);
+	DbgPrint("inode=0x%p file=0x%p", inode, file);
 	dh = kmalloc(sizeof(struct daemon_handle), GFP_KERNEL);
 	if (!dh)
 		return -ENOMEM;
@@ -1241,7 +1230,7 @@ int novfs_daemon_lib_close(struct inode
 	struct nwd_close_conn *nwdClose;
 	unsigned long cmdlen, replylen;
 
-	DbgPrint("Daemon_Library_close: inode=0x%p file=0x%p\n", inode, file);
+	DbgPrint("inode=0x%p file=0x%p", inode, file);
 	if (file->private_data) {
 		dh = (struct daemon_handle *) file->private_data;
 
@@ -1294,8 +1283,7 @@ ssize_t novfs_daemon_lib_read(struct fil
 	size_t thisread, totalread = 0;
 	loff_t offset = *off;
 
-	DbgPrint("Daemon_Library_read: file=0x%p len=%d off=%lld\n", file, len,
-		 *off);
+	DbgPrint("file=0x%p len=%d off=%lld", file, len, *off);
 
 	if (file->private_data) {
 		dh = file->private_data;
@@ -1324,7 +1312,7 @@ ssize_t novfs_daemon_lib_read(struct fil
 		read_unlock(&dh->lock);
 	}
 	*off = offset;
-	DbgPrint("Daemon_Library_read return = 0x%x\n", totalread);
+	DbgPrint("return = 0x%x", totalread);
 	return (totalread);
 }
 
@@ -1338,8 +1326,7 @@ ssize_t novfs_daemon_lib_write(struct fi
 	loff_t offset = *off;
 	int status;
 
-	DbgPrint("Daemon_Library_write: file=0x%p len=%d off=%lld\n", file, len,
-		 *off);
+	DbgPrint("file=0x%p len=%d off=%lld", file, len, *off);
 
 	if (file->private_data) {
 		dh = file->private_data;
@@ -1384,7 +1371,7 @@ ssize_t novfs_daemon_lib_write(struct fi
 		write_unlock(&dh->lock);
 	}
 	*off = offset;
-	DbgPrint("Daemon_Library_write return = 0x%x\n", totalwrite);
+	DbgPrint("return = 0x%x", totalwrite);
 
 	return (totalwrite);
 }
@@ -1396,8 +1383,7 @@ loff_t novfs_daemon_lib_llseek(struct fi
 
 	loff_t retVal = -EINVAL;
 
-	DbgPrint("Daemon_Library_llseek: file=0x%p offset=%lld origin=%d\n",
-		 file, offset, origin);
+	DbgPrint("file=0x%p offset=%lld origin=%d", file, offset, origin);
 
 	if (file->private_data) {
 		dh = file->private_data;
@@ -1426,11 +1412,13 @@ loff_t novfs_daemon_lib_llseek(struct fi
 		read_unlock(&dh->lock);
 	}
 
-	DbgPrint("Daemon_Library_llseek: ret %lld\n", retVal);
+	DbgPrint("ret %lld", retVal);
 
 	return retVal;
 }
 
+#define DbgIocCall(str)		__DbgPrint("[VFS XPLAT] Call " str "\n")
+
 int novfs_daemon_lib_ioctl(struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg)
 {
 	int retCode = -ENOSYS;
@@ -1440,8 +1428,7 @@ int novfs_daemon_lib_ioctl(struct inode
 
 	dh = file->private_data;
 
-	DbgPrint("Daemon_Library_ioctl: file=0x%p 0x%x 0x%p dh=0x%p\n", file,
-		 cmd, arg, dh);
+	DbgPrint("file=0x%p 0x%x 0x%p dh=0x%p", file, cmd, arg, dh);
 
 	if (dh) {
 
@@ -1475,7 +1462,7 @@ int novfs_daemon_lib_ioctl(struct inode
 						    copy_from_user(buf, io.data,
 								   io.length);
 						buf[io.length] = '\0';
-						DbgPrint("%s", buf);
+						__DbgPrint("%s", buf);
 						kfree(buf);
 						retCode = 0;
 					}
@@ -1496,8 +1483,7 @@ int novfs_daemon_lib_ioctl(struct inode
 
 				switch (data.xfunction) {
 				case NWC_OPEN_CONN_BY_NAME:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwOpenConnByName\n");
+					DbgIocCall("NwOpenConnByName");
 					retCode =
 					    novfs_open_conn_by_name(&data,
 						    &handle, dh->session);
@@ -1507,8 +1493,7 @@ int novfs_daemon_lib_ioctl(struct inode
 					break;
 
 				case NWC_OPEN_CONN_BY_ADDRESS:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwOpenConnByAddress\n");
+					DbgIocCall("NwOpenConnByAddress");
 					retCode =
 					    novfs_open_conn_by_addr(&data, &handle,
 							     dh->session);
@@ -1521,8 +1506,7 @@ int novfs_daemon_lib_ioctl(struct inode
 
 				case NWC_OPEN_CONN_BY_REFERENCE:
 
-					DbgPrint
-					    ("[VFS XPLAT] Call NwOpenConnByReference\n");
+					DbgIocCall("NwOpenConnByReference");
 					retCode =
 					    novfs_open_conn_by_ref(&data, &handle,
 							    dh->session);
@@ -1534,15 +1518,14 @@ int novfs_daemon_lib_ioctl(struct inode
 					break;
 
 				case NWC_SYS_CLOSE_CONN:
-					DbgPrint("[VFS XPLAT] Call NwSysCloseConn\n");
+					DbgIocCall("NwSysCloseConn");
 					retCode =
 						novfs_sys_conn_close(&data, (unsigned long *)&handle, dh->session);
 					daemon_remove_resource(dh, DH_TYPE_CONNECTION, handle, 0);
 					break;
 
 				case NWC_CLOSE_CONN:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwCloseConn\n");
+					DbgIocCall("NwCloseConn");
 					retCode =
 					    novfs_conn_close(&data, &handle,
 							dh->session);
@@ -1552,134 +1535,121 @@ int novfs_daemon_lib_ioctl(struct inode
 					break;
 
 				case NWC_LOGIN_IDENTITY:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwLoginIdentity\n");
+					DbgIocCall(""
+						 "NwLoginIdentity");
 					retCode =
 					    novfs_login_id(&data, dh->session);
 					break;
 
 				case NWC_RAW_NCP_REQUEST:
-					DbgPrint
-					    ("[VFS XPLAT] Send Raw NCP Request\n");
+					DbgIocCall("[VFS XPLAT] Send Raw "
+						 "NCP Request");
 					retCode = novfs_raw_send(&data, dh->session);
 					break;
 
 				case NWC_AUTHENTICATE_CONN_WITH_ID:
-					DbgPrint
-					    ("[VFS XPLAT] Authenticate Conn With ID\n");
+					DbgIocCall("[VFS XPLAT] Authenticate "
+						 "Conn With ID");
 					retCode =
 					    novfs_auth_conn(&data,
 							     dh->session);
 					break;
 
 				case NWC_UNAUTHENTICATE_CONN:
-					DbgPrint
-					    ("[VFS XPLAT] UnAuthenticate Conn With ID\n");
+					DbgIocCall("[VFS XPLAT] UnAuthenticate "
+						 "Conn With ID");
 					retCode =
 					    novfs_unauthenticate(&data,
 							     dh->session);
 					break;
 
 				case NWC_LICENSE_CONN:
-					DbgPrint("Call NwLicenseConn\n");
+					DbgIocCall("Call NwLicenseConn");
 					retCode =
 					    novfs_license_conn(&data, dh->session);
 					break;
 
 				case NWC_LOGOUT_IDENTITY:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwLogoutIdentity\n");
+					DbgIocCall("NwLogoutIdentity");
 					retCode =
 					    novfs_logout_id(&data,
 							     dh->session);
 					break;
 
 				case NWC_UNLICENSE_CONN:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwUnlicense\n");
+					DbgIocCall("NwUnlicense");
 					retCode =
 					    novfs_unlicense_conn(&data, dh->session);
 					break;
 
 				case NWC_GET_CONN_INFO:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwGetConnInfo\n");
+					DbgIocCall("NwGetConnInfo");
 					retCode =
 					    novfs_get_conn_info(&data, dh->session);
 					break;
 
 				case NWC_SET_CONN_INFO:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwGetConnInfo\n");
+					DbgIocCall("NwGetConnInfo");
 					retCode =
 					    novfs_set_conn_info(&data, dh->session);
 					break;
 
 				case NWC_SCAN_CONN_INFO:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwScanConnInfo\n");
+					DbgIocCall("NwScanConnInfo");
 					retCode =
 					    novfs_scan_conn_info(&data, dh->session);
 					break;
 
 				case NWC_GET_IDENTITY_INFO:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwGetIdentityInfo\n");
+					DbgIocCall("NwGetIdentityInfo");
 					retCode =
 					    novfs_get_id_info(&data,
 							      dh->session);
 					break;
 
 				case NWC_GET_REQUESTER_VERSION:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwGetDaemonVersion\n");
+					DbgIocCall("NwGetDaemonVersion");
 					retCode =
 					    novfs_get_daemon_ver(&data,
 							       dh->session);
 					break;
 
 				case NWC_GET_PREFERRED_DS_TREE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcGetPreferredDsTree\n");
+					DbgIocCall("NwcGetPreferredDsTree");
 					retCode =
 					    novfs_get_preferred_DS_tree(&data,
 								  dh->session);
 					break;
 
 				case NWC_SET_PREFERRED_DS_TREE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcSetPreferredDsTree\n");
+					DbgIocCall("NwcSetPreferredDsTree");
 					retCode =
 					    novfs_set_preferred_DS_tree(&data,
 								  dh->session);
 					break;
 
 				case NWC_GET_DEFAULT_NAME_CONTEXT:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcGetDefaultNameContext\n");
+					DbgIocCall("NwcGetDefaultNameContext");
 					retCode =
 					    novfs_get_default_ctx(&data,
 								 dh->session);
 					break;
 
 				case NWC_SET_DEFAULT_NAME_CONTEXT:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcSetDefaultNameContext\n");
+					DbgIocCall("NwcSetDefaultNameContext");
 					retCode =
 					    novfs_set_default_ctx(&data,
 								 dh->session);
 					break;
 
 				case NWC_QUERY_FEATURE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwQueryFeature\n");
+					DbgIocCall("NwQueryFeature");
 					retCode =
 					    novfs_query_feature(&data, dh->session);
 					break;
 
 				case NWC_GET_TREE_MONITORED_CONN_REF:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcGetTreeMonitoredConn\n");
+					DbgIocCall("NwcGetTreeMonitoredConn");
 					retCode =
 					    novfs_get_tree_monitored_conn(&data,
 								    dh->
@@ -1687,96 +1657,84 @@ int novfs_daemon_lib_ioctl(struct inode
 					break;
 
 				case NWC_ENUMERATE_IDENTITIES:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcEnumerateIdentities\n");
+					DbgIocCall("NwcEnumerateIdentities");
 					retCode =
 					    novfs_enum_ids(&data,
 							      dh->session);
 					break;
 
 				case NWC_CHANGE_KEY:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcChangeAuthKey\n");
+					DbgIocCall("NwcChangeAuthKey");
 					retCode =
 					    novfs_change_auth_key(&data,
 							     dh->session);
 					break;
 
 				case NWC_CONVERT_LOCAL_HANDLE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwdConvertLocalHandle\n");
+					DbgIocCall("NwdConvertLocalHandle");
 					retCode =
 					    NwdConvertLocalHandle(&data, dh);
 					break;
 
 				case NWC_CONVERT_NETWARE_HANDLE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwdConvertNetwareHandle\n");
+					DbgIocCall("NwdConvertNetwareHandle");
 					retCode =
 					    NwdConvertNetwareHandle(&data, dh);
 					break;
 
 				case NWC_SET_PRIMARY_CONN:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcSetPrimaryConn\n");
+					DbgIocCall("NwcSetPrimaryConn");
 					retCode =
 					    novfs_set_pri_conn(&data,
 							      dh->session);
 					break;
 
 				case NWC_GET_PRIMARY_CONN:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcGetPrimaryConn\n");
+					DbgIocCall("NwcGetPrimaryConn");
 					retCode =
 					    novfs_get_pri_conn(&data,
 							      dh->session);
 					break;
 
 				case NWC_MAP_DRIVE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcMapDrive\n");
+					DbgIocCall("NwcMapDrive");
 					retCode =
 					    set_map_drive(&data, dh->session);
 					break;
 
 				case NWC_UNMAP_DRIVE:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcUnMapDrive\n");
+					DbgIocCall("NwcUnMapDrive");
 					retCode =
 					    unmap_drive(&data, dh->session);
 					break;
 
 				case NWC_ENUMERATE_DRIVES:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwcEnumerateDrives\n");
+					DbgIocCall("NwcEnumerateDrives");
 					retCode =
 					    novfs_enum_drives(&data,
 							       dh->session);
 					break;
 
 				case NWC_GET_MOUNT_PATH:
-					DbgPrint
-					    ("[VFS XPLAT] Call NwdGetMountPath\n");
+					DbgIocCall("NwdGetMountPath");
 					retCode = NwdGetMountPath(&data);
 					break;
 
 				case NWC_GET_BROADCAST_MESSAGE:
-					DbgPrint
-					    ("[VSF XPLAT Call NwdGetBroadcastMessage\n");
+					DbgIocCall("NwdGetBroadcastMessage");
 					retCode =
 					    novfs_get_bcast_msg(&data,
 								   dh->session);
 					break;
 
 				case NWC_SET_KEY:
-					DbgPrint("[VSF XPLAT Call NwdSetKey\n");
+					DbgIocCall("NwdSetKey");
 					retCode =
 					    novfs_set_key_value(&data, dh->session);
 					break;
 
 				case NWC_VERIFY_KEY:
-					DbgPrint
-					    ("[VSF XPLAT Call NwdVerifyKey\n");
+					DbgIocCall("NwdVerifyKey");
 					retCode =
 					    novfs_verify_key_value(&data,
 							      dh->session);
@@ -1819,7 +1777,7 @@ static int NwdConvertNetwareHandle(struc
 	struct nwc_convert_netware_handle nh;
 	unsigned long cpylen;
 
-	DbgPrint("NwdConvertNetwareHandle: DHandle=0x%p\n", DHandle);
+	DbgPrint("DHandle=0x%p", DHandle);
 
 	cpylen =
 	    copy_from_user(&nh, pdata->reqData,
@@ -1842,7 +1800,7 @@ static int NwdConvertLocalHandle(struct
 	struct list_head *l;
 	unsigned long cpylen;
 
-	DbgPrint("NwdConvertLocalHandle: DHandle=0x%p\n", DHandle);
+	DbgPrint("DHandle=0x%p", DHandle);
 
 	read_lock(&DHandle->lock);
 
@@ -1936,8 +1894,7 @@ static int set_map_drive(struct novfs_xp
 		full_name_hash(drivemap->name,
 				symInfo.linkOffsetLength - 1);
 	drivemap->namelen = symInfo.linkOffsetLength - 1;
-	DbgPrint("NwdSetMapDrive: hash=0x%x path=%s\n",
-			drivemap->hash, drivemap->name);
+	DbgPrint("hash=0x%x path=%s", drivemap->hash, drivemap->name);
 
 	dm = (struct drive_map *) & DriveMapList.next;
 
@@ -1945,10 +1902,10 @@ static int set_map_drive(struct novfs_xp
 
 	list_for_each(list, &DriveMapList) {
 		dm = list_entry(list, struct drive_map, list);
-		DbgPrint("NwdSetMapDrive: dm=0x%p\n"
+		__DbgPrint("%s: dm=0x%p\n"
 				"   hash:    0x%x\n"
 				"   namelen: %d\n"
-				"   name:    %s\n",
+				"   name:    %s\n", __func__,
 				dm, dm->hash, dm->namelen, dm->name);
 
 		if (drivemap->hash == dm->hash) {
@@ -2001,8 +1958,7 @@ static int unmap_drive(struct novfs_xpla
 	}
 
 	hash = full_name_hash(path, symInfo.linkLen - 1);
-	DbgPrint("NwdUnMapDrive: hash=0x%x path=%s\n", hash,
-			path);
+	DbgPrint("hash=0x%x path=%s", hash, path);
 
 	dm = NULL;
 
@@ -2010,9 +1966,9 @@ static int unmap_drive(struct novfs_xpla
 
 	list_for_each(list, &DriveMapList) {
 		dm = list_entry(list, struct drive_map, list);
-		DbgPrint("NwdUnMapDrive: dm=0x%p %s\n"
+		__DbgPrint("%s: dm=0x%p %s\n"
 				"   hash:    0x%x\n"
-				"   namelen: %d\n",
+				"   namelen: %d\n", __func__,
 				dm, dm->name, dm->hash, dm->namelen);
 
 		if (hash == dm->hash) {
@@ -2026,9 +1982,9 @@ static int unmap_drive(struct novfs_xpla
 	}
 
 	if (dm) {
-		DbgPrint("NwdUnMapDrive: Remove dm=0x%p %s\n"
+		__DbgPrint("%s: Remove dm=0x%p %s\n"
 				"   hash:    0x%x\n"
-				"   namelen: %d\n",
+				"   namelen: %d\n", __func__,
 				dm, dm->name, dm->hash, dm->namelen);
 		list_del(&dm->list);
 		kfree(dm);
@@ -2047,10 +2003,10 @@ static void RemoveDriveMaps(void)
 	list_for_each(list, &DriveMapList) {
 		dm = list_entry(list, struct drive_map, list);
 
-		DbgPrint("RemoveDriveMap: dm=0x%p\n"
+		__DbgPrint("%s: dm=0x%p\n"
 			 "   hash:    0x%x\n"
 			 "   namelen: %d\n"
-			 "   name:    %s\n",
+			 "   name:    %s\n", __func__,
 			 dm, dm->hash, dm->namelen, dm->name);
 		local_unlink(dm->name);
 		list = list->prev;
@@ -2067,14 +2023,14 @@ static int local_unlink(const char *path
 	struct nameidata nd;
 	struct inode *inode = NULL;
 
-	DbgPrint("local_unlink: %s\n", pathname);
+	DbgPrint("%s", pathname);
 	error = path_lookup(pathname, LOOKUP_PARENT, &nd);
-	DbgPrint("local_unlink: path_lookup %d\n", error);
+	DbgPrint("path_lookup %d", error);
 	if (!error) {
 		error = -EISDIR;
 		if (nd.last_type == LAST_NORM) {
 			dentry = lookup_create(&nd, 1);
-			DbgPrint("local_unlink: lookup_hash 0x%p\n", dentry);
+			DbgPrint("lookup_hash 0x%p", dentry);
 
 			error = PTR_ERR(dentry);
 			if (!IS_ERR(dentry)) {
@@ -2091,9 +2047,7 @@ static int local_unlink(const char *path
 						atomic_inc(&inode->i_count);
 					}
 					error = vfs_unlink(nd.path.dentry->d_inode, dentry);
-					DbgPrint
-					    ("local_unlink: vfs_unlink %d\n",
-					     error);
+					DbgPrint("vfs_unlink %d", error);
 				}
 				dput(dentry);
 			}
@@ -2107,7 +2061,7 @@ static int local_unlink(const char *path
 		iput(inode);	/* truncate the inode here */
 	}
 
-	DbgPrint("local_unlink: error=%d\n", error);
+	DbgPrint("error=%d", error);
 	return error;
 }
 
--- a/fs/novfs/file.c
+++ b/fs/novfs/file.c
@@ -57,24 +57,23 @@ int novfs_get_alltrees(struct dentry *pa
 //sg ???   cmd.SessionId = 0x1234;
 	SC_INITIALIZE(cmd.SessionId);
 
-	DbgPrint("novfs_get_alltrees:\n");
+	DbgPrint("");
 
 	retCode = Queue_Daemon_Command(&cmd, sizeof(cmd), NULL, 0, (void *)&reply, &replylen, INTERRUPTIBLE);
-	DbgPrint("novfs_get_alltrees: relpy=0x%p replylen=%d\n", reply,
-		 replylen);
+	DbgPrint("reply=0x%p replylen=%d", reply, replylen);
 	if (reply) {
 		novfs_dump(replylen, reply);
 		if (!reply->ErrorCode
 		    && (replylen > sizeof(struct novfs_command_reply_header))) {
 			p = (char *)reply + 8;
 			while (*p) {
-				DbgPrint("novfs_get_alltrees: %s\n", p);
+				DbgPrint("%s", p);
 				name.len = strlen(p);
 				name.name = p;
 				name.hash = full_name_hash(name.name, name.len);
 				entry = d_lookup(parent, &name);
 				if (NULL == entry) {
-					DbgPrint("novfs_get_alltrees: adding %s\n", p);
+					DbgPrint("adding %s", p);
 					entry = d_alloc(parent, &name);
 					if (entry) {
 						entry->d_op = &novfs_dentry_operations;
@@ -120,7 +119,7 @@ int novfs_get_servers(unsigned char ** S
 	    Queue_Daemon_Command(&req, sizeof(req), NULL, 0, (void *)&reply,
 				 &replylen, INTERRUPTIBLE);
 	if (reply) {
-		DbgPrint("novfs_Get_Connected_Server_List: reply\n");
+		DbgPrint("reply");
 		replylen -= sizeof(struct novfs_command_reply_header);
 		if (!reply->Reply.ErrorCode && replylen) {
 			memcpy(reply, reply->List, replylen);
@@ -156,7 +155,7 @@ int novfs_get_vols(struct qstr *Server,
 		Queue_Daemon_Command(req, reqlen, NULL, 0, (void *)&reply,
 				&replylen, INTERRUPTIBLE);
 	if (reply) {
-		DbgPrint("novfs_Get_Server_Volume_List: reply\n");
+		DbgPrint("reply");
 		novfs_dump(replylen, reply);
 		replylen -= sizeof(struct novfs_command_reply_header);
 
@@ -182,7 +181,7 @@ int novfs_get_file_info(unsigned char *
 	int retCode = -ENOENT;
 	int pathlen;
 
-	DbgPrint("novfs_Get_File_Info: Path = %s\n", Path);
+	DbgPrint("Path = %s", Path);
 
 	Info->mode = S_IFDIR | 0700;
 	Info->uid = current->uid;
@@ -240,8 +239,7 @@ int novfs_get_file_info(unsigned char *
 					Info->mtime.tv_nsec = 0;
 					Info->ctime.tv_sec = reply->createTime;
 					Info->ctime.tv_nsec = 0;
-					DbgPrint
-					    ("novfs_Get_File_Info: replylen=%d sizeof(VERIFY_FILE_REPLY)=%d\n",
+					DbgPrint("replylen=%d sizeof(VERIFY_FILE_REPLY)=%d",
 					     replylen,
 					     sizeof(struct novfs_verify_file_reply));
 					if (replylen >
@@ -249,9 +247,8 @@ int novfs_get_file_info(unsigned char *
 						unsigned int *lp =
 						    &reply->fileMode;
 						lp++;
-						DbgPrint
-						    ("novfs_Get_File_Info: extra data 0x%x\n",
-						     *lp);
+						DbgPrint("extra data 0x%x",
+							 *lp);
 						Info->mtime.tv_nsec = *lp;
 					}
 					retCode = 0;
@@ -263,7 +260,7 @@ int novfs_get_file_info(unsigned char *
 		}
 	}
 
-	DbgPrint("novfs_Get_File_Info: return 0x%x\n", retCode);
+	DbgPrint("return 0x%x", retCode);
 	return (retCode);
 }
 
@@ -280,9 +277,8 @@ int novfs_getx_file_info(char *Path, con
 	int namelen = strlen(Name);
 	int pathlen = strlen(Path);
 
-	DbgPrint
-	    ("novfs_GetX_File_Info xattr: Path = %s, pathlen = %i, Name = %s, namelen = %i\n",
-	     Path, pathlen, Name, namelen);
+	DbgPrint("xattr: Path = %s, pathlen = %i, Name = %s, namelen = %i",
+		 Path, pathlen, Name, namelen);
 
 	if (namelen > MAX_XATTR_NAME_LEN) {
 		return ENOATTR;
@@ -301,20 +297,16 @@ int novfs_getx_file_info(char *Path, con
 		cmd->nameLen = namelen;
 		memcpy(cmd->data + cmd->pathLen + 1, Name, cmd->nameLen + 1);
 
-		DbgPrint("novfs_GetX_File_Info xattr: PXA_GET_REQUEST BEGIN\n");
-		DbgPrint
-		    ("novfs_GetX_File_Info xattr: Queue_Daemon_Command %d\n",
-		     cmd->Command.CommandType);
-		DbgPrint("novfs_GetX_File_Info xattr: Command.SessionId = %d\n",
+		DbgPrint("xattr: PXA_GET_REQUEST BEGIN");
+		DbgPrint("xattr: Queue_Daemon_Command %d",
+			 cmd->Command.CommandType);
+		DbgPrint("xattr: Command.SessionId = %d",
 			 cmd->Command.SessionId);
-		DbgPrint("novfs_GetX_File_Info xattr: pathLen = %d\n",
-			 cmd->pathLen);
-		DbgPrint("novfs_GetX_File_Info xattr: Path = %s\n", cmd->data);
-		DbgPrint("novfs_GetX_File_Info xattr: nameLen = %d\n",
-			 cmd->nameLen);
-		DbgPrint("novfs_GetX_File_Info xattr: name = %s\n",
-			 (cmd->data + cmd->pathLen + 1));
-		DbgPrint("novfs_GetX_File_Info xattr: PXA_GET_REQUEST END\n");
+		DbgPrint("xattr: pathLen = %d", cmd->pathLen);
+		DbgPrint("xattr: Path = %s", cmd->data);
+		DbgPrint("xattr: nameLen = %d", cmd->nameLen);
+		DbgPrint("xattr: name = %s", (cmd->data + cmd->pathLen + 1));
+		DbgPrint("xattr: PXA_GET_REQUEST END");
 
 		retCode =
 		    Queue_Daemon_Command(cmd, cmdlen, NULL, 0, (void *)&reply,
@@ -323,13 +315,10 @@ int novfs_getx_file_info(char *Path, con
 		if (reply) {
 
 			if (reply->Reply.ErrorCode) {
-				DbgPrint
-				    ("novfs_GetX_File_Info xattr: reply->Reply.ErrorCode=%d, %X\n",
-				     reply->Reply.ErrorCode,
-				     reply->Reply.ErrorCode);
-				DbgPrint
-				    ("novfs_GetX_File_Info xattr: replylen=%d\n",
-				     replylen);
+				DbgPrint("xattr: reply->Reply.ErrorCode=%d, %X",
+					 reply->Reply.ErrorCode,
+					 reply->Reply.ErrorCode);
+				DbgPrint("xattr: replylen=%d", replylen);
 
 				//0xC9 = EA not found (C9), 0xD1 = EA access denied
 				if ((reply->Reply.ErrorCode == 0xC9)
@@ -342,31 +331,26 @@ int novfs_getx_file_info(char *Path, con
 
 				*dataLen =
 				    replylen - sizeof(struct novfs_command_reply_header);
-				DbgPrint
-				    ("novfs_GetX_File_Info xattr: replylen=%u, dataLen=%u\n",
-				     replylen, *dataLen);
+				DbgPrint("xattr: replylen=%u, dataLen=%u",
+					 replylen, *dataLen);
 
 				if (buffer_size >= *dataLen) {
-					DbgPrint
-					    ("novfs_GetX_File_Info xattr: copying to buffer from &reply->pData\n");
+					DbgPrint("xattr: copying to buffer from &reply->pData");
 					memcpy(buffer, &reply->pData, *dataLen);
 
 					retCode = 0;
 				} else {
-					DbgPrint
-					    ("novfs_GetX_File_Info xattr: (!!!) buffer is smaller then reply\n");
+					DbgPrint("xattr: (!!!) buffer is smaller then reply");
 					retCode = -ERANGE;
 				}
-				DbgPrint
-				    ("novfs_GetX_File_Info xattr: /dumping buffer\n");
+				DbgPrint("xattr: /dumping buffer");
 				novfs_dump(*dataLen, buffer);
-				DbgPrint
-				    ("novfs_GetX_File_Info xattr: \\after dumping buffer\n");
+				DbgPrint("xattr: \\after dumping buffer");
 			}
 
 			kfree(reply);
 		} else {
-			DbgPrint("novfs_GetX_File_Info xattr: reply = NULL\n");
+			DbgPrint("xattr: reply = NULL");
 		}
 		kfree(cmd);
 
@@ -388,9 +372,8 @@ int novfs_setx_file_info(char *Path, con
 	int namelen = strlen(Name);
 	int pathlen = strlen(Path);
 
-	DbgPrint
-	    ("novfs_SetX_File_Info xattr: Path = %s, pathlen = %i, Name = %s, namelen = %i, value len = %u\n",
-	     Path, pathlen, Name, namelen, valueLen);
+	DbgPrint("xattr: Path = %s, pathlen = %i, Name = %s, namelen = %i, "
+		 "value len = %u", Path, pathlen, Name, namelen, valueLen);
 
 	if (namelen > MAX_XATTR_NAME_LEN) {
 		return ENOATTR;
@@ -414,22 +397,18 @@ int novfs_setx_file_info(char *Path, con
 		memcpy(cmd->data + cmd->pathLen + 1 + cmd->nameLen + 1, Value,
 		       valueLen);
 
-		DbgPrint("novfs_SetX_File_Info xattr: PXA_SET_REQUEST BEGIN\n");
-		DbgPrint
-		    ("novfs_SetX_File_Info xattr: Queue_Daemon_Command %d\n",
-		     cmd->Command.CommandType);
-		DbgPrint("novfs_SetX_File_Info xattr: Command.SessionId = %d\n",
+		DbgPrint("xattr: PXA_SET_REQUEST BEGIN");
+		DbgPrint("attr: Queue_Daemon_Command %d",
+			 cmd->Command.CommandType);
+		DbgPrint("xattr: Command.SessionId = %d",
 			 cmd->Command.SessionId);
-		DbgPrint("novfs_SetX_File_Info xattr: pathLen = %d\n",
-			 cmd->pathLen);
-		DbgPrint("novfs_SetX_File_Info xattr: Path = %s\n", cmd->data);
-		DbgPrint("novfs_SetX_File_Info xattr: nameLen = %d\n",
-			 cmd->nameLen);
-		DbgPrint("novfs_SetX_File_Info xattr: name = %s\n",
-			 (cmd->data + cmd->pathLen + 1));
+		DbgPrint("xattr: pathLen = %d", cmd->pathLen);
+		DbgPrint("xattr: Path = %s", cmd->data);
+		DbgPrint("xattr: nameLen = %d", cmd->nameLen);
+		DbgPrint("xattr: name = %s", (cmd->data + cmd->pathLen + 1));
 		novfs_dump(valueLen < 16 ? valueLen : 16, (char *)Value);
 
-		DbgPrint("novfs_SetX_File_Info xattr: PXA_SET_REQUEST END\n");
+		DbgPrint("xattr: PXA_SET_REQUEST END");
 
 		retCode =
 		    Queue_Daemon_Command(cmd, cmdlen, NULL, 0, (void *)&reply,
@@ -438,21 +417,17 @@ int novfs_setx_file_info(char *Path, con
 		if (reply) {
 
 			if (reply->Reply.ErrorCode) {
-				DbgPrint
-				    ("novfs_SetX_File_Info xattr: reply->Reply.ErrorCode=%d, %X\n",
-				     reply->Reply.ErrorCode,
-				     reply->Reply.ErrorCode);
-				DbgPrint
-				    ("novfs_SetX_File_Info xattr: replylen=%d\n",
-				     replylen);
+				DbgPrint("xattr: reply->Reply.ErrorCode=%d, %X",
+					 reply->Reply.ErrorCode,
+					 reply->Reply.ErrorCode);
+				DbgPrint("xattr: replylen=%d", replylen);
 
 				retCode = -reply->Reply.ErrorCode;	//-ENOENT;
 			} else {
 
-				DbgPrint
-				    ("novfs_SetX_File_Info xattr: replylen=%u, real len = %u\n",
-				     replylen,
-				     replylen - sizeof(struct novfs_command_reply_header));
+				DbgPrint("xattr: replylen=%u, real len = %u",
+					 replylen,
+					 replylen - sizeof(struct novfs_command_reply_header));
 				memcpy(bytesWritten, &reply->pData,
 				       replylen - sizeof(struct novfs_command_reply_header));
 
@@ -461,7 +436,7 @@ int novfs_setx_file_info(char *Path, con
 
 			kfree(reply);
 		} else {
-			DbgPrint("novfs_SetX_File_Info xattr: reply = NULL\n");
+			DbgPrint("xattr: reply = NULL");
 		}
 		kfree(cmd);
 
@@ -480,8 +455,7 @@ int novfs_listx_file_info(char *Path, ch
 	int retCode = -ENOENT;
 
 	int pathlen = strlen(Path);
-	DbgPrint("novfs_ListX_File_Info xattr: Path = %s, pathlen = %i\n", Path,
-		 pathlen);
+	DbgPrint("xattr: Path = %s, pathlen = %i", Path, pathlen);
 
 	*dataLen = 0;
 	cmdlen = offsetof(struct novfs_verify_file_request, path) + pathlen;
@@ -492,64 +466,53 @@ int novfs_listx_file_info(char *Path, ch
 		cmd->Command.SessionId = SessionId;
 		cmd->pathLen = pathlen;
 		memcpy(cmd->path, Path, cmd->pathLen + 1);	//+ '\0'
-		DbgPrint
-		    ("novfs_ListX_File_Info xattr: PVERIFY_FILE_REQUEST BEGIN\n");
-		DbgPrint
-		    ("novfs_ListX_File_Info xattr: Queue_Daemon_Command %d\n",
+		DbgPrint("xattr: PVERIFY_FILE_REQUEST BEGIN");
+		DbgPrint("xattr: Queue_Daemon_Command %d",
 		     cmd->Command.CommandType);
-		DbgPrint
-		    ("novfs_ListX_File_Info xattr: Command.SessionId = %d\n",
+		DbgPrint("xattr: Command.SessionId = %d",
 		     cmd->Command.SessionId);
-		DbgPrint("novfs_ListX_File_Info xattr: pathLen = %d\n",
-			 cmd->pathLen);
-		DbgPrint("novfs_ListX_File_Info xattr: Path = %s\n", cmd->path);
-		DbgPrint
-		    ("novfs_ListX_File_Info xattr: PVERIFY_FILE_REQUEST END\n");
-
-		retCode =
-		    Queue_Daemon_Command(cmd, cmdlen, NULL, 0, (void *)&reply,
-					 &replylen, INTERRUPTIBLE);
+		DbgPrint("xattr: pathLen = %d", cmd->pathLen);
+		DbgPrint("xattr: Path = %s", cmd->path);
+		DbgPrint("xattr: PVERIFY_FILE_REQUEST END");
+
+		retCode = Queue_Daemon_Command(cmd, cmdlen, NULL, 0,
+					       (void *)&reply, &replylen,
+					       INTERRUPTIBLE);
 
 		if (reply) {
 
 			if (reply->Reply.ErrorCode) {
-				DbgPrint
-				    ("novfs_ListX_File_Info xattr: reply->Reply.ErrorCode=%d, %X\n",
-				     reply->Reply.ErrorCode,
-				     reply->Reply.ErrorCode);
-				DbgPrint
-				    ("novfs_ListX_File_Info xattr: replylen=%d\n",
-				     replylen);
+				DbgPrint("xattr: reply->Reply.ErrorCode=%d, %X",
+					 reply->Reply.ErrorCode,
+					 reply->Reply.ErrorCode);
+				DbgPrint("xattr: replylen=%d", replylen);
 
 				retCode = -ENOENT;
 			} else {
 				*dataLen =
 				    replylen - sizeof(struct novfs_command_reply_header);
-				DbgPrint
-				    ("novfs_ListX_File_Info xattr: replylen=%u, dataLen=%u\n",
-				     replylen, *dataLen);
+				DbgPrint("xattr: replylen=%u, dataLen=%u",
+					 replylen, *dataLen);
 
 				if (buffer_size >= *dataLen) {
-					DbgPrint
-					    ("novfs_ListX_File_Info xattr: copying to buffer from &reply->pData\n");
+					DbgPrint("xattr: copying to buffer "
+						 "from &reply->pData");
 					memcpy(buffer, &reply->pData, *dataLen);
 				} else {
-					DbgPrint
-					    ("novfs_ListX_File_Info xattr: (!!!) buffer is smaller then reply\n");
+					DbgPrint("xattr: (!!!) buffer is "
+						 "smaller then reply\n");
 					retCode = -ERANGE;
 				}
-				DbgPrint
-				    ("novfs_ListX_File_Info xattr: /dumping buffer\n");
+				DbgPrint("xattr: /dumping buffer");
 				novfs_dump(*dataLen, buffer);
-				DbgPrint
-				    ("novfs_ListX_File_Info xattr: \\after dumping buffer\n");
+				DbgPrint("xattr: \\after dumping buffer");
 
 				retCode = 0;
 			}
 
 			kfree(reply);
 		} else {
-			DbgPrint("novfs_ListX_File_Info xattr: reply = NULL\n");
+			DbgPrint("xattr: reply = NULL");
 		}
 		kfree(cmd);
 
@@ -665,8 +628,7 @@ static int directory_enumerate_ex(void *
 		if (!reply->Reply.ErrorCode ||
 		    ((replylen > sizeof(struct novfs_command_reply_header)) &&
 		     (reply->enumCount > 0))) {
-			DbgPrint("directory_enumerate_ex: isize=%d\n",
-				 replylen);
+			DbgPrint("isize=%d", replylen);
 			data =
 			    (struct novfs_enumerate_directory_ex_data *) ((char *)reply +
 							    sizeof
@@ -683,14 +645,12 @@ static int directory_enumerate_ex(void *
 			if (PInfo) {
 				*PInfo = info = kmalloc(isize, GFP_KERNEL);
 				if (*PInfo) {
-					DbgPrint
-					    ("directory_enumerate_ex1: data=0x%p info=0x%p\n",
-					     data, info);
+					DbgPrint("data=0x%p info=0x%p",
+						 data, info);
 					*Count = reply->enumCount;
 					do {
-						DbgPrint
-						    ("directory_enumerate_ex2: data=0x%p length=%d\n",
-						     data);
+						DbgPrint("data=0x%p length=%d",
+							 data);
 
 						info->type = 3;
 						info->mode = S_IRWXU;
@@ -741,9 +701,7 @@ static int directory_enumerate_ex(void *
 							  name[info->
 							       namelength] -
 							  (char *)info);
-						DbgPrint
-						    ("directory_enumerate_ex3: info=0x%p\n",
-						     info);
+						DbgPrint("info=0x%p", info);
 						novfs_dump(replylen, info);
 
 						info =
@@ -1000,8 +958,7 @@ int novfs_read_file(void *Handle, unsign
 	    Queue_Daemon_Command(&cmd, sizeof(cmd), NULL, 0, (void *)&reply,
 				 &replylen, INTERRUPTIBLE);
 
-	DbgPrint("novfs_Read_File: Queue_Daemon_Command 0x%x replylen=%d\n",
-		 retCode, replylen);
+	DbgPrint("Queue_Daemon_Command 0x%x replylen=%d", retCode, replylen);
 
 	if (!retCode) {
 		if (reply->Reply.ErrorCode) {
@@ -1026,7 +983,7 @@ int novfs_read_file(void *Handle, unsign
 		kfree(reply);
 	}
 
-	DbgPrint("novfs_Read_File *Bytes=0x%x retCode=0x%x\n", *Bytes, retCode);
+	DbgPrint("*Bytes=0x%x retCode=0x%x", *Bytes, retCode);
 
 	return (retCode);
 }
@@ -1045,10 +1002,9 @@ int novfs_read_pages(void *Handle, struc
 	len = *Bytes;
 	*Bytes = 0;
 
-	DbgPrint
-	    ("novfs_Read_Pages: Handle=0x%p Dlst=0x%p Dlcnt=%d Bytes=%d Offset=%lld SessionId=0x%p:%p\n",
-	     Handle, DList, DList_Cnt, len, *Offset, SessionId.hTypeId,
-	     SessionId.hId);
+	DbgPrint("Handle=0x%p Dlst=0x%p Dlcnt=%d Bytes=%d Offset=%lld "
+		 "SessionId=0x%p:%p", Handle, DList, DList_Cnt, len, *Offset,
+		 SessionId.hTypeId, SessionId.hId);
 
 	cmd.Command.CommandType = VFS_COMMAND_READ_FILE;
 	cmd.Command.SequenceNumber = 0;
@@ -1070,7 +1026,7 @@ int novfs_read_pages(void *Handle, struc
 	    Queue_Daemon_Command(&cmd, sizeof(cmd), DList, DList_Cnt,
 				 (void *)&reply, &replylen, INTERRUPTIBLE);
 
-	DbgPrint("novfs_Read_Pages: Queue_Daemon_Command 0x%x\n", retCode);
+	DbgPrint("Queue_Daemon_Command 0x%x", retCode);
 
 	if (!retCode) {
 		if (reply) {
@@ -1092,7 +1048,7 @@ int novfs_read_pages(void *Handle, struc
 		kfree(reply);
 	}
 
-	DbgPrint("novfs_Read_Pages: retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 
 	return (retCode);
 }
@@ -1119,7 +1075,7 @@ int novfs_write_file(void *Handle, unsig
 
 	memset(&lreply, 0, sizeof(lreply));
 
-	DbgPrint("novfs_Write_File cmdlen=%ld len=%ld\n", cmdlen, len);
+	DbgPrint("cmdlen=%ld len=%ld", cmdlen, len);
 
 	if ((cmdlen + len) > novfs_max_iosize) {
 		len = novfs_max_iosize - cmdlen;
@@ -1132,7 +1088,7 @@ int novfs_write_file(void *Handle, unsig
 	cmd.len = len;
 	cmd.offset = *Offset;
 
-	DbgPrint("novfs_Write_File cmdlen=%ld len=%ld\n", cmdlen, len);
+	DbgPrint("cmdlen=%ld len=%ld", cmdlen, len);
 
 	npage =
 	    (((unsigned long)Buffer & ~PAGE_MASK) + len +
@@ -1158,7 +1114,7 @@ int novfs_write_file(void *Handle, unsig
 
 	up_read(&current->mm->mmap_sem);
 
-	DbgPrint("novfs_Write_File res=%d\n", res);
+	DbgPrint("res=%d", res);
 
 	if (res > 0) {
 		boff = (unsigned long)Buffer & ~PAGE_MASK;
@@ -1173,12 +1129,12 @@ int novfs_write_file(void *Handle, unsig
 			dlist[0].len = len;
 		}
 
-		DbgPrint("novfs_Write_File0: page=0x%p offset=0x%p len=%d\n",
+		DbgPrint("page=0x%p offset=0x%p len=%d",
 			 dlist[0].page, dlist[0].offset, dlist[0].len);
 
 		boff = dlist[0].len;
 
-		DbgPrint("novfs_Write_File len=%d boff=%d\n", len, boff);
+		DbgPrint("len=%d boff=%d", len, boff);
 
 		for (i = 1; (i < res) && (boff < len); i++) {
 			flush_dcache_page(pages[i]);
@@ -1192,9 +1148,8 @@ int novfs_write_file(void *Handle, unsig
 			dlist[i].rwflag = DLREAD;
 
 			boff += dlist[i].len;
-			DbgPrint
-			    ("novfs_Write_File%d: page=0x%p offset=0x%p len=%d\n",
-			     i, dlist[i].page, dlist[i].offset, dlist[i].len);
+			DbgPrint("%d: page=0x%p offset=0x%p len=%d", i,
+				 dlist[i].page, dlist[i].offset, dlist[i].len);
 		}
 
 		dlist[i].page = NULL;
@@ -1203,8 +1158,7 @@ int novfs_write_file(void *Handle, unsig
 		dlist[i].rwflag = DLWRITE;
 		res++;
 
-		DbgPrint("novfs_Write_File Buffer=0x%p boff=0x%x len=%d\n",
-			 Buffer, boff, len);
+		DbgPrint("Buffer=0x%p boff=0x%x len=%d", Buffer, boff, len);
 
 		retCode =
 		    Queue_Daemon_Command(&cmd, cmdlen, dlist, res,
@@ -1238,7 +1192,7 @@ int novfs_write_file(void *Handle, unsig
 		}
 	}
 
-	DbgPrint("novfs_Write_File retCode=0x%x reply=0x%p\n", retCode, reply);
+	DbgPrint("retCode=0x%x reply=0x%p", retCode, reply);
 
 	if (!retCode) {
 		switch (lreply.Reply.ErrorCode) {
@@ -1272,7 +1226,7 @@ int novfs_write_file(void *Handle, unsig
 	kfree(pages);
 	kfree(dlist);
 
-	DbgPrint("novfs_Write_File *Bytes=0x%x retCode=0x%x\n", *Bytes,
+	DbgPrint("*Bytes=0x%x retCode=0x%x", *Bytes,
 		 retCode);
 
 	return (retCode);
@@ -1299,9 +1253,8 @@ int novfs_write_page(void *Handle, struc
 	int retCode = 0, cmdlen;
 	struct novfs_data_list dlst[2];
 
-	DbgPrint
-	    ("novfs_Write_Page: Handle=0x%p Page=0x%p Index=%lu SessionId=0x%llx\n",
-	     Handle, Page, Page->index, SessionId);
+	DbgPrint("Handle=0x%p Page=0x%p Index=%lu SessionId=0x%llx",
+		 Handle, Page, Page->index, SessionId);
 
 	dlst[0].page = NULL;
 	dlst[0].offset = &lreply;
@@ -1353,7 +1306,7 @@ int novfs_write_page(void *Handle, struc
 		kfree(reply);
 	}
 
-	DbgPrint("novfs_Write_Page retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 
 	return (retCode);
 }
@@ -1368,9 +1321,9 @@ int novfs_write_pages(void *Handle, stru
 	int retCode = 0, cmdlen;
 	size_t len;
 
-	DbgPrint
-	    ("novfs_Write_Pages: Handle=0x%p Dlst=0x%p Dlcnt=%d Bytes=%d Offset=%lld SessionId=0x%llx\n",
-	     Handle, DList, DList_Cnt, Bytes, Offset, SessionId);
+	DbgPrint("Handle=0x%p Dlst=0x%p Dlcnt=%d Bytes=%d Offset=%lld "
+		 "SessionId=0x%llx\n", Handle, DList, DList_Cnt, Bytes,
+		 Offset, SessionId);
 
 	DList[0].page = NULL;
 	DList[0].offset = &lreply;
@@ -1419,7 +1372,7 @@ int novfs_write_pages(void *Handle, stru
 			kfree(reply);
 		}
 	}
-	DbgPrint("novfs_Write_Pages retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 
 	return (retCode);
 }
@@ -1457,8 +1410,7 @@ int novfs_read_stream(void *ConnHandle,
 	    Queue_Daemon_Command(&cmd, sizeof(cmd), NULL, 0, (void *)&reply,
 				 &replylen, INTERRUPTIBLE);
 
-	DbgPrint("novfs_Read_Stream: Queue_Daemon_Command 0x%x replylen=%d\n",
-		 retCode, replylen);
+	DbgPrint("Queue_Daemon_Command 0x%x replylen=%d", retCode, replylen);
 
 	if (reply) {
 		retCode = 0;
@@ -1482,8 +1434,7 @@ int novfs_read_stream(void *ConnHandle,
 		kfree(reply);
 	}
 
-	DbgPrint("novfs_Read_Stream *Bytes=0x%x retCode=0x%x\n", *Bytes,
-		 retCode);
+	DbgPrint("*Bytes=0x%x retCode=0x%x", *Bytes, retCode);
 
 	return (retCode);
 }
@@ -1507,7 +1458,7 @@ int novfs_write_stream(void *ConnHandle,
 				novfs_write_stream_request, data);
 	}
 
-	DbgPrint("novfs_Write_Stream cmdlen=%d len=%d\n", cmdlen, len);
+	DbgPrint("cmdlen=%d len=%d", cmdlen, len);
 
 	cmd = kmalloc(cmdlen, GFP_KERNEL);
 
@@ -1516,7 +1467,7 @@ int novfs_write_stream(void *ConnHandle,
 			len -= copy_from_user(cmd->data, Buffer, len);
 		}
 
-		DbgPrint("novfs_Write_Stream len=%d\n", len);
+		DbgPrint("len=%d", len);
 
 		cmd->Command.CommandType = VFS_COMMAND_WRITE_STREAM;
 		cmd->Command.SequenceNumber = 0;
@@ -1548,16 +1499,14 @@ int novfs_write_stream(void *ConnHandle,
 				retCode = -EIO;
 				break;
 			}
-			DbgPrint
-			    ("novfs_Write_Stream reply->bytesWritten=0x%lx\n",
+			DbgPrint("reply->bytesWritten=0x%lx",
 			     reply->bytesWritten);
 			*Bytes = reply->bytesWritten;
 			kfree(reply);
 		}
 		kfree(cmd);
 	}
-	DbgPrint("novfs_Write_Stream *Bytes=0x%x retCode=0x%x\n", *Bytes,
-		 retCode);
+	DbgPrint("*Bytes=0x%x retCode=0x%x", *Bytes, retCode);
 
 	return (retCode);
 }
@@ -1682,8 +1631,7 @@ int novfs_trunc_ex(void *Handle, loff_t
 	unsigned long replylen = 0;
 	int retCode = 0, cmdlen;
 
-	DbgPrint("novfs_Truncate_File_Ex Handle=0x%p Offset=%lld\n", Handle,
-		 Offset);
+	DbgPrint("Handle=0x%p Offset=%lld", Handle, Offset);
 
 	cmdlen = offsetof(struct novfs_write_file_request, data);
 
@@ -1698,8 +1646,7 @@ int novfs_trunc_ex(void *Handle, loff_t
 	    Queue_Daemon_Command(&cmd, cmdlen, NULL, 0, (void *)&reply,
 				 &replylen, INTERRUPTIBLE);
 
-	DbgPrint("novfs_Truncate_File_Ex retCode=0x%x reply=0x%p\n", retCode,
-		 reply);
+	DbgPrint("retCode=0x%x reply=0x%p", retCode, reply);
 
 	if (!retCode) {
 		switch (reply->Reply.ErrorCode) {
@@ -1729,7 +1676,7 @@ int novfs_trunc_ex(void *Handle, loff_t
 		kfree(reply);
 	}
 
-	DbgPrint("novfs_Truncate_File_Ex retCode=%d\n", retCode);
+	DbgPrint("retCode=%d", retCode);
 
 	return (retCode);
 }
@@ -1743,11 +1690,11 @@ int novfs_rename_file(int DirectoryFlag,
 	unsigned long replylen = 0;
 	int retCode;
 
-	DbgPrint("novfs_Rename_File:\n"
+	__DbgPrint("%s:\n"
 		 "   DirectoryFlag: %d\n"
 		 "   OldName:       %.*s\n"
 		 "   NewName:       %.*s\n"
-		 "   SessionId:     0x%llx\n",
+		 "   SessionId:     0x%llx\n", __func__,
 		 DirectoryFlag, OldLen, OldName, NewLen, NewName, SessionId);
 
 	cmd.Command.CommandType = VFS_COMMAND_RENAME_FILE;
@@ -1859,7 +1806,7 @@ int novfs_get_file_cache_flag(unsigned c
 	int retCode = 0;
 	int pathlen;
 
-	DbgPrint("novfs_Get_File_Cache_Flag: Path = %s\n", Path);
+	DbgPrint("Path = %s", Path);
 
 	if (Path && *Path) {
 		pathlen = strlen(Path);
@@ -1894,7 +1841,7 @@ int novfs_get_file_cache_flag(unsigned c
 		}
 	}
 
-	DbgPrint("novfs_Get_File_Cache_Flag: return %d\n", retCode);
+	DbgPrint("return %d", retCode);
 	return (retCode);
 }
 
@@ -1915,14 +1862,13 @@ int novfs_set_file_lock(struct novfs_sch
 
 	retCode = -1;
 
-	DbgPrint("novfs_Set_File_Lock:\n"
-		 "   SessionId:     0x%llx\n", SessionId);
+	DbgPrint("SessionId:     0x%llx\n", SessionId);
 
 	cmd =
 	    (struct novfs_set_file_lock_request *) kmalloc(sizeof(struct novfs_set_file_lock_request), GFP_KERNEL);
 
 	if (cmd) {
-		DbgPrint("novfs_Set_File_Lock 2\n");
+		DbgPrint("2");
 
 		cmd->Command.CommandType = VFS_COMMAND_SET_FILE_LOCK;
 		cmd->Command.SequenceNumber = 0;
@@ -1939,33 +1885,27 @@ int novfs_set_file_lock(struct novfs_sch
 		cmd->fl_start = fl_start;
 		cmd->fl_len = fl_len;
 
-		DbgPrint("novfs_Set_File_Lock 3\n");
+		DbgPrint("3");
 
-		DbgPrint("novfs_Set_File_Lock: BEGIN dump arguments\n");
-		DbgPrint("novfs_Set_File_Lock: Queue_Daemon_Command %d\n",
+		DbgPrint("BEGIN dump arguments");
+		DbgPrint("Queue_Daemon_Command %d",
 			 cmd->Command.CommandType);
-		DbgPrint("novfs_Set_File_Lock: cmd->handle   = 0x%p\n",
-			 cmd->handle);
-		DbgPrint("novfs_Set_File_Lock: cmd->fl_type  = %u\n",
-			 cmd->fl_type);
-		DbgPrint("novfs_Set_File_Lock: cmd->fl_start = 0x%X\n",
-			 cmd->fl_start);
-		DbgPrint("novfs_Set_File_Lock: cmd->fl_len   = 0x%X\n",
-			 cmd->fl_len);
-		DbgPrint
-		    ("novfs_Set_File_Lock: sizeof(SET_FILE_LOCK_REQUEST) = %u\n",
+		DbgPrint("cmd->handle   = 0x%p", cmd->handle);
+		DbgPrint("cmd->fl_type  = %u", cmd->fl_type);
+		DbgPrint("cmd->fl_start = 0x%X", cmd->fl_start);
+		DbgPrint("cmd->fl_len   = 0x%X", cmd->fl_len);
+		DbgPrint("sizeof(SET_FILE_LOCK_REQUEST) = %u",
 		     sizeof(struct novfs_set_file_lock_request));
-		DbgPrint("novfs_Set_File_Lock: END dump arguments\n");
+		DbgPrint("END dump arguments");
 
 		retCode =
 		    Queue_Daemon_Command(cmd, sizeof(struct novfs_set_file_lock_request),
 					 NULL, 0, (void *)&reply, &replylen,
 					 INTERRUPTIBLE);
-		DbgPrint("novfs_Set_File_Lock 4\n");
+		DbgPrint("4");
 
 		if (reply) {
-			DbgPrint("novfs_Set_File_Lock 5, ErrorCode = %X\n",
-				 reply->Reply.ErrorCode);
+			DbgPrint("5, ErrorCode = %X", reply->Reply.ErrorCode);
 
 			if (reply->Reply.ErrorCode) {
 				retCode = reply->Reply.ErrorCode;
@@ -1975,7 +1915,7 @@ int novfs_set_file_lock(struct novfs_sch
 		kfree(cmd);
 	}
 
-	DbgPrint("novfs_Set_File_Lock 6\n");
+	DbgPrint("6");
 
 	return (retCode);
 }
--- a/fs/novfs/inode.c
+++ b/fs/novfs/inode.c
@@ -319,39 +319,39 @@ struct file_private {
 
 static void PRINT_DENTRY(const char *s, struct dentry *d)
 {
-	DbgPrint("%s: 0x%p\n", s, d);
-	DbgPrint("   d_count:      0x%x\n", d->d_count);
-	DbgPrint("   d_lock:       0x%x\n", d->d_lock);
-	DbgPrint("   d_inode:      0x%x\n", d->d_inode);
-	DbgPrint("   d_lru:        0x%p\n"
-		 "      next:      0x%p\n"
-		 "      prev:      0x%p\n", &d->d_lru, d->d_lru.next,
-		 d->d_lru.prev);
-	DbgPrint("   d_child:      0x%p\n" "      next:      0x%p\n"
-		 "      prev:      0x%p\n", &d->d_u.d_child,
-		 d->d_u.d_child.next, d->d_u.d_child.prev);
-	DbgPrint("   d_subdirs:    0x%p\n" "      next:      0x%p\n"
-		 "      prev:      0x%p\n", &d->d_subdirs, d->d_subdirs.next,
-		 d->d_subdirs.prev);
-	DbgPrint("   d_alias:      0x%p\n" "      next:      0x%p\n"
-		 "      prev:      0x%p\n", &d->d_alias, d->d_alias.next,
-		 d->d_alias.prev);
-	DbgPrint("   d_time:       0x%x\n", d->d_time);
-	DbgPrint("   d_op:         0x%p\n", d->d_op);
-	DbgPrint("   d_sb:         0x%p\n", d->d_sb);
-	DbgPrint("   d_flags:      0x%x\n", d->d_flags);
-	DbgPrint("   d_mounted:    0x%x\n", d->d_mounted);
-	DbgPrint("   d_fsdata:     0x%p\n", d->d_fsdata);
+	__DbgPrint("%s: 0x%p\n", s, d);
+	__DbgPrint("   d_count:      0x%x\n", d->d_count);
+	__DbgPrint("   d_lock:       0x%x\n", d->d_lock);
+	__DbgPrint("   d_inode:      0x%x\n", d->d_inode);
+	__DbgPrint("   d_lru:        0x%p\n"
+		   "      next:      0x%p\n"
+		   "      prev:      0x%p\n", &d->d_lru, d->d_lru.next,
+		   d->d_lru.prev);
+	__DbgPrint("   d_child:      0x%p\n" "      next:      0x%p\n"
+		   "      prev:      0x%p\n", &d->d_u.d_child,
+		   d->d_u.d_child.next, d->d_u.d_child.prev);
+	__DbgPrint("   d_subdirs:    0x%p\n" "      next:      0x%p\n"
+		   "      prev:      0x%p\n", &d->d_subdirs, d->d_subdirs.next,
+		   d->d_subdirs.prev);
+	__DbgPrint("   d_alias:      0x%p\n" "      next:      0x%p\n"
+		   "      prev:      0x%p\n", &d->d_alias, d->d_alias.next,
+		   d->d_alias.prev);
+	__DbgPrint("   d_time:       0x%x\n", d->d_time);
+	__DbgPrint("   d_op:         0x%p\n", d->d_op);
+	__DbgPrint("   d_sb:         0x%p\n", d->d_sb);
+	__DbgPrint("   d_flags:      0x%x\n", d->d_flags);
+	__DbgPrint("   d_mounted:    0x%x\n", d->d_mounted);
+	__DbgPrint("   d_fsdata:     0x%p\n", d->d_fsdata);
 /*   DbgPrint("   d_cookie:     0x%x\n", d->d_cookie); */
-	DbgPrint("   d_parent:     0x%p\n", d->d_parent);
-	DbgPrint("   d_name:       0x%p %.*s\n", &d->d_name, d->d_name.len,
-		 d->d_name.name);
-	DbgPrint("      name:      0x%p\n" "      len:       %d\n"
-		 "      hash:      0x%x\n", d->d_name.name, d->d_name.len,
-		 d->d_name.hash);
-	DbgPrint("   d_hash:       0x%x\n" "      next:      0x%x\n"
-		 "      pprev:     0x%x\n", d->d_hash, d->d_hash.next,
-		 d->d_hash.pprev);
+	__DbgPrint("   d_parent:     0x%p\n", d->d_parent);
+	__DbgPrint("   d_name:       0x%p %.*s\n", &d->d_name, d->d_name.len,
+		   d->d_name.name);
+	__DbgPrint("      name:      0x%p\n" "      len:       %d\n"
+		   "      hash:      0x%x\n", d->d_name.name, d->d_name.len,
+		   d->d_name.hash);
+	__DbgPrint("   d_hash:       0x%x\n" "      next:      0x%x\n"
+		   "      pprev:     0x%x\n", d->d_hash, d->d_hash.next,
+		   d->d_hash.pprev);
 }
 
 /*++======================================================================*/
@@ -361,7 +361,7 @@ int novfs_remove_from_root(char *RemoveN
 	struct dentry *dentry;
 	struct inode *dir;
 
-	DbgPrint("novfs_Remove_from_Root: %s\n", RemoveName);
+	DbgPrint("%s", RemoveName);
 	name.len = strlen(RemoveName);
 	name.name = RemoveName;
 	novfs_d_hash(novfs_root, &name);
@@ -393,7 +393,7 @@ int novfs_add_to_root(char *AddName)
 	struct novfs_entry_info info;
 	ino_t ino;
 
-	DbgPrint("novfs_Add_to_Root: %s\n", AddName);
+	DbgPrint("%s", AddName);
 	name.len = strlen(AddName);
 	name.name = AddName;
 	novfs_d_hash(novfs_root, &name);
@@ -426,19 +426,19 @@ int novfs_Add_to_Root2(char *AddName)
 	struct inode *inode;
 	void *scope;
 
-	DbgPrint("novfs_Add_to_Root: %s\n", AddName);
+	DbgPrint("%s", AddName);
 	name.len = strlen(AddName);
 	name.name = AddName;
 
 	novfs_d_hash(novfs_root, &name);
 
 	entry = d_lookup(novfs_root, &name);
-	DbgPrint("novfs_Add_to_Root: novfs_d_lookup 0x%p\n", entry);
+	DbgPrint("novfs_d_lookup 0x%p", entry);
 	if (NULL == entry) {
 		scope = novfs_scope_lookup();
 
 		entry = d_alloc(novfs_root, &name);
-		DbgPrint("novfs_Add_to_Root: d_alloc 0x%p\n", entry);
+		DbgPrint("d_alloc 0x%p", entry);
 		if (entry) {
 			entry->d_op = &novfs_dentry_operations;
 			entry->d_time = jiffies + (novfs_update_timeout * HZ);
@@ -447,7 +447,7 @@ int novfs_Add_to_Root2(char *AddName)
 			 */
 			inode =
 			    novfs_get_inode(novfs_root->d_sb, S_IFDIR | 0700, 0, novfs_scope_get_uid(scope), 0, &name);
-			DbgPrint("novfs_Add_to_Root: Inode=0x%p\n", inode);
+			DbgPrint("Inode=0x%p", inode);
 			if (inode) {
 				inode->i_atime =
 				    inode->i_ctime =
@@ -499,7 +499,7 @@ char *novfs_dget_path(struct dentry *Den
 	}
 
 	if (retval)
-		DbgPrint("novfs_dget_path: %s\n", retval);
+		DbgPrint("%s", retval);
 	return (retval);
 }
 
@@ -519,7 +519,7 @@ int verify_dentry(struct dentry *dentry,
 	struct inode *inode;
 
 	if (IS_ROOT(dentry)) {
-		DbgPrint("verify_dentry: Root entry\n");
+		DbgPrint("Root entry");
 		return (0);
 	}
 
@@ -576,7 +576,7 @@ int verify_dentry(struct dentry *dentry,
 			retVal = 0;
 
 			if (IS_ROOT(dentry->d_parent)) {
-				DbgPrint("verify_dentry: parent is Root directory\n");
+				DbgPrint("parent is Root directory");
 				list = novfs_get_scopeusers();
 
 				iLock = novfs_lock_inode_cache(dir);
@@ -694,7 +694,7 @@ int verify_dentry(struct dentry *dentry,
 	if (info)
 		kfree(info);
 
-	DbgPrint("verify_dentry: return=0x%x\n", retVal);
+	DbgPrint("return=0x%x", retVal);
 
 	return (retVal);
 }
@@ -711,7 +711,7 @@ static int novfs_d_add(struct dentry *Pa
 	if (buf) {
 		path = novfs_dget_path(d, buf, PATH_LENGTH_BUFFER);
 		if (path) {
-			DbgPrint("novfs_d_add: inode=0x%p ino=%d path %s\n", i,
+			DbgPrint("inode=0x%p ino=%d path %s", i,
 				 i->i_ino, path);
 		}
 		kfree(buf);
@@ -746,9 +746,9 @@ int novfs_d_revalidate(struct dentry *de
 	struct inode_data *id;
 	struct qstr name;
 
-	DbgPrint("novfs_d_revalidate: 0x%p %.*s\n"
-		 "   d_count: %d\n"
-		 "   d_inode: 0x%p\n",
+	__DbgPrint("%s: 0x%p %.*s\n"
+		   "   d_count: %d\n"
+		   "   d_inode: 0x%p\n", __func__,
 		 dentry, dentry->d_name.len, dentry->d_name.name,
 		 dentry->d_count, dentry->d_inode);
 
@@ -799,7 +799,7 @@ int novfs_d_revalidate(struct dentry *de
 */
 	}
 
-	DbgPrint("novfs_d_revalidate: return 0x%x %.*s\n", retCode,
+	DbgPrint("return 0x%x %.*s", retCode,
 		 dentry->d_name.len, dentry->d_name.name);
 
 	return (retCode);
@@ -823,7 +823,7 @@ static unsigned long novfs_internal_hash
 
 int novfs_d_hash(struct dentry *dentry, struct qstr *name)
 {
-	DbgPrint("novfs_d_hash: %.*s\n", name->len, name->name);
+	DbgPrint("%.*s", name->len, name->name);
 
 	name->hash = novfs_internal_hash(name);
 
@@ -836,7 +836,7 @@ int novfs_d_strcmp(struct qstr *s1, stru
 	unsigned char *str1, *str2;
 	unsigned int len;
 
-	DbgPrint("novfs_d_strcmp: s1=%.*s s2=%.*s\n", s1->len, s1->name,
+	DbgPrint("s1=%.*s s2=%.*s", s1->len, s1->name,
 		 s2->len, s2->name);
 
 	if (s1->len && (s1->len == s2->len) && (s1->hash == s2->hash)) {
@@ -853,7 +853,7 @@ int novfs_d_strcmp(struct qstr *s1, stru
 		}
 	}
 
-	DbgPrint("novfs_d_strcmp: retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 	return (retCode);
 }
 
@@ -863,7 +863,7 @@ int novfs_d_compare(struct dentry *paren
 
 	retCode = novfs_d_strcmp(s1, s2);
 
-	DbgPrint("novfs_d_compare: retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 	return (retCode);
 }
 
@@ -871,9 +871,7 @@ int novfs_d_delete(struct dentry *dentry
 {
 	int retVal = 0;
 
-	DbgPrint("novfs_d_delete: 0x%p %.*s\n"
-		 "   d_count: %d\n"
-		 "   d_inode: 0x%p\n",
+	DbgPrint("0x%p %.*s; d_count: %d; d_inode: 0x%p",
 		 dentry, dentry->d_name.len, dentry->d_name.name,
 		 dentry->d_count, dentry->d_inode);
 
@@ -888,14 +886,13 @@ int novfs_d_delete(struct dentry *dentry
 
 void novfs_d_release(struct dentry *dentry)
 {
-	DbgPrint("novfs_d_release: 0x%p %.*s\n", dentry, dentry->d_name.len,
+	DbgPrint("0x%p %.*s", dentry, dentry->d_name.len,
 		 dentry->d_name.name);
 }
 
 void novfs_d_iput(struct dentry *dentry, struct inode *inode)
 {
-	DbgPrint
-	    ("novfs_d_iput: Inode=0x%p Ino=%d Dentry=0x%p i_state=%d Name=%.*s\n",
+	DbgPrint("Inode=0x%p Ino=%d Dentry=0x%p i_state=%d Name=%.*s",
 	     inode, inode->i_ino, dentry, inode->i_state, dentry->d_name.len,
 	     dentry->d_name.name);
 
@@ -908,14 +905,14 @@ int novfs_dir_open(struct inode *dir, st
 	char *path, *buf;
 	struct file_private *file_private = NULL;
 
-	DbgPrint("novfs_dir_open: Inode 0x%p %d Name %.*s\n", dir, dir->i_ino,
+	DbgPrint("Inode 0x%p %d Name %.*s", dir, dir->i_ino,
 		 file->f_dentry->d_name.len, file->f_dentry->d_name.name);
 
 	buf = kmalloc(PATH_LENGTH_BUFFER, GFP_KERNEL);
 	if (buf) {
 		path = novfs_dget_path(file->f_dentry, buf, PATH_LENGTH_BUFFER);
 		if (path) {
-			DbgPrint("novfs_dir_open: path %s\n", path);
+			DbgPrint("path %s", path);
 		}
 		kfree(buf);
 	}
@@ -935,9 +932,8 @@ int novfs_dir_release(struct inode *dir,
 	struct inode *inode = file->f_dentry->d_inode;
 	struct novfs_schandle sessionId;
 
-	DbgPrint("novfs_dir_release: Inode 0x%p %d Name %.*s\n", dir,
-		 dir->i_ino, file->f_dentry->d_name.len,
-		 file->f_dentry->d_name.name);
+	DbgPrint("Inode 0x%p %d Name %.*s", dir, dir->i_ino,
+		 file->f_dentry->d_name.len, file->f_dentry->d_name.name);
 
 	if (file_private) {
 		if (file_private->enumHandle && (file_private->enumHandle != ((void *)-1))) {
@@ -959,7 +955,7 @@ loff_t novfs_dir_lseek(struct file * fil
 {
 	struct file_private *file_private = NULL;
 
-	DbgPrint("novfs_dir_lseek: offset %lld %d Name %.*s\n", offset, origin,
+	DbgPrint("offset %lld %d Name %.*s", offset, origin,
 		 file->f_dentry->d_name.len, file->f_dentry->d_name.name);
 	//printk("<1> seekdir file = %.*s offset = %i\n", file->f_dentry->d_name.len, file->f_dentry->d_name.name, (int)offset);
 
@@ -992,7 +988,7 @@ ssize_t novfs_dir_read(struct file * fil
 /*
    int rlen = 0;
 
-   DbgPrint("novfs_dir_readdir: dentry path %.*s buf=0x%p len=%d off=%lld\n", file->f_dentry->d_name.len, file->f_dentry->d_name.name, buf, len, *off);
+   DbgPrint("dentry path %.*s buf=0x%p len=%d off=%lld", file->f_dentry->d_name.len, file->f_dentry->d_name.name, buf, len, *off);
 
    if (0 == *off)
    {
@@ -1002,7 +998,7 @@ ssize_t novfs_dir_read(struct file * fil
    }
    return(rlen);
 */
-	DbgPrint("novfs_dir_read: %lld %d Name %.*s\n", *off, len,
+	DbgPrint("%lld %d Name %.*s", *off, len,
 		 file->f_dentry->d_name.len, file->f_dentry->d_name.name);
 	return (generic_read_dir(file, buf, len, off));
 }
@@ -1014,7 +1010,7 @@ static void novfs_Dump_Info(struct novfs
 	int len = 0;
 
 	if (info == NULL) {
-		DbgPrint("novfs_dir_readdir : Dump_Info info == NULL\n");
+		DbgPrint("Dump_Info info == NULL");
 		return;
 	}
 
@@ -1030,16 +1026,16 @@ static void novfs_Dump_Info(struct novfs
 	ctime_r(&info->atime.tv_sec, atime_buf);
 	ctime_r(&info->mtime.tv_sec, mtime_buf);
 	ctime_r(&info->ctime.tv_sec, ctime_buf);
-	DbgPrint("novfs_dir_readdir : type = %i\n", info->type);
-	DbgPrint("novfs_dir_readdir : mode = %x\n", info->mode);
-	DbgPrint("novfs_dir_readdir : uid = %d\n", info->uid);
-	DbgPrint("novfs_dir_readdir : gid = %d\n", info->gid);
-	DbgPrint("novfs_dir_readdir : size = %i\n", info->size);
-	DbgPrint("novfs_dir_readdir : atime = %s\n", atime_buf);
-	DbgPrint("novfs_dir_readdir : mtime = %s\n", mtime_buf);
-	DbgPrint("novfs_dir_readdir : ctime = %s\n", ctime_buf);
-	DbgPrint("novfs_dir_readdir : namelength = %i\n", info->namelength);
-	DbgPrint("novfs_dir_readdir : name = %s\n", namebuf);
+	DbgPrint("type = %i", info->type);
+	DbgPrint("mode = %x", info->mode);
+	DbgPrint("uid = %d", info->uid);
+	DbgPrint("gid = %d", info->gid);
+	DbgPrint("size = %i", info->size);
+	DbgPrint("atime = %s", atime_buf);
+	DbgPrint("mtime = %s", mtime_buf);
+	DbgPrint("ctime = %s", ctime_buf);
+	DbgPrint("namelength = %i", info->namelength);
+	DbgPrint("name = %s", namebuf);
 }
 
 void processList(struct file *file, void *dirent, filldir_t filldir, char *list,
@@ -1064,8 +1060,7 @@ void processList(struct file *file, void
 		cp = list;
 		while (*cp) {
 			name.name = cp;
-			DbgPrint("novfs_dir_readdir : name.name = %s\n",
-				 name.name);
+			DbgPrint("name.name = %s", name.name);
 			name.len = strlen(cp);
 			name.hash = novfs_internal_hash(&name);
 			cp += (name.len + 1);
@@ -1151,7 +1146,7 @@ int novfs_dir_readdir(struct file *file,
 	int lComm;
 
 	file_private = (struct file_private *) file->private_data;
-	DbgPrint("novfs_dir_readdir: Name %.*s\n", file->f_dentry->d_name.len,
+	DbgPrint("Name %.*s", file->f_dentry->d_name.len,
 		 file->f_dentry->d_name.name);
 
 	//printk("<1> file = %.*s\n", file->f_dentry->d_name.len, file->f_dentry->d_name.name);
@@ -1234,17 +1229,15 @@ int novfs_dir_readdir(struct file *file,
 	    IS_ROOT(file->f_dentry->d_parent->d_parent))	// Server
 	{
 		if (IS_ROOT(file->f_dentry)) {
-			DbgPrint("novfs_dir_readdir: Root directory\n");
+			DbgPrint("Root directory");
 			list = novfs_get_scopeusers();
 			type = USER_LIST;
 		} else if (IS_ROOT(file->f_dentry->d_parent)) {
-			DbgPrint
-			    ("novfs_dir_readdir: Parent is Root directory\n");
+			DbgPrint("Parent is Root directory");
 			novfs_get_servers(&list, sessionId);
 			type = SERVER_LIST;
 		} else {
-			DbgPrint
-			    ("novfs_dir_readdir: Parent-Parent is Root directory\n");
+			DbgPrint("Parent-Parent is Root directory");
 			novfs_get_vols(&file->f_dentry->d_name,
 						     &list, sessionId);
 			type = VOLUME_LIST;
@@ -1286,7 +1279,7 @@ int novfs_dir_readdir(struct file *file,
 
 int novfs_dir_fsync(struct file *file, struct dentry *dentry, int datasync)
 {
-	DbgPrint("novfs_dir_fsync: Name %.*s\n", file->f_dentry->d_name.len,
+	DbgPrint("Name %.*s", file->f_dentry->d_name.len,
 		 file->f_dentry->d_name.name);
 	return (simple_sync_file(file, dentry, datasync));
 }
@@ -1303,7 +1296,7 @@ ssize_t novfs_f_read(struct file * file,
 	    (inode = file->f_dentry->d_inode) &&
 	    (id = (struct inode_data *) inode->i_private)) {
 
-		DbgPrint("novfs_f_read(0x%p 0x%p %d %lld %.*s)\n",
+		DbgPrint("(0x%p 0x%p %d %lld %.*s)",
 			 file->private_data,
 			 buf, len, offset,
 			 file->f_dentry->d_name.len,
@@ -1332,8 +1325,7 @@ ssize_t novfs_f_read(struct file * file,
 					}
 					break;
 				}
-				DbgPrint("novfs_f_read thisread = 0x%x\n",
-					 thisread);
+				DbgPrint("thisread = 0x%x", thisread);
 				len -= thisread;
 				buf += thisread;
 				offset += thisread;
@@ -1342,7 +1334,7 @@ ssize_t novfs_f_read(struct file * file,
 			*off = offset;
 		}
 	}
-	DbgPrint("novfs_f_read return = %d\n", totalread);
+	DbgPrint("return = %d", totalread);
 
 	return (totalread);
 }
@@ -1360,7 +1352,7 @@ ssize_t novfs_f_write(struct file * file
 	if (file->f_dentry &&
 	    (inode = file->f_dentry->d_inode) &&
 	    (id = file->f_dentry->d_inode->i_private)) {
-		DbgPrint("novfs_f_write(0x%p 0x%p 0x%p %d %lld %.*s)\n",
+		DbgPrint("(0x%p 0x%p 0x%p %d %lld %.*s)",
 			 file->private_data, inode, id->FileHandle, len, offset,
 			 file->f_dentry->d_name.len,
 			 file->f_dentry->d_name.name);
@@ -1372,8 +1364,7 @@ ssize_t novfs_f_write(struct file * file
 		} else {
 			if (file->f_flags & O_APPEND) {
 				offset = i_size_read(inode);
-				DbgPrint
-				    ("novfs_f_write appending to end %lld %.*s\n",
+				DbgPrint("appending to end %lld %.*s",
 				     offset, file->f_dentry->d_name.len,
 				     file->f_dentry->d_name.name);
 			}
@@ -1395,7 +1386,7 @@ ssize_t novfs_f_write(struct file * file
 					totalwrite = status;
 					break;
 				}
-				DbgPrint("novfs_f_write thiswrite = 0x%x\n",
+				DbgPrint("thiswrite = 0x%x",
 					 thiswrite);
 				len -= thiswrite;
 				buf += thiswrite;
@@ -1414,7 +1405,7 @@ ssize_t novfs_f_write(struct file * file
 			*off = offset;
 		}
 	}
-	DbgPrint("novfs_f_write return = 0x%x\n", totalwrite);
+	DbgPrint("return = 0x%x", totalwrite);
 
 	return (totalwrite);
 }
@@ -1427,8 +1418,7 @@ int novfs_f_readdir(struct file *file, v
 int novfs_f_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
 		  unsigned long arg)
 {
-	DbgPrint("novfs_f_ioctl: file=0x%p cmd=0x%x arg=0x%p\n", file, cmd,
-		 arg);
+	DbgPrint("file=0x%p cmd=0x%x arg=0x%p", file, cmd, arg);
 
 	return -ENOSYS;
 }
@@ -1437,12 +1427,12 @@ int novfs_f_mmap(struct file *file, stru
 {
 	int retCode = -EINVAL;
 
-	DbgPrint("novfs_f_mmap: file=0x%p %.*s\n", file,
-		 file->f_dentry->d_name.len, file->f_dentry->d_name.name);
+	DbgPrint("file=0x%p %.*s", file, file->f_dentry->d_name.len,
+		 file->f_dentry->d_name.name);
 
 	retCode = generic_file_mmap(file, vma);
 
-	DbgPrint("novfs_f_mmap: retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 	return (retCode);
 }
 
@@ -1457,15 +1447,14 @@ int novfs_f_open(struct inode *inode, st
 	struct inode_data *id;
 	int errInfo;
 
-	DbgPrint
-	    ("novfs_f_open: inode=0x%p file=0x%p dentry=0x%p dentry->d_inode=0x%p %.*s\n",
-	     inode, file, file->f_dentry, file->f_dentry->d_inode,
+	DbgPrint("inode=0x%p file=0x%p dentry=0x%p dentry->d_inode=0x%p %.*s",
+		 inode, file, file->f_dentry, file->f_dentry->d_inode,
 	     file->f_dentry->d_name.len, file->f_dentry->d_name.name);
 	if (file->f_dentry) {
-		DbgPrint
-		    ("novfs_f_open: %.*s f_flags=0%o f_mode=0%o i_mode=0%o\n",
-		     file->f_dentry->d_name.len, file->f_dentry->d_name.name,
-		     file->f_flags, file->f_mode, inode->i_mode);
+		DbgPrint("%.*s f_flags=0%o f_mode=0%o i_mode=0%o",
+			 file->f_dentry->d_name.len,
+			 file->f_dentry->d_name.name,
+			 file->f_flags, file->f_mode, inode->i_mode);
 	}
 
 	if (inode && inode->i_private) {
@@ -1495,7 +1484,7 @@ int novfs_f_open(struct inode *inode, st
 					}
 				}
 
-				DbgPrint("novfs_f_open: %s\n", path);
+				DbgPrint("%s", path);
 				retCode = novfs_open_file(path,
 							  file->
 							  f_flags & ~O_EXCL,
@@ -1503,7 +1492,7 @@ int novfs_f_open(struct inode *inode, st
 							  &file->private_data,
 							  session);
 
-				DbgPrint("novfs_f_open: 0x%x 0x%p\n", retCode,
+				DbgPrint("0x%x 0x%p", retCode,
 					 file->private_data);
 				if (!retCode) {
 					/*
@@ -1543,7 +1532,7 @@ int novfs_f_open(struct inode *inode, st
 			kfree(info);
 		}
 	}
-	DbgPrint("novfs_f_open: retCode=0x%x\n", retCode);
+	DbgPrint("retCode=0x%x", retCode);
 	return (retCode);
 }
 
@@ -1568,14 +1557,13 @@ int novfs_flush_mapping(void *Handle, st
 			struct page *page;
 			int i;
 
-			DbgPrint("novfs_flush_mapping: %u\n", nrpages);
+			DbgPrint("%u", nrpages);
 
 			done = 0;
 			for (i = 0; !rc && (i < nrpages); i++) {
 				page = pagevec.pages[i];
 
-				DbgPrint("novfs_flush_mapping: page 0x%p %lu\n",
-					 page, page->index);
+				DbgPrint("page 0x%p %lu", page, page->index);
 
 				lock_page(page);
 				page_cache_get(page);
@@ -1602,7 +1590,7 @@ int novfs_flush_mapping(void *Handle, st
 		}
 	} while (!rc && !done);
 
-	DbgPrint("novfs_flush_mapping: return %d\n", rc);
+	DbgPrint("return %d", rc);
 
 	return (rc);
 }
@@ -1616,18 +1604,16 @@ int novfs_f_flush(struct file *file, fl_
 	struct novfs_schandle session;
 	struct inode_data *id;
 
-	DbgPrint("novfs_f_flush: Called from 0x%p\n",
-		 __builtin_return_address(0));
+	DbgPrint("Called from 0x%p", __builtin_return_address(0));
 	if (file->f_dentry && (inode = file->f_dentry->d_inode)
 	    && (id = file->f_dentry->d_inode->i_private)) {
 
 		if ((file->f_flags & O_ACCMODE) != O_RDONLY) {
 			inode = file->f_dentry->d_inode;
-			DbgPrint
-			    ("novfs_f_flush: %.*s f_flags=0%o f_mode=0%o i_mode=0%o\n",
-			     file->f_dentry->d_name.len,
-			     file->f_dentry->d_name.name, file->f_flags,
-			     file->f_mode, inode->i_mode);
+			DbgPrint("%.*s f_flags=0%o f_mode=0%o i_mode=0%o",
+				 file->f_dentry->d_name.len,
+				 file->f_dentry->d_name.name, file->f_flags,
+				 file->f_mode, inode->i_mode);
 
 			session = novfs_scope_get_sessionId(id->Scope);
 			if (0 == SC_PRESENT(session)) {
@@ -1639,7 +1625,7 @@ int novfs_f_flush(struct file *file, fl_
 			if (inode &&
 			    inode->i_mapping && inode->i_mapping->nrpages) {
 
-				DbgPrint("novfs_f_flush: %.*s pages=%lu\n",
+				DbgPrint("%.*s pages=%lu",
 					 file->f_dentry->d_name.len,
 					 file->f_dentry->d_name.name,
 					 inode->i_mapping->nrpages);
@@ -1675,7 +1661,7 @@ int novfs_f_release(struct inode *inode,
 	struct novfs_schandle session;
 	struct inode_data *id;
 
-	DbgPrint("novfs_f_release: path=%.*s handle=%p\n",
+	DbgPrint("path=%.*s handle=%p",
 		 file->f_dentry->d_name.len,
 		 file->f_dentry->d_name.name, file->private_data);
 
@@ -1687,15 +1673,14 @@ int novfs_f_release(struct inode *inode,
 		}
 
 		if ((file->f_flags & O_ACCMODE) != O_RDONLY) {
-			DbgPrint
-			    ("novfs_f_release: %.*s f_flags=0%o f_mode=0%o i_mode=0%o\n",
+			DbgPrint("%.*s f_flags=0%o f_mode=0%o i_mode=0%o",
 			     file->f_dentry->d_name.len,
 			     file->f_dentry->d_name.name, file->f_flags,
 			     file->f_mode, inode->i_mode);
 
 			if (inode->i_mapping && inode->i_mapping->nrpages) {
 
-				DbgPrint("novfs_f_release: %.*s pages=%lu\n",
+				DbgPrint("%.*s pages=%lu",
 					 file->f_dentry->d_name.len,
 					 file->f_dentry->d_name.name,
 					 inode->i_mapping->nrpages);
@@ -1730,7 +1715,7 @@ int novfs_f_fsync(struct file *file, str
 
 int novfs_f_llseek(struct file *file, loff_t offset, int origin)
 {
-	DbgPrint("novfs_f_llseek: File=0x%p Name=%.*s offset=%lld origin=%d\n",
+	DbgPrint("File=0x%p Name=%.*s offset=%lld origin=%d",
 		 file, file->f_dentry->d_name.len, file->f_dentry->d_name.name,
 		 offset, origin);
 	return (generic_file_llseek(file, offset, origin));
@@ -1770,14 +1755,12 @@ int novfs_f_lock(struct file *file, int
 	struct inode_data *id;
 	loff_t len;
 
-	DbgPrint("novfs_f_lock(0x%p): begin in novfs_f_lock 0x%p\n",
+	DbgPrint("(0x%p): begin in novfs_f_lock 0x%p",
 		 __builtin_return_address(0), file->private_data);
-	DbgPrint
-	    ("novfs_f_lock: cmd = %d, F_GETLK = %d, F_SETLK = %d, F_SETLKW = %d\n",
-	     cmd, F_GETLK, F_SETLK, F_SETLKW);
-	DbgPrint
-	    ("novfs_f_lock: lock->fl_start = 0x%llX, lock->fl_end = 0x%llX\n",
-	     lock->fl_start, lock->fl_end);
+	DbgPrint("cmd = %d, F_GETLK = %d, F_SETLK = %d, F_SETLKW = %d",
+		 cmd, F_GETLK, F_SETLK, F_SETLKW);
+	DbgPrint("lock->fl_start = 0x%llX, lock->fl_end = 0x%llX",
+		 lock->fl_start, lock->fl_end);
 
 	err_code = -1;
 	if (lock->fl_start <= lock->fl_end) {
@@ -1790,7 +1773,7 @@ int novfs_f_lock(struct file *file, int
 		if (file->f_dentry &&
 		    (inode = file->f_dentry->d_inode) &&
 		    (id = (struct inode_data *) inode->i_private)) {
-			DbgPrint("novfs_f_lock: (0x%p 0x%p %.*s)\n",
+			DbgPrint("(0x%p 0x%p %.*s)",
 				 file->private_data, inode,
 				 file->f_dentry->d_name.len,
 				 file->f_dentry->d_name.name);
@@ -1841,14 +1824,13 @@ int novfs_f_lock(struct file *file, int
 				printk
 				    ("<1> novfs in novfs_f_lock, not implemented cmd = %d\n",
 				     cmd);
-				DbgPrint
-				    ("novfs_f_lock: novfs in novfs_f_lock, not implemented cmd = %d\n",
+				DbgPrint("novfs in novfs_f_lock, not implemented cmd = %d",
 				     cmd);
 				break;
 			}
 		}
 
-		DbgPrint("novfs_f_lock: lock->fl_type = %u, err_code 0x%X\n",
+		DbgPrint("lock->fl_type = %u, err_code 0x%X",
 			 lock->fl_type, err_code);
 
 		if ((err_code != 0) && (err_code != -1)
@@ -1970,12 +1952,11 @@ int novfs_a_writepages(struct address_sp
 	size_t tsize;
 
 	SC_INITIALIZE(session);
-	DbgPrint
-	    ("novfs_a_writepages: inode=0x%p mapping=0x%p wbc=0x%p nr_to_write=%d\n",
+	DbgPrint("inode=0x%p mapping=0x%p wbc=0x%p nr_to_write=%d",
 	     inode, mapping, wbc, wbc->nr_to_write);
 
 	if (inode) {
-		DbgPrint(" Inode=0x%p Ino=%d Id=0x%p\n", inode, inode->i_ino,
+		DbgPrint("Inode=0x%p Ino=%d Id=0x%p", inode, inode->i_ino,
 			 inode->i_private);
 
 		if (NULL != (id = inode->i_private)) {
@@ -1991,12 +1972,10 @@ int novfs_a_writepages(struct address_sp
 	    kmalloc(sizeof(struct page *) * max_page_lookup, GFP_KERNEL);
 
 	if (id)
-		DbgPrint
-		    ("novfs_a_writepages: inode=0x%p fh=0x%p dlist=0x%p pages=0x%p %s\n",
+		DbgPrint("inode=0x%p fh=0x%p dlist=0x%p pages=0x%p %s",
 		     inode, fh, dlist, pages, id->Name);
 	else
-		DbgPrint
-		    ("novfs_a_writepages: inode=0x%p fh=0x%p dlist=0x%p pages=0x%p\n",
+		DbgPrint("inode=0x%p fh=0x%p dlist=0x%p pages=0x%p",
 		     inode, fh, dlist, pages);
 
 	if (dlist && pages) {
@@ -2023,8 +2002,7 @@ int novfs_a_writepages(struct address_sp
 			dlist_idx = 0;
 			dlptr = &dlist[1];
 
-			DbgPrint("novfs_a_writepages1: nr_pages=%d\n",
-				 nr_pages);
+			DbgPrint("nr_pages=%d", nr_pages);
 			if (!nr_pages) {
 				memset(pages, 0,
 				       sizeof(struct page *) * max_page_lookup);
@@ -2045,8 +2023,7 @@ int novfs_a_writepages(struct address_sp
 							       1,
 							       PAGECACHE_TAG_DIRTY);
 
-				DbgPrint("novfs_a_writepages2: nr_pages=%d\n",
-					 nr_pages);
+				DbgPrint("2; nr_pages=%d\n", nr_pages);
 				/*
 				 * Check to see if there are dirty pages and there is a valid
 				 * file handle.
@@ -2054,8 +2031,7 @@ int novfs_a_writepages(struct address_sp
 				if (nr_pages && !fh) {
 					set_bit(AS_EIO, &mapping->flags);
 					done = 1;
-					DbgPrint
-					    ("novfs_a_writepage: set_bit AS_EIO\n");
+					DbgPrint("set_bit AS_EIO");
 					break;
 				}
 
@@ -2129,13 +2105,11 @@ int novfs_a_writepages(struct address_sp
 				dlptr[dlist_idx].len = PAGE_CACHE_SIZE;
 				dlptr[dlist_idx].rwflag = DLREAD;
 				dlist_idx++;
-				DbgPrint
-				    ("novfs_a_writepages: Add page=0x%p index=0x%lx\n",
+				DbgPrint("Add page=0x%p index=0x%lx",
 				     page, page->index);
 			}
 
-			DbgPrint("novfs_a_writepages: dlist_idx=%d\n",
-				 dlist_idx);
+			DbgPrint("dlist_idx=%d", dlist_idx);
 			if (dlist_idx) {
 				tsize = dlist_idx * PAGE_CACHE_SIZE;
 				/*
@@ -2171,8 +2145,7 @@ int novfs_a_writepages(struct address_sp
 					page_cache_release((struct page *)
 							   dlptr[dlist_idx -
 								 1].page);
-					DbgPrint
-					    ("novfs_a_writepages: release page=0x%p index=0x%lx\n",
+					DbgPrint("release page=0x%p index=0x%lx",
 					     dlptr[dlist_idx - 1].page,
 					     ((struct page *)
 					      dlptr[dlist_idx -
@@ -2191,7 +2164,7 @@ int novfs_a_writepages(struct address_sp
 		mapping->writeback_index = index;
 
 	} else {
-		DbgPrint("novfs_a_writepage: set_bit AS_EIO\n");
+		DbgPrint("set_bit AS_EIO");
 		set_bit(AS_EIO, &mapping->flags);
 	}
 	if (dlist)
@@ -2199,7 +2172,7 @@ int novfs_a_writepages(struct address_sp
 	if (pages)
 		kfree(pages);
 
-	DbgPrint("novfs_a_writepage: retCode=%d\n", retCode);
+	DbgPrint("retCode=%d", retCode);
 	return (0);
 
 }
@@ -2215,13 +2188,13 @@ int novfs_a_readpage(struct file *file,
 	struct novfs_schandle session;
 
 	SC_INITIALIZE(session);
-	DbgPrint("novfs_a_readpage: File=0x%p Name=%.*s Page=0x%p", file,
+	DbgPrint("File=0x%p Name=%.*s Page=0x%p", file,
 		 file->f_dentry->d_name.len, file->f_dentry->d_name.name, page);
 
 	dentry = file->f_dentry;
 
 	if (dentry) {
-		DbgPrint(" Dentry=0x%p Name=%.*s", dentry, dentry->d_name.len,
+		DbgPrint("Dentry=0x%p Name=%.*s", dentry, dentry->d_name.len,
 			 dentry->d_name.name);
 		if (dentry->d_inode) {
 			inode = dentry->d_inode;
@@ -2229,7 +2202,7 @@ int novfs_a_readpage(struct file *file,
 	}
 
 	if (inode) {
-		DbgPrint(" Inode=0x%p Ino=%d", inode, inode->i_ino);
+		DbgPrint("Inode=0x%p Ino=%d", inode, inode->i_ino);
 
 		if (inode->i_private) {
 			session =
@@ -2245,8 +2218,6 @@ int novfs_a_readpage(struct file *file,
 		}
 	}
 
-	DbgPrint("\n");
-
 	if (!PageUptodate(page)) {
 		struct novfs_data_list dlst[2];
 
@@ -2261,7 +2232,7 @@ int novfs_a_readpage(struct file *file,
 		dlst[1].len = PAGE_CACHE_SIZE;
 		dlst[1].rwflag = DLWRITE;
 
-		DbgPrint("novfs_a_readpage: calling= novfs_Read_Pages %lld\n",
+		DbgPrint("calling= novfs_Read_Pages %lld",
 			 offset);
 		retCode =
 		    novfs_read_pages(file->private_data, dlst, 2, &len, &offset,
@@ -2277,7 +2248,7 @@ int novfs_a_readpage(struct file *file,
 	}
 	unlock_page(page);
 
-	DbgPrint("novfs_a_readpage: retCode=%d\n", retCode);
+	DbgPrint("retCode=%d", retCode);
 	return (retCode);
 
 }
@@ -2299,14 +2270,14 @@ int novfs_a_readpages(struct file *file,
 	char *rbuf, done = 0;
 	SC_INITIALIZE(session);
 
-	DbgPrint("novfs_a_readpages: File=0x%p Name=%.*s Pages=%d\n", file,
+	DbgPrint("File=0x%p Name=%.*s Pages=%d", file,
 		 file->f_dentry->d_name.len, file->f_dentry->d_name.name,
 		 nr_pages);
 
 	dentry = file->f_dentry;
 
 	if (dentry) {
-		DbgPrint(" Dentry=0x%p Name=%.*s\n", dentry, dentry->d_name.len,
+		DbgPrint("Dentry=0x%p Name=%.*s", dentry, dentry->d_name.len,
 			 dentry->d_name.name);
 		if (dentry->d_inode) {
 			inode = dentry->d_inode;
@@ -2314,7 +2285,7 @@ int novfs_a_readpages(struct file *file,
 	}
 
 	if (inode) {
-		DbgPrint(" Inode=0x%p Ino=%d\n", inode, inode->i_ino);
+		DbgPrint("Inode=0x%p Ino=%d", inode, inode->i_ino);
 
 		if (inode->i_private) {
 			session =
@@ -2365,8 +2336,7 @@ int novfs_a_readpages(struct file *file,
 				dllst[1].len = len;
 				dllst[1].rwflag = DLWRITE;
 
-				DbgPrint
-				    ("novfs_a_readpages: calling novfs_Read_Pages %lld\n",
+				DbgPrint("calling novfs_Read_Pages %lld",
 				     offset);
 				if (!novfs_read_pages
 				    (file->private_data, dllst, 2, &len,
@@ -2404,7 +2374,7 @@ int novfs_a_readpages(struct file *file,
 		retCode = -ENOMEM;
 	}
 
-	DbgPrint("novfs_a_readpages: retCode=%d\n", retCode);
+	DbgPrint("retCode=%d", retCode);
 	return (retCode);
 
 }
@@ -2420,10 +2390,9 @@ int novfs_a_prepare_write(struct file *f
 	struct inode *inode = file->f_dentry->d_inode;
 	SC_INITIALIZE(session);
 
-	DbgPrint
-	    ("novfs_a_prepare_write: File=0x%p Page=0x%p offset=0x%llx From=%u To=%u filesize=%lld\n",
-	     file, page, offset, from, to,
-	     i_size_read(file->f_dentry->d_inode));
+	DbgPrint("File=0x%p Page=0x%p offset=0x%llx From=%u To=%u "
+		 "filesize=%lld\n", file, page, offset, from, to,
+		 i_size_read(file->f_dentry->d_inode));
 	if (!PageUptodate(page)) {
 		/*
 		 * Check to see if whole page
@@ -2473,8 +2442,7 @@ int novfs_a_prepare_write(struct file *f
 				dllst[1].len = len;
 				dllst[1].rwflag = DLWRITE;
 
-				DbgPrint
-				    ("novfs_a_prepare_write: calling novfs_Read_Pages %lld\n",
+				DbgPrint("calling novfs_Read_Pages %lld",
 				     offset);
 				novfs_read_pages(file->private_data, dllst, 2,
 						 &len, &offset, session);
@@ -2498,12 +2466,12 @@ int novfs_a_prepare_write(struct file *f
 			memset(adr + to, 0, PAGE_CACHE_SIZE - to);
 			kunmap_atomic(adr, KM_USER0);
 
-			DbgPrint("novfs_a_prepare_write: memset 0x%p\n", adr);
+			DbgPrint("memset 0x%p", adr);
 		}
 		flush_dcache_page(page);
 		SetPageUptodate(page);
 	}
-//   DbgPrint("novfs_a_prepare_write: return %d\n", retVal);
+//   DbgPrint("return %d", retVal);
 	return (retVal);
 }
 
@@ -2520,9 +2488,8 @@ int novfs_a_commit_write(struct file *fi
 
 	SC_INITIALIZE(session);
 
-	DbgPrint
-	    ("novfs_a_commit_write: File=0x%p Page=0x%p offset=0x%x To=%u filesize=%lld\n",
-	     file, page, offset, to, i_size_read(file->f_dentry->d_inode));
+	DbgPrint("File=0x%p Page=0x%p offset=0x%x To=%u filesize=%lld",
+		 file, page, offset, to, i_size_read(file->f_dentry->d_inode));
 	if (file->f_dentry->d_inode
 	    && (id = file->f_dentry->d_inode->i_private)) {
 		session = novfs_scope_get_sessionId(id->Scope);
@@ -2590,7 +2557,7 @@ int novfs_i_create(struct inode *dir, st
 	struct novfs_schandle session;
 	int retCode = -EACCES;
 
-	DbgPrint("novfs_i_create: mode=0%o flags=0%o %.*s\n", mode,
+	DbgPrint("mode=0%o flags=0%o %.*s", mode,
 		 nd->NDOPENFLAGS, dentry->d_name.len, dentry->d_name.name);
 
 	if (IS_ROOT(dentry) ||	/* Root */
@@ -2652,29 +2619,24 @@ void update_inode(struct inode *Inode, s
 {
 	static char dbuf[128];
 
-	DbgPrint("update_inode: Inode=0x%p I_ino=%d\n", Inode, Inode->i_ino);
+	DbgPrint("Inode=0x%p I_ino=%d", Inode, Inode->i_ino);
 
-	DbgPrint("update_inode: atime=%s\n",
-		 ctime_r(&Info->atime.tv_sec, dbuf));
-	DbgPrint("update_inode: ctime=%s\n",
-		 ctime_r(&Info->ctime.tv_sec, dbuf));
-	DbgPrint("update_inode: mtime=%s %d\n",
-		 ctime_r(&Info->mtime.tv_sec, dbuf), Info->mtime.tv_nsec);
-	DbgPrint("update_inode: size=%lld\n", Info->size);
-	DbgPrint("update_inode: mode=0%o\n", Info->mode);
+	DbgPrint("atime=%s", ctime_r(&Info->atime.tv_sec, dbuf));
+	DbgPrint("ctime=%s", ctime_r(&Info->ctime.tv_sec, dbuf));
+	DbgPrint("mtime=%s %d", ctime_r(&Info->mtime.tv_sec, dbuf),
+		 Info->mtime.tv_nsec);
+	DbgPrint("size=%lld", Info->size);
+	DbgPrint("mode=0%o", Info->mode);
 
 	if (Inode &&
 	    ((Inode->i_size != Info->size) ||
 	     (Inode->i_mtime.tv_sec != Info->mtime.tv_sec) ||
 	     (Inode->i_mtime.tv_nsec != Info->mtime.tv_nsec))) {
-		DbgPrint
-		    ("update_inode: calling invalidate_remote_inode sz  %d %d\n",
+		DbgPrint ("calling invalidate_remote_inode sz  %d %d",
 		     Inode->i_size, Info->size);
-		DbgPrint
-		    ("update_inode: calling invalidate_remote_inode sec %d %d\n",
+		DbgPrint ("calling invalidate_remote_inode sec %d %d",
 		     Inode->i_mtime.tv_sec, Info->mtime.tv_sec);
-		DbgPrint
-		    ("update_inode: calling invalidate_remote_inode ns  %d %d\n",
+		DbgPrint ("calling invalidate_remote_inode ns  %d %d",
 		     Inode->i_mtime.tv_nsec, Info->mtime.tv_nsec);
 
 		if (Inode && Inode->i_mapping) {
@@ -2693,11 +2655,10 @@ void update_inode(struct inode *Inode, s
 		    (unsigned long) (Info->size >> (loff_t) Inode->i_blkbits);
 		Inode->i_bytes = Info->size & (Inode->i_sb->s_blocksize - 1);
 
-		DbgPrint("update_inode: i_sb->s_blocksize=%d\n",
-			 Inode->i_sb->s_blocksize);
-		DbgPrint("update_inode: i_blkbits=%d\n", Inode->i_blkbits);
-		DbgPrint("update_inode: i_blocks=%d\n", Inode->i_blocks);
-		DbgPrint("update_inode: i_bytes=%d\n", Inode->i_bytes);
+		DbgPrint("i_sb->s_blocksize=%d", Inode->i_sb->s_blocksize);
+		DbgPrint("i_blkbits=%d", Inode->i_blkbits);
+		DbgPrint("i_blocks=%d", Inode->i_blocks);
+		DbgPrint("i_bytes=%d", Inode->i_bytes);
 	}
 }
 
@@ -2719,15 +2680,13 @@ struct dentry *novfs_i_lookup(struct ino
 		char *path;
 		path = novfs_dget_path(dentry, buf, PATH_LENGTH_BUFFER);
 		if (path) {
-			DbgPrint
-			    ("novfs_i_lookup: dir 0x%p %d hash %d inode 0x%0p %s\n",
+			DbgPrint("dir 0x%p %d hash %d inode 0x%0p %s",
 			     dir, dir->i_ino, dentry->d_name.hash,
 			     dentry->d_inode, path);
 		}
 		kfree(buf);
 	} else {
-		DbgPrint
-		    ("novfs_i_lookup: dir 0x%p %d name %.*s hash %d inode 0x%0p\n",
+		DbgPrint("dir 0x%p %d name %.*s hash %d inode 0x%0p",
 		     dir, dir->i_ino, dentry->d_name.len, dentry->d_name.name,
 		     dentry->d_name.hash, dentry->d_inode);
 	}
@@ -2750,8 +2709,7 @@ struct dentry *novfs_i_lookup(struct ino
 	if (dir && (id = dir->i_private)) {
 		retVal = 0;
 		if (IS_ROOT(dentry)) {
-			DbgPrint("novfs_i_lookup: Root entry=0x%p\n",
-				 novfs_root);
+			DbgPrint("Root entry=0x%p", novfs_root);
 			inode = novfs_root->d_inode;
 			return (0);
 		} else {
@@ -2815,8 +2773,7 @@ struct dentry *novfs_i_lookup(struct ino
 	if (info)
 		kfree(info);
 
-	DbgPrint
-	    ("novfs_i_lookup: inode=0x%p dentry->d_inode=0x%p return=0x%p\n",
+	DbgPrint("inode=0x%p dentry->d_inode=0x%p return=0x%p",
 	     dir, dentry->d_inode, retVal);
 
 	return (retVal);
@@ -2830,15 +2787,14 @@ int novfs_i_unlink(struct inode *dir, st
 	char *path, *buf;
 	uint64_t t64;
 
-	DbgPrint("novfs_i_unlink: dir=0x%p dir->i_ino=%d %.*s\n", dir,
+	DbgPrint("dir=0x%p dir->i_ino=%d %.*s", dir,
 		 dir->i_ino, dentry->d_name.len, dentry->d_name.name);
-	DbgPrint("novfs_i_unlink: IS_ROOT(dentry)=%d\n", IS_ROOT(dentry));
-	DbgPrint("novfs_i_unlink: IS_ROOT(dentry->d_parent)=%d\n",
+	DbgPrint("IS_ROOT(dentry)=%d", IS_ROOT(dentry));
+	DbgPrint("IS_ROOT(dentry->d_parent)=%d",
 		 IS_ROOT(dentry->d_parent));
-	DbgPrint("novfs_i_unlink: IS_ROOT(dentry->d_parent->d_parent)=%d\n",
+	DbgPrint("IS_ROOT(dentry->d_parent->d_parent)=%d",
 		 IS_ROOT(dentry->d_parent->d_parent));
-	DbgPrint
-	    ("novfs_i_unlink: IS_ROOT(dentry->d_parent->d_parent->d_parent)=%d\n",
+	DbgPrint("IS_ROOT(dentry->d_parent->d_parent->d_parent)=%d",
 	     IS_ROOT(dentry->d_parent->d_parent->d_parent));
 
 	if (IS_ROOT(dentry) ||	/* Root */
@@ -2850,8 +2806,7 @@ int novfs_i_unlink(struct inode *dir, st
 
 	inode = dentry->d_inode;
 	if (inode) {
-		DbgPrint
-		    ("novfs_i_unlink: dir=0x%p dir->i_ino=%d inode=0x%p ino=%d\n",
+		DbgPrint("dir=0x%p dir->i_ino=%d inode=0x%p ino=%d",
 		     dir, dir->i_ino, inode, inode->i_ino);
 		if (inode->i_private) {
 			session =
@@ -2871,9 +2826,8 @@ int novfs_i_unlink(struct inode *dir, st
 				    novfs_dget_path(dentry, buf,
 						    PATH_LENGTH_BUFFER);
 				if (path) {
-					DbgPrint
-					    ("novfs_i_unlink: path %s mode 0%o\n",
-					     path, inode->i_mode);
+					DbgPrint("path %s mode 0%o",
+						 path, inode->i_mode);
 					if (IS_ROOT(dentry->d_parent->d_parent)) {
 						retCode = novfs_daemon_logout(&dentry->d_name, &session);
 					} else {
@@ -2906,7 +2860,7 @@ int novfs_i_unlink(struct inode *dir, st
 		}
 	}
 
-	DbgPrint("novfs_i_unlink: retCode 0x%x\n", retCode);
+	DbgPrint("retCode 0x%x", retCode);
 	return (retCode);
 }
 
@@ -2919,7 +2873,7 @@ int novfs_i_mkdir(struct inode *dir, str
 	struct novfs_entry_info info;
 	uid_t uid;
 
-	DbgPrint("novfs_i_mkdir: dir=0x%p ino=%d dentry=0x%p %.*s mode=0%lo\n",
+	DbgPrint("dir=0x%p ino=%d dentry=0x%p %.*s mode=0%lo",
 		 dir, dir->i_ino, dentry, dentry->d_name.len,
 		 dentry->d_name.name, mode);
 
@@ -2948,7 +2902,7 @@ int novfs_i_mkdir(struct inode *dir, str
 		if (buf) {
 			path = novfs_dget_path(dentry, buf, PATH_LENGTH_BUFFER);
 			if (path) {
-				DbgPrint("novfs_i_mkdir: path %s\n", path);
+				DbgPrint("path %s", path);
 				retCode =
 				    novfs_create(path, S_ISDIR(mode), session);
 				if (!retCode) {
@@ -3043,7 +2997,7 @@ int novfs_i_mknod(struct inode *dir, str
 
 		retCode = 0;
 	}
-	DbgPrint("novfs_i_mknod: return 0x%x\n", retCode);
+	DbgPrint("return 0x%x", retCode);
 	return retCode;
 }
 
@@ -3066,7 +3020,7 @@ int novfs_i_rename(struct inode *odir, s
 		return (-EACCES);
 	}
 
-	DbgPrint("novfs_i_rename: odir=0x%p ino=%d ndir=0x%p ino=%d\n", odir,
+	DbgPrint("odir=0x%p ino=%d ndir=0x%p ino=%d", odir,
 		 odir->i_ino, ndir, ndir->i_ino);
 
 	oldbuf = kmalloc(PATH_LENGTH_BUFFER * 2, GFP_KERNEL);
@@ -3078,17 +3032,14 @@ int novfs_i_rename(struct inode *odir, s
 			oldlen = PATH_LENGTH_BUFFER - (int)(oldpath - oldbuf);
 			newlen = PATH_LENGTH_BUFFER - (int)(newpath - newbuf);
 
-			DbgPrint
-			    ("novfs_i_rename: od=0x%p od->inode=0x%p od->inode->i_ino=%d %s\n",
+			DbgPrint("od=0x%p od->inode=0x%p od->inode->i_ino=%d %s",
 			     od, od->d_inode, od->d_inode->i_ino, oldpath);
 			if (nd->d_inode) {
-				DbgPrint
-				    ("novfs_i_rename: nd=0x%p nd->inode=0x%p nd->inode->i_ino=%d %s\n",
+				DbgPrint("nd=0x%p nd->inode=0x%p nd->inode->i_ino=%d %s",
 				     nd, nd->d_inode, nd->d_inode->i_ino,
 				     newpath);
 			} else {
-				DbgPrint
-				    ("novfs_i_rename: nd=0x%p nd->inode=0x%p %s\n",
+				DbgPrint("nd=0x%p nd->inode=0x%p %s",
 				     nd, nd->d_inode, newpath);
 			}
 
@@ -3097,18 +3048,18 @@ int novfs_i_rename(struct inode *odir, s
 			 */
 			newcon = strchr(newpath + 1, '\\');
 			oldcon = strchr(oldpath + 1, '\\');
-			DbgPrint("novfs_i_rename: newcon=0x%p newpath=0x%p\n",
-				 newcon, newpath);
-			DbgPrint("novfs_i_rename: oldcon=0x%p oldpath=0x%p\n",
-				 oldcon, oldpath);
+			DbgPrint("newcon=0x%p newpath=0x%p", newcon, newpath);
+			DbgPrint("oldcon=0x%p oldpath=0x%p", oldcon, oldpath);
 			retCode = -EXDEV;
 			if (newcon && oldcon
 			    && ((int)(newcon - newpath) ==
 				(int)(oldcon - oldpath))) {
 				newcon = strchr(newcon + 1, '\\');
 				oldcon = strchr(oldcon + 1, '\\');
-				DbgPrint("novfs_i_rename2: newcon=0x%p newpath=0x%p\n", newcon, newpath);
-				DbgPrint("novfs_i_rename2: oldcon=0x%p oldpath=0x%p\n", oldcon, oldpath);
+				DbgPrint("2; newcon=0x%p newpath=0x%p",
+					 newcon, newpath);
+				DbgPrint("2; oldcon=0x%p oldpath=0x%p",
+					 oldcon, oldpath);
 				if (newcon && oldcon &&
 				    ((int)(newcon - newpath) == (int)(oldcon - oldpath))) {
 					newname.name = newpath;
@@ -3184,7 +3135,7 @@ int novfs_i_rename(struct inode *odir, s
 	if (oldbuf)
 		kfree(oldbuf);
 
-	DbgPrint("novfs_i_rename: return %d\n", retCode);
+	DbgPrint("return %d", retCode);
 	return (retCode);
 }
 
@@ -3240,7 +3191,7 @@ int novfs_i_setattr(struct dentry *dentr
 						ctime_buf);
 				}
 				/* Removed for Bug 132374. jlt */
-				DbgPrint("novfs_i_setattr: %s\n"
+				__DbgPrint("%s: %s\n"
 					 "   ia_valid:      0x%x\n"
 					 "   ia_mode:       0%o\n"
 					 "   ia_uid:        %d\n"
@@ -3248,7 +3199,7 @@ int novfs_i_setattr(struct dentry *dentr
 					 "   ia_size:       %lld\n"
 					 "   ia_atime:      %s\n"
 					 "   ia_mtime:      %s\n"
-					 "   ia_ctime:      %s\n",
+					 "   ia_ctime:      %s\n", __func__,
 					 path,
 					 attr->ia_valid,
 					 attr->ia_mode,
@@ -3304,7 +3255,7 @@ int novfs_i_setattr(struct dentry *dentr
 		}
 		kfree(buf);
 	}
-	DbgPrint("novfs_i_setattr: return 0x%x\n", retVal);
+	DbgPrint("return 0x%x", retVal);
 
 	return (retVal);
 }
@@ -3374,7 +3325,7 @@ int novfs_i_getattr(struct vfsmount *mnt
 	ctime_r(&kstat->mtime.tv_sec, mtime_buf);
 	ctime_r(&kstat->ctime.tv_sec, ctime_buf);
 
-	DbgPrint("novfs_i_getattr: 0x%x 0x%p <%.*s>\n"
+	__DbgPrint("%s: 0x%x 0x%p <%.*s>\n"
 		 "   ino: %d\n"
 		 "   dev: 0x%x\n"
 		 "   mode: 0%o\n"
@@ -3387,7 +3338,7 @@ int novfs_i_getattr(struct vfsmount *mnt
 		 "   mtime: %s\n"
 		 "   ctime: %s\n"
 		 "   blksize: 0x%x\n"
-		 "   blocks: 0x%x\n",
+		 "   blocks: 0x%x\n", __func__,
 		 retCode, dentry, dentry->d_name.len, dentry->d_name.name,
 		 kstat->ino,
 		 kstat->dev,
@@ -3414,18 +3365,17 @@ ssize_t novfs_i_getxattr(struct dentry *
 
 	SC_INITIALIZE(sessionId);
 
-	DbgPrint("novfs_i_getxattr: Ian\n");	/*%.*s\n", dentry->d_name.len, dentry->d_name.name); */
-	DbgPrint
-	    ("novfs_i_getxattr: dentry->d_name.len %u, dentry->d_name.name %s\n",
+	DbgPrint("Ian");	/*%.*s\n", dentry->d_name.len, dentry->d_name.name); */
+	DbgPrint("dentry->d_name.len %u, dentry->d_name.name %s",
 	     dentry->d_name.len, dentry->d_name.name);
-	DbgPrint("novfs_i_getxattr: name %s\n", name);
-	DbgPrint("novfs_i_getxattr: size %u\n", buffer_size);
+	DbgPrint("name %s", name);
+	DbgPrint("size %u", buffer_size);
 
 	if (inode && inode->i_private) {
 		sessionId =
 		    novfs_scope_get_sessionId(((struct inode_data *) inode->i_private)->
 					Scope);
-		DbgPrint("novfs_i_getxattr: SessionId = %u\n", sessionId);
+		DbgPrint("SessionId = %u", sessionId);
 		//if (0 == sessionId)
 		if (0 == SC_PRESENT(sessionId)) {
 			((struct inode_data *) inode->i_private)->Scope =
@@ -3433,8 +3383,7 @@ ssize_t novfs_i_getxattr(struct dentry *
 			sessionId =
 			    novfs_scope_get_sessionId(((struct inode_data *) inode->
 						 i_private)->Scope);
-			DbgPrint("novfs_i_getxattr: SessionId = %u\n",
-				 sessionId);
+			DbgPrint("SessionId = %u", sessionId);
 		}
 	}
 
@@ -3449,8 +3398,7 @@ ssize_t novfs_i_getxattr(struct dentry *
 				    novfs_getx_file_info(path, name, bufRead,
 							 XA_BUFFER, &dataLen,
 							 sessionId);
-				DbgPrint
-				    ("novfs_i_getxattr: after novfs_GetX_File_Info retxcode = %d\n",
+				DbgPrint("after novfs_GetX_File_Info retxcode = %d",
 				     retxcode);
 				if (!retxcode) {
 					novfs_dump(64, bufRead);
@@ -3459,8 +3407,7 @@ ssize_t novfs_i_getxattr(struct dentry *
 							memcpy(buffer, bufRead,
 							       dataLen);
 						} else {
-							DbgPrint
-							    ("novfs_i_getxattr: (!!!) not enough buffer_size. buffer_size = %d, dataLen = %d\n",
+							DbgPrint("(!!!) not enough buffer_size. buffer_size = %d, dataLen = %d",
 							     buffer_size,
 							     dataLen);
 							retxcode = -ERANGE;
@@ -3500,19 +3447,18 @@ int novfs_i_setxattr(struct dentry *dent
 
 	SC_INITIALIZE(sessionId);
 
-	DbgPrint("novfs_i_setxattr: Ian\n");	/*%.*s\n", dentry->d_name.len, dentry->d_name.name); */
-	DbgPrint
-	    ("novfs_i_setxattr: dentry->d_name.len %u, dentry->d_name.name %s\n",
-	     dentry->d_name.len, dentry->d_name.name);
-	DbgPrint("novfs_i_setxattr: name %s\n", name);
-	DbgPrint("novfs_i_setxattr: value_size %u\n", value_size);
-	DbgPrint("novfs_i_setxattr: flags %d\n", flags);
+	DbgPrint("Ian");	/*%.*s\n", dentry->d_name.len, dentry->d_name.name); */
+	DbgPrint("dentry->d_name.len %u, dentry->d_name.name %s",
+		 dentry->d_name.len, dentry->d_name.name);
+	DbgPrint("name %s", name);
+	DbgPrint("value_size %u", value_size);
+	DbgPrint("flags %d", flags);
 
 	if (inode && inode->i_private) {
 		sessionId =
 		    novfs_scope_get_sessionId(((struct inode_data *) inode->i_private)->
 					Scope);
-		DbgPrint("novfs_i_setxattr: SessionId = %u\n", sessionId);
+		DbgPrint("SessionId = %u", sessionId);
 		//if (0 == sessionId)
 		if (0 == SC_PRESENT(sessionId)) {
 			((struct inode_data *) inode->i_private)->Scope =
@@ -3520,8 +3466,7 @@ int novfs_i_setxattr(struct dentry *dent
 			sessionId =
 			    novfs_scope_get_sessionId(((struct inode_data *) inode->
 						 i_private)->Scope);
-			DbgPrint("novfs_i_setxattr: SessionId = %u\n",
-				 sessionId);
+			DbgPrint("SessionId = %u", sessionId);
 		}
 	}
 
@@ -3534,9 +3479,7 @@ int novfs_i_setxattr(struct dentry *dent
 						 &bytesWritten, flags,
 						 sessionId);
 			if (!retxcode) {
-				DbgPrint
-				    ("novfs_i_setxattr: bytesWritten = %u\n",
-				     bytesWritten);
+				DbgPrint("bytesWritten = %u", bytesWritten);
 			}
 		}
 		kfree(buf);
@@ -3562,17 +3505,16 @@ ssize_t novfs_i_listxattr(struct dentry
 
 	SC_INITIALIZE(sessionId);
 
-	DbgPrint("novfs_i_listxattr: Ian\n");	//%.*s\n", dentry->d_name.len, dentry->d_name.name);
-	DbgPrint
-	    ("novfs_i_listxattr: dentry->d_name.len %u, dentry->d_name.name %s\n",
+	DbgPrint("Ian");	//%.*s\n", dentry->d_name.len, dentry->d_name.name);
+	DbgPrint("dentry->d_name.len %u, dentry->d_name.name %s",
 	     dentry->d_name.len, dentry->d_name.name);
-	DbgPrint("novfs_i_listxattr: size %u\n", buffer_size);
+	DbgPrint("size %u", buffer_size);
 
 	if (inode && inode->i_private) {
 		sessionId =
 		    novfs_scope_get_sessionId(((struct inode_data *) inode->i_private)->
 					Scope);
-		DbgPrint("novfs_i_listxattr: SessionId = %u\n", sessionId);
+		DbgPrint("SessionId = %u", sessionId);
 		//if (0 == sessionId)
 		if (0 == SC_PRESENT(sessionId)) {
 			((struct inode_data *) inode->i_private)->Scope =
@@ -3580,8 +3522,7 @@ ssize_t novfs_i_listxattr(struct dentry
 			sessionId =
 			    novfs_scope_get_sessionId(((struct inode_data *) inode->
 						 i_private)->Scope);
-			DbgPrint("novfs_i_listxattr: SessionId = %u\n",
-				 sessionId);
+			DbgPrint("SessionId = %u", sessionId);
 		}
 	}
 
@@ -3603,8 +3544,7 @@ ssize_t novfs_i_listxattr(struct dentry
 						memcpy(buffer, bufList,
 						       dataLen);
 					} else {
-						DbgPrint
-						    ("novfs_i_listxattr: (!!!) not enough buffer_size. buffer_size = %d, dataLen = %d\n",
+						DbgPrint("(!!!) not enough buffer_size. buffer_size = %d, dataLen = %d",
 						     buffer_size, dataLen);
 						retxcode = -1;
 					}
@@ -3633,28 +3573,26 @@ ssize_t novfs_i_listxattr(struct dentry
 int novfs_i_revalidate(struct dentry *dentry)
 {
 
-	DbgPrint("novfs_i_revalidate: name %.*s\n", dentry->d_name.len,
-		 dentry->d_name.name);
+	DbgPrint("name %.*s", dentry->d_name.len, dentry->d_name.name);
 
 	return (0);
 }
 
 void novfs_read_inode(struct inode *inode)
 {
-	DbgPrint("novfs_read_inode: 0x%p %d\n", inode, inode->i_ino);
+	DbgPrint("0x%p %d", inode, inode->i_ino);
 }
 
 void novfs_write_inode(struct inode *inode)
 {
-	DbgPrint("novfs_write_inode: Inode=0x%p Ino=%d\n", inode, inode->i_ino);
+	DbgPrint("Inode=0x%p Ino=%d", inode, inode->i_ino);
 }
 
 int novfs_notify_change(struct dentry *dentry, struct iattr *attr)
 {
 	struct inode *inode = dentry->d_inode;
 
-	DbgPrint
-	    ("novfs_notify_change: Dentry=0x%p Name=%.*s Inode=0x%p Ino=%d ia_valid=0x%x\n",
+	DbgPrint("Dentry=0x%p Name=%.*s Inode=0x%p Ino=%d ia_valid=0x%x",
 	     dentry, dentry->d_name.len, dentry->d_name.name, inode,
 	     inode->i_ino, attr->ia_valid);
 	return (0);
@@ -3667,8 +3605,7 @@ void novfs_clear_inode(struct inode *ino
 	if (inode->i_private) {
 		struct inode_data *id = inode->i_private;
 
-		DbgPrint
-		    ("novfs_clear_inode: inode=0x%p ino=%d Scope=0x%p Name=%s\n",
+		DbgPrint("inode=0x%p ino=%d Scope=0x%p Name=%s",
 		     inode, inode->i_ino, id->Scope, id->Name);
 
 		novfs_free_inode_cache(inode);
@@ -3683,8 +3620,7 @@ void novfs_clear_inode(struct inode *ino
 		remove_inode_hash(inode);
 
 	} else {
-		DbgPrint("novfs_clear_inode: inode=0x%p ino=%d\n", inode,
-			 inode->i_ino);
+		DbgPrint("inode=0x%p ino=%d", inode, inode->i_ino);
 	}
 }
 
@@ -3703,7 +3639,7 @@ int novfs_show_options(struct seq_file *
 			if (!novfs_current_mnt
 			    || (novfs_current_mnt
 				&& strcmp(novfs_current_mnt, path))) {
-				DbgPrint("novfs_show_options: %.*s %.*s %s\n",
+				DbgPrint("%.*s %.*s %s",
 					 m->mnt_root->d_name.len,
 					 m->mnt_root->d_name.name,
 					 m->mnt_mountpoint->d_name.len,
@@ -3734,16 +3670,16 @@ int novfs_statfs(struct dentry *de, stru
 	uint64_t td, fd, te, fe;
 	struct super_block *sb = de->d_sb;
 
-	DbgPrint("novfs_statfs:\n");
+	DbgPrint("");
 
 	td = fd = te = fe = 0;
 
 	novfs_scope_get_userspace(&td, &fd, &te, &fe);
 
-	DbgPrint("td=%llu\n", td);
-	DbgPrint("fd=%llu\n", fd);
-	DbgPrint("te=%llu\n", te);
-	DbgPrint("fe=%llu\n", fd);
+	DbgPrint("td=%llu", td);
+	DbgPrint("fd=%llu", fd);
+	DbgPrint("te=%llu", te);
+	DbgPrint("fe=%llu", fd);
 	/* fix for Nautilus */
 	if (sb->s_blocksize == 0)
 		sb->s_blocksize = 4096;
@@ -3766,15 +3702,15 @@ int novfs_statfs(struct dentry *de, stru
 	if (fe > 0xffffffff)
 		buf->f_ffree = 0xffffffff;
 
-	DbgPrint("f_type:    0x%x\n", buf->f_type);
-	DbgPrint("f_bsize:   %u\n", buf->f_bsize);
-	DbgPrint("f_namelen: %d\n", buf->f_namelen);
-	DbgPrint("f_blocks:  %llu\n", buf->f_blocks);
-	DbgPrint("f_bfree:   %llu\n", buf->f_bfree);
-	DbgPrint("f_bavail:  %llu\n", buf->f_bavail);
-	DbgPrint("f_files:   %llu\n", buf->f_files);
-	DbgPrint("f_ffree:   %llu\n", buf->f_ffree);
-	DbgPrint("f_frsize:  %u\n", buf->f_frsize);
+	DbgPrint("f_type:    0x%x", buf->f_type);
+	DbgPrint("f_bsize:   %u", buf->f_bsize);
+	DbgPrint("f_namelen: %d", buf->f_namelen);
+	DbgPrint("f_blocks:  %llu", buf->f_blocks);
+	DbgPrint("f_bfree:   %llu", buf->f_bfree);
+	DbgPrint("f_bavail:  %llu", buf->f_bavail);
+	DbgPrint("f_files:   %llu", buf->f_files);
+	DbgPrint("f_ffree:   %llu", buf->f_ffree);
+	DbgPrint("f_frsize:  %u", buf->f_frsize);
 
 	return 0;
 }
@@ -3803,8 +3739,8 @@ struct inode *novfs_get_inode(struct sup
 		inode->i_atime.tv_nsec = 0;
 		inode->i_mtime = inode->i_ctime = inode->i_atime;
 
-		DbgPrint("novfs_get_inode: Inode=0x%p I_ino=%d len=%d\n", inode,
-			 inode->i_ino, name->len);
+		DbgPrint("Inode=0x%p I_ino=%d len=%d",
+			 inode, inode->i_ino, name->len);
 
 		if (NULL !=
 		    (inode->i_private =
@@ -3813,7 +3749,7 @@ struct inode *novfs_get_inode(struct sup
 			struct inode_data *id;
 			id = inode->i_private;
 
-			DbgPrint("novfs_get_inode: i_private 0x%p\n", id);
+			DbgPrint("i_private 0x%p", id);
 
 			id->Scope = NULL;
 			id->Flags = 0;
@@ -3837,7 +3773,7 @@ struct inode *novfs_get_inode(struct sup
 			memcpy(id->Name, name->name, name->len);
 			id->Name[name->len] = '\0';
 
-			DbgPrint("novfs_get_inode: name %s\n", id->Name);
+			DbgPrint("name %s", id->Name);
 		}
 
 		insert_inode_hash(inode);
@@ -3860,16 +3796,15 @@ struct inode *novfs_get_inode(struct sup
 			break;
 		}
 
-		DbgPrint("novfs_get_inode: size=%lld\n", inode->i_size);
-		DbgPrint("novfs_get_inode: mode=0%o\n", inode->i_mode);
-		DbgPrint("novfs_get_inode: i_sb->s_blocksize=%d\n",
-			 inode->i_sb->s_blocksize);
-		DbgPrint("novfs_get_inode: i_blkbits=%d\n", inode->i_blkbits);
-		DbgPrint("novfs_get_inode: i_blocks=%d\n", inode->i_blocks);
-		DbgPrint("novfs_get_inode: i_bytes=%d\n", inode->i_bytes);
+		DbgPrint("size=%lld", inode->i_size);
+		DbgPrint("mode=0%o", inode->i_mode);
+		DbgPrint("i_sb->s_blocksize=%d", inode->i_sb->s_blocksize);
+		DbgPrint("i_blkbits=%d", inode->i_blkbits);
+		DbgPrint("i_blocks=%d", inode->i_blocks);
+		DbgPrint("i_bytes=%d", inode->i_bytes);
 	}
 
-	DbgPrint("novfs_get_inode: 0x%p %d\n", inode, inode->i_ino);
+	DbgPrint("0x%p %d", inode, inode->i_ino);
 	return (inode);
 }
 
@@ -3907,7 +3842,7 @@ int novfs_fill_super(struct super_block
 
 	SB->s_root = novfs_root;
 
-	DbgPrint("novfs_fill_super: root 0x%p\n", novfs_root);
+	DbgPrint("root 0x%p", novfs_root);
 
 	if (novfs_root) {
 		novfs_root->d_op = &novfs_dentry_operations;
@@ -3932,7 +3867,7 @@ int novfs_fill_super(struct super_block
 				server->d_op = &novfs_dentry_operations;
 				server->d_time = 0xffffffff;
 				d_add(server, inode);
-				DbgPrint("novfs_fill_super: d_add %s 0x%p\n",
+				DbgPrint("d_add %s 0x%p",
 					 SERVER_DIRECTORY_NAME, server);
 				novfs_add_inode_entry(novfs_root->d_inode,
 						      &name, inode->i_ino,
@@ -3960,7 +3895,7 @@ int novfs_fill_super(struct super_block
 				tree->d_time = 0xffffffff;
 
 				d_add(tree, inode);
-				DbgPrint("novfs_fill_super: d_add %s 0x%p\n",
+				DbgPrint("d_add %s 0x%p",
 					 TREE_DIRECTORY_NAME, tree);
 				novfs_add_inode_entry(novfs_root->d_inode,
 						      &name, inode->i_ino,
@@ -3975,7 +3910,7 @@ int novfs_fill_super(struct super_block
 static int novfs_get_sb(struct file_system_type *Fstype, int Flags,
 		 const char *Dev_name, void *Data, struct vfsmount *Mnt)
 {
-	DbgPrint("novfs_get_sb: Fstype=0x%x Dev_name=%s\n", Fstype, Dev_name);
+	DbgPrint("Fstype=0x%x Dev_name=%s", Fstype, Dev_name);
 	return get_sb_nodev(Fstype, Flags, Data, novfs_fill_super, Mnt);
 }
 
@@ -3990,7 +3925,7 @@ ssize_t novfs_Control_read(struct file *
 {
 	ssize_t retval = 0;
 
-	DbgPrint("novfs_Control_read: kernel_locked 0x%x\n", kernel_locked());
+	DbgPrint("kernel_locked 0x%x", kernel_locked());
 
 	return retval;
 }
@@ -4000,7 +3935,7 @@ ssize_t novfs_Control_write(struct file
 {
 	ssize_t retval = 0;
 
-	DbgPrint("novfs_Control_write: kernel_locked 0x%x\n", kernel_locked());
+	DbgPrint("kernel_locked 0x%x", kernel_locked());
 	if (buf && nbytes) {
 	}
 
@@ -4012,7 +3947,7 @@ int novfs_Control_ioctl(struct inode *in
 {
 	int retval = 0;
 
-	DbgPrint("novfs_Control_ioctl: kernel_locked 0x%x\n", kernel_locked());
+	DbgPrint("kernel_locked 0x%x", kernel_locked());
 
 	return (retval);
 }
@@ -4039,8 +3974,7 @@ int __init init_novfs(void)
 	novfs_profile_init();
 
 	if (!retCode) {
-		DbgPrint("init_novfs: %s %s %s\n", __DATE__, __TIME__,
-			 NOVFS_VERSION_STRING);
+		DbgPrint("%s %s %s", __DATE__, __TIME__, NOVFS_VERSION_STRING);
 		novfs_daemon_queue_init();
 		novfs_scope_init();
 		retCode = register_filesystem(&novfs_fs_type);
@@ -4083,12 +4017,12 @@ int novfs_lock_inode_cache(struct inode
 	struct inode_data *id;
 	int retVal = 0;
 
-	DbgPrint("novfs_lock_inode_cache: 0x%p\n", i);
+	DbgPrint("0x%p", i);
 	if (i && (id = i->i_private) && id->DirCache.next) {
 		down(&id->DirCacheLock);
 		retVal = 1;
 	}
-	DbgPrint("novfs_lock_inode_cache: return %d\n", retVal);
+	DbgPrint("return %d", retVal);
 	return (retVal);
 }
 
@@ -4183,11 +4117,9 @@ int novfs_get_entry(struct inode *i, str
 			retVal = 0;
 		}
 
-		DbgPrint("novfs_get_entry:\n"
-			 "   inode: 0x%p\n"
-			 "   name:  %.*s\n" "   ino:   %d\n", i, nl, n, *ino);
+		DbgPrint("inode: 0x%p; name: %.*s; ino: %d\n", i, nl, n, *ino);
 	}
-	DbgPrint("novfs_get_entry: return %d\n", retVal);
+	DbgPrint("return %d", retVal);
 	return (retVal);
 }
 
@@ -4200,9 +4132,7 @@ int novfs_get_entry_by_pos(struct inode
 	loff_t i_pos = pos - 2;
 	struct list_head *inter = NULL;
 	while (!novfs_enumerate_inode_cache(i, &inter, ino, info)) {
-		DbgPrint
-		    ("novfs_dir_readdir : novfs_get_entry_by_pos : info->name = %s\n",
-		     info->name);
+		DbgPrint("info->name = %s", info->name);
 		if (count == i_pos) {
 			retVal = 0;
 			break;
@@ -4228,9 +4158,7 @@ int novfs_get_entry_time(struct inode *i
 			n = (char *)name->name;
 			nl = name->len;
 		}
-		DbgPrint("novfs_get_entry_time:\n"
-			 "   inode: 0x%p\n"
-			 "   name:  %.*s\n" "   ino:   %d\n", i, nl, n, *ino);
+		DbgPrint("inode: 0x%p; name:  %.*s; ino: %d", i, nl, n, *ino);
 
 		dc = novfs_lookup_inode_cache(i, name, *ino);
 		if (dc) {
@@ -4251,7 +4179,7 @@ int novfs_get_entry_time(struct inode *i
 			retVal = 0;
 		}
 	}
-	DbgPrint("novfs_get_entry_time: return %d\n", retVal);
+	DbgPrint("return %d", retVal);
 	return (retVal);
 }
 
@@ -4345,12 +4273,8 @@ struct novfs_dir_cache *novfs_lookup_ino
 			n = (char *)name->name;
 			hash = name->hash;
 		}
-		DbgPrint("novfs_lookup_inode_cache:\n"
-			 "   inode: 0x%p\n"
-			 "   name:  %.*s\n"
-			 "   hash:  0x%x\n"
-			 "   len:   %d\n"
-			 "   ino:   %d\n", i, nl, n, hash, nl, ino);
+		DbgPrint("inode: 0x%p; name:  %.*s; hash:  0x%x;\n"
+			 "   len:   %d; ino:   %d", i, nl, n, hash, nl, ino);
 
 		list_for_each(l, &id->DirCache) {
 			dc = list_entry(l, struct novfs_dir_cache, list);
@@ -4379,7 +4303,7 @@ struct novfs_dir_cache *novfs_lookup_ino
 		}
 	}
 
-	DbgPrint("novfs_lookup_inode_cache: return 0x%p\n", retVal);
+	DbgPrint("return 0x%p", retVal);
 	return (retVal);
 }
 
@@ -4402,9 +4326,7 @@ int novfs_lookup_validate(struct inode *
 			n = (char *)name->name;
 			nl = name->len;
 		}
-		DbgPrint("novfs_update_entry:\n"
-			 "   inode: 0x%p\n"
-			 "   name:  %.*s\n" "   ino:   %d\n", i, nl, n, ino);
+		DbgPrint("inode: 0x%p; name:  %.*s; ino:   %d", i, nl, n, ino);
 
 		dc = novfs_lookup_inode_cache(i, name, ino);
 		if (dc) {
@@ -4430,12 +4352,11 @@ int novfs_add_inode_entry(struct inode *
 	struct list_head *todeltmp;
 
 	//SClark
-	DbgPrint("novfs_add_inode_entry:\n" "   i: %u\n", i);
+	DbgPrint("i: %p", i);
 	if ((id = i->i_private)) {
-		DbgPrint("   i->i_private: %p\n", id);
+		DbgPrint("i->i_private: %p", id);
 		if (id->DirCache.next)
-			DbgPrint("   id->DirCache.next: %p\n",
-				 id->DirCache.next);
+			DbgPrint("id->DirCache.next: %p", id->DirCache.next);
 	}
 	//SClark
 
@@ -4445,15 +4366,8 @@ int novfs_add_inode_entry(struct inode *
 			id->cntDC++;
 
 			DCCount++;
-			DbgPrint("novfs_add_inode_entry:\n"
-				 "   inode: 0x%p\n"
-				 "   id:    0x%p\n"
-				 "   DC:    0x%p\n"
-				 "   new:   0x%p\n"
-				 "   name:  %.*s\n"
-				 "   ino:   %d\n"
-				 "   size:  %lld\n"
-				 "   mode:  0x%x\n",
+			DbgPrint("inode: 0x%p; id: 0x%p; DC: 0x%p; new: 0x%p; "
+				 "name:  %.*s; ino: %d; size: %lld; mode: 0x%x",
 				 i, id, &id->DirCache, new, name->len,
 				 name->name, ino, info->size, info->mode);
 
@@ -4513,14 +4427,8 @@ int novfs_update_entry(struct inode *i,
 		ctime_r(&info->atime.tv_sec, atime_buf);
 		ctime_r(&info->mtime.tv_sec, mtime_buf);
 		ctime_r(&info->ctime.tv_sec, ctime_buf);
-		DbgPrint("novfs_update_entry:\n"
-			 "   inode: 0x%p\n"
-			 "   name:  %.*s\n"
-			 "   ino:   %d\n"
-			 "   size:  %lld\n"
-			 "   atime: %s\n"
-			 "   mtime: %s\n"
-			 "   ctime: %s\n",
+		DbgPrint("inode: 0x%p; name: %.*s; ino: %d; size: %lld; "
+			 "atime: %s; mtime: %s; ctime: %s",
 			 i, nl, n, ino, info->size, atime_buf, mtime_buf,
 			 ctime_buf);
 
@@ -4538,25 +4446,17 @@ int novfs_update_entry(struct inode *i,
 			ctime_r(&dc->atime.tv_sec, atime_buf);
 			ctime_r(&dc->mtime.tv_sec, mtime_buf);
 			ctime_r(&dc->ctime.tv_sec, ctime_buf);
-			DbgPrint("novfs_update_entry entry: 0x%p\n"
-				 "   flags:   0x%x\n"
-				 "   jiffies: %lld\n"
-				 "   ino:     %d\n"
-				 "   size:    %lld\n"
-				 "   mode:    0%o\n"
-				 "   atime:   %s\n"
-				 "   mtime:   %s %d\n"
-				 "   ctime:   %s\n"
-				 "   hash:    0x%x\n"
-				 "   nameLen: %d\n"
-				 "   name:    %s\n",
+			DbgPrint("entry: 0x%p; flags: 0x%x; jiffies: %lld; "
+				 "ino: %d; size: %lld; mode: 0%o; atime: %s; "
+				 "mtime: %s %d; ctime: %s; hash: 0x%x; "
+				 " nameLen: %d; name: %s",
 				 dc, dc->flags, dc->jiffies, dc->ino, dc->size,
 				 dc->mode, atime_buf, mtime_buf,
 				 dc->mtime.tv_nsec, ctime_buf, dc->hash,
 				 dc->nameLen, dc->name);
 		}
 	}
-	DbgPrint("novfs_update_entry: return %d\n", retVal);
+	DbgPrint("return %d", retVal);
 	return (retVal);
 }
 
@@ -4580,17 +4480,10 @@ void novfs_remove_inode_entry(struct ino
 				nl = name->len;
 				n = (char *)name->name;
 			}
-			DbgPrint("novfs_remove_inode_entry:\n"
-				 "   inode: 0x%p\n"
-				 "   id:    0x%p\n"
-				 "   DC:    0x%p\n"
-				 "   name:  %.*s\n"
-				 "   ino:   %d\n"
-				 "   entry: 0x%p\n"
-				 "      name: %.*s\n"
-				 "      ino:  %d\n"
-				 "      next: 0x%p\n"
-				 "      prev: 0x%p\n",
+			DbgPrint("inode: 0x%p; id: 0x%p; DC: 0x%p; "
+				 "name: %.*s; ino: %d entry: 0x%p "
+				 "[name: %.*s; ino: %d; next: 0x%p; "
+				 "prev: 0x%p]",
 				 i, id, &id->DirCache, nl, n, ino, dc,
 				 dc->nameLen, dc->name, dc->ino, dc->list.next,
 				 dc->list.prev);
@@ -4618,12 +4511,8 @@ void novfs_free_invalid_entries(struct i
 		list_for_each(l, &id->DirCache) {
 			dc = list_entry(l, struct novfs_dir_cache, list);
 			if (0 == (dc->flags & ENTRY_VALID)) {
-				DbgPrint("novfs_free_invalid_entries:\n"
-					 "   inode: 0x%p\n"
-					 "   id:    0x%p\n"
-					 "   entry:    0x%p\n"
-					 "   name:  %.*s\n"
-					 "   ino:   %d\n",
+				DbgPrint("inode: 0x%p; id: 0x%p; entry: 0x%p; "
+					 "name: %.*s; ino: %d",
 					 i, id, dc, dc->nameLen, dc->name,
 					 dc->ino);
 				l = l->prev;
--- a/fs/novfs/nwcapi.c
+++ b/fs/novfs/nwcapi.c
@@ -97,7 +97,7 @@ int novfs_open_conn_by_name(struct novfs
 			*Handle = connReply->newConnHandle;
 
 			cpylen = copy_to_user(pdata->reqData, &ocbn, sizeof(ocbn));
-			DbgPrint("New Conn Handle = %X\n", connReply->newConnHandle);
+			DbgPrint("New Conn Handle = %X", connReply->newConnHandle);
 		}
 		kfree(reply);
 	}
@@ -136,7 +136,7 @@ int novfs_open_conn_by_addr(struct novfs
 	cpylen =
 		copy_from_user(&tranAddr, ocba.pTranAddr, sizeof(tranAddr));
 
-	DbgPrint("NwOpenConnByAddr: tranAddr\n");
+	DbgPrint("tranAddr");
 	novfs_dump(sizeof(tranAddr), &tranAddr);
 
 	openConn->TranAddr.uTransportType = tranAddr.uTransportType;
@@ -147,7 +147,7 @@ int novfs_open_conn_by_addr(struct novfs
 		copy_from_user(addr, tranAddr.puAddress,
 				tranAddr.uAddressLength);
 
-	DbgPrint("NwOpenConnByAddr: addr\n");
+	DbgPrint("addr");
 	novfs_dump(sizeof(addr), addr);
 
 	openConn->TranAddr.oAddress = *(unsigned int *) (&addr[2]);
@@ -173,8 +173,7 @@ int novfs_open_conn_by_addr(struct novfs
 			cpylen =
 				copy_to_user(pdata->reqData, &ocba,
 						sizeof(ocba));
-			DbgPrint("New Conn Handle = %X\n",
-					connReply->ConnHandle);
+			DbgPrint("New Conn Handle = %X", connReply->ConnHandle);
 		}
 		kfree(reply);
 	}
@@ -233,8 +232,7 @@ int novfs_open_conn_by_ref(struct novfs_
 			cpylen =
 				copy_to_user(pdata->reqData, &ocbr,
 						sizeof(ocbr));
-			DbgPrint("New Conn Handle = %X\n",
-					openConn->ConnHandle);
+			DbgPrint("New Conn Handle = %X", openConn->ConnHandle);
 		}
 		kfree(reply);
 	}
@@ -258,7 +256,7 @@ int novfs_raw_send(struct novfs_xplat *p
 	unsigned char *reqData;
 	unsigned long actualReplyLength = 0;
 
-	DbgPrint("[XPLAT] Process Raw NCP Send\n");
+	DbgPrint("[XPLAT] Process Raw NCP Send");
 	cpylen = copy_from_user(&xRequest, pdata->reqData, sizeof(xRequest));
 
 	/*
@@ -267,7 +265,7 @@ int novfs_raw_send(struct novfs_xplat *p
 	frag =
 	    kmalloc(xRequest.uNumReplyFrags * sizeof(struct nwc_frag), GFP_KERNEL);
 
-	DbgPrint("[XPLAT RawNCP] - Reply Frag Count 0x%X\n",
+	DbgPrint("[XPLAT RawNCP] - Reply Frag Count 0x%X",
 		 xRequest.uNumReplyFrags);
 
 	if (!frag)
@@ -280,12 +278,12 @@ int novfs_raw_send(struct novfs_xplat *p
 
 	cFrag = frag;
 	for (x = 0; x < xRequest.uNumReplyFrags; x++) {
-		DbgPrint("[XPLAT - RawNCP] - Frag Len = %d\n", cFrag->uLength);
+		DbgPrint("[XPLAT - RawNCP] - Frag Len = %d", cFrag->uLength);
 		totalLen += cFrag->uLength;
 		cFrag++;
 	}
 
-	DbgPrint("[XPLAT - RawNCP] - totalLen = %d\n", totalLen);
+	DbgPrint("[XPLAT - RawNCP] - totalLen = %d", totalLen);
 	datalen = 0;
 	reqFrag =
 	    kmalloc(xRequest.uNumRequestFrags * sizeof(struct nwc_frag),
@@ -308,9 +306,9 @@ int novfs_raw_send(struct novfs_xplat *p
 	 * Allocate the cmd Request
 	 */
 	cmdlen = datalen + sizeof(*cmd) + sizeof(*ncpData);
-	DbgPrint("[XPLAT RawNCP] - Frag Count 0x%X\n",
+	DbgPrint("[XPLAT RawNCP] - Frag Count 0x%X",
 		 xRequest.uNumRequestFrags);
-	DbgPrint("[XPLAT RawNCP] - Total Command Data Len = %x\n", cmdlen);
+	DbgPrint("[XPLAT RawNCP] - Total Command Data Len = %x", cmdlen);
 
 	cmd = kmalloc(cmdlen, GFP_KERNEL);
 	if (!cmd)
@@ -346,8 +344,8 @@ int novfs_raw_send(struct novfs_xplat *p
 		Queue_Daemon_Command((void *)cmd, cmdlen, NULL, 0,
 				(void **)&reply, &replylen,
 				INTERRUPTIBLE);
-	DbgPrint("RawNCP - reply = %x\n", reply);
-	DbgPrint("RawNCP - retCode = %x\n", retCode);
+	DbgPrint("RawNCP - reply = %x", reply);
+	DbgPrint("RawNCP - retCode = %x", retCode);
 
 	if (reply) {
 		/*
@@ -356,7 +354,7 @@ int novfs_raw_send(struct novfs_xplat *p
 		ncpReply = (struct nwd_ncp_rep *) reply->data;
 		retCode = reply->Reply.ErrorCode;
 
-		DbgPrint("RawNCP - Reply Frag Count 0x%X\n",
+		DbgPrint("RawNCP - Reply Frag Count 0x%X",
 				xRequest.uNumReplyFrags);
 
 		/*
@@ -368,7 +366,7 @@ int novfs_raw_send(struct novfs_xplat *p
 		totalLen = ncpReply->replyLen;
 		for (x = 0; x < xRequest.uNumReplyFrags; x++) {
 
-			DbgPrint("RawNCP - Copy Frag %d: 0x%X\n", x,
+			DbgPrint("RawNCP - Copy Frag %d: 0x%X", x,
 					cFrag->uLength);
 
 			datalen =
@@ -491,33 +489,33 @@ int novfs_login_id(struct novfs_xplat *p
 
 	cpylen = copy_from_user(&lgn, pdata->reqData, sizeof(lgn));
 
-	DbgPrint("NwLoginIdentity:\n");
+	DbgPrint("");
 	novfs_dump(sizeof(lgn), &lgn);
 
 	cpylen = copy_from_user(&nwcStr, lgn.pDomainName, sizeof(nwcStr));
-	DbgPrint("NwLoginIdentity: DomainName\n");
+	DbgPrint("DomainName\n");
 	novfs_dump(sizeof(nwcStr), &nwcStr);
 
 	if ((server.buffer = kmalloc(nwcStr.DataLen, GFP_KERNEL))) {
 		server.type = nwcStr.DataType;
 		server.len = nwcStr.DataLen;
 		if (!copy_from_user((void *)server.buffer, nwcStr.pBuffer, server.len)) {
-			DbgPrint("NwLoginIdentity: Server\n");
+			DbgPrint("Server");
 			novfs_dump(server.len, server.buffer);
 
 			cpylen = copy_from_user(&nwcStr, lgn.pObjectName, sizeof(nwcStr));
-			DbgPrint("NwLoginIdentity: ObjectName\n");
+			DbgPrint("ObjectName");
 			novfs_dump(sizeof(nwcStr), &nwcStr);
 
 			if ((username.buffer = kmalloc(nwcStr.DataLen, GFP_KERNEL))) {
 				username.type = nwcStr.DataType;
 				username.len = nwcStr.DataLen;
 				if (!copy_from_user((void *)username.buffer, nwcStr.pBuffer, username.len)) {
-					DbgPrint("NwLoginIdentity: User\n");
+					DbgPrint("User");
 					novfs_dump(username.len, username.buffer);
 
 					cpylen = copy_from_user(&nwcStr, lgn.pPassword, sizeof(nwcStr));
-					DbgPrint("NwLoginIdentity: Password\n");
+					DbgPrint("Password");
 					novfs_dump(sizeof(nwcStr), &nwcStr);
 
 					if ((password.buffer = kmalloc(nwcStr.DataLen, GFP_KERNEL))) {
@@ -949,19 +947,19 @@ int novfs_scan_conn_info(struct novfs_xp
 
 	pDConnInfo = (struct nwd_scan_conn_info *) cmd->data;
 
-	DbgPrint("NwScanConnInfo: Input Data\n");
-	DbgPrint("connInfo.uScanIndex = 0x%X\n", connInfo.uScanIndex);
-	DbgPrint("connInfo.uConnectionReference = 0x%X\n",
+	DbgPrint("Input Data");
+	__DbgPrint("    connInfo.uScanIndex = 0x%X\n", connInfo.uScanIndex);
+	__DbgPrint("    connInfo.uConnectionReference = 0x%X\n",
 			connInfo.uConnectionReference);
-	DbgPrint("connInfo.uScanInfoLevel = 0x%X\n",
+	__DbgPrint("    connInfo.uScanInfoLevel = 0x%X\n",
 			connInfo.uScanInfoLevel);
-	DbgPrint("connInfo.uScanInfoLen = 0x%X\n",
+	__DbgPrint("    connInfo.uScanInfoLen = 0x%X\n",
 			connInfo.uScanInfoLen);
-	DbgPrint("connInfo.uReturnInfoLength = 0x%X\n",
+	__DbgPrint("    connInfo.uReturnInfoLength = 0x%X\n",
 			connInfo.uReturnInfoLength);
-	DbgPrint("connInfo.uReturnInfoLevel = 0x%X\n",
+	__DbgPrint("    connInfo.uReturnInfoLevel = 0x%X\n",
 			connInfo.uReturnInfoLevel);
-	DbgPrint("connInfo.uScanFlags = 0x%X\n", connInfo.uScanFlags);
+	__DbgPrint("    connInfo.uScanFlags = 0x%X\n", connInfo.uScanFlags);
 
 	pDConnInfo->uScanIndex = connInfo.uScanIndex;
 	pDConnInfo->uConnectionReference =
@@ -990,10 +988,10 @@ int novfs_scan_conn_info(struct novfs_xp
 				(void **)&reply, &replylen,
 				INTERRUPTIBLE);
 	if (reply) {
-		DbgPrint("NwScanConnInfo: Reply recieved\n");
-		DbgPrint("   NextIndex = %x\n", connInfo.uScanIndex);
-		DbgPrint("   ErrorCode = %x\n", reply->Reply.ErrorCode);
-		DbgPrint("   data = %x\n", reply->data);
+		DbgPrint("Reply recieved");
+		__DbgPrint("   NextIndex = %x\n", connInfo.uScanIndex);
+		__DbgPrint("   ErrorCode = %x\n", reply->Reply.ErrorCode);
+		__DbgPrint("   data = %x\n", reply->data);
 
 		pDConnInfo = (struct nwd_scan_conn_info *) reply->data;
 		retCode = (unsigned long) reply->Reply.ErrorCode;
@@ -1044,8 +1042,7 @@ static void GetUserData(struct nwc_scan_
 
 	pDConnInfo = (struct nwd_scan_conn_info *) reply->data;
 	uLevel = pDConnInfo->uReturnInfoLevel;
-	DbgPrint
-	    ("[GetUserData] uLevel = %d, reply = 0x%p, reply->data = 0x%X\n",
+	DbgPrint("uLevel = %d, reply = 0x%p, reply->data = 0x%X",
 	     uLevel, reply, reply->data);
 
 	switch (uLevel) {
@@ -1082,8 +1079,7 @@ static void GetUserData(struct nwc_scan_
 			srcData = (unsigned char *) reply->data;
 			dataLen = reply->dataLen;
 
-			DbgPrint
-			    ("GetUserData NWC_CONN_INFO_TRAN_ADDR 0x%p -> 0x%p :: 0x%X\n",
+			DbgPrint("NWC_CONN_INFO_TRAN_ADDR 0x%p -> 0x%p :: 0x%X",
 			     srcData, connInfo->pReturnConnInfo, dataLen);
 
 			cpylen =
@@ -1120,7 +1116,7 @@ static void GetUserData(struct nwc_scan_
 	}
 
 	if (srcData && dataLen) {
-		DbgPrint("Copy Data in GetUserData 0x%p -> 0x%p :: 0x%X\n",
+		DbgPrint("Copy Data 0x%p -> 0x%p :: 0x%X",
 			 srcData, connInfo->pReturnConnInfo, dataLen);
 		cpylen =
 		    copy_to_user(connInfo->pReturnConnInfo, srcData, dataLen);
@@ -1302,11 +1298,10 @@ int novfs_get_preferred_DS_tree(struct n
 				reply->data + pDGetTree->DsTreeNameOffset;
 			p = (struct nwc_get_pref_ds_tree *) pdata->reqData;
 
-			DbgPrint
-				("NwcGetPreferredDSTree: Reply recieved\n");
-			DbgPrint("   TreeLen = %x\n",
+			DbgPrint("Reply recieved");
+			__DbgPrint("   TreeLen = %x\n",
 					pDGetTree->uTreeLength);
-			DbgPrint("   TreeName = %s\n", dPtr);
+			__DbgPrint("   TreeName = %s\n", dPtr);
 
 			cpylen =
 				copy_to_user(p, &pDGetTree->uTreeLength, 4);
@@ -1473,8 +1468,7 @@ int novfs_get_default_ctx(struct novfs_x
 		if (!retCode) {
 			pGet = (struct nwd_get_def_name_ctx *) reply->data;
 
-			DbgPrint
-				("NwcGetDefaultNameCtx: retCode=0x%x uNameLength1=%d uNameLength2=%d\n",
+			DbgPrint("retCode=0x%x uNameLength1=%d uNameLength2=%d",
 				 retCode, pGet->uNameLength,
 				 xplatCall.uNameLength);
 			if (xplatCall.uNameLength < pGet->uNameLength) {
@@ -1593,9 +1587,9 @@ int novfs_enum_ids(struct novfs_xplat *p
 	cmd->Command.SessionId = Session;
 	cmd->NwcCommand = NWC_ENUMERATE_IDENTITIES;
 
-	DbgPrint("NwcEnumIdentities: Send Request\n");
-	DbgPrint("   iterator = %x\n", xplatCall.Iterator);
-	DbgPrint("   cmdlen = %d\n", cmdlen);
+	DbgPrint("Send Request");
+	__DbgPrint("   iterator = %x\n", xplatCall.Iterator);
+	__DbgPrint("   cmdlen = %d\n", cmdlen);
 
 	pEnum = (struct nwd_enum_ids *) cmd->data;
 	pEnum->Iterator = xplatCall.Iterator;
@@ -1611,7 +1605,7 @@ int novfs_enum_ids(struct novfs_xplat *p
 		cpylen =
 			copy_to_user(&eId->Iterator, &pEnum->Iterator,
 					sizeof(pEnum->Iterator));
-		DbgPrint("[XPLAT NWCAPI] Found AuthId 0x%X\n",
+		DbgPrint("[XPLAT NWCAPI] Found AuthId 0x%X",
 				pEnum->AuthenticationId);
 		cpylen =
 			copy_to_user(&eId->AuthenticationId,
@@ -1638,7 +1632,7 @@ int novfs_enum_ids(struct novfs_xplat *p
 			str =
 				(char *)((char *)reply->data +
 						pEnum->domainNameOffset);
-			DbgPrint("[XPLAT NWCAPI] Found Domain %s\n",
+			DbgPrint("[XPLAT NWCAPI] Found Domain %s",
 					str);
 			cpylen =
 				copy_to_user(xferStr.pBuffer, str,
@@ -1655,7 +1649,7 @@ int novfs_enum_ids(struct novfs_xplat *p
 			str =
 				(char *)((char *)reply->data +
 						pEnum->objectNameOffset);
-			DbgPrint("[XPLAT NWCAPI] Found User %s\n", str);
+			DbgPrint("[XPLAT NWCAPI] Found User %s", str);
 			cpylen =
 				copy_to_user(xferStr.pBuffer, str,
 						pEnum->objectNameLen);
@@ -1848,19 +1842,19 @@ int novfs_set_map_drive(struct novfs_xpl
 	unsigned long status = 0, datalen, cmdlen, replylen;
 	struct nwc_map_drive_ex symInfo;
 
-	DbgPrint("Call to NwcSetMapDrive\n");
+	DbgPrint("");
 	cmdlen = sizeof(*cmd);
 	if (copy_from_user(&symInfo, pdata->reqData, sizeof(symInfo)))
 		return -EFAULT;
 	datalen = sizeof(symInfo) + symInfo.dirPathOffsetLength +
 	    symInfo.linkOffsetLength;
 
-	DbgPrint(" cmdlen = %d\n", cmdlen);
-	DbgPrint(" dataLen = %d\n", datalen);
-	DbgPrint(" symInfo.dirPathOffsetLength = %d\n",
+	__DbgPrint(" cmdlen = %d\n", cmdlen);
+	__DbgPrint(" dataLen = %d\n", datalen);
+	__DbgPrint(" symInfo.dirPathOffsetLength = %d\n",
 		 symInfo.dirPathOffsetLength);
-	DbgPrint(" symInfo.linkOffsetLength = %d\n", symInfo.linkOffsetLength);
-	DbgPrint(" pdata->datalen = %d\n", pdata->reqLen);
+	__DbgPrint(" symInfo.linkOffsetLength = %d\n", symInfo.linkOffsetLength);
+	__DbgPrint(" pdata->datalen = %d\n", pdata->reqLen);
 
 	novfs_dump(sizeof(symInfo), &symInfo);
 
@@ -1901,7 +1895,7 @@ int novfs_unmap_drive(struct novfs_xplat
 	unsigned long status = 0, datalen, cmdlen, replylen, cpylen;
 	struct nwc_unmap_drive_ex symInfo;
 
-	DbgPrint("Call to NwcUnMapDrive\n");
+	DbgPrint("");
 
 	cpylen = copy_from_user(&symInfo, pdata->reqData, sizeof(symInfo));
 	cmdlen = sizeof(*cmd);
@@ -1940,7 +1934,7 @@ int novfs_enum_drives(struct novfs_xplat
 	unsigned long offset;
 	char *cp;
 
-	DbgPrint("Call to NwcEnumerateDrives\n");
+	DbgPrint("");
 
 	cmdlen = sizeof(*cmd);
 	cmd = kmalloc(cmdlen, GFP_KERNEL);
@@ -1959,7 +1953,7 @@ int novfs_enum_drives(struct novfs_xplat
 
 	if (reply) {
 		status = reply->Reply.ErrorCode;
-		DbgPrint("Status Code = 0x%X\n", status);
+		DbgPrint("Status Code = 0x%X", status);
 		if (!status) {
 			offset =
 				sizeof(((struct nwc_get_mapped_drives *) pdata->
--- a/fs/novfs/proc.c
+++ b/fs/novfs/proc.c
@@ -52,7 +52,7 @@ static int Novfs_Get_Version(char *page,
 					    novfs_current_mnt);
 			}
 		}
-		DbgPrint("Novfs_Get_Version:\n%s\n", buf);
+		DbgPrint("%s", buf);
 	}
 	*eof = 1;
 	return (len);
@@ -136,18 +136,18 @@ int novfs_proc_init(void)
 void novfs_proc_exit(void)
 {
 
-	DbgPrint("Uninit_Procfs_Interface remove_proc_entry(Version, NULL)\n");
+	DbgPrint("remove_proc_entry(Version, NULL)\n");
 	remove_proc_entry("Version", novfs_procfs_dir);
 
-	DbgPrint("Uninit_Procfs_Interface remove_proc_entry(Control, NULL)\n");
+	DbgPrint("remove_proc_entry(Control, NULL)\n");
 	remove_proc_entry("Control", novfs_procfs_dir);
 
-	DbgPrint("Uninit_Procfs_Interface remove_proc_entry(Library, NULL)\n");
+	DbgPrint("remove_proc_entry(Library, NULL)\n");
 	remove_proc_entry("Library", novfs_procfs_dir);
 
-	DbgPrint("Uninit_Procfs_Interface remove_proc_entry(%s, NULL)\n",
+	DbgPrint("remove_proc_entry(%s, NULL)\n",
 		 MODULE_NAME);
 	remove_proc_entry(MODULE_NAME, NULL);
 
-	DbgPrint("Uninit_Procfs_Interface done\n");
+	DbgPrint("done\n");
 }
--- a/fs/novfs/profile.c
+++ b/fs/novfs/profile.c
@@ -74,7 +74,7 @@ static ssize_t User_proc_write_DbgBuffer
 		cpylen = copy_from_user(lbuf, buf, nbytes);
 
 		lbuf[nbytes] = 0;
-		DbgPrint("User_proc_write_DbgBuffer: %s\n", lbuf);
+		DbgPrint("%s", lbuf);
 
 		for (i = 0; lbuf[i] && lbuf[i] != '\n'; i++) ;
 
@@ -196,7 +196,7 @@ static int LocalPrint(char *Fmt, ...)
 	return (len);
 }
 
-int DbgPrint(char *Fmt, ...)
+int ___DbgPrint(const char *site, const char *Fmt, ...)
 {
 	char *buf;
 	int len = 0;
@@ -209,9 +209,9 @@ int DbgPrint(char *Fmt, ...)
 		if (buf) {
 			va_start(args, Fmt);
 			len = sprintf(buf, "[%d] ", current->pid);
+			len += strncat(buf + len, site, DBG_BUFFER_SIZE - len);
 
-			len +=
-			    vsnprintf(buf + len, DBG_BUFFER_SIZE - len, Fmt,
+			len += vsnprintf(buf + len, DBG_BUFFER_SIZE - len, Fmt,
 				      args);
 			if (-1 == len) {
 				len = DBG_BUFFER_SIZE - 1;
@@ -285,7 +285,7 @@ void novfs_dump(int size, void *dumpptr)
 				if (0 == (i % 16)) {
 					if (line) {
 						doline(bptr, ptr, line);
-						DbgPrint("%s\n", buf);
+						__DbgPrint("%s\n", buf);
 						bptr = buf;
 					}
 					bptr += sprintf(bptr, "0x%p: ", ptr);
@@ -294,7 +294,7 @@ void novfs_dump(int size, void *dumpptr)
 				bptr += sprintf(bptr, "%02x ", *ptr++);
 			}
 			doline(bptr, ptr, line);
-			DbgPrint("%s\n", buf);
+			__DbgPrint("%s\n", buf);
 		}
 	}
 }
--- a/fs/novfs/vfs.h
+++ b/fs/novfs/vfs.h
@@ -372,7 +372,10 @@ extern char *novfs_scope_get_username(vo
  * profile.c functions
  */
 extern u64 get_nanosecond_time(void);
-extern int DbgPrint(char *Fmt, ...);
+extern int ___DbgPrint(const char *site, const char *Fmt, ...);
+#define DbgPrint(fmt, args...)	___DbgPrint(__func__, ": " fmt "\n", ##args)
+#define __DbgPrint(fmt, args...)	___DbgPrint("", fmt, ##args)
+
 extern void novfs_profile_init(void);
 extern void novfs_profile_exit(void);
 
