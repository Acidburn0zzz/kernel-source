diff -u linux/include/net/tcp.h-o linux/include/net/tcp.h
--- linux/include/net/tcp.h-o	1970-01-01 01:12:51.000000000 +0100
+++ linux/include/net/tcp.h	2004-03-25 03:04:23.000000000 +0100
@@ -18,8 +18,10 @@
 #ifndef _TCP_H
 #define _TCP_H
 
+#if 0
 #define TCP_DEBUG 1
 #define FASTRETRANS_DEBUG 1
+#endif
 
 /* Cancel timers, when they are not required. */
 #undef TCP_CLEAR_TIMERS
diff -u linux/include/net/sock.h-o linux/include/net/sock.h
--- linux/include/net/sock.h-o	2004-03-21 21:11:55.000000000 +0100
+++ linux/include/net/sock.h	2004-03-25 03:05:30.000000000 +0100
@@ -1033,7 +1033,7 @@
  *	Enable debug/info messages 
  */
 
-#if 0
+#if 1
 #define NETDEBUG(x)	do { } while (0)
 #else
 #define NETDEBUG(x)	do { x; } while (0)
diff -u linux/net/ipv4/esp4.c-o linux/net/ipv4/esp4.c
--- linux/net/ipv4/esp4.c-o	2004-03-18 10:35:04.000000000 +0100
+++ linux/net/ipv4/esp4.c	2004-03-25 03:10:43.000000000 +0100
@@ -447,8 +447,8 @@
 	x = xfrm_state_lookup((xfrm_address_t *)&iph->daddr, esph->spi, IPPROTO_ESP, AF_INET);
 	if (!x)
 		return;
-	printk(KERN_DEBUG "pmtu discovery on SA ESP/%08x/%08x\n",
-	       ntohl(esph->spi), ntohl(iph->daddr));
+	NETDEBUG(printk(KERN_DEBUG "pmtu discovery on SA ESP/%08x/%08x\n",
+			ntohl(esph->spi), ntohl(iph->daddr)));
 	xfrm_state_put(x);
 }
 
@@ -511,10 +511,10 @@
 
 		if (aalg_desc->uinfo.auth.icv_fullbits/8 !=
 		    crypto_tfm_alg_digestsize(esp->auth.tfm)) {
-			printk(KERN_INFO "ESP: %s digestsize %u != %hu\n",
+			NETDEBUG(printk(KERN_INFO "ESP: %s digestsize %u != %hu\n",
 			       x->aalg->alg_name,
 			       crypto_tfm_alg_digestsize(esp->auth.tfm),
-			       aalg_desc->uinfo.auth.icv_fullbits/8);
+			       aalg_desc->uinfo.auth.icv_fullbits/8));
 			goto error;
 		}
 
diff -u linux/net/ipv4/icmp.c-o linux/net/ipv4/icmp.c
--- linux/net/ipv4/icmp.c-o	1970-01-01 01:12:51.000000000 +0100
+++ linux/net/ipv4/icmp.c	2004-03-25 03:10:40.000000000 +0100
@@ -620,11 +620,11 @@
 			break;
 		case ICMP_FRAG_NEEDED:
 			if (ipv4_config.no_pmtu_disc) {
-				if (net_ratelimit())
+				NETDEBUG(if (net_ratelimit())
 					printk(KERN_INFO "ICMP: %u.%u.%u.%u: "
 							 "fragmentation needed "
 							 "and DF set.\n",
-					       NIPQUAD(iph->daddr));
+					       NIPQUAD(iph->daddr)));
 			} else {
 				info = ip_rt_frag_needed(iph,
 						     ntohs(icmph->un.frag.mtu));
@@ -633,10 +633,10 @@
 			}
 			break;
 		case ICMP_SR_FAILED:
-			if (net_ratelimit())
+			NETDEBUG(if (net_ratelimit())
 				printk(KERN_INFO "ICMP: %u.%u.%u.%u: Source "
 						 "Route Failed.\n",
-				       NIPQUAD(iph->daddr));
+				       NIPQUAD(iph->daddr)));
 			break;
 		default:
 			break;
diff -u linux/net/ipv4/ipcomp.c-o linux/net/ipv4/ipcomp.c
--- linux/net/ipv4/ipcomp.c-o	2004-03-21 21:11:59.000000000 +0100
+++ linux/net/ipv4/ipcomp.c	2004-03-25 03:09:14.000000000 +0100
@@ -258,8 +258,8 @@
 	                      spi, IPPROTO_COMP, AF_INET);
 	if (!x)
 		return;
-	printk(KERN_DEBUG "pmtu discovery on SA IPCOMP/%08x/%u.%u.%u.%u\n",
-	       spi, NIPQUAD(iph->daddr));
+	NETDEBUG(printk(KERN_DEBUG "pmtu discovery on SA IPCOMP/%08x/%u.%u.%u.%u\n",
+	       spi, NIPQUAD(iph->daddr)));
 	xfrm_state_put(x);
 }
 
diff -u linux/net/ipv6/ah6.c-o linux/net/ipv6/ah6.c
--- linux/net/ipv6/ah6.c-o	2004-03-21 21:12:00.000000000 +0100
+++ linux/net/ipv6/ah6.c	2004-03-25 03:12:16.000000000 +0100
@@ -92,8 +92,8 @@
 			*nh_offset = offset;
 			offset += ipv6_optlen(exthdr);
 			if (!zero_out_mutable_opts(exthdr)) {
-				if (net_ratelimit())
-					printk(KERN_WARNING "overrun hopopts\n"); 
+				NETDEBUG(if (net_ratelimit())
+					printk(KERN_WARNING "overrun hopopts\n")); 
 				return 0;
 			}
 			nexthdr = exthdr->nexthdr;
@@ -112,8 +112,8 @@
 			*nh_offset = offset;
 			offset += ipv6_optlen(exthdr);
 			if (!zero_out_mutable_opts(exthdr))  {
-				if (net_ratelimit())
-					printk(KERN_WARNING "overrun destopt\n"); 
+				NETDEBUG(if (net_ratelimit())
+					printk(KERN_WARNING "overrun destopt\n")); 
 				return 0;
 			}
 			nexthdr = exthdr->nexthdr;
@@ -130,8 +130,8 @@
 				exthdr = (struct ipv6_opt_hdr*)(skb->nh.raw + offset);
 				nextnexthdr = exthdr->nexthdr;
 				if (!zero_out_mutable_opts(exthdr)) {
-					if (net_ratelimit())
-						printk(KERN_WARNING "overrun destopt\n");
+					NETDEBUG(if (net_ratelimit())
+						printk(KERN_WARNING "overrun destopt\n"));
 					return 0;
 				}
 			}
@@ -322,8 +322,8 @@
 		skb_push(skb, skb->data - skb->nh.raw);
 		ahp->icv(ahp, skb, ah->auth_data);
 		if (memcmp(ah->auth_data, auth_data, ahp->icv_trunc_len)) {
-			if (net_ratelimit())
-				printk(KERN_WARNING "ipsec ah authentication error\n");
+			NETDEBUG(if (net_ratelimit())
+				printk(KERN_WARNING "ipsec ah authentication error\n"));
 			x->stats.integrity_failed++;
 			goto free_out;
 		}
@@ -368,9 +368,9 @@
 	if (!x)
 		return;
 
-	printk(KERN_DEBUG "pmtu discovery on SA AH/%08x/"
+	NETDEBUG(printk(KERN_DEBUG "pmtu discovery on SA AH/%08x/"
 			"%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n",
-	       ntohl(ah->spi), NIP6(iph->daddr));
+	       ntohl(ah->spi), NIP6(iph->daddr)));
 
 	xfrm_state_put(x);
 }
diff -u linux/net/ipv6/esp6.c-o linux/net/ipv6/esp6.c
--- linux/net/ipv6/esp6.c-o	2004-03-18 10:35:05.000000000 +0100
+++ linux/net/ipv6/esp6.c	2004-03-25 03:12:53.000000000 +0100
@@ -278,9 +278,9 @@
 
 		padlen = nexthdr[0];
 		if (padlen+2 >= elen) {
-			if (net_ratelimit()) {
+			NETDEBUG(if (net_ratelimit()) {
 				printk(KERN_WARNING "ipsec esp packet is garbage padlen=%d, elen=%d\n", padlen+2, elen);
-			}
+			});
 			ret = -EINVAL;
 			goto out;
 		}
diff -u linux/net/ipv6/datagram.c-o linux/net/ipv6/datagram.c
--- linux/net/ipv6/datagram.c-o	2004-03-21 21:12:00.000000000 +0100
+++ linux/net/ipv6/datagram.c	2004-03-25 03:12:36.000000000 +0100
@@ -427,8 +427,8 @@
 			break;
 
 		default:
-			if (net_ratelimit())
-				printk(KERN_DEBUG "invalid cmsg type: %d\n", cmsg->cmsg_type);
+			NETDEBUG(if (net_ratelimit())
+				printk(KERN_DEBUG "invalid cmsg type: %d\n", cmsg->cmsg_type));
 			err = -EINVAL;
 			break;
 		};
diff -u linux/net/ipv6/icmp.c-o linux/net/ipv6/icmp.c
--- linux/net/ipv6/icmp.c-o	2004-03-18 10:35:08.000000000 +0100
+++ linux/net/ipv6/icmp.c	2004-03-25 03:17:57.000000000 +0100
@@ -332,8 +332,8 @@
 	 *	for now we don't know that.
 	 */
 	if ((addr_type == IPV6_ADDR_ANY) || (addr_type & IPV6_ADDR_MULTICAST)) {
-		if (net_ratelimit())
-			printk(KERN_DEBUG "icmpv6_send: addr_any/mcast source\n");
+		NETDEBUG(if (net_ratelimit())
+			printk(KERN_DEBUG "icmpv6_send: addr_any/mcast source\n"));
 		return;
 	}
 
@@ -341,8 +341,8 @@
 	 *	Never answer to a ICMP packet.
 	 */
 	if (is_ineligible(skb)) {
-		if (net_ratelimit())
-			printk(KERN_DEBUG "icmpv6_send: no reply to icmp error\n"); 
+		NETDEBUG(if (net_ratelimit())
+			printk(KERN_DEBUG "icmpv6_send: no reply to icmp error\n")); 
 		return;
 	}
 
@@ -388,8 +388,8 @@
 	len = skb->len - msg.offset;
 	len = min_t(unsigned int, len, IPV6_MIN_MTU - sizeof(struct ipv6hdr) -sizeof(struct icmp6hdr));
 	if (len < 0) {
-		if (net_ratelimit())
-			printk(KERN_DEBUG "icmp: len problem\n");
+		NETDEBUG(if (net_ratelimit())
+			printk(KERN_DEBUG "icmp: len problem\n"));
 		goto out_dst_release;
 	}
 
@@ -575,17 +575,17 @@
 		skb->ip_summed = CHECKSUM_UNNECESSARY;
 		if (csum_ipv6_magic(saddr, daddr, skb->len, IPPROTO_ICMPV6,
 				    skb->csum)) {
-			if (net_ratelimit())
-				printk(KERN_DEBUG "ICMPv6 hw checksum failed\n");
+			NETDEBUG(if (net_ratelimit())
+				printk(KERN_DEBUG "ICMPv6 hw checksum failed\n"));
 			skb->ip_summed = CHECKSUM_NONE;
 		}
 	}
 	if (skb->ip_summed == CHECKSUM_NONE) {
 		if (csum_ipv6_magic(saddr, daddr, skb->len, IPPROTO_ICMPV6,
 				    skb_checksum(skb, 0, skb->len, 0))) {
-			if (net_ratelimit())
+			NETDEBUG(if (net_ratelimit())
 				printk(KERN_DEBUG "ICMPv6 checksum failed [%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x > %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x]\n",
-				       NIP6(*saddr), NIP6(*daddr));
+				       NIP6(*saddr), NIP6(*daddr)));
 			goto discard_it;
 		}
 	}
@@ -661,8 +661,8 @@
 		break;
 
 	default:
-		if (net_ratelimit())
-			printk(KERN_DEBUG "icmpv6: msg of unknown type\n");
+		NETDEBUG(if (net_ratelimit())
+			printk(KERN_DEBUG "icmpv6: msg of unknown type\n"));
 
 		/* informational */
 		if (type & ICMPV6_INFOMSG_MASK)
diff -u linux/net/ipv6/exthdrs.c-o linux/net/ipv6/exthdrs.c
--- linux/net/ipv6/exthdrs.c-o	2004-03-18 10:35:08.000000000 +0100
+++ linux/net/ipv6/exthdrs.c	2004-03-25 03:13:25.000000000 +0100
@@ -450,8 +450,8 @@
 		((struct inet6_skb_parm*)skb->cb)->ra = optoff;
 		return 1;
 	}
-	if (net_ratelimit())
-		printk(KERN_DEBUG "ipv6_hop_ra: wrong RA length %d\n", skb->nh.raw[optoff+1]);
+	NETDEBUG(if (net_ratelimit())
+		 printk(KERN_DEBUG "ipv6_hop_ra: wrong RA length %d\n", skb->nh.raw[optoff+1]));
 	kfree_skb(skb);
 	return 0;
 }
@@ -463,8 +463,8 @@
 	u32 pkt_len;
 
 	if (skb->nh.raw[optoff+1] != 4 || (optoff&3) != 2) {
-		if (net_ratelimit())
-			printk(KERN_DEBUG "ipv6_hop_jumbo: wrong jumbo opt length/alignment %d\n", skb->nh.raw[optoff+1]);
+		NETDEBUG(if (net_ratelimit())
+			 printk(KERN_DEBUG "ipv6_hop_jumbo: wrong jumbo opt length/alignment %d\n", skb->nh.raw[optoff+1]));
 		goto drop;
 	}
 
diff -u linux/net/ipv6/udp.c-o linux/net/ipv6/udp.c
--- linux/net/ipv6/udp.c-o	2004-03-18 10:35:08.000000000 +0100
+++ linux/net/ipv6/udp.c	2004-03-25 03:17:41.000000000 +0100
@@ -637,8 +637,8 @@
 		/* RFC 2460 section 8.1 says that we SHOULD log
 		   this error. Well, it is reasonable.
 		 */
-		if (net_ratelimit())
-			printk(KERN_INFO "IPv6: udp checksum is 0\n");
+		NETDEBUG(if (net_ratelimit())
+			printk(KERN_INFO "IPv6: udp checksum is 0\n"));
 		goto discard;
 	}
 
diff -u linux/net/ipv6/xfrm6_tunnel.c-o linux/net/ipv6/xfrm6_tunnel.c
--- linux/net/ipv6/xfrm6_tunnel.c-o	2004-03-18 10:35:05.000000000 +0100
+++ linux/net/ipv6/xfrm6_tunnel.c	2004-03-25 03:17:16.000000000 +0100
@@ -30,6 +30,8 @@
 #include <linux/ipv6.h>
 #include <linux/icmpv6.h>
 
+#define Iprintk(x...) 
+
 #define XFRM6_TUNNEL_HSIZE 1024
 /* note: we assume index of xfrm_tunnel_table[] == spi */
 static xfrm_address_t *xfrm6_tunnel_table[XFRM6_TUNNEL_HSIZE];
@@ -39,17 +41,17 @@
 static unsigned xfrm6_addr_hash(xfrm_address_t *addr)
 {
 	unsigned h;
-	printk(KERN_DEBUG "%s:called\n", __FUNCTION__);
+	Iprintk(KERN_DEBUG "%s:called\n", __FUNCTION__);
 	h = ntohl(addr->a6[0]^addr->a6[1]^addr->a6[2]^addr->a6[3]);
 	h = (h ^ (h>>16)) % XFRM6_TUNNEL_HSIZE;
-	printk(KERN_DEBUG "%s:hash:%u\n", __FUNCTION__, h);
+	Iprintk(KERN_DEBUG "%s:hash:%u\n", __FUNCTION__, h);
 	return h;
 }
 
 static void xfrm6_tunnel_htable_init(void)
 {
 	int i;
-	printk(KERN_DEBUG "%s:called\n", __FUNCTION__);
+	Iprintk(KERN_DEBUG "%s:called\n", __FUNCTION__);
 	for (i=0; i<XFRM6_TUNNEL_HSIZE; i++)
 		xfrm6_tunnel_table[i] = NULL;
 }
@@ -61,21 +63,21 @@
 	xfrm_address_t *index_addr;
 	int i;
 
-	printk(KERN_DEBUG "%s:called\n", __FUNCTION__);
+	Iprintk(KERN_DEBUG "%s:called\n", __FUNCTION__);
 	spin_lock(&xfrm6_tunnel_lock);
 	for (i = index; i < XFRM6_TUNNEL_HSIZE; i++) {
 		index_addr = xfrm6_tunnel_table[i];
 		if (index_addr == NULL)
 			continue;
 		if (!memcmp(index_addr, saddr, sizeof(xfrm_address_t))) {
-			printk(KERN_DEBUG "%s:match\n", __FUNCTION__);
+			Iprintk(KERN_DEBUG "%s:match\n", __FUNCTION__);
 			spi = htonl(i);
 			goto out;
 		}
 	}
 out:
 	spin_unlock(&xfrm6_tunnel_lock);
-	printk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,ntohl(spi));
+	Iprintk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,ntohl(spi));
 	return spi;
 }
 
@@ -89,7 +91,7 @@
 	spin_lock(&xfrm6_tunnel_lock);
 	for (i = index; i < XFRM6_TUNNEL_HSIZE; i++) {
 		if (xfrm6_tunnel_table[i] == NULL) {
-			printk(KERN_DEBUG "%s:new alloc:"
+			Iprintk(KERN_DEBUG "%s:new alloc:"
 				"%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n",
 				__FUNCTION__, NIP6(*(struct in6_addr *)saddr));
 			index_addr = kmalloc(sizeof(xfrm_address_t), GFP_ATOMIC);
@@ -102,20 +104,20 @@
 
 out:
 	spin_unlock(&xfrm6_tunnel_lock);
-	printk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,ntohl(spi));
+	Iprintk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,ntohl(spi));
 	return spi;
 }
 
 static void xfrm6_tunnel_free_spi(xfrm_address_t *saddr){
 	u32 index = ntohl(xfrm6_tunnel_spi_lookup(saddr));
 
-	printk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,index);
+	Iprintk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,index);
 	if (index) {
 		spin_lock(&xfrm6_tunnel_lock);
 		kfree(xfrm6_tunnel_table[index]);
 		xfrm6_tunnel_table[index] = NULL;
 		spin_unlock(&xfrm6_tunnel_lock);
-		printk(KERN_DEBUG "%s:spi freed\n", __FUNCTION__);
+		Iprintk(KERN_DEBUG "%s:spi freed\n", __FUNCTION__);
 	}
 }
 
@@ -249,7 +251,7 @@
 	}
 
 	spi = xfrm6_tunnel_spi_lookup((xfrm_address_t *)&iph->saddr);
-	printk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,spi);
+	Iprintk(KERN_DEBUG "%s:spi:%u\n", __FUNCTION__,spi);
 	x = xfrm_state_lookup((xfrm_address_t *)&iph->daddr, 
 			spi,
 			IPPROTO_IPV6, AF_INET6);
@@ -305,17 +307,17 @@
 		case ICMPV6_ADDR_UNREACH:
 		case ICMPV6_PORT_UNREACH:
 		default:
-			printk(KERN_ERR "xfrm ip6ip6: Destination Unreach.\n");
+			NETDEBUG(printk(KERN_ERR "xfrm ip6ip6: Destination Unreach.\n"););
 			break;
 		}
 		break;
 	case ICMPV6_PKT_TOOBIG:
-			printk(KERN_ERR "xfrm ip6ip6: Packet Too Big.\n");
+			NETDEBUG(printk(KERN_ERR "xfrm ip6ip6: Packet Too Big.\n"));
 		break;
 	case ICMPV6_TIME_EXCEED:
 		switch (code) {
 		case ICMPV6_EXC_HOPLIMIT:
-			printk(KERN_ERR "xfrm ip6ip6: Too small Hoplimit.\n");
+			NETDEBUG(printk(KERN_ERR "xfrm ip6ip6: Too small Hoplimit.\n"));
 			break;
 		case ICMPV6_EXC_FRAGTIME:
 		default: 
@@ -372,7 +374,7 @@
 int __init ip6ip6_init(void)
 #endif
 {
-	printk(KERN_DEBUG "ip6ip6 init\n");
+	Iprintk(KERN_DEBUG "ip6ip6 init\n");
 	if (xfrm_register_type(&ip6ip6_type, AF_INET6) < 0) {
 		printk(KERN_INFO "ip6ip6 init: can't add xfrm type\n");
 		return -EAGAIN;
@@ -392,7 +394,7 @@
 void __exit ip6ip6_fini(void)
 #endif
 {
-	printk(KERN_DEBUG "ip6ip6 fini\n");
+	Iprintk(KERN_DEBUG "ip6ip6 fini\n");
 	if (inet6_del_protocol(&ip6ip6_protocol, IPPROTO_IPV6) < 0)
 		printk(KERN_INFO "ip6ip6 close: can't remove protocol\n");
 	if (xfrm_unregister_type(&ip6ip6_type, AF_INET6) < 0)
diff -u linux/net/ipv6/ip6_output.c-o linux/net/ipv6/ip6_output.c
--- linux/net/ipv6/ip6_output.c-o	2004-03-18 10:35:08.000000000 +0100
+++ linux/net/ipv6/ip6_output.c	2004-03-25 03:17:55.000000000 +0100
@@ -169,8 +169,8 @@
 	dst = ip6_route_output(skb->sk, &fl);
 
 	if (dst->error) {
-		if (net_ratelimit())
-			printk(KERN_DEBUG "ip6_route_me_harder: No more route.\n");
+		NETDEBUG(if (net_ratelimit())
+			printk(KERN_DEBUG "ip6_route_me_harder: No more route.\n"));
 		dst_release(dst);
 		return -EINVAL;
 	}
