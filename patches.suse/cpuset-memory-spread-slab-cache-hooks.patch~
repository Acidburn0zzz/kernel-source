From: Paul Jackson <pj@sgi.com>
Subject: Change the kmem_cache_create calls for certain slab caches to support cpuset memory spreading
References: 150185

See the previous patches, cpuset_mem_spread, for an explanation of cpuset
memory spreading, and cpuset_mem_spread_slab_cache for the slab cache support
for memory spreading.

The slab caches marked for now are: dentry_cache, inode_cache, some xfs slab
caches, and buffer_head.  This list may change over time.  In particular,
other file system types that are used extensively on large NUMA systems may
want to allow for spreading their directory and inode slab cache entries.

Signed-off-by: Paul Jackson <pj@sgi.com>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Acked-by: Andreas Gruenbacher <agruen@suse.de>
---

 fs/buffer.c             |    7 +++++--
 fs/dcache.c             |    3 ++-
 fs/inode.c              |    9 +++++++--
 fs/xfs/linux-2.6/kmem.h |    2 +-
 4 files changed, 15 insertions(+), 6 deletions(-)

diff -puN fs/buffer.c~cpuset-memory-spread-slab-cache-hooks fs/buffer.c
--- devel/fs/buffer.c~cpuset-memory-spread-slab-cache-hooks	2006-02-27 20:58:16.000000000 -0800
+++ devel-akpm/fs/buffer.c	2006-02-27 20:58:16.000000000 -0800
@@ -3205,8 +3205,11 @@ void __init buffer_init(void)
 	int nrpages;
 
 	bh_cachep = kmem_cache_create("buffer_head",
-			sizeof(struct buffer_head), 0,
-			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC, init_buffer_head, NULL);
+					sizeof(struct buffer_head), 0,
+					(SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|
+					SLAB_MEM_SPREAD),
+					init_buffer_head,
+					NULL);
 
 	/*
 	 * Limit the bh occupancy to 10% of ZONE_NORMAL
diff -puN fs/dcache.c~cpuset-memory-spread-slab-cache-hooks fs/dcache.c
--- devel/fs/dcache.c~cpuset-memory-spread-slab-cache-hooks	2006-02-27 20:58:16.000000000 -0800
+++ devel-akpm/fs/dcache.c	2006-02-27 20:58:16.000000000 -0800
@@ -1682,7 +1682,8 @@ static void __init dcache_init(unsigned 
 	dentry_cache = kmem_cache_create("dentry_cache",
 					 sizeof(struct dentry),
 					 0,
-					 SLAB_RECLAIM_ACCOUNT|SLAB_PANIC,
+					 (SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|
+					 SLAB_MEM_SPREAD),
 					 NULL, NULL);
 	
 	set_shrinker(DEFAULT_SEEKS, shrink_dcache_memory);
diff -puN fs/inode.c~cpuset-memory-spread-slab-cache-hooks fs/inode.c
--- devel/fs/inode.c~cpuset-memory-spread-slab-cache-hooks	2006-02-27 20:58:16.000000000 -0800
+++ devel-akpm/fs/inode.c	2006-02-27 20:58:16.000000000 -0800
@@ -1375,8 +1375,13 @@ void __init inode_init(unsigned long mem
 	int loop;
 
 	/* inode slab cache */
-	inode_cachep = kmem_cache_create("inode_cache", sizeof(struct inode),
-				0, SLAB_RECLAIM_ACCOUNT|SLAB_PANIC, init_once, NULL);
+	inode_cachep = kmem_cache_create("inode_cache",
+					 sizeof(struct inode),
+					 0,
+					 (SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|
+					 SLAB_MEM_SPREAD),
+					 init_once,
+					 NULL);
 	set_shrinker(DEFAULT_SEEKS, shrink_icache_memory);
 
 	/* Hash may have been set up in inode_init_early */
diff -puN fs/xfs/linux-2.6/kmem.h~cpuset-memory-spread-slab-cache-hooks fs/xfs/linux-2.6/kmem.h
--- devel/fs/xfs/linux-2.6/kmem.h~cpuset-memory-spread-slab-cache-hooks	2006-02-27 20:58:16.000000000 -0800
+++ devel-akpm/fs/xfs/linux-2.6/kmem.h	2006-02-27 20:58:16.000000000 -0800
@@ -102,7 +102,7 @@ extern void  kmem_free(void *, size_t);
 
 #define KM_ZONE_HWALIGN	SLAB_HWCACHE_ALIGN
 #define KM_ZONE_RECLAIM	SLAB_RECLAIM_ACCOUNT
-#define KM_ZONE_SPREAD	0
+#define KM_ZONE_SPREAD	SLAB_MEM_SPREAD
 
 #define kmem_zone	kmem_cache
 #define kmem_zone_t	struct kmem_cache
_
