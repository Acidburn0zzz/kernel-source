From: Kurt Garloff <garloff@suse.de>
Subject: Tolerate PQ 3 at LUN 0 for scanning
Patch-mainline: 
References: 158532

Some devices report a peripheral qualifier of 3 for LUN 0; with the original
code, we would still try a REPORT_LUNS scan (if SCSI level is >= 3 or if we 
have the BLIST_REPORTLUNS2 passed in), but NOT any sequential scan.
Also, the device at LUN 0 (which is not connected according to the PQ) is not
registered with the OS.

Unfortunately, SANs exist that are SCSI-2 and do NOT support REPORT_LUNS, but
report a unknown device with PQ 3 on LUN 0. We still need to scan them, and
most probably we even need BLIST_SPARSELUN (and BLIST_LARGELUN). See the bug
reference for an infamous example.

This patch does cause a device that reports PQ3 at LUN 0 to be registered 
(though only sg will be attached as ensured in scsi_bus_match()), so scanning
can continue with LUN 1. It also prints the warning that the device flags
BLIST_LARGELUN and BLIST_SPARSELUN are likely needed, so non-null PQs at
higher LUNs would not result in a scan abort. LUNs above 0 with PQ 3 will
still be ignored, and a warning will be printed.

Note: One could argue that devices should be registered with the Linux mid-
layer despite PQ3; only sg would attach, which should not really hurt.
But probably some strange sparse lun devices exist, so we might want to
make it dependent on a BLIST_ flag.

PATCH NOT YET TESTED AND NOT YET ENABLED.

Acked-by: 
Signed-off-by: Kurt Garloff <garloff@suse.de>

--- linux-2.6.16/drivers/scsi/scsi_scan.c.orig	2006-03-20 18:21:20.000000000 +0100
+++ linux-2.6.16/drivers/scsi/scsi_scan.c	2006-03-20 19:08:11.551016599 +0100
@@ -807,6 +807,29 @@ static inline void scsi_destroy_sdev(str
 	put_device(&sdev->sdev_gendev);
 }
 
+/** 
+ * scsi_inq_str - print INQUIRY data from min to max index,
+ * strip trailing whitespace
+ * @buf:   Output buffer with at least end-first+1 bytes of space
+ * @inq:   Inquiry buffer (input)
+ * @first: Offset of string into inq
+ * @end:   Index after last character in inq
+ */
+static unsigned char* scsi_inq_str(unsigned char* buf, unsigned char *inq,
+				   unsigned first, unsigned end)
+{
+	unsigned term = 0;
+	for (idx = 0; idx+first < end && idx+first < inq[4]+5; ++idx) {
+		if (inq[idx+first] > 0x20) {
+			buf[idx] = inq[idx+first];
+			term = idx+1;
+		} else {
+			buf[idx] = ' ';
+		}
+	}
+	buf[term] = 0;
+	return buf;
+}
 
 /**
  * scsi_probe_and_add_lun - probe a LUN, if a LUN is found add it
@@ -885,11 +908,22 @@ static int scsi_probe_and_add_lun(struct
 		 * logical disk configured at sdev->lun, but there
 		 * is a target id responding.
 		 */
-		SCSI_LOG_SCAN_BUS(3, printk(KERN_INFO
-					"scsi scan: peripheral qualifier of 3,"
-					" no device added\n"));
-		res = SCSI_SCAN_TARGET_PRESENT;
-		goto out_free_result;
+		if (lun != 0) {
+			printk(KERN_INFO "scsi scan: periph.qual. of 3,"
+					" device %d:%d:%d:%d not added\n",
+					shost->host_no, starget->channel,
+					starget->id, lun);
+			res = SCSI_SCAN_TARGET_PRESENT;
+			goto out_free_result;
+		} else {
+			unsigned char vend[9], mod[17];
+			
+			printk(KERN_INFO "scsi scan: consider passing "
+					"scsi_mod.dev_flags=%s:%s:0x240\n",
+					scsi_inq_str(vend, result, 8, 16),
+					scsi_inq_str(mod, result, 16, 32));
+			/* bflags |= BLIST_SPARSELUN; */
+		}
 	}
 
 	res = scsi_add_lun(sdev, result, &bflags);
