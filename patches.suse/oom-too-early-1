From:  Nick Piggin <npiggin@suse.de>
Subject: Prevent OOM from kicking in too early
References: 153803

When __alloc_pages calls try_to_free_pages, it passes it in a list of zones
that it wants to reclaim. Previously, it would scan ~2x the pages in the zone
before giving up -- at which point __alloc_pages would see that it hasn't made
any progress and initiate the OOM sequence. As we have seen, in some instances
it takes more than 2 scans before we may be able to start reclaiming anything.

So the first patch basically stops __alloc_pages from going OOM until it does
not make any progress *and* all its zones are all_unreclaimable.


Index: linux-2.6/mm/vmscan.c
===================================================================
--- linux-2.6.orig/mm/vmscan.c
+++ linux-2.6/mm/vmscan.c
@@ -1390,9 +1390,10 @@ shrink_zone(struct zone *zone, struct sc
  * If a zone is deemed to be full of pinned pages then just give it a light
  * scan then give up on it.
  */
-static void
+static int
 shrink_caches(struct zone **zones, struct scan_control *sc)
 {
+	int all_unreclaimable = 1;
 	int i;
 
 	for (i = 0; zones[i] != NULL; i++) {
@@ -1411,8 +1412,12 @@ shrink_caches(struct zone **zones, struc
 		if (zone->all_unreclaimable && sc->priority != DEF_PRIORITY)
 			continue;	/* Let kswapd poll it */
 
+		all_unreclaimable = 0;
+
 		shrink_zone(zone, sc);
 	}
+
+	return all_unreclaimable;
 }
  
 /*
@@ -1430,6 +1435,7 @@ shrink_caches(struct zone **zones, struc
  */
 int try_to_free_pages(struct zone **zones, gfp_t gfp_mask)
 {
+	int all_unreclaimable;
 	int priority;
 	int ret = 0;
 	int total_scanned = 0, total_reclaimed = 0;
@@ -1462,7 +1468,7 @@ int try_to_free_pages(struct zone **zone
 		sc.swap_cluster_max = SWAP_CLUSTER_MAX;
 		if (!priority)
 			disable_swap_token();
-		shrink_caches(zones, &sc);
+		all_unreclaimable = shrink_caches(zones, &sc);
 		shrink_slab(sc.nr_scanned, gfp_mask, lru_pages);
 		if (reclaim_state) {
 			sc.nr_reclaimed += reclaim_state->reclaimed_slab;
@@ -1491,6 +1497,9 @@ int try_to_free_pages(struct zone **zone
 		if (sc.nr_scanned && priority < DEF_PRIORITY - 2)
 			blk_congestion_wait(WRITE, HZ/10);
 	}
+	/* still more we can do? */
+	if (!all_unreclaimable)
+		ret = 1;
 out:
 	for (i = 0; zones[i] != 0; i++) {
 		struct zone *zone = zones[i];
