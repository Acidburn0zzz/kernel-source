lkcd support for ppc64

Index: linux.t/arch/ppc64/Kconfig
===================================================================
--- linux.t.orig/arch/ppc64/Kconfig	2004-03-30 15:27:13.686866259 -0500
+++ linux.t/arch/ppc64/Kconfig	2004-03-30 15:27:30.461881637 -0500
@@ -349,6 +349,59 @@ source "arch/ppc64/oprofile/Kconfig"
 
 menu "Kernel hacking"
 
+config CRASH_DUMP
+	tristate "Crash dump support"
+	default n
+	---help---
+	   Say Y here to enable saving an image of system memory when a panic
+	   or other error occurs. Dumps can also be forced with the SysRq+d
+	   key if MAGIC_SYSRQ is enabled.
+
+config CRASH_DUMP_BLOCKDEV
+	tristate "Crash dump block device driver"
+	depends on CRASH_DUMP
+	help
+	  Say Y to allow saving crash dumps directly to a disk device.
+	
+config CRASH_DUMP_NETDEV
+	tristate "Crash dump network device driver"
+	depends on CRASH_DUMP
+	help
+	  Say Y to allow saving crash dumps over a network device.
+
+config CRASH_DUMP_MEMDEV
+	bool "Crash dump staged memory driver"
+	depends on CRASH_DUMP
+	help
+	  Say Y to allow intermediate saving crash dumps in spare
+	  memory pages which would then be written out to disk
+	  later. Need 'kexec' support for this to work.
+	     **** Not supported at present ****
+
+config CRASH_DUMP_SOFTBOOT
+	bool "Save crash dump across a soft reboot"
+	help
+	  Say Y to allow a crash dump to be preserved in memory
+	  pages across a soft reboot and written out to disk
+	  thereafter. For this to work, CRASH_DUMP must be
+	  configured as part of the kernel (not as a module).
+	  Need 'kexec' support to use this option.
+	    **** Not supported at present ****
+
+config CRASH_DUMP_COMPRESS_RLE
+	tristate "Crash dump RLE compression"
+	depends on CRASH_DUMP
+	help
+	  Say Y to allow saving dumps with Run Length Encoding compression.
+
+config CRASH_DUMP_COMPRESS_GZIP
+	tristate "Crash dump GZIP compression"
+	select ZLIB_INFLATE
+	select ZLIB_DEFLATE
+	depends on CRASH_DUMP
+	help
+	  Say Y to allow saving dumps with Gnu Zip compression.
+
 config DEBUG_KERNEL
 	bool "Kernel debugging"
 	help
Index: linux.t/arch/ppc64/boot/Makefile
===================================================================
--- linux.t.orig/arch/ppc64/boot/Makefile	2004-03-12 16:27:16.000000000 -0500
+++ linux.t/arch/ppc64/boot/Makefile	2004-03-30 15:27:30.483879034 -0500
@@ -124,5 +124,6 @@ $(obj)/imagesize.c: vmlinux
 
 install: $(CONFIGURE) $(obj)/$(BOOTIMAGE)
 	sh -x $(src)/install.sh "$(KERNELRELEASE)" "$(obj)/$(BOOTIMAGE)" "$(TOPDIR)/System.map" "$(INSTALL_PATH)"
+	if [ -f init/kerntypes.o ]; then cp init/kerntypes.o $(INSTALL_PATH)/Kerntypes; fi
 
 clean-files := $(patsubst $(obj)/%,%, $(obj-boot))
Index: linux.t/arch/ppc64/kernel/lmb.c
===================================================================
--- linux.t.orig/arch/ppc64/kernel/lmb.c	2004-03-12 16:27:16.000000000 -0500
+++ linux.t/arch/ppc64/kernel/lmb.c	2004-03-30 15:27:30.491878087 -0500
@@ -20,7 +20,7 @@
 #include <asm/abs_addr.h>
 #include <asm/bitops.h>
 
-struct lmb lmb __initdata;
+struct lmb lmb;
 
 static unsigned long __init
 lmb_addrs_overlap(unsigned long base1, unsigned long size1,
@@ -315,3 +315,30 @@ lmb_abs_to_phys(unsigned long aa)
 
 	return pa;
 }
+
+/*
+ * This is the copy of page_is_ram (mm/init.c). The difference is 
+ * it identifies all memory holes.
+ */
+int dump_page_is_ram(unsigned long pfn)
+{
+        int i;
+	unsigned long paddr = (pfn << PAGE_SHIFT);
+
+	for (i=0; i < lmb.memory.cnt ;i++) {
+		unsigned long base;
+
+#ifdef CONFIG_MSCHUNKS
+		base = lmb.memory.region[i].physbase;
+#else
+		base = lmb.memory.region[i].base;
+#endif
+		if ((paddr >= base) &&
+			(paddr < (base + lmb.memory.region[i].size))) {
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
Index: linux.t/arch/ppc64/kernel/ppc_ksyms.c
===================================================================
--- linux.t.orig/arch/ppc64/kernel/ppc_ksyms.c	2004-03-30 15:26:29.653120751 -0500
+++ linux.t/arch/ppc64/kernel/ppc_ksyms.c	2004-03-30 15:27:30.492877968 -0500
@@ -161,6 +161,17 @@ EXPORT_SYMBOL(irq_desc);
 EXPORT_SYMBOL(get_wchan);
 EXPORT_SYMBOL(console_drivers);
 
+#ifdef CONFIG_CRASH_DUMP_MODULE
+extern int dump_page_is_ram(unsigned long);
+EXPORT_SYMBOL(dump_page_is_ram);
+#ifdef CONFIG_SMP
+EXPORT_SYMBOL(irq_affinity);
+extern void stop_this_cpu(void *);
+EXPORT_SYMBOL(stop_this_cpu);
+EXPORT_SYMBOL(dump_send_ipi);
+#endif
+#endif
+
 EXPORT_SYMBOL(tb_ticks_per_usec);
 EXPORT_SYMBOL(paca);
 EXPORT_SYMBOL(cur_cpu_spec);
Index: linux.t/arch/ppc64/kernel/smp.c
===================================================================
--- linux.t.orig/arch/ppc64/kernel/smp.c	2004-03-30 15:26:49.273769894 -0500
+++ linux.t/arch/ppc64/kernel/smp.c	2004-03-30 15:27:30.494877732 -0500
@@ -28,6 +28,7 @@
 #include <linux/spinlock.h>
 #include <linux/cache.h>
 #include <linux/err.h>
+#include <linux/dump.h>
 #include <linux/sysdev.h>
 #include <linux/cpu.h>
 
@@ -71,6 +72,7 @@ EXPORT_SYMBOL(cpu_possible_map);
 struct smp_ops_t *smp_ops;
 
 static volatile unsigned int cpu_callin_map[NR_CPUS];
+static int (*dump_ipi_function_ptr)(struct pt_regs *) = NULL;
 
 extern unsigned char stab_array[];
 
@@ -705,9 +707,16 @@ void smp_message_recv(int msg, struct pt
 		/* spare */
 		break;
 #endif
-#ifdef CONFIG_DEBUGGER
+#if defined(CONFIG_DEBUGGER) || defined(CONFIG_CRASH_DUMP) \
+	|| defined(CONFIG_CRASH_DUMP_MODULE)
 	case PPC_MSG_DEBUGGER_BREAK:
-		debugger(regs);
+		if (dump_ipi_function_ptr) {
+			dump_ipi_function_ptr(regs);
+		}
+#ifdef CONFIG_DEBUGGER
+		else
+			debugger(regs);
+#endif
 		break;
 #endif
 	default:
@@ -729,7 +738,16 @@ void smp_send_debugger_break(int cpu)
 }
 #endif
 
-static void stop_this_cpu(void *dummy)
+void dump_send_ipi(int (*dump_ipi_callback)(struct pt_regs *))
+{
+	dump_ipi_function_ptr = dump_ipi_callback;
+	if (dump_ipi_callback) {
+		mb();
+		smp_ops->message_pass(MSG_ALL_BUT_SELF, PPC_MSG_DEBUGGER_BREAK);
+	}
+}
+
+void stop_this_cpu(void *dummy)
 {
 	local_irq_disable();
 	while (1)
Index: linux.t/arch/ppc64/kernel/traps.c
===================================================================
--- linux.t.orig/arch/ppc64/kernel/traps.c	2004-03-30 15:26:29.742110092 -0500
+++ linux.t/arch/ppc64/kernel/traps.c	2004-03-30 15:27:30.495877613 -0500
@@ -29,6 +29,7 @@
 #include <linux/interrupt.h>
 #include <linux/init.h>
 #include <linux/module.h>
+#include <linux/dump.h>
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
@@ -95,6 +96,7 @@ void die(const char *str, struct pt_regs
 	if (nl)
 		printk("\n");
 	show_regs(regs);
+	dump((char *)str, regs);
 	bust_spinlocks(0);
 	spin_unlock_irq(&die_lock);
 
Index: linux.t/arch/ppc64/kernel/xics.c
===================================================================
--- linux.t.orig/arch/ppc64/kernel/xics.c	2004-03-30 15:26:49.280769055 -0500
+++ linux.t/arch/ppc64/kernel/xics.c	2004-03-30 15:27:30.496877495 -0500
@@ -419,7 +419,8 @@ irqreturn_t xics_ipi_action(int irq, voi
 			smp_message_recv(PPC_MSG_MIGRATE_TASK, regs);
 		}
 #endif
-#ifdef CONFIG_DEBUGGER
+#if defined(CONFIG_DEBUGGER) || defined(CONFIG_CRASH_DUMP) \
+	|| defined(CONFIG_CRASH_DUMP_MODULE)
 		if (test_and_clear_bit(PPC_MSG_DEBUGGER_BREAK,
 				       &xics_ipi_message[cpu].value)) {
 			mb();
Index: linux.t/include/asm-ppc64/kmap_types.h
===================================================================
--- linux.t.orig/include/asm-ppc64/kmap_types.h	2004-01-09 01:59:33.000000000 -0500
+++ linux.t/include/asm-ppc64/kmap_types.h	2004-03-30 15:27:30.497877377 -0500
@@ -16,7 +16,8 @@ enum km_type {
 	KM_IRQ1,
 	KM_SOFTIRQ0,
 	KM_SOFTIRQ1,	
-	KM_TYPE_NR
+	KM_TYPE_NR,
+	KM_DUMP
 };
 
 #endif
Index: linux.t/include/asm-ppc64/lmb.h
===================================================================
--- linux.t.orig/include/asm-ppc64/lmb.h	2004-03-30 15:26:34.004599510 -0500
+++ linux.t/include/asm-ppc64/lmb.h	2004-03-30 15:27:30.498877258 -0500
@@ -47,7 +47,7 @@ struct lmb {
 	struct lmb_region reserved;
 };
 
-extern struct lmb lmb __initdata;
+extern struct lmb lmb;
 
 extern void __init lmb_init(void);
 extern void __init lmb_analyze(void);
Index: linux.t/include/asm-ppc64/smp.h
===================================================================
--- linux.t.orig/include/asm-ppc64/smp.h	2004-03-30 15:26:49.294767377 -0500
+++ linux.t/include/asm-ppc64/smp.h	2004-03-30 15:27:30.499877140 -0500
@@ -31,7 +31,7 @@
 extern void smp_send_debugger_break(int cpu);
 struct pt_regs;
 extern void smp_message_recv(int, struct pt_regs *);
-
+extern void dump_send_ipi(int (*dump_ipi_callback)(struct pt_regs *));
 
 #define smp_processor_id() (get_paca()->xPacaIndex)
 #define hard_smp_processor_id() (get_paca()->xHwProcNum)
