From: Greg Edwards <edwardsg@sgi.com>
Subject: System panics when DUMPDEV is not valid

Turns out there were two bugs here.  The first was the one Jay already
mentioned -- there are extra bdput calls in the error handling of the
dump_block_*_open functions.  bdput is already called in do_open() in
a failure case, and in blkdev_put().

The second bug is dump_config.dump_device is not reset if we failed to
set up the dump device.  If we next write to /sys/dump/compress after
sending a bogus device to /sys/dump/dumpdev, we'll panic in 
dump_compres_init() deferencing dump_config.dumper.

Signed-off-by: Greg Edwards <edwardsg@sgi.com>
Signed-off-by: Hannes Reinecke <hare@suse.de>

---
 drivers/dump/dump_blockdev.c |   26 ++++++++++++--------------
 drivers/dump/dump_setup.c    |    1 +
 2 files changed, 13 insertions(+), 14 deletions(-)

Index: linux/drivers/dump/dump_blockdev.c
===================================================================
--- linux.orig/drivers/dump/dump_blockdev.c	2006-05-10 10:29:44.970300383 -0500
+++ linux/drivers/dump/dump_blockdev.c	2006-05-10 10:30:35.557317421 -0500
@@ -344,14 +344,14 @@ dump_block_intr_open(struct dump_dev *de
 
 	/* get the block device opened */
 	if ((retval = blkdev_get(bdev, O_RDWR | O_LARGEFILE, 0))) {
-		goto err1;
+		goto err;
 	}
 
 	if ((dump_bdev->bio = kmalloc(sizeof(struct bio), GFP_KERNEL))
 		== NULL) {
 		printk("LKCD: Cannot allocate bio\n");
 		retval = -ENOMEM;
-		goto err2;
+		goto err1;
 	}
 
 	bio_init(dump_bdev->bio);
@@ -359,7 +359,7 @@ dump_block_intr_open(struct dump_dev *de
 	if ((bvec = kmalloc(sizeof(struct bio_vec) *
 		(DUMP_BUFFER_SIZE >> PAGE_SHIFT), GFP_KERNEL)) == NULL) {
 		retval = -ENOMEM;
-		goto err3;
+		goto err2;
 	}
 
 	/* assign the new dump dev structure */
@@ -378,7 +378,7 @@ dump_block_intr_open(struct dump_dev *de
 
 	if (retval) {
 		printk("LKCD: open: dump_block_map failed, ret %d\n", retval);
-		goto err3;
+		goto err2;
 	}
 
 	printk("LKCD: Block device (%d,%d) successfully configured for dumping\n",
@@ -389,11 +389,10 @@ dump_block_intr_open(struct dump_dev *de
 	/* after opening the block device, return */
 	return retval;
 
-err3:	dump_free_bio(dump_bdev->bio);
+err2:	dump_free_bio(dump_bdev->bio);
 	dump_bdev->bio = NULL;
-err2:	if (bdev) blkdev_put(bdev);
-		goto err;
-err1:	if (bdev) bdput(bdev);
+err1:	if (bdev)
+		blkdev_put(bdev);
 	dump_bdev->bdev = NULL;
 err:	return retval;
 }
@@ -424,7 +423,7 @@ dump_block_poll_open(struct dump_dev *de
 
 	/* get the block device opened */
 	if ((retval = blkdev_get(bdev, O_RDWR | O_LARGEFILE, 0))) {
-		goto err1;
+		goto err;
 	}
 
 	dump_bdev->bio = 0;
@@ -437,13 +436,13 @@ dump_block_poll_open(struct dump_dev *de
 	target = get_device(bdev->bd_disk->driverfs_dev);
 	if (!target) {
 		retval = -EINVAL;
-		goto err2;
+		goto err1;
 	}
 	retval = register_disk_dump_device(target,bdev);
 	if (retval == -EEXIST)
 		retval = 0;
 	else if (retval < 0)
-		goto err2;
+		goto err1;
 
         printk("LKCD: Block device (%d,%d) successfully configured for dumping using polling I/O\n",
 		MAJOR((dev_t)arg), MINOR((dev_t)arg));
@@ -451,9 +450,8 @@ dump_block_poll_open(struct dump_dev *de
 	/* after opening the block device, return */
 	return retval;
 
-err2:	if (bdev) blkdev_put(bdev);
-		goto err;
-err1:	if (bdev) bdput(bdev);
+err1:	if (bdev)
+		blkdev_put(bdev);
 err:	return retval;
 }
 
Index: linux/drivers/dump/dump_setup.c
===================================================================
--- linux.orig/drivers/dump/dump_setup.c	2006-05-10 10:29:44.970300383 -0500
+++ linux/drivers/dump/dump_setup.c	2006-05-10 10:30:35.565316633 -0500
@@ -615,6 +615,7 @@ static int dumper_setup(const char *devi
 				dump_config.dumper->name,
 				dump_config.dump_device);
 		dump_config.dumper = NULL;
+	        dump_config.dump_device = NULL;
 	}
 	return ret;
 }
