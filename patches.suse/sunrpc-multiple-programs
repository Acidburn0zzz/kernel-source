Support multiple program numbers on one RPC transport

The NFS and NFSACL programs run on the same RPC transport. This patch
adds support for this by changing svc_program into a chained list of
programs instead of a single program (on the server side).

On the client side, the same RPC transport can now be shared among
multiple RPC clients, so reference count the transport to determine
when it can be destroyed.

  Andreas Gruenbacher <agruen@suse.de>, SuSE Labs


Index: linux-2.6.0-test9/net/sunrpc/svc.c
===================================================================
--- linux-2.6.0-test9.orig/net/sunrpc/svc.c	2003-10-25 20:44:44.000000000 +0200
+++ linux-2.6.0-test9/net/sunrpc/svc.c	2003-10-28 15:48:45.000000000 +0100
@@ -324,8 +324,10 @@ svc_process(struct svc_serv *serv, struc
 		goto dropit;
 	}
 		
-	progp = serv->sv_program;
-	if (prog != progp->pg_prog)
+	for (progp = serv->sv_program; progp; progp = progp->pg_next)
+		if (prog == progp->pg_prog)
+			break;
+	if (progp == NULL)
 		goto err_bad_prog;
 
 	if (vers >= progp->pg_nvers ||
@@ -438,7 +440,7 @@ err_bad_auth:
 
 err_bad_prog:
 #ifdef RPC_PARANOIA
-	if (prog != 100227 || progp->pg_prog != 100003)
+	if (prog != 100227 || serv->sv_program->pg_prog != 100003)
 		printk("svc: unknown program %d (me %d)\n", prog, progp->pg_prog);
 	/* else it is just a Solaris client seeing if ACLs are supported */
 #endif
Index: linux-2.6.0-test9/net/sunrpc/clnt.c
===================================================================
--- linux-2.6.0-test9.orig/net/sunrpc/clnt.c	2003-10-25 20:43:25.000000000 +0200
+++ linux-2.6.0-test9/net/sunrpc/clnt.c	2003-10-28 15:48:45.000000000 +0100
@@ -116,6 +116,8 @@ rpc_create_client(struct rpc_xprt *xprt,
 	memset(clnt, 0, sizeof(*clnt));
 	atomic_set(&clnt->cl_users, 0);
 
+	atomic_inc(&xprt->users);
+
 	clnt->cl_xprt     = xprt;
 	clnt->cl_procinfo = version->procs;
 	clnt->cl_maxproc  = version->nrprocs;
@@ -210,7 +212,8 @@ rpc_destroy_client(struct rpc_clnt *clnt
 	if (clnt->cl_pathname[0])
 		rpc_rmdir(clnt->cl_pathname);
 	if (clnt->cl_xprt) {
-		xprt_destroy(clnt->cl_xprt);
+		if (atomic_dec_and_test(&clnt->cl_xprt->users))
+			xprt_destroy(clnt->cl_xprt);
 		clnt->cl_xprt = NULL;
 	}
 	kfree(clnt);
Index: linux-2.6.0-test9/include/linux/sunrpc/svc.h
===================================================================
--- linux-2.6.0-test9.orig/include/linux/sunrpc/svc.h	2003-10-25 20:43:47.000000000 +0200
+++ linux-2.6.0-test9/include/linux/sunrpc/svc.h	2003-10-28 15:48:45.000000000 +0100
@@ -231,9 +231,10 @@ struct svc_deferred_req {
 };
 
 /*
- * RPC program
+ * List of RPC programs on the same transport endpoint
  */
 struct svc_program {
+	struct svc_program *	pg_next;	/* other programs (same xprt) */
 	u32			pg_prog;	/* program number */
 	unsigned int		pg_lovers;	/* lowest version */
 	unsigned int		pg_hivers;	/* lowest version */
Index: linux-2.6.0-test9/include/linux/sunrpc/xprt.h
===================================================================
--- linux-2.6.0-test9.orig/include/linux/sunrpc/xprt.h	2003-10-25 20:44:11.000000000 +0200
+++ linux-2.6.0-test9/include/linux/sunrpc/xprt.h	2003-10-28 15:49:02.000000000 +0100
@@ -14,6 +14,7 @@
 #include <linux/in.h>
 #include <linux/sunrpc/sched.h>
 #include <linux/sunrpc/xdr.h>
+#include <asm/atomic.h>
 
 /*
  * The transport code maintains an estimate on the maximum number of out-
@@ -152,6 +153,8 @@ struct rpc_xprt {
 				nocong	   : 1,	/* no congestion control */
 				resvport   : 1, /* use a reserved port */
 				stream     : 1;	/* TCP */
+	atomic_t		users;		/* Number of clients using
+						   his transport */
 
 	/*
 	 * State of TCP reply receive stuff
