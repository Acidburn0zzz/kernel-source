
From: Hugh Dickins <hugh@veritas.com>

Good example of "swapper_space considered harmful": swap_unplug_io_fn was
originally designed for calling via swapper_space.backing_dev_info; but
that way it loses track of which device is to be unplugged, so had to
unplug all swap devices.  But now sync_page tests SwapCache anyway, can
call swap_unplug_io_fn with page, which leads direct to the device.


diff -urp /opt/kernel/linux-2.6.5/include/linux/swap.h linux-2.6.5/include/linux/swap.h
--- /opt/kernel/linux-2.6.5/include/linux/swap.h	2004-04-19 11:49:15.792597463 +0200
+++ linux-2.6.5/include/linux/swap.h	2004-04-19 11:50:33.352225434 +0200
@@ -217,8 +217,7 @@ extern sector_t map_swap_page(struct swa
 extern struct swap_info_struct *get_swap_info_struct(unsigned);
 extern int can_share_swap_page(struct page *);
 extern int remove_exclusive_swap_page(struct page *);
-struct backing_dev_info;
-extern void swap_unplug_io_fn(struct backing_dev_info *);
+extern void swap_unplug_io_fn(struct page *);
 
 extern struct swap_list_t swap_list;
 extern spinlock_t swaplock;
@@ -252,6 +251,7 @@ extern spinlock_t swaplock;
 #define move_from_swap_cache(p, i, m)		1
 #define __delete_from_swap_cache(p)		/*NOTHING*/
 #define delete_from_swap_cache(p)		/*NOTHING*/
+#define swap_unplug_io_fn(p)			/*NOTHING*/
 
 static inline int remove_exclusive_swap_page(struct page *p)
 {
diff -urp /opt/kernel/linux-2.6.5/mm/filemap.c linux-2.6.5/mm/filemap.c
--- /opt/kernel/linux-2.6.5/mm/filemap.c	2004-04-19 11:49:36.837325845 +0200
+++ linux-2.6.5/mm/filemap.c	2004-04-19 11:51:50.999843751 +0200
@@ -133,8 +133,12 @@ static inline int sync_page(struct page 
 	
 	smp_mb();
 	mapping = page_mapping(page);
-	if (mapping && mapping->a_ops && mapping->a_ops->sync_page)
-		return mapping->a_ops->sync_page(page);
+	if (mapping) {
+		if (mapping->a_ops && mapping->a_ops->sync_page)
+			return mapping->a_ops->sync_page(page);
+	} else if (PageSwapCache(page)) {
+		swap_unplug_io_fn(page);
+	}
 	return 0;
 }
 
diff -urp /opt/kernel/linux-2.6.5/mm/swapfile.c linux-2.6.5/mm/swapfile.c
--- /opt/kernel/linux-2.6.5/mm/swapfile.c	2004-04-19 11:49:36.815328219 +0200
+++ linux-2.6.5/mm/swapfile.c	2004-04-19 11:53:28.320338258 +0200
@@ -87,19 +87,26 @@ static void remove_swap_bdev(struct bloc
 	BUG();
 }
 
-void swap_unplug_io_fn(struct backing_dev_info *unused_bdi)
+/*
+ * Unlike a standard unplug_io_fn, swap_unplug_io_fn is never called
+ * through swap's backing_dev_info (which is only used by shrink_list),
+ * but directly from sync_page when PageSwapCache: and takes the page
+ * as argument, so that it can find the right device from swp_entry_t.
+ */
+void swap_unplug_io_fn(struct page *page)
 {
-	int i;
+	swp_entry_t entry;
 
 	down(&swap_bdevs_sem);
-	for (i = 0; i < MAX_SWAPFILES; i++) {
-		struct block_device *bdev = swap_bdevs[i];
+	entry.val = page->private;
+	if (PageSwapCache(page)) {
+		struct block_device *bdev = swap_bdevs[swp_type(entry)];
 		struct backing_dev_info *bdi;
 
-		if (bdev == NULL)
-			break;
-		bdi = bdev->bd_inode->i_mapping->backing_dev_info;
-		(*bdi->unplug_io_fn)(bdi);
+		if (bdev) {
+			bdi = bdev->bd_inode->i_mapping->backing_dev_info;
+			(*bdi->unplug_io_fn)(bdi);
+		}
 	}
 	up(&swap_bdevs_sem);
 }
diff -urp /opt/kernel/linux-2.6.5/mm/swap_state.c linux-2.6.5/mm/swap_state.c
--- /opt/kernel/linux-2.6.5/mm/swap_state.c	2004-04-19 11:49:36.858323578 +0200
+++ linux-2.6.5/mm/swap_state.c	2004-04-19 11:53:23.229887765 +0200
@@ -19,7 +19,7 @@
 static struct backing_dev_info swap_backing_dev_info = {
 	.ra_pages	= 0,	/* No readahead */
 	.memory_backed	= 1,	/* Does not contribute to dirty memory */
-	.unplug_io_fn	= swap_unplug_io_fn,
+	.state		= 0,	/* uncongested */
 };
 
 extern struct address_space_operations swap_aops;
@@ -27,6 +27,7 @@ extern struct address_space_operations s
 struct address_space swapper_space = {
 	.page_tree	= RADIX_TREE_INIT(GFP_ATOMIC),
 	.tree_lock	= SPIN_LOCK_UNLOCKED,
+	.nrpages	= 0,	/* total_swapcache_pages */
 	.a_ops		= &swap_aops,
 	.backing_dev_info = &swap_backing_dev_info,
 	.i_mmap		= PRIO_TREE_ROOT_INIT,
