From: Jesse Barnes <jbarnes@virtuousgeek.org>
Subject: Re: [Bug #11382] e1000e: 2.6.27-rc1 corrupts EEPROM/NVM
Date:	Thu, 25 Sep 2008 12:43:41 -0700
References: bnc#425480
Acked-by: Karsten Keil <kkeil@novell.com>

On Tue, 23 Sep 2008, David Miller wrote:
> I did some snooping around, and while doing so I noticed that the PCI
> mmap code for x86 doesn't do one bit of range checking on the size, or
> any other aspect of the request, wrt. the MMIO regions actually mapped
> in the BARs of the PCI device.

Here's a patch that adds range checking to the sysfs mappings at least.  This 
patch should catch the case where X (or some other process) tries to map 
beyond the specific BAR it's (supposedly) trying to access, making things 
safer in general.  FWIW both my F9 and development versions of X start up 
fine with this patch applied.

DaveM, will this work for you on sparc?  It looked like your code was allowing 
bridge window mappings, but that behavior should be preserved as long as your 
bridge devices reflect their window sizes correctly in their pdev->resources?

If we add similar code to the procfs stuff we wouldn't need to do any checking 
in the arches.

printk and WARN_ON added  by  Karsten Keil <kkeil@novell.com>

Index: linux-2.6.26/drivers/pci/pci-sysfs.c
===================================================================
--- linux-2.6.26.orig/drivers/pci/pci-sysfs.c
+++ linux-2.6.26/drivers/pci/pci-sysfs.c
@@ -502,6 +502,8 @@ pci_mmap_resource(struct kobject *kobj, 
 	struct resource *res = (struct resource *)attr->private;
 	enum pci_mmap_state mmap_type;
 	resource_size_t start, end;
+	unsigned long map_len = vma->vm_end - vma->vm_start;
+	unsigned long map_offset = vma->vm_pgoff << PAGE_SHIFT;
 	int i;
 
 	for (i = 0; i < PCI_ROM_RESOURCE; i++)
@@ -510,6 +512,18 @@ pci_mmap_resource(struct kobject *kobj, 
 	if (i >= PCI_ROM_RESOURCE)
 		return -ENODEV;
 
+	/*
+	 * Make sure the range the user is trying to map falls within
+	 * the resource
+	 */
+	if (map_offset + map_len > pci_resource_len(pdev, i)) {
+		printk(KERN_ERR "Out of range mapping: map_offset(%x)"
+			" map_len(%x) resource_len(%x)\n", map_offset,
+			map_len, pci_resource_len(pdev, i));
+		WARN_ON(1);
+		return -EINVAL;
+	}
+
 	/* pci_mmap_page_range() expects the same kind of entry as coming
 	 * from /proc/bus/pci/ which is a "user visible" value. If this is
 	 * different from the resource itself, arch will do necessary fixup.
