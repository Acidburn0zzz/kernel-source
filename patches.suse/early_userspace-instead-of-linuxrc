diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/fs/binfmt_elf.c linux-2.6.0-test11.SuSE/fs/binfmt_elf.c
--- linux-2.6.0-test11.SuSE.orig/fs/binfmt_elf.c	2003-12-07 12:56:19.000000000 +0000
+++ linux-2.6.0-test11.SuSE/fs/binfmt_elf.c	2003-12-07 16:10:44.000000000 +0000
@@ -1451,6 +1451,7 @@ cleanup:
 
 static int __init init_elf_binfmt(void)
 {
+	printk("%s\n",__FUNCTION__);
 	return register_binfmt(&elf_format);
 }
 
@@ -1460,6 +1461,6 @@ static void __exit exit_elf_binfmt(void)
 	unregister_binfmt(&elf_format);
 }
 
-module_init(init_elf_binfmt)
+core_initcall(init_elf_binfmt);
 module_exit(exit_elf_binfmt)
 MODULE_LICENSE("GPL");
diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/init/main.c linux-2.6.0-test11.SuSE/init/main.c
--- linux-2.6.0-test11.SuSE.orig/init/main.c	2003-12-07 12:56:19.000000000 +0000
+++ linux-2.6.0-test11.SuSE/init/main.c	2003-12-07 17:12:04.000000000 +0000
@@ -304,6 +304,15 @@ static int __init init_setup(char *str)
 }
 __setup("init=", init_setup);
 
+static char *kinit_command;
+
+static int __init kinit_setup(char *str)
+{
+	kinit_command = str;
+	return 1;
+}
+__setup("kinit=", kinit_setup);
+
 extern void setup_arch(char **);
 extern void cpu_idle(void);
 
@@ -508,6 +517,7 @@ static void __init do_initcalls(void)
 	initcall_t *call;
 	int count = preempt_count();
 
+	printk("%s\n",__FUNCTION__);
 	for (call = &__initcall_start; call < &__initcall_end; call++) {
 		char *msg;
 
@@ -535,6 +545,10 @@ static void __init do_initcalls(void)
 	flush_scheduled_work();
 }
 
+asmlinkage long sys_access(const char __user * filename, int mode);
+asmlinkage long sys_mount(char *dev_name, char *dir_name, char *type,
+		                                 unsigned long flags, void *data);
+
 /*
  * Ok, the machine is now initialized. None of the devices
  * have been touched yet, but the CPU subsystem is up and
@@ -544,6 +558,8 @@ static void __init do_initcalls(void)
  */
 static void __init do_basic_setup(void)
 {
+	extern char hotplug_path[];
+	
 	driver_init();
 
 #ifdef CONFIG_SYSCTL
@@ -554,6 +570,12 @@ static void __init do_basic_setup(void)
 	sock_init();
 
 	init_workqueues();
+
+	if (sys_access(hotplug_path, 0) == 0) {
+		printk(KERN_INFO "mounting sysfs on /sys");
+		sys_mount("sys", "/sys","sysfs",0,NULL);
+	}
+
 	do_initcalls();
 }
 
@@ -598,6 +620,13 @@ static int init(void * unused)
 	smp_init();
 	do_basic_setup();
 
+	/*
+	 * check if there is an early userspace init, if yes
+	 * let it do all the work
+	 */
+	if (kinit_command || sys_access("/sbin/init", 0) == 0)
+		execute_command = kinit_command ? kinit_command : 0;
+	else
 	prepare_namespace();
 
 	/*
diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/kernel/kmod.c linux-2.6.0-test11.SuSE/kernel/kmod.c
--- linux-2.6.0-test11.SuSE.orig/kernel/kmod.c	2003-12-07 12:56:19.000000000 +0000
+++ linux-2.6.0-test11.SuSE/kernel/kmod.c	2003-12-07 16:12:31.000000000 +0000
@@ -249,7 +249,7 @@ int call_usermodehelper(char *path, char
 	};
 	DECLARE_WORK(work, __call_usermodehelper, &sub_info);
 
-	if (!system_running)
+	if (0 && !system_running)
 		return -EBUSY;
 
 	if (path[0] == '\0')
diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/lib/kobject.c linux-2.6.0-test11.SuSE/lib/kobject.c
--- linux-2.6.0-test11.SuSE.orig/lib/kobject.c	2003-11-26 20:45:34.000000000 +0000
+++ linux-2.6.0-test11.SuSE/lib/kobject.c	2003-12-07 16:18:20.000000000 +0000
@@ -156,6 +156,9 @@ static void kset_hotplug(const char *act
 	envp [i++] = scratch;
 	scratch += sprintf(scratch, "ACTION=%s", action) + 1;
 
+	if(!sequence_num)
+		printk(" ... the first call_usermodehelper: %s\n", name);
+
 	spin_lock(&sequence_lock);
 	seq = sequence_num++;
 	spin_unlock(&sequence_lock);
diff -x initrd -x bin -x ash -x klibc -purNX /home/olaf/kernel/kernel_exclude.txt linuxppc-2.5_2.6.0-test9-bk.orig/usr/sbin/hotplug.c linuxppc-2.5_2.6.0-test9-bk/usr/sbin/hotplug.c
--- linuxppc-2.5_2.6.0-test9-bk.orig/usr/sbin/hotplug.c	1970-01-01 01:00:00.000000000 +0100
+++ linuxppc-2.5_2.6.0-test9-bk/usr/sbin/hotplug.c	2003-11-22 22:31:17.000000000 +0100
@@ -0,0 +1,46 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#define BUFSIZE 12345
+int
+main(int argc, char **argv, char **envp)
+{
+	int fd, i;
+	char **ep = envp;
+	char *buf, *p;
+	buf = malloc(42);
+	if (!buf)
+		exit(1);
+	p = getenv("SEQNUM");
+	snprintf(buf, 42, "/events/dbg.%08u.%s", getpid(), p ? p : "");
+	if ((fd = open(buf, O_CREAT | O_WRONLY | O_TRUNC, 0644)) < 0) {
+		//perror(buf);
+		exit(1);
+	}
+	free(buf);
+	p = malloc(BUFSIZE);
+	buf = p;
+	for (i = 0; i < argc; ++i) {
+		buf += snprintf(buf, p + BUFSIZE - buf, " %s", argv[i]);
+		if (buf > p + BUFSIZE)
+			goto full;
+	}
+	buf += snprintf(buf, p + BUFSIZE - buf, "\n");
+	if (buf > p + BUFSIZE)
+		goto full;
+	while (*ep) {
+		buf += snprintf(buf, p + BUFSIZE - buf, "%s\n", *ep++);
+		if (buf > p + BUFSIZE)
+			break;
+	}
+      full:
+	buf = p;
+	write(fd, buf, strlen(buf));
+	close(fd);
+	free(buf);
+	return 0;
+}
