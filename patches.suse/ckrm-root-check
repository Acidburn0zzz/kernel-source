diff -urNp linux-2.6.5/fs/rcfs/magic.c linux-2.6.5.SUSE/fs/rcfs/magic.c
--- linux-2.6.5/fs/rcfs/magic.c	2004-05-21 14:43:55.240973085 +0200
+++ linux-2.6.5.SUSE/fs/rcfs/magic.c	2004-05-21 14:44:10.177157920 +0200
@@ -243,7 +243,7 @@ target_write(struct file *file, const ch
 
 	up(&(ri->vfs_inode.i_sem));
 	kfree(optbuf);
-	return !rc ? count : rc;
+	return (!rc ? count : rc);
 
 }
 
diff -urNp linux-2.6.5/include/linux/ckrm_net.h linux-2.6.5.SUSE/include/linux/ckrm_net.h
--- linux-2.6.5/include/linux/ckrm_net.h	2004-05-21 14:43:55.133971761 +0200
+++ linux-2.6.5.SUSE/include/linux/ckrm_net.h	2004-05-21 14:44:10.178157932 +0200
@@ -24,6 +24,7 @@ struct ckrm_net_struct {
 	struct sock     *ns_sk;         // pointer to socket
 	pid_t            ns_tgid;       // real process id
 	pid_t            ns_pid;        // calling thread's pid
+	struct task_struct *ns_tsk;	
 	int              ns_family;     // IPPROTO_IPV4 || IPPROTO_IPV6
 					// Currently only IPV4 is supported
 	union {
diff -urNp linux-2.6.5/kernel/ckrm/ckrm_sockc.c linux-2.6.5.SUSE/kernel/ckrm/ckrm_sockc.c
--- linux-2.6.5/kernel/ckrm/ckrm_sockc.c	2004-05-21 14:43:55.249973196 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/ckrm_sockc.c	2004-05-21 14:44:10.179157944 +0200
@@ -213,6 +213,7 @@ cb_sockclass_listen_start(struct sock *s
 		
 	ns->ns_pid = current->pid;
 	ns->ns_tgid = current->tgid;
+	ns->ns_tsk = current;
 	ce_protect(&CT_sockclass);
 	CE_CLASSIFY_RET(newcls,&CT_sockclass,CKRM_EVENT_LISTEN_START,ns,current);
 	ce_release(&CT_sockclass);
@@ -383,6 +384,12 @@ sock_forced_reclassify_ns(struct ckrm_ne
 	}
 	ns = sk->sk_ns;
 	ckrm_ns_hold(ns);
+	if (!capable(CAP_NET_ADMIN) && (ns->ns_tsk->user != current->user)) { 
+		ckrm_ns_put(ns);
+		rc = -EPERM;
+		goto out;
+	}
+
 	oldcls = ns->core;
 	if ((oldcls == NULL) || (oldcls == newcls)) {
 		ckrm_ns_put(ns);
diff -urNp linux-2.6.5/kernel/ckrm/ckrm_tc.c linux-2.6.5.SUSE/kernel/ckrm/ckrm_tc.c
--- linux-2.6.5/kernel/ckrm/ckrm_tc.c	2004-05-21 14:43:55.250973209 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/ckrm_tc.c	2004-05-21 14:44:10.180157957 +0200
@@ -603,6 +603,12 @@ ckrm_forced_reclassify_pid(pid_t pid, st
 	}
 	get_task_struct(tsk);
 	read_unlock(&tasklist_lock);
+
+	/* Check permissions */
+	if ((!capable(CAP_SYS_NICE)) &&
+		(!capable(CAP_SYS_RESOURCE)) && 
+		(current->user != tsk->user))
+		return -EPERM;
 	
 	down(&async_serializer);   // protect again race condition
 	
