From: Ashok Raj <ashok.raj@intel.com>
Date: Thu, 11 Jan 2018 17:32:16 -0800
Subject: x86/ibrs: Add new helper macros to save/restore MSR_IA32_SPEC_CTRL
Git-repo: git://git.infradead.org/users/dwmw2/linux-retpoline.git
Git-commit: e987e4ee03081997b8385ac90dc2aa0bee2a6ee8
Patch-mainline: Queued in subsystem maintainer repository
References: bsc#1068032 CVE-2017-5715

Add some helper macros to save/restore MSR_IA32_SPEC_CTRL.

  save_and_restrict_branch_speculation() - saves the current
	state and restrict branch speculation (IBRS=1).

  restore_branch_speculation() - restores the previously
	saved IBRS state.

[peterz: renaming and folding of logic from the kvm patches]
[karahmed: switching to using ALTERNATIVES (this is uglier than expected!)]

Cc: Asit Mallick <asit.k.mallick@intel.com>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Arjan Van De Ven <arjan.van.de.ven@intel.com>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Dan Williams <dan.j.williams@intel.com>
Cc: Jun Nakajima <jun.nakajima@intel.com>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Greg KH <gregkh@linuxfoundation.org>
Cc: David Woodhouse <dwmw@amazon.co.uk>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Ashok Raj <ashok.raj@intel.com>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Signed-off-by: KarimAllah Ahmed <karahmed@amazon.de>
Link: http://lkml.kernel.org/r/1515720739-43819-3-git-send-email-ashok.raj@intel.com
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/include/asm/nospec-branch.h | 46 ++++++++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/arch/x86/include/asm/nospec-branch.h b/arch/x86/include/asm/nospec-branch.h
index 2b5f017baa..e8ace85933 100644
--- a/arch/x86/include/asm/nospec-branch.h
+++ b/arch/x86/include/asm/nospec-branch.h
@@ -265,5 +265,51 @@ static inline void unrestrict_branch_speculation(void)
 		     : "memory");
 }
 
+static inline u64 save_and_restrict_branch_speculation(void)
+{
+	u64 ret;
+	unsigned long ax = 0, cx = 0, dx = 0;
+
+	/* save */
+	asm volatile(ALTERNATIVE("",
+				 "movl %[msr], %%ecx\n\t"
+				 "rdmsr\n\t",
+				 X86_FEATURE_IBRS)
+		     : "=a" (ax), "=c" (cx), "=d" (dx)
+		     : [msr] "i" (MSR_IA32_SPEC_CTRL)
+		     : "memory");
+
+	ret = ax | (dx << 32);
+
+	/* restrict speculation */
+	asm volatile(ALTERNATIVE("",
+				 "movl %[msr], %%ecx\n\t"
+				 "movl %[val], %%eax\n\t"
+				 "movl $0, %%edx\n\t"
+				 "wrmsr",
+				 X86_FEATURE_IBRS)
+		     : "=a" (ax), "=c" (cx), "=d" (dx)
+		     : [msr] "i" (MSR_IA32_SPEC_CTRL),
+		       [val] "i" (SPEC_CTRL_IBRS)
+		     : "memory");
+
+	return ret;
+}
+
+static inline void restore_branch_speculation(u64 val)
+{
+	unsigned long ax, cx, dx;
+
+	asm volatile(ALTERNATIVE("",
+				 "movl %[msr], %%ecx\n\t"
+				 "wrmsr",
+				 X86_FEATURE_IBRS)
+		     : "=a" (ax), "=c" (cx), "=d" (dx)
+		     : [msr] "i" (MSR_IA32_SPEC_CTRL),
+		       [val_low] "a" (val & 0xffffffff),
+		       [val_high] "d" (val >> 32)
+		     : "memory");
+}
+
 #endif /* __ASSEMBLY__ */
 #endif /* __NOSPEC_BRANCH_H__ */
-- 
2.15.1

