From: Jens Axboe <axboe@suse.de>
Subject: bug145459

dont corrupt memory for unavailable cpus


 block/ll_rw_blk.c   |    8 +++++++-
 drivers/scsi/scsi.c |    2 +-
 fs/file.c           |    4 ++--
 kernel/sched.c      |    2 +-
 net/core/dev.c      |    2 +-
 net/core/utils.c    |    4 ++--
 6 files changed, 14 insertions(+), 8 deletions(-)

Index: linux-2.6.16-rc1-git3/block/ll_rw_blk.c
===================================================================
--- linux-2.6.16-rc1-git3.orig/block/ll_rw_blk.c
+++ linux-2.6.16-rc1-git3/block/ll_rw_blk.c
@@ -3313,6 +3313,12 @@ static int blk_cpu_notify(struct notifie
 				 &__get_cpu_var(blk_cpu_done));
 		raise_softirq_irqoff(BLOCK_SOFTIRQ);
 		local_irq_enable();
+	} else if (action == CPU_ONLINE) {
+		int cpu = (unsigned long) hcpu;
+
+		local_irq_disable();
+		INIT_LIST_HEAD(&per_cpu(blk_cpu_done, cpu));
+		local_irq_enable();
 	}
 
 	return NOTIFY_OK;
@@ -3448,7 +3454,7 @@ int __init blk_dev_init(void)
 	iocontext_cachep = kmem_cache_create("blkdev_ioc",
 			sizeof(struct io_context), 0, SLAB_PANIC, NULL, NULL);
 
-	for (i = 0; i < NR_CPUS; i++)
+	for_each_online_cpu(i)
 		INIT_LIST_HEAD(&per_cpu(blk_cpu_done, i));
 
 	open_softirq(BLOCK_SOFTIRQ, blk_done_softirq, NULL);
Index: linux-2.6.16-rc1-git3/drivers/scsi/scsi.c
===================================================================
--- linux-2.6.16-rc1-git3.orig/drivers/scsi/scsi.c
+++ linux-2.6.16-rc1-git3/drivers/scsi/scsi.c
@@ -1245,7 +1245,7 @@ static int __init init_scsi(void)
 	if (error)
 		goto cleanup_sysctl;
 
-	for (i = 0; i < NR_CPUS; i++)
+	for_each_online_cpu(i)
 		INIT_LIST_HEAD(&per_cpu(scsi_done_q, i));
 
 	devfs_mk_dir("scsi");
Index: linux-2.6.16-rc1-git3/fs/file.c
===================================================================
--- linux-2.6.16-rc1-git3.orig/fs/file.c
+++ linux-2.6.16-rc1-git3/fs/file.c
@@ -379,7 +379,7 @@ static void __devinit fdtable_defer_list
 void __init files_defer_init(void)
 {
 	int i;
-	/* Really early - can't use for_each_cpu */
-	for (i = 0; i < NR_CPUS; i++)
+
+	for_each_cpu(i)
 		fdtable_defer_list_init(i);
 }
Index: linux-2.6.16-rc1-git3/kernel/sched.c
===================================================================
--- linux-2.6.16-rc1-git3.orig/kernel/sched.c
+++ linux-2.6.16-rc1-git3/kernel/sched.c
@@ -6109,7 +6109,7 @@ void __init sched_init(void)
 	runqueue_t *rq;
 	int i, j, k;
 
-	for (i = 0; i < NR_CPUS; i++) {
+	for_each_cpu(i) {
 		prio_array_t *array;
 
 		rq = cpu_rq(i);
Index: linux-2.6.16-rc1-git3/net/core/utils.c
===================================================================
--- linux-2.6.16-rc1-git3.orig/net/core/utils.c
+++ linux-2.6.16-rc1-git3/net/core/utils.c
@@ -121,7 +121,7 @@ void __init net_random_init(void)
 {
 	int i;
 
-	for (i = 0; i < NR_CPUS; i++) {
+	for_each_cpu(i) {
 		struct nrnd_state *state = &per_cpu(net_rand_state,i);
 		__net_srandom(state, i+jiffies);
 	}
