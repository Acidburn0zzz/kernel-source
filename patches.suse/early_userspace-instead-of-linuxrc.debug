diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/fs/binfmt_elf.c linux-2.6.0-test11.SuSE/fs/binfmt_elf.c
--- linux-2.6.0-test11.SuSE.orig/fs/binfmt_elf.c	2003-12-07 12:56:19.000000000 +0000
+++ linux-2.6.0-test11.SuSE/fs/binfmt_elf.c	2003-12-07 16:10:44.000000000 +0000
@@ -1451,6 +1451,7 @@ cleanup:
 
 static int __init init_elf_binfmt(void)
 {
+	printk("%s\n",__FUNCTION__);
 	return register_binfmt(&elf_format);
 }
 
@@ -1460,6 +1461,6 @@ static void __exit exit_elf_binfmt(void)
 	unregister_binfmt(&elf_format);
 }
 
-module_init(init_elf_binfmt)
+core_initcall(init_elf_binfmt);
 module_exit(exit_elf_binfmt)
 MODULE_LICENSE("GPL");
diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/init/main.c linux-2.6.0-test11.SuSE/init/main.c
--- linux-2.6.0-test11.SuSE.orig/init/main.c	2003-12-07 12:56:19.000000000 +0000
+++ linux-2.6.0-test11.SuSE/init/main.c	2003-12-07 17:12:04.000000000 +0000
@@ -508,6 +517,7 @@ static void __init do_initcalls(void)
 	initcall_t *call;
 	int count = preempt_count();
 
+	printk("%s\n",__FUNCTION__);
 	for (call = &__initcall_start; call < &__initcall_end; call++) {
 		char *msg;
 
diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/kernel/kmod.c linux-2.6.0-test11.SuSE/kernel/kmod.c
--- linux-2.6.0-test11.SuSE.orig/kernel/kmod.c	2003-12-07 12:56:19.000000000 +0000
+++ linux-2.6.0-test11.SuSE/kernel/kmod.c	2003-12-07 16:12:31.000000000 +0000
@@ -249,7 +249,7 @@ int call_usermodehelper(char *path, char
 	};
 	DECLARE_WORK(work, __call_usermodehelper, &sub_info);
 
-	if (!system_running)
+	if (0 && !system_running)
 		return -EBUSY;
 
 	if (path[0] == '\0')
diff -purNX /home/olaf/kernel/kernel_exclude.txt linux-2.6.0-test11.SuSE.orig/lib/kobject.c linux-2.6.0-test11.SuSE/lib/kobject.c
--- linux-2.6.0-test11.SuSE.orig/lib/kobject.c	2003-11-26 20:45:34.000000000 +0000
+++ linux-2.6.0-test11.SuSE/lib/kobject.c	2003-12-07 16:18:20.000000000 +0000
@@ -156,6 +156,9 @@ static void kset_hotplug(const char *act
 	envp [i++] = scratch;
 	scratch += sprintf(scratch, "ACTION=%s", action) + 1;
 
+	if(!sequence_num)
+		printk(" ... the first call_usermodehelper: %s\n", name);
+
 	spin_lock(&sequence_lock);
 	seq = sequence_num++;
 	spin_unlock(&sequence_lock);
