From c0d6a9e255ae62c23177c9b1723348e482f15256 Mon Sep 17 00:00:00 2001
From: Mark Fasheh <mfasheh@suse.com>
Date: Fri, 13 May 2011 16:00:57 -0700
Subject: [PATCH 1/2] vfs: allow /proc/pid/maps to return a custom device
References: bnc#672923
Patch-mainline: Never

This patch introduces a callback in the super_operations structure,
'get_maps_dev' which is then used by procfs to query which device to return
for reporting in /proc/[PID]/maps.

btrfs wants this so that it can return the same device as it uses from
stat(2) calls.

Signed-off-by: Mark Fasheh <mfasheh@suse.com>
---
 fs/proc/task_mmu.c |    2 +-
 include/linux/fs.h |   12 ++++++++++++
 2 files changed, 13 insertions(+), 1 deletion(-)

--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -220,7 +220,7 @@ static void show_map_vma(struct seq_file
 
 	if (file) {
 		struct inode *inode = vma->vm_file->f_path.dentry->d_inode;
-		dev = inode->i_sb->s_dev;
+		dev = get_maps_dev(inode);
 		ino = inode->i_ino;
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
 	}
Index: linux-3.0-SLE11-SP2/fs/proc/task_nommu.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/fs/proc/task_nommu.c
+++ linux-3.0-SLE11-SP2/fs/proc/task_nommu.c
@@ -148,7 +148,7 @@ static int nommu_vma_show(struct seq_fil
 
 	if (file) {
 		struct inode *inode = vma->vm_file->f_path.dentry->d_inode;
-		dev = inode->i_sb->s_dev;
+		dev = get_maps_dev(inode);
 		ino = inode->i_ino;
 		pgoff = (loff_t)vma->vm_pgoff << PAGE_SHIFT;
 	}
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1662,8 +1662,20 @@ struct super_operations {
 	int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 	int (*nr_cached_objects)(struct super_block *);
 	void (*free_cached_objects)(struct super_block *, int);
+	/*
+	 * Workaround for bnc#672923, used only by btrfs. Will be
+	 * replaced with an upstream solution once that is in place.
+	 */
+	dev_t (*get_maps_dev)(struct inode *);
 };
 
+static inline dev_t get_maps_dev(struct inode *inode)
+{
+       if (inode->i_sb->s_op->get_maps_dev)
+               return inode->i_sb->s_op->get_maps_dev(inode);
+       return inode->i_sb->s_dev;
+}
+
 /*
  * Inode state bits.  Protected by inode->i_lock
  *
