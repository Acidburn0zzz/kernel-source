diff -purNa linux-2.6.5-tunnel/include/net/xfrm.h linux-2.6.5/include/net/xfrm.h
--- linux-2.6.5-tunnel/include/net/xfrm.h	2004-04-05 11:09:51.000000000 +0200
+++ linux-2.6.5/include/net/xfrm.h	2004-04-14 13:05:51.000000000 +0200
@@ -196,6 +196,7 @@ struct xfrm_state_afinfo {
 	struct xfrm_state	*(*find_acq)(u8 mode, u32 reqid, u8 proto, 
 					     xfrm_address_t *daddr, xfrm_address_t *saddr, 
 					     int create);
+	int			(*tunnel_check_size)(struct sk_buff *skb);
 };
 
 extern int xfrm_state_register_afinfo(struct xfrm_state_afinfo *afinfo);
@@ -497,10 +498,6 @@ xfrm_selector_match(struct xfrm_selector
 	return 0;
 }
 
-/* placeholder until xfrm6_tunnel.c is written */
-static inline int xfrm6_tunnel_check_size(struct sk_buff *skb)
-{ return 0; }
-
 /* A struct encoding bundle of transformations to apply to some set of flow.
  *
  * dst->child points to the next element of bundle.
@@ -783,6 +780,12 @@ struct xfrm_tunnel {
 	void (*err_handler)(struct sk_buff *skb, void *info);
 };
 
+struct xfrm6_tunnel {
+	int (*handler)(struct sk_buff **pskb, unsigned int *nhoffp);
+	void (*err_handler)(struct sk_buff *skb, struct inet6_skb_parm *opt,
+				int type, int code, int offset, __u32 info);
+};
+
 extern void xfrm_init(void);
 extern void xfrm4_init(void);
 extern void xfrm4_fini(void);
@@ -817,6 +820,11 @@ extern int xfrm4_rcv(struct sk_buff *skb
 extern int xfrm4_tunnel_register(struct xfrm_tunnel *handler);
 extern int xfrm4_tunnel_deregister(struct xfrm_tunnel *handler);
 extern int xfrm4_tunnel_check_size(struct sk_buff *skb);
+extern int xfrm6_tunnel_register(struct xfrm6_tunnel *handler);
+extern int xfrm6_tunnel_deregister(struct xfrm6_tunnel *handler);
+extern int xfrm6_tunnel_check_size(struct sk_buff *skb);
+extern u32 xfrm6_tunnel_alloc_spi(xfrm_address_t *saddr);
+extern u32 xfrm6_tunnel_spi_lookup(xfrm_address_t *saddr);
 extern int xfrm6_rcv(struct sk_buff **pskb, unsigned int *nhoffp);
 
 #ifdef CONFIG_XFRM
diff -purNa linux-2.6.5-tunnel/net/ipv4/xfrm4_state.c linux-2.6.5/net/ipv4/xfrm4_state.c
--- linux-2.6.5-tunnel/net/ipv4/xfrm4_state.c	2004-02-04 04:43:07.000000000 +0100
+++ linux-2.6.5/net/ipv4/xfrm4_state.c	2004-04-14 13:05:51.000000000 +0200
@@ -114,6 +114,7 @@ static struct xfrm_state_afinfo xfrm4_st
 	.init_tempsel		= __xfrm4_init_tempsel,
 	.state_lookup		= __xfrm4_state_lookup,
 	.find_acq		= __xfrm4_find_acq,
+	.tunnel_check_size	= xfrm4_tunnel_check_size,
 };
 
 void __init xfrm4_state_init(void)
diff -purNa linux-2.6.5-tunnel/net/ipv6/ip6_tunnel.c linux-2.6.5/net/ipv6/ip6_tunnel.c
--- linux-2.6.5-tunnel/net/ipv6/ip6_tunnel.c	2004-03-12 12:17:31.000000000 +0100
+++ linux-2.6.5/net/ipv6/ip6_tunnel.c	2004-04-14 13:05:51.000000000 +0200
@@ -1088,10 +1088,9 @@ int ip6ip6_fb_tnl_dev_init(struct net_de
 	return 0;
 }
 
-static struct inet6_protocol ip6ip6_protocol = {
+static struct xfrm6_tunnel ip6ip6_handler = {
 	.handler = ip6ip6_rcv,
 	.err_handler = ip6ip6_err,
-	.flags = INET6_PROTO_FINAL
 };
 
 /**
@@ -1104,9 +1103,9 @@ static int __init ip6_tunnel_init(void)
 {
 	int  err;
 
-	if ((err = inet6_add_protocol(&ip6ip6_protocol, IPPROTO_IPV6)) < 0) {
-		printk(KERN_ERR "Failed to register IPv6 protocol\n");
-		return err;
+	if (xfrm6_tunnel_register(&ip6ip6_handler) < 0) {
+		printk(KERN_ERR "ip6ip6 init: can't register tunnel\n");
+		return -EAGAIN;
 	}
 	ip6ip6_fb_tnl_dev = alloc_netdev(sizeof(struct ip6_tnl), "ip6tnl0",
 					 ip6ip6_tnl_dev_setup);
@@ -1123,7 +1122,7 @@ static int __init ip6_tunnel_init(void)
 	}
 	return 0;
 fail:
-	inet6_del_protocol(&ip6ip6_protocol, IPPROTO_IPV6);
+	xfrm6_tunnel_deregister(&ip6ip6_handler);
 	return err;
 }
 
@@ -1133,8 +1132,10 @@ fail:
 
 static void __exit ip6_tunnel_cleanup(void)
 {
+	if (xfrm6_tunnel_deregister(&ip6ip6_handler) < 0)
+		printk(KERN_INFO "ip6ip6 close: can't deregister tunnel\n");
+
 	unregister_netdev(ip6ip6_fb_tnl_dev);
-	inet6_del_protocol(&ip6ip6_protocol, IPPROTO_IPV6);
 }
 
 module_init(ip6_tunnel_init);
diff -purNa linux-2.6.5-tunnel/net/ipv6/ipv6_syms.c linux-2.6.5/net/ipv6/ipv6_syms.c
--- linux-2.6.5-tunnel/net/ipv6/ipv6_syms.c	2004-04-14 13:02:30.000000000 +0200
+++ linux-2.6.5/net/ipv6/ipv6_syms.c	2004-04-14 13:05:51.000000000 +0200
@@ -38,10 +38,16 @@ EXPORT_SYMBOL(in6_dev_finish_destroy);
 EXPORT_SYMBOL(ip6_find_1stfragopt);
 #ifdef CONFIG_XFRM
 EXPORT_SYMBOL(xfrm6_rcv);
+EXPORT_SYMBOL(xfrm6_tunnel_register);
+EXPORT_SYMBOL(xfrm6_tunnel_deregister);
+EXPORT_SYMBOL(xfrm6_tunnel_check_size);
+EXPORT_SYMBOL(xfrm6_tunnel_alloc_spi);
+EXPORT_SYMBOL(xfrm6_tunnel_spi_lookup);
 #endif
 EXPORT_SYMBOL(rt6_lookup);
 EXPORT_SYMBOL(fl6_sock_lookup);
 EXPORT_SYMBOL(ip6_append_data);
 EXPORT_SYMBOL(ip6_flush_pending_frames);
 EXPORT_SYMBOL(ip6_push_pending_frames);
+EXPORT_SYMBOL(ip6_dst_lookup);
 EXPORT_SYMBOL(ipv6_push_nfrag_opts);
diff -purNa linux-2.6.5-tunnel/net/ipv6/xfrm6_policy.c linux-2.6.5/net/ipv6/xfrm6_policy.c
--- linux-2.6.5-tunnel/net/ipv6/xfrm6_policy.c	2004-04-05 11:09:51.000000000 +0200
+++ linux-2.6.5/net/ipv6/xfrm6_policy.c	2004-04-14 13:07:29.000000000 +0200
@@ -25,8 +25,8 @@ static struct xfrm_type_map xfrm6_type_m
 int xfrm6_dst_lookup(struct xfrm_dst **dst, struct flowi *fl)
 {
 	int err = 0;
-	*dst = (struct xfrm_dst*)ip6_route_output(NULL, fl);
-	if (!*dst)
+	err = ip6_dst_lookup(NULL, (struct dst_entry **)dst, fl);
+	if (err)
 		err = -ENETUNREACH;
 	return err;
 }
diff -purNa linux-2.6.5-tunnel/net/ipv6/xfrm6_state.c linux-2.6.5/net/ipv6/xfrm6_state.c
--- linux-2.6.5-tunnel/net/ipv6/xfrm6_state.c	2004-02-04 04:43:43.000000000 +0100
+++ linux-2.6.5/net/ipv6/xfrm6_state.c	2004-04-14 13:05:51.000000000 +0200
@@ -124,6 +124,7 @@ static struct xfrm_state_afinfo xfrm6_st
 	.init_tempsel		= __xfrm6_init_tempsel,
 	.state_lookup		= __xfrm6_state_lookup,
 	.find_acq		= __xfrm6_find_acq,
+	.tunnel_check_size	= xfrm6_tunnel_check_size,
 };
 
 void __init xfrm6_state_init(void)
diff -purNa linux-2.6.5-tunnel/net/xfrm/xfrm_output.c linux-2.6.5/net/xfrm/xfrm_output.c
--- linux-2.6.5-tunnel/net/xfrm/xfrm_output.c	2004-02-04 04:44:19.000000000 +0100
+++ linux-2.6.5/net/xfrm/xfrm_output.c	2004-04-14 13:05:51.000000000 +0200
@@ -13,6 +13,21 @@
 #include <linux/skbuff.h>
 #include <net/xfrm.h>
 
+static int xfrm_tunnel_check_size(struct sk_buff *skb, unsigned short family)
+{
+	struct xfrm_state_afinfo *afinfo;
+	int err;
+
+	afinfo = xfrm_state_get_afinfo(family);
+	if (unlikely(afinfo == NULL))
+		return -EAFNOSUPPORT;
+
+	err = afinfo->tunnel_check_size(skb);
+	xfrm_state_put_afinfo(afinfo);
+
+	return err;
+}
+
 int xfrm_check_output(struct xfrm_state *x,
                       struct sk_buff *skb, unsigned short family)
 {
@@ -23,19 +38,7 @@ int xfrm_check_output(struct xfrm_state 
 		goto out;
 		
 	if (x->props.mode) {
-		switch (family) {
-		case AF_INET:
-			err = xfrm4_tunnel_check_size(skb);
-			break;
-			
-		case AF_INET6:
-			err = xfrm6_tunnel_check_size(skb);
-			break;
-			
-		default:
-			err = -EINVAL;
-		}
-		
+		err = xfrm_tunnel_check_size(skb, family);
 		if (err)
 			goto out;
 	}
