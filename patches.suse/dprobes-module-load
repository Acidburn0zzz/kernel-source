diff -urNp linux-2.6.5/drivers/dprobes/dprobes.c linux-2.6.5.SUSE/drivers/dprobes/dprobes.c
--- linux-2.6.5/drivers/dprobes/dprobes.c	2004-05-27 11:48:25.122826251 +0200
+++ linux-2.6.5.SUSE/drivers/dprobes/dprobes.c	2004-05-27 11:49:43.430205669 +0200
@@ -27,6 +27,7 @@
 #include <linux/swap.h>
 #include <linux/smp.h>
 #include <linux/notifier.h>
+#include <linux/string.h>
 #ifdef CONFIG_MAGIC_SYSRQ
 #include <linux/sysrq.h>
 #endif
@@ -176,20 +177,18 @@ static inline void unlink_module(struct 
 	return;
 }
 
-/*
- * copied from kernel/module.c find_module().
- */
 static struct module * find_kmodule(const char *name)
 {
-	struct module *kmod = NULL;
-#if 0
-	extern struct list_head *modules;
-	list_for_each_entry(kmod, modules, list) {
-		if (!strcmp(kmod->name, name))
-			break;
-	}
-#endif
-	return kmod;
+	char modname[MODULE_NAME_LEN];
+	char *lastdot;
+
+	/* strip off the extension */
+	strlcpy(modname, name, MODULE_NAME_LEN);
+	lastdot = strrchr(modname, '.');
+	if (lastdot)
+		*lastdot = '\0';
+
+	return get_module(modname);
 }
 
 /*
diff -urNp linux-2.6.5/include/linux/module.h linux-2.6.5.SUSE/include/linux/module.h
--- linux-2.6.5/include/linux/module.h	2004-05-27 11:48:25.148826699 +0200
+++ linux-2.6.5.SUSE/include/linux/module.h	2004-05-27 11:49:43.431205687 +0200
@@ -284,6 +284,9 @@ struct module
 	char *args;
 };
 
+/* Locate a module by name. */
+extern struct module *get_module(const char *name);
+
 /* FIXME: It'd be nice to isolate modules during init, too, so they
    aren't used before they (may) fail.  But presently too much code
    (IDE & SCSI) require entry into the module during init.*/
diff -urNp linux-2.6.5/kernel/module.c linux-2.6.5.SUSE/kernel/module.c
--- linux-2.6.5/kernel/module.c	2004-05-27 11:48:25.184827320 +0200
+++ linux-2.6.5.SUSE/kernel/module.c	2004-05-27 11:49:43.433205723 +0200
@@ -253,6 +253,19 @@ static struct module *find_module(const 
 	return NULL;
 }
 
+struct module *get_module(const char *name)
+{
+	struct module *mod;
+
+	if (down_interruptible(&module_mutex) != 0)
+		return NULL;
+
+	mod = find_module(name);
+	up(&module_mutex);
+	return mod;
+}
+EXPORT_SYMBOL(get_module);
+
 #ifdef CONFIG_SMP
 /* Number of blocks used and allocated. */
 static unsigned int pcpu_num_used, pcpu_num_allocated;
