From: trenn@suse.de
Subject: acpi is dead slow (battery / thermal zone)
Patch-mainline: not yet

Full ACPI_DEBUG output slows down the system significantly,
even if not enabled during runtime.
This variable takes care that errors and warnings will still be printed,
but higher debug levels can not be enabled any more during runtime.


--- x/drivers/acpi/executer/exconvrt.c.orig	2005-02-14 10:39:32.320909357 +0100
+++ y/drivers/acpi/executer/exconvrt.c	2005-02-14 10:40:47.748341811 +0100
@@ -682,11 +682,9 @@
 
 
 	default:
-		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR,
-			"Unknown Target type ID 0x%X Op %s dest_type %s\n",
+		ACPI_REPORT_ERROR (("Unknown Target type ID 0x%X dest_type %s\n",
 			GET_CURRENT_ARG_TYPE (walk_state->op_info->runtime_args),
-			walk_state->op_info->name, acpi_ut_get_type_name (destination_type)));
-
+		        acpi_ut_get_type_name (destination_type)));
 		ACPI_REPORT_ERROR (("Bad Target Type (ARGI): %X\n",
 			GET_CURRENT_ARG_TYPE (walk_state->op_info->runtime_args)))
 		status = AE_AML_INTERNAL;
--- x/drivers/acpi/executer/exresop.c.orig	2005-02-14 10:34:13.393732141 +0100
+++ y/drivers/acpi/executer/exresop.c	2005-02-14 10:34:28.209674352 +0100
@@ -159,9 +159,10 @@
 
 		return_ACPI_STATUS (AE_AML_INTERNAL);
 	}
-
+#ifdef ACPI_DEBUG_OUTPUT
 	ACPI_DEBUG_PRINT ((ACPI_DB_EXEC, "Opcode %X [%s] required_operand_types=%8.8X \n",
 		opcode, op_info->name, arg_types));
+#endif
 
 	/*
 	 * Normal exit is with (arg_types == 0) at end of argument list.
@@ -232,10 +233,9 @@
 					break;
 
 				default:
-					ACPI_DEBUG_PRINT ((ACPI_DB_ERROR,
+					ACPI_REPORT_ERROR ((
 						"Operand is a Reference, Unknown Reference Opcode %X [%s]\n",
-						obj_desc->reference.opcode,
-						(acpi_ps_get_opcode_info (obj_desc->reference.opcode))->name));
+						obj_desc->reference.opcode));
 
 					return_ACPI_STATUS (AE_AML_OPERAND_TYPE);
 				}
--- x/drivers/acpi/dispatcher/dswload.c.orig	2005-02-14 10:38:25.441712521 +0100
+++ y/drivers/acpi/dispatcher/dswload.c	2005-02-14 10:38:30.703626521 +0100
@@ -706,9 +706,10 @@
 	ACPI_FUNCTION_TRACE ("ds_load2_end_op");
 
 	op = walk_state->op;
+#ifdef ACPI_DEBUG_OUTPUT
 	ACPI_DEBUG_PRINT ((ACPI_DB_DISPATCH, "Opcode [%s] Op %p State %p\n",
 			walk_state->op_info->name, op, walk_state));
-
+#endif
 	/* Only interested in opcodes that have namespace objects */
 
 	if (!(walk_state->op_info->flags & AML_NSOBJECT)) {
--- x/drivers/acpi/events/evmisc.c.orig	2005-02-14 10:36:44.769490205 +0100
+++ y/drivers/acpi/events/evmisc.c	2005-02-14 10:37:00.137318460 +0100
@@ -132,6 +132,7 @@
 	 * For value 0x80 (Status Change) on the power button or sleep button,
 	 * initiate soft-off or sleep operation?
 	 */
+#ifdef ACPI_DEBUG_OUTPUT
 	ACPI_DEBUG_PRINT ((ACPI_DB_INFO,
 		"Dispatching Notify(%X) on node %p\n", notify_value, node));
 
@@ -143,7 +144,7 @@
 		ACPI_DEBUG_PRINT ((ACPI_DB_INFO, "Notify value: 0x%2.2X **Device Specific**\n",
 				notify_value));
 	}
-
+#endif
 	/* Get the notify object attached to the NS Node */
 
 	obj_desc = acpi_ns_get_attached_object (node);
--- x/drivers/acpi/namespace/nsalloc.c.orig	2005-02-14 10:37:45.303996544 +0100
+++ y/drivers/acpi/namespace/nsalloc.c	2005-02-14 10:37:49.207190964 +0100
@@ -409,9 +409,10 @@
 
 		ACPI_MEM_TRACKING (acpi_gbl_memory_lists[ACPI_MEM_LIST_NSNODE].total_freed++);
 
+#ifdef ACPI_DEBUG_OUTPUT
 		ACPI_DEBUG_PRINT ((ACPI_DB_ALLOCATIONS, "Object %p, Remaining %X\n",
 			child_node, acpi_gbl_current_node_count));
-
+#endif 
 		/*
 		 * Detach an object if there is one, then free the child node
 		 */
--- x/drivers/acpi/Kconfig.orig	2005-02-14 15:41:53.058301999 +0100
+++ y/drivers/acpi/Kconfig	2005-02-14 15:41:55.134872091 +0100
@@ -355,5 +355,14 @@
 	  one found in the initrd, the DSDT from the BIOS is used. Even you do not 
 	  need a new one at the moment, you may want to use a better implemented 
 	  DSDT later. It is save to say yes here
+config ACPI_DEBUG_LITE
+       bool "Print ACPI errors and warnings"
+       depends on ACPI
+       default n
+       help
+         Full ACPI_DEBUG output slows down the system significantly,
+	 even if not enabled during runtime.
+	 This variable takes care that errors and warnings will still be printed,
+	 but higher debug levels can not be enabled any more during runtime.
 
 endmenu
--- x/include/acpi/acmacros.h.orig	2005-02-13 20:33:39.425078142 +0100
+++ y/include/acpi/acmacros.h	2005-02-14 14:57:38.865182963 +0100
@@ -604,7 +604,18 @@
 #define ACPI_DUMP_PATHNAME(a,b,c,d)
 #define ACPI_DUMP_RESOURCE_LIST(a)
 #define ACPI_DUMP_BUFFER(a,b)
+
+
+#ifdef ACPI_DEBUG_LITE
+/* compiler must optimize, no solution to only integrate
+   this in preprocessing directives found */
+#define ACPI_DEBUG_PRINT_SUB(L, LINE, DB_INFO, A...) (L == ACPI_LV_ERROR || L == ACPI_LV_WARN) ? \
+ (ACPI_REPORT_WARNING ((A))) : (0)
+#define ACPI_DEBUG_PRINT(pl)  ACPI_DEBUG_PRINT_SUB pl
+#else
 #define ACPI_DEBUG_PRINT(pl)
+#endif
+
 #define ACPI_DEBUG_PRINT_RAW(pl)
 #define ACPI_BREAK_MSG(a)
 
--- x/drivers/acpi/Makefile.orig	2005-02-14 15:51:31.521602715 +0100
+++ y/drivers/acpi/Makefile	2005-02-14 15:51:34.576970706 +0100
@@ -10,6 +10,10 @@
   ACPI_CFLAGS	+= -DACPI_DEBUG_OUTPUT
 endif
 
+ifdef CONFIG_ACPI_DEBUG_LITE
+  ACPI_CFLAGS	+= -DACPI_DEBUG_LITE
+endif
+
 EXTRA_CFLAGS	+= $(ACPI_CFLAGS)
 
 #
--- x/drivers/acpi/parser/psparse.c.orig	2005-02-14 16:18:36.981595692 +0100
+++ y/drivers/acpi/parser/psparse.c	2005-02-14 16:19:13.691010742 +0100
@@ -680,10 +680,12 @@
 			op->common.aml_offset = walk_state->aml_offset;
 
 			if (walk_state->op_info) {
+#ifdef ACPI_DEBUG_OUTPUT
 				ACPI_DEBUG_PRINT ((ACPI_DB_PARSE,
 					"Opcode %4.4X [%s] Op %p Aml %p aml_offset %5.5X\n",
 					 (u32) op->common.aml_opcode, walk_state->op_info->name,
 					 op, parser_state->aml, op->common.aml_offset));
+#endif
 			}
 		}
 
--- x/drivers/acpi/utilities/utmisc.c.orig	2005-02-14 19:01:35.867558220 +0100
+++ y/drivers/acpi/utilities/utmisc.c	2005-02-14 18:51:24.623786669 +0100
@@ -736,8 +736,8 @@
 		acpi_gbl_mutex_info[mutex_id].owner_id = this_thread_id;
 	}
 	else {
-		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "Thread %X could not acquire Mutex [%s] %s\n",
-				 this_thread_id, acpi_ut_get_mutex_name (mutex_id),
+		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "Thread %X could not acquire Mutex %s\n",
+				 this_thread_id,
 				 acpi_format_exception (status)));
 	}
 
@@ -783,8 +783,7 @@
 	 */
 	if (acpi_gbl_mutex_info[mutex_id].owner_id == ACPI_MUTEX_NOT_ACQUIRED) {
 		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR,
-				"Mutex [%s] is not acquired, cannot release\n",
-				acpi_ut_get_mutex_name (mutex_id)));
+				"Mutex is not acquired, cannot release\n"));
 
 		return (AE_NOT_ACQUIRED);
 	}
@@ -800,10 +799,11 @@
 			if (i == mutex_id) {
 				continue;
 			}
-
-			ACPI_DEBUG_PRINT ((ACPI_DB_ERROR,
+			ACPI_DEBUG_PRINT ((ACPI_DB_MUTEX,
 					"Invalid release order: owns [%s], releasing [%s]\n",
-					acpi_ut_get_mutex_name (i), acpi_ut_get_mutex_name (mutex_id)));
+					acpi_ut_get_mutex_name(i), acpi_ut_get_mutex_name (mutex_id)));
+
+			ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "Invalid Mutex release order\n"));
 
 			return (AE_RELEASE_DEADLOCK);
 		}
@@ -816,8 +816,8 @@
 	status = acpi_os_signal_semaphore (acpi_gbl_mutex_info[mutex_id].mutex, 1);
 
 	if (ACPI_FAILURE (status)) {
-		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "Thread %X could not release Mutex [%s] %s\n",
-				 this_thread_id, acpi_ut_get_mutex_name (mutex_id),
+		ACPI_DEBUG_PRINT ((ACPI_DB_ERROR, "Thread %X could not release Mutex %s\n",
+				 this_thread_id, 
 				 acpi_format_exception (status)));
 	}
 	else {
@@ -1477,6 +1477,7 @@
 	acpi_os_printf ("%8s-%04d: *** Warning: ", module_name, line_number);
 }
 
+EXPORT_SYMBOL(acpi_ut_report_warning);
 
 /*******************************************************************************
  *
--- x/include/acpi/acutils.h.orig	2005-02-14 19:15:29.825365495 +0100
+++ y/include/acpi/acutils.h	2005-02-14 19:15:19.178563101 +0100
@@ -44,6 +44,8 @@
 #ifndef _ACUTILS_H
 #define _ACUTILS_H
 
+#include <linux/module.h>
+
 typedef
 acpi_status (*acpi_pkg_callback) (
 	u8                              object_type,
