From: Olaf Kirch <okir@suse.de>
Subject: Rewrite nlmsvc_invalidate_all

  nlm_invalidate_all is a funny little function. It seems the purpose
  is to simulate a server reboot, and make lockd forget all locks held
  by NFS clients.

  But this function does more; it also marks the host structs of all
  clients for destruction (well, destroys them).

  This patch moves the destruction of the client hosts from
  nlmsvc_invalidate_all (in svcsubs.c) to its own function in host.c,
  and gets rid of the kludgy nlm_find_host function.

  We should consider dropping this step entirely, and just keep the hosts
  around (when exiting the main loop, we will call nlm_shutdown_hosts
  anyway).

Signed-off-by: Olaf Kirch <okir@suse.de>

Index: 2.6.15/fs/lockd/host.c
===================================================================
--- 2.6.15.orig/fs/lockd/host.c
+++ 2.6.15/fs/lockd/host.c
@@ -188,30 +188,43 @@ nlm_destroy_host(struct nlm_host *host)
 	kfree(host);
 }
 
-struct nlm_host *
-nlm_find_client(void)
+/*
+ * Destroy all host structs for our clients.
+ */
+void
+nlm_destroy_clients(void)
 {
 	struct hlist_head *chain;
-	struct hlist_node *pos;
+	struct hlist_node *pos, *next;
 
-	/* find a nlm_host for a client for which h_killed == 0.
-	 * and return it
-	 */
 	down(&nlm_host_sema);
 	for (chain = nlm_hosts; chain < nlm_hosts + NLM_HOST_NRHASH; ++chain) {
 		struct nlm_host *host;
 
-		hlist_for_each_entry(host, pos, chain, h_hash) {
-			if (host->h_server &&
-			    host->h_killed == 0) {
-				nlm_get_host(host);
-				up(&nlm_host_sema);
-				return host;
+		hlist_for_each_entry_safe(host, pos, next, chain, h_hash) {
+			if (!host->h_server)
+				continue;
+
+			/* Remove from hash list. This will also
+			 * tell nlm_release_host that it should
+			 * destroy this host when the refcount
+			 * reaches 0.
+			 */
+			hlist_del_init(&host->h_hash);
+			if (atomic_read(&host->h_count)) {
+				nlm_destroy_host(host);
+			} else {
+				/* This shouldn't happen, but it's not a desaster
+				 * either. nlm_release_host will just destroy it
+				 * later. */
+				printk(KERN_NOTICE "lockd: host %s has refcount %u "
+						"in nlm_destroy_clients\n",
+						host->h_name,
+						atomic_read(&host->h_count));
 			}
 		}
 	}
 	up(&nlm_host_sema);
-	return NULL;
 }
 
 				
@@ -303,6 +316,10 @@ void nlm_release_host(struct nlm_host *h
 		dprintk("lockd: release host %s\n", host->h_name);
 		atomic_dec(&host->h_count);
 		BUG_ON(atomic_read(&host->h_count) < 0);
+
+		if (atomic_read(&host->h_count) == 0
+		 && hlist_unhashed(&host->h_hash))
+			nlm_destroy_host(host);
 	}
 }
 
Index: 2.6.15/fs/lockd/svcsubs.c
===================================================================
--- 2.6.15.orig/fs/lockd/svcsubs.c
+++ 2.6.15/fs/lockd/svcsubs.c
@@ -355,19 +355,14 @@ nlmsvc_free_host_resources(struct nlm_ho
 }
 
 /*
- * delete all hosts structs for clients
+ * Delete all hosts structs for clients
  */
 void
 nlmsvc_invalidate_all(void)
 {
-	struct nlm_host *host;
-
 	/* Release all locks held by a NFS clients */
 	nlm_traverse_files(NULL, nlmsvc_is_client);
 
-	while ((host = nlm_find_client()) != NULL) {
-		host->h_expires = 0;
-		host->h_killed = 1;
-		nlm_release_host(host);
-	}
+	/* Then destroy the host handles */
+	nlm_destroy_clients();
 }
Index: 2.6.15/include/linux/lockd/lockd.h
===================================================================
--- 2.6.15.orig/include/linux/lockd/lockd.h
+++ 2.6.15/include/linux/lockd/lockd.h
@@ -45,8 +45,7 @@ struct nlm_host {
 	unsigned short		h_proto;	/* transport proto */
 	unsigned short		h_reclaiming : 1,
 				h_server     : 1, /* server side, not client side */
-				h_inuse      : 1,
-				h_killed     : 1;
+				h_inuse      : 1;
 	wait_queue_head_t	h_gracewait;	/* wait while reclaiming */
 	u32			h_state;	/* pseudo-state counter */
 	u32			h_nsmstate;	/* true remote NSM state */
@@ -170,7 +169,7 @@ void		  nlm_rebind_host(struct nlm_host 
 struct nlm_host * nlm_get_host(struct nlm_host *);
 void		  nlm_release_host(struct nlm_host *);
 void		  nlm_shutdown_hosts(void);
-extern struct nlm_host *nlm_find_client(void);
+void		  nlm_destroy_clients(void);
 extern void	  nlm_host_rebooted(const struct sockaddr_in *, const char *, int, u32);
 struct nsm_handle *nsm_find(const struct sockaddr_in *, const char *, int);
 void		  nsm_release(struct nsm_handle *);
