From: jlan@sgi.com
Subject: Fix LKCD to handle GFP_COMP flagged pages
References: 168514

Here's a patch that works.

This fix will not enable LKCD to capture pages allocated by some
driver, for example, that allocates a multi-page area without specifying
the __GFP_COMP flag.
(Some other fix is probably needed in the long run to make all kernel
 multi-page allocations detectable without making them compound pages.)
Christoph suggested that we look at some other dumping projects (kexec?) to
see how they plan to identify kernel pages.

Then a change is made to LKCD's kernel page identifying function (kernel_page())
to capture small compound pages.  
The patch below arbitrarily captures up to order 3 (8 pages)


Acked-by: Lars Marowsky-Bree <lmb@suse.de>

Index: linux-2.6.16/drivers/dump/dump_filters.c
===================================================================
--- linux-2.6.16.orig/drivers/dump/dump_filters.c	2006-04-25 14:48:55.000000000 +0200
+++ linux-2.6.16/drivers/dump/dump_filters.c	2006-04-25 15:00:19.000000000 +0200
@@ -57,7 +57,8 @@ int dump_low_page(struct page *p)
 static inline int kernel_page(struct page *p)
 {
 	return (PageReserved(p) && !PageInuse(p)) ||
-		(!PageLRU(p) && !PageCompound(p) && PageInuse(p));
+		(!PageLRU(p) && PageInuse(p))     ||
+		(PageCompound(p) && (long)p->lru.prev < 4);
 }
 
 static inline int user_page(struct page *p)
Index: linux-2.6.16/include/asm-ia64/thread_info.h
===================================================================
--- linux-2.6.16.orig/include/asm-ia64/thread_info.h	2006-04-25 14:48:55.000000000 +0200
+++ linux-2.6.16/include/asm-ia64/thread_info.h	2006-04-25 15:00:56.000000000 +0200
@@ -74,7 +74,7 @@ struct thread_info {
 #define end_of_stack(p) (unsigned long *)((void *)(p) + IA64_RBS_OFFSET)
 
 #define __HAVE_ARCH_TASK_STRUCT_ALLOCATOR
-#define alloc_task_struct()	((task_t *)__get_free_pages(GFP_KERNEL, KERNEL_STACK_SIZE_ORDER))
+#define alloc_task_struct()	((task_t *)__get_free_pages(GFP_KERNEL | __GFP_COMP, KERNEL_STACK_SIZE_ORDER))
 #define free_task_struct(tsk)	free_pages((unsigned long) (tsk), KERNEL_STACK_SIZE_ORDER)
 
 #endif /* !__ASSEMBLY */
