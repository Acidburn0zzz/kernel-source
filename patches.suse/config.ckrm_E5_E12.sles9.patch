--- a/fs/Kconfig	2004-04-26 12:35:37.000000000 -0400
+++ b/fs/Kconfig	2004-04-28 23:16:46.000000000 -0400
@@ -857,12 +857,6 @@
 
 	  It is perfectly safe to say N here.
 
-config RCFS_FS
-       tristate "Resource Class File System for CKRM"
-       depends on EXPERIMENTAL
-       help
-	 This option adds CKRM support to the Kernel. Say N if you are unsure.
-
 endmenu
 
 menu "Pseudo filesystems"
--- a/init/Kconfig	2004-04-26 12:35:37.000000000 -0400
+++ b/init/Kconfig	2004-04-28 23:22:16.000000000 -0400
@@ -230,30 +230,54 @@
        tristate "Resource Class File System (User API)"
        depends on CKRM
        help
-	  RCFS is the filesystem API for CKRM. This separate configuration option
-          is provided only for debugging and will eventually disappear since rcfs
-          will be automounted whenever CKRM is configured. 
+	  RCFS is the filesystem API for CKRM. This separate configuration 
+	  option is provided only for debugging and will eventually disappear 
+	  since rcfs will be automounted whenever CKRM is configured. 
 
-          Say N if unsure, Y if you've enabled CKRM, M to debug rcfs initialization.
+          Say N if unsure, Y if you've enabled CKRM, M to debug rcfs 
+	  initialization.
 
-config CKRM_RES_DUMMY
-	tristate "Dummy Resource Manager"
+config CKRM_TYPE_TASKCLASS
+	bool "Class Manager for Task Groups"
 	depends on CKRM
+	help
+	  TASKCLASS provides the extensions for CKRM to track task classes
+	  This is the base to enable task class based resource control for
+	  cpu, memory and disk I/O.
+	
+	  Say N if unsure 
+
+config CKRM_RES_NUMTASKS
+	tristate "Number of Tasks Resource Manager"
+	depends on CKRM_TYPE_TASKCLASS
 	default m
 	help
-	  Provides a Dummy Resource Controller for CKRM that does no useful
-	  work but illustrates how to write and integrate a resource controller
-	  for CKRM.
+	  Provides a Resource Controller for CKRM that allows limiting no of
+	  tasks a task class can have.
 	
-	  Say N if unsure, Y if testing CKRM. 
+	  Say N if unsure, Y to use the feature.
 
-config CKRM_RES_SOCKETAQ
-	tristate "Multiple Accept Queues Resource Manager"
+config CKRM_TYPE_SOCKETCLASS
+	bool "Class Manager for socket groups"
 	depends on CKRM
 	help
-	  Provides a  resource controller for CKRM to prioritize accept queues.
+	  SOCKET provides the extensions for CKRM to track per socket
+	  classes.  This is the base to enable socket based resource 
+	  control for inbound connection control, bandwidth control etc.
+	
+	  Say N if unsure.  
+
+config CKRM_RES_LISTENAQ
+	tristate "Multiple Accept Queues Resource Manager"
+	depends on CKRM_TYPE_SOCKETCLASS && ACCEPT_QUEUES
+	default m
+	help
+	  Provides a  resource controller for CKRM to prioritize inbound
+	  connection requests. See inbound control description for
+	  "IP: TCP Multiple accept queues support". If you choose that
+	  option choose this option to control the queue weights.
  
-	  Say N if unsure. Not needed for testing CKRM framework and API.
+	  If unsure, say N.
 
 endmenu
 
--- a/net/ipv4/Kconfig	2004-04-03 22:37:40.000000000 -0500
+++ b/net/ipv4/Kconfig	2004-04-28 23:24:39.000000000 -0400
@@ -360,5 +360,28 @@
 	  
 	  If unsure, say Y.
 
+config ACCEPT_QUEUES 
+	bool "IP: TCP Multiple accept queues support"
+	depends on INET && NETFILTER
+	---help---
+	  Support multiple accept queues per listening socket. If you say Y
+	  here, multiple accept queues will be configured per listening
+	  socket.
+	  
+	  Each queue is mapped to a priority class. Incoming connection 
+	  requests can be classified (see iptables(8), MARK target), depending
+	  on the packet's src/dest address or other parameters, into one of 
+	  the priority classes. The requests are then queued to the relevant
+	  accept queue. 
+
+	  Each of the queues can be assigned a weight. The accept()ance 
+	  of packets is then scheduled in accordance with the weight 
+	  assigned to the priority class. 
+	  
+	  Be sure to enable "Network packet filtering" if you wish
+	  to use this feature.
+
+	  If unsure, say N.
+
 source "net/ipv4/ipvs/Kconfig"
 
