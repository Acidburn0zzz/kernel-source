diff -urNp linux-2.6.5-7.17-pure/Documentation/filesystems/relayfs.txt linux-2.6.5-7.17-relayfs-inc/Documentation/filesystems/relayfs.txt
--- linux-2.6.5-7.17-pure/Documentation/filesystems/relayfs.txt	2004-04-30 13:22:22.000000000 -0700
+++ linux-2.6.5-7.17-relayfs-inc/Documentation/filesystems/relayfs.txt	2004-05-03 10:19:14.000000000 -0700
@@ -461,6 +461,14 @@ The remaining parameters for relay_open(
 	    RELAY_FILE_UNMAP- a relayfs file is being unmapped.  The return
 			      value is ignored.
 
+	  - void ioctl(rchan_id, cmd, arg)
+
+  	    called when an ioctl call is made using a relayfs file
+	    descriptor.  The cmd and arg are passed along to this
+	    callback unmodified for it to do as it wishes with.  The
+	    return value from this callback is used as the return value
+	    of the ioctl call.
+
   If the callbacks param passed to relay_open() is NULL, a set of
   default do-nothing callbacks will be defined for the channel.
   Likewise, any NULL rchan_callback function contained in a non-NULL
diff -urNp linux-2.6.5-7.17-pure/fs/relayfs/inode.c linux-2.6.5-7.17-relayfs-inc/fs/relayfs/inode.c
--- linux-2.6.5-7.17-pure/fs/relayfs/inode.c	2004-04-30 13:21:29.000000000 -0700
+++ linux-2.6.5-7.17-relayfs-inc/fs/relayfs/inode.c	2004-05-03 10:19:44.000000000 -0700
@@ -431,6 +431,38 @@ relayfs_file_write(struct file *filp, co
 }
 
 /**
+ *	relayfs_ioctl - ioctl file op for relayfs files
+ *	@inode: the inode
+ *	@filp: the file
+ *	@cmd: the command
+ *	@arg: command arg
+ *
+ *	Passes the specified cmd/arg to the kernel client.  arg may be a 
+ *	pointer to user-space data, in which case the kernel client is 
+ *	responsible for copying the data to/from user space appropriately.
+ *	The kernel client is also responsible for returning a meaningful
+ *	return value for ioctl calls.
+ *	
+ *	Returns result of relay channel callback, -EPERM if unsuccessful.
+ */
+int
+relayfs_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg)
+{
+	struct rchan *rchan;
+	struct rchan_reader *reader;
+
+	reader = (struct rchan_reader *)filp->private_data;
+	if (reader == NULL)
+		return -EPERM;
+
+	rchan = reader->rchan;
+	if (rchan == NULL)
+		return -EPERM;
+
+	return rchan->callbacks->ioctl(rchan->id, cmd, arg);
+}
+
+/**
  *	relayfs_poll - poll file op for relayfs files
  *	@filp: the file
  *	@wait: poll table
@@ -499,8 +531,10 @@ static struct address_space_operations r
 
 static struct file_operations relayfs_file_operations = {
 	.open		= relayfs_open,
+	.llseek		= no_llseek,
 	.read		= relayfs_file_read,
 	.write		= relayfs_file_write,
+	.ioctl		= relayfs_ioctl,
 	.poll		= relayfs_poll,
 	.mmap		= relayfs_mmap,
 	.fsync		= simple_sync_file,
diff -urNp linux-2.6.5-7.17-pure/fs/relayfs/relay.c linux-2.6.5-7.17-relayfs-inc/fs/relayfs/relay.c
--- linux-2.6.5-7.17-pure/fs/relayfs/relay.c	2004-04-30 13:21:29.000000000 -0700
+++ linux-2.6.5-7.17-relayfs-inc/fs/relayfs/relay.c	2004-05-03 10:19:44.000000000 -0700
@@ -159,13 +159,17 @@ rchan_free_id(int rchan_id)
  *	rchan_destroy_buf - destroy the current channel buffer
  *	@rchan: the channel
  */
-static inline void
+static inline int
 rchan_destroy_buf(struct rchan *rchan)
 {
+	int err = 0;
+	
 	if (rchan->buf && !rchan->init_buf)
-		free_rchan_buf(rchan->buf,
-			       rchan->buf_page_array,
-			       rchan->buf_page_count);
+		err = free_rchan_buf(rchan->buf,
+				     rchan->buf_page_array,
+				     rchan->buf_page_count);
+
+	return err;
 }
 
 /**
@@ -181,16 +185,27 @@ rchan_destroy_buf(struct rchan *rchan)
 static int 
 relay_release(struct rchan *rchan)
 {
-	if (rchan == NULL)
-		return -EBADF;
+	int err = 0;
+	
+	if (rchan == NULL) {
+		err = -EBADF;
+		goto exit;
+	}
+
+	err = rchan_destroy_buf(rchan);
+	if (err)
+		goto exit;
 
-	rchan_destroy_buf(rchan);
 	rchan_free_id(rchan->id);
-	relayfs_remove_file(rchan->dentry);
+
+	err = relayfs_remove_file(rchan->dentry);
+	if (err)
+		goto exit;
+
 	clear_readers(rchan);
 	kfree(rchan);
-
-	return 0;
+exit:
+	return err;
 }
 
 /**
@@ -514,6 +529,17 @@ fileop_notify_default_callback(int rchan
 	return 0;
 }
 
+/*
+ * ioctl() default callback.  Does nothing.
+ */
+static int
+ioctl_default_callback(int rchan_id,
+		       unsigned int cmd,
+		       unsigned long arg)
+{
+	return 0;
+}
+
 /* relay channel default callbacks */
 static struct rchan_callbacks default_channel_callbacks = {
 	.buffer_start = buffer_start_default_callback,
@@ -522,6 +548,7 @@ static struct rchan_callbacks default_ch
 	.user_deliver = user_deliver_default_callback,
 	.needs_resize = needs_resize_default_callback,
 	.fileop_notify = fileop_notify_default_callback,
+	.ioctl = ioctl_default_callback,
 };
 
 /**
@@ -979,6 +1006,8 @@ relay_open(const char *chanpath,
 		callbacks->needs_resize = needs_resize_default_callback;
 	if (callbacks->fileop_notify == NULL)
 		callbacks->fileop_notify = fileop_notify_default_callback;
+	if (callbacks->ioctl == NULL)
+		callbacks->ioctl = ioctl_default_callback;
 	rchan->callbacks = callbacks;
 
 	/* Just to let the client know the sizes used */
diff -urNp linux-2.6.5-7.17-pure/fs/relayfs/resize.c linux-2.6.5-7.17-relayfs-inc/fs/relayfs/resize.c
--- linux-2.6.5-7.17-pure/fs/relayfs/resize.c	2004-04-30 13:21:29.000000000 -0700
+++ linux-2.6.5-7.17-relayfs-inc/fs/relayfs/resize.c	2004-05-03 10:19:44.000000000 -0700
@@ -131,20 +131,6 @@ alloc_rchan_buf(unsigned long size, stru
 }
 
 /**
- *	free_rchan_buf - free a channel buffer
- *	@buf: pointer to the buffer to free
- *	@page_array: pointer to the buffer's page array
- *	@page_count: number of pages in page array
- */
-void
-free_rchan_buf(void *buf, struct page **page_array, int page_count)
-{
-	vunmap(buf);
-	depopulate_page_array(page_array, page_count);
-	free_page_array(page_array);
-}
-
-/**
  *	expand_check - check whether the channel needs expanding
  *	@rchan: the channel
  *
@@ -932,6 +918,31 @@ add_free_page_array(struct free_rchan_bu
 }
 
 /**
+ *	free_rchan_buf - free a channel buffer
+ *	@buf: pointer to the buffer to free
+ *	@page_array: pointer to the buffer's page array
+ *	@page_count: number of pages in page array
+ */
+int
+free_rchan_buf(void *buf, struct page **page_array, int page_count)
+{
+	struct free_rchan_buf *free_buf;
+
+	free_buf = kmalloc(sizeof(struct free_rchan_buf), GFP_ATOMIC);
+	if (!free_buf)
+		return -ENOMEM;
+	memset(free_buf, 0, sizeof(struct free_rchan_buf));
+
+	free_buf->unmap_buf = buf;
+	add_free_page_array(free_buf, page_array, page_count);
+
+	INIT_WORK(&free_buf->work, relaybuf_free, free_buf);
+	schedule_delayed_work(&free_buf->work, 1);
+
+	return 0;
+}
+
+/**
  *	free_replaced_buffer - free a channel's old buffer
  *	@rchan: the channel
  *	@oldbuf: the old buffer
diff -urNp linux-2.6.5-7.17-pure/fs/relayfs/resize.h linux-2.6.5-7.17-relayfs-inc/fs/relayfs/resize.h
--- linux-2.6.5-7.17-pure/fs/relayfs/resize.h	2004-04-30 13:21:29.000000000 -0700
+++ linux-2.6.5-7.17-relayfs-inc/fs/relayfs/resize.h	2004-05-03 10:19:44.000000000 -0700
@@ -37,7 +37,7 @@ alloc_rchan_buf(unsigned long size,
 		struct page ***page_array,
 		int *page_count);
 
-extern void
+extern int
 free_rchan_buf(void *buf,
 	       struct page **page_array,
 	       int page_count);
diff -urNp linux-2.6.5-7.17-pure/include/linux/relayfs_fs.h linux-2.6.5-7.17-relayfs-inc/include/linux/relayfs_fs.h
--- linux-2.6.5-7.17-pure/include/linux/relayfs_fs.h	2004-04-30 13:22:25.000000000 -0700
+++ linux-2.6.5-7.17-relayfs-inc/include/linux/relayfs_fs.h	2004-05-03 10:19:14.000000000 -0700
@@ -203,6 +203,18 @@ struct rchan_callbacks
         int (*fileop_notify)(int rchan_id,
 			     struct file *filp,
 			     enum relay_fileop fileop);
+
+	/*
+	 * ioctl - called in ioctl context from userspace
+	 * @rchan_id: the channel id
+	 * @cmd: ioctl cmd
+	 * @arg: ioctl cmd arg
+	 *
+	 * The return value is returned as the value from the ioctl call.
+	 *
+	 * See Documentation/filesystems/relayfs.txt for details.
+	 */
+	int (*ioctl) (int rchan_id, unsigned int cmd, unsigned long arg);
 };
 
 /*
