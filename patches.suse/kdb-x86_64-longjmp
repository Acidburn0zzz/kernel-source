From: Joe Korty, AK 
Subject: Fix longjmp in x86-64 kdb
Acked-by: ak@suse.de
Patch-mainline: never

Index: linux-2.6.16/arch/x86_64/kdb/Makefile
===================================================================
--- linux-2.6.16.orig/arch/x86_64/kdb/Makefile
+++ linux-2.6.16/arch/x86_64/kdb/Makefile
@@ -6,7 +6,7 @@
 # Copyright (c) 1999-2004 Silicon Graphics, Inc.  All Rights Reserved.
 #
  
-obj-$(CONFIG_KDB) := kdba_bt.o kdba_bp.o kdba_id.o kdbasupport.o x86_64-dis.o kdba_io.o
+obj-$(CONFIG_KDB) := kdba_bt.o kdba_bp.o kdba_id.o kdbasupport.o x86_64-dis.o kdba_io.o longjmp.o
 
 override CFLAGS := $(CFLAGS:%-pg=% )
 
Index: linux-2.6.16/arch/x86_64/kdb/kdbasupport.c
===================================================================
--- linux-2.6.16.orig/arch/x86_64/kdb/kdbasupport.c
+++ linux-2.6.16/arch/x86_64/kdb/kdbasupport.c
@@ -1029,6 +1029,7 @@ kdba_clearsinglestep(struct pt_regs *reg
 		regs->eflags &= ~EF_IE;
 }
 
+#if 0
 #ifdef KDB_HAVE_LONGJMP
 int asmlinkage
 kdba_setjmp(kdb_jmp_buf *jb)
@@ -1094,6 +1095,7 @@ kdba_longjmp(kdb_jmp_buf *jb, int reason
 #endif	 /* CONFIG_FRAME_POINTER */
 }
 #endif	/* KDB_HAVE_LONGJMP */
+#endif
 
 /*
  * kdba_enable_lbr
Index: linux-2.6.16/arch/x86_64/kdb/longjmp.S
===================================================================
--- /dev/null
+++ linux-2.6.16/arch/x86_64/kdb/longjmp.S
@@ -0,0 +1,38 @@
+       /* setjmp / longjmp for the kernel.
+        * Inspired by the glibc version.
+	* From Joe Korty
+        */
+
+	 .text
+        .globl 	kdba_setjmp 
+        .p2align 4
+kdba_setjmp:
+        movq    %rbx,0x0(%rdi)
+        movq    %rbp,0x8(%rdi)
+        movq    %r12,0x10(%rdi)
+        movq    %r13,0x18(%rdi)
+        movq    %r14,0x20(%rdi)
+        movq    %r15,0x28(%rdi)
+        leaq    0x8(%rsp),%rdx
+        movq    %rdx,0x30(%rdi)
+        movq    (%rsp),%rax
+        movq    %rax,0x38(%rdi)
+        xorq    %rax,%rax
+        ret
+
+        .globl  kdba_longjmp
+kdba_longjmp:
+        movq    0x0(%rdi),%rbx
+        movq    0x8(%rdi),%rbp
+        movq    0x10(%rdi),%r12
+        movq    0x18(%rdi),%r13
+        movq    0x20(%rdi),%r14
+        movq    0x28(%rdi),%r15
+        test    %esi,%esi
+        mov     $1,%eax
+        cmove   %eax,%esi
+        mov     %esi,%eax
+        movq    0x38(%rdi),%rdx
+        movq    0x30(%rdi),%rsp
+        jmpq    *%rdx
+
