Subject: add affinity_load_balancing sysctl
From: kraxel@suse.de
References: 176738

Add a sysctl to tweak how the kernel initially schedules threads to cpus.

By default the kernel tries to keep threads on the local cpu (and local
node on NUMA machines).  Depending on the application this may not deliver
the best performance, especially applications with a large working set for
each thread tend to perform better when being scheduled to different nodes
because they can use caches of multiple nodes then.

With this sysctl enabled the kernel will spread threads over the cpus given
and doesn't try to keep them local.

usage:
  - set sysctl kernel.affinity_load_balancing = 1
  - use taskset or numactl to specify which cpus your task should be
    scheduled on.

--- kernel/sysctl.c.original	2006-06-13 16:27:48.000000000 +0200
+++ kernel/sysctl.c	2006-06-14 10:40:31.000000000 +0200
@@ -233,6 +233,8 @@
 	{ .ctl_name = 0 }
 };
 
+extern int affinity_load_balancing;
+
 static ctl_table kern_table[] = {
 	{
 		.ctl_name	= KERN_OSTYPE,
@@ -721,6 +723,14 @@
 		.mode		= 0644,
 		.proc_handler	= &proc_dointvec,
 	},
+	{
+		.ctl_name	= 9999,
+		.procname	= "affinity_load_balancing",
+		.data		= &affinity_load_balancing,
+		.maxlen		= sizeof(affinity_load_balancing),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
 	{ .ctl_name = 0 }
 };
 
--- kernel/sched.c.original	2006-06-08 15:43:09.000000000 +0200
+++ kernel/sched.c	2006-06-14 10:39:28.000000000 +0200
@@ -1020,6 +1020,28 @@
 	return idlest;
 }
 
+static int
+find_idlest_cpu_nodomain(struct task_struct *p, int this_cpu)
+{
+	cpumask_t tmp;
+	unsigned long load, min_load = ULONG_MAX;
+	int idlest = -1;
+	int i;
+
+	/* Traverse only the allowed CPUs */
+	cpus_and(tmp, cpu_online_map, p->cpus_allowed);
+
+	for_each_cpu_mask(i, tmp) {
+		load = target_load(i, 1);
+
+		if (load < min_load) {
+			min_load = load;
+			idlest = i;
+		}
+	}
+	return idlest;
+}
+
 /*
  * sched_balance_self: balance the current task (running on cpu) in domains
  * that have the 'flag' flag set. In practice, this is SD_BALANCE_FORK and
@@ -1031,11 +1053,17 @@
  *
  * preempt must be disabled.
  */
+
+int affinity_load_balancing = 0;
+
 static int sched_balance_self(int cpu, int flag)
 {
 	struct task_struct *t = current;
 	struct sched_domain *tmp, *sd = NULL;
 
+	if (affinity_load_balancing && !cpus_full(t->cpus_allowed))
+		return find_idlest_cpu_nodomain(t, cpu);
+
 	for_each_domain(cpu, tmp)
 		if (tmp->flags & flag)
 			sd = tmp;
