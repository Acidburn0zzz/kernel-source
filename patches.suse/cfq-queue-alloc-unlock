--- linux-2.6.5-SUSE-20040713/drivers/block/cfq-iosched.~	2004-07-14 11:20:03.552660298 +0200
+++ linux-2.6.5-SUSE-20040713/drivers/block/cfq-iosched.c	2004-07-14 11:47:10.378824737 +0200
@@ -460,22 +460,36 @@
 					 int gfp_mask)
 {
 	const int hashval = hash_long(current->tgid, CFQ_QHASH_SHIFT);
-	struct cfq_queue *cfqq = __cfq_find_cfq_hash(cfqd, pid, hashval);
+	struct cfq_queue *cfqq, *new_cfqq = NULL;
+	request_queue_t *q = cfqd->queue;
 
-	if (!cfqq) {
-		cfqq = mempool_alloc(cfq_mpool, gfp_mask);
+retry:
+	cfqq = __cfq_find_cfq_hash(cfqd, pid, hashval);
 
-		if (cfqq) {
-			INIT_LIST_HEAD(&cfqq->cfq_hash);
-			INIT_LIST_HEAD(&cfqq->cfq_list);
-			RB_CLEAR_ROOT(&cfqq->sort_list);
-
-			cfqq->pid = pid;
-			cfqq->queued[0] = cfqq->queued[1] = 0;
-			list_add(&cfqq->cfq_hash, &cfqd->cfq_hash[hashval]);
-		}
+	if (!cfqq) {
+		if (new_cfqq) {
+			cfqq = new_cfqq;
+			new_cfqq = NULL;
+		} else if (gfp_mask & __GFP_WAIT) {
+			spin_unlock_irq(q->queue_lock);
+			new_cfqq = mempool_alloc(cfq_mpool, gfp_mask);
+			spin_lock_irq(q->queue_lock);
+			goto retry;
+		} else
+			return NULL;
+
+		INIT_LIST_HEAD(&cfqq->cfq_hash);
+		INIT_LIST_HEAD(&cfqq->cfq_list);
+		RB_CLEAR_ROOT(&cfqq->sort_list);
+
+		cfqq->pid = pid;
+		cfqq->queued[0] = cfqq->queued[1] = 0;
+		list_add(&cfqq->cfq_hash, &cfqd->cfq_hash[hashval]);
 	}
 
+	if (new_cfqq)
+		mempool_free(new_cfqq, cfq_mpool);
+
 	return cfqq;
 }
 
@@ -653,6 +667,7 @@
 
 	crq = mempool_alloc(cfqd->crq_pool, gfp_mask);
 	if (crq) {
+		memset(crq, 0, sizeof(*crq));
 		RB_CLEAR(&crq->rb_node);
 		crq->request = rq;
 		crq->cfq_queue = NULL;
