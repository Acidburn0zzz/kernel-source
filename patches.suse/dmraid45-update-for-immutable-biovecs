From: Jeff Mahoney <jeffm@suse.com>
Subject: dmraid45: Update for immutable biovecs
Patch-mainline: Depends on dmraid45 patch

3.14 introduced real bvec iterators which eliminated bio->bi_sector and
iteration using an int as a cursor. This patch uses the real bvec_iter struct.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 drivers/md/dm-raid45.c |   19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

--- a/drivers/md/dm-raid45.c
+++ b/drivers/md/dm-raid45.c
@@ -708,7 +708,7 @@ static void wake_do_raid(void *context)
 /* Calculate device sector offset. */
 static sector_t _sector(struct raid_set *rs, struct bio *bio)
 {
-	sector_t sector = bio->bi_sector;
+	sector_t sector = bio->bi_iter.bi_sector;
 
 	sector_div(sector, rs->set.data_devs);
 	return sector;
@@ -1713,22 +1713,23 @@ static void bio_copy_page_list(int rw, s
 	unsigned i, page_offset;
 	void *page_addr;
 	struct raid_set *rs = RS(stripe->sc);
-	struct bio_vec *bv;
+	struct bio_vec bv;
+	struct bvec_iter iter;
 
 	/* Get start page in page list for this sector. */
-	i = (bio->bi_sector & rs->set.io_mask) / SECTORS_PER_PAGE;
+	i = (bio->bi_iter.bi_sector & rs->set.io_mask) / SECTORS_PER_PAGE;
 	pl = pl_elem(pl, i);
 	BUG_ON(!pl);
 	BUG_ON(!pl->page);
 
 	page_addr = page_address(pl->page);
-	page_offset = to_bytes(bio->bi_sector & (SECTORS_PER_PAGE - 1));
+	page_offset = to_bytes(bio->bi_iter.bi_sector & (SECTORS_PER_PAGE - 1));
 
 	/* Walk all segments and copy data across between bio_vecs and pages. */
-	bio_for_each_segment(bv, bio, i) {
-		int len = bv->bv_len, size;
+	bio_for_each_segment(bv, bio, iter) {
+		int len = bv.bv_len, size;
 		unsigned bio_offset = 0;
-		void *bio_addr = __bio_kmap_atomic(bio, i);
+		void *bio_addr = __bio_kmap_atomic(bio, iter);
 redo:
 		size = (page_offset + len > PAGE_SIZE) ?
 		       PAGE_SIZE - page_offset : len;
@@ -2218,7 +2219,7 @@ static int stripe_queue_bio(struct raid_
 	struct raid_address addr;
 	struct stripe *stripe;
 
-	stripe = stripe_find(rs, raid_address(rs, bio->bi_sector, &addr));
+	stripe = stripe_find(rs, raid_address(rs, bio->bi_iter.bi_sector, &addr));
 	if (stripe) {
 		int r = 0, rw = bio_data_dir(bio);
 
@@ -4207,7 +4208,7 @@ static int raid_map(struct dm_target *ti
 		 * to zero on device suspension/destruction.
 		 */
 		io_get(rs);
-		bio->bi_sector -= ti->begin;	/* Remap sector. */
+		bio->bi_iter.bi_sector -= ti->begin;	/* Remap sector. */
 
 		/* Queue io to RAID set. */
 		mutex_lock(&rs->io.in_lock);

