We want to differentiate between program/procedure not available and
other I/O errors.

Index: linux-2.6.1/net/sunrpc/clnt.c
===================================================================
--- linux-2.6.1.orig/net/sunrpc/clnt.c	2004-01-09 07:59:26.000000000 +0100
+++ linux-2.6.1/net/sunrpc/clnt.c	2004-01-12 17:07:02.682089682 +0100
@@ -961,23 +961,29 @@ call_verify(struct rpc_task *task)
 	case RPC_SUCCESS:
 		return p;
 	case RPC_PROG_UNAVAIL:
-		printk(KERN_WARNING "RPC: call_verify: program %u is unsupported by server %s\n",
+		if (task->tk_client->cl_prog != 100227) {
+			/* Missing NFSACL support is reported by the caller. */
+			printk(KERN_WARNING "RPC: call_verify: program %u is unsupported by server %s\n",
 				(unsigned int)task->tk_client->cl_prog,
 				task->tk_client->cl_server);
-		goto out_eio;
+		}
+		rpc_exit(task, -ENOSYS);
+		return NULL;
 	case RPC_PROG_MISMATCH:
 		printk(KERN_WARNING "RPC: call_verify: program %u, version %u unsupported by server %s\n",
 				(unsigned int)task->tk_client->cl_prog,
 				(unsigned int)task->tk_client->cl_vers,
 				task->tk_client->cl_server);
-		goto out_eio;
+		rpc_exit(task, -ENOSYS);
+		return NULL;
 	case RPC_PROC_UNAVAIL:
 		printk(KERN_WARNING "RPC: call_verify: proc %p unsupported by program %u, version %u on server %s\n",
 				task->tk_msg.rpc_proc,
 				task->tk_client->cl_prog,
 				task->tk_client->cl_vers,
 				task->tk_client->cl_server);
-		goto out_eio;
+		rpc_exit(task, -ENOSYS);
+		return NULL;
 	case RPC_GARBAGE_ARGS:
 		break;			/* retry */
 	default:
