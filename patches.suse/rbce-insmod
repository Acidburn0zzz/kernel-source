bug 41422

diff -Nru a/fs/rcfs/rootdir.c b/fs/rcfs/rootdir.c
--- a/fs/rcfs/rootdir.c	Mon May 31 11:30:17 2004
+++ b/fs/rcfs/rootdir.c	Mon May 31 11:30:17 2004
@@ -55,6 +55,7 @@
 		return -EINVAL;
 	}
 	rcfs_eng_callbacks = *rcbs;
+	rcfs_engine_regd++;
 	return 0;
 }
 EXPORT_SYMBOL(rcfs_register_engine);
@@ -70,6 +71,7 @@
 	}
 	rcfs_eng_callbacks.mkdir = NULL;
 	rcfs_eng_callbacks.rmdir = NULL;
+	rcfs_engine_regd--;
 	return 0;
 }
 EXPORT_SYMBOL(rcfs_unregister_engine);
diff -Nru a/fs/rcfs/super.c b/fs/rcfs/super.c
--- a/fs/rcfs/super.c	Mon May 31 11:30:17 2004
+++ b/fs/rcfs/super.c	Mon May 31 11:30:17 2004
@@ -42,7 +42,8 @@
 
 #include <linux/rcfs.h>
 #include <linux/ckrm.h>
-
+#include <linux/ckrm_rc.h>
+#include <linux/ckrm_ce.h>
 
 static kmem_cache_t *rcfs_inode_cachep;
 
@@ -118,8 +119,6 @@
 static struct inode *rcfs_root;
 static struct rcfs_inode_info *rcfs_rootri;
 
-static int rcfs_mounted;
-
 static int rcfs_fill_super(struct super_block * sb, void * data, int silent)
 {
 	struct inode * inode;
@@ -178,6 +177,16 @@
 			continue ;  // could return with an error too 
 	}
 
+	// do post-mount initializations needed by CE
+	// this is distinct from CE registration done on rcfs module load
+	if (rcfs_engine_regd) {
+		if (rcfs_eng_callbacks.mnt) 
+			if ((rc = (*rcfs_eng_callbacks.mnt)())) {
+				printk(KERN_ERR "Error in CE mnt %d\n",rc);
+			}
+	}
+		
+	// above code handles this comment but keep for alternate implementation
 	// register CE's with rcfs 
 	// check if CE loaded
 	// call rcfs_register_engine for each classtype
@@ -219,7 +228,20 @@
 		}
 	}
 	
-	// do not remove comment block until ce directory issue resolved
+
+	// do pre-umount shutdown needed by CE
+	// this is distinct from CE deregistration done on rcfs module unload
+	if (rcfs_engine_regd) {
+		if (rcfs_eng_callbacks.umnt)
+			if ((rc = (*rcfs_eng_callbacks.umnt)())) {
+				printk(KERN_ERR "Error in CE umnt %d\n",rc);
+				// return ; until error handling improves
+			}
+	}
+
+	// Following comment handled by code above; keep nonetheless if it 
+	// can be done better
+	//
 	// deregister CE with rcfs
 	// Check if loaded
 	// if ce is in  one directory /rcfs/ce, 
diff -Nru a/include/linux/ckrm_ce.h b/include/linux/ckrm_ce.h
--- a/include/linux/ckrm_ce.h	Mon May 31 11:30:17 2004
+++ b/include/linux/ckrm_ce.h	Mon May 31 11:30:17 2004
@@ -65,6 +65,8 @@
 typedef struct rbce_eng_callback {
 	int (*mkdir)(struct inode *, struct dentry *, int); // mkdir
 	int (*rmdir)(struct inode *, struct dentry *); // rmdir
+	int (*mnt)(void);
+	int (*umnt)(void);
 } rbce_eng_callback_t;
 
 extern int ckrm_register_engine  (const char *name, ckrm_eng_callback_t *);
diff -Nru a/include/linux/ckrm_rc.h b/include/linux/ckrm_rc.h
--- a/include/linux/ckrm_rc.h	Mon May 31 11:30:17 2004
+++ b/include/linux/ckrm_rc.h	Mon May 31 11:30:17 2004
@@ -355,6 +355,15 @@
 } while (0)
 
 
+/***************
+ * RCFS related 
+ ***************/
+
+/* vars needed by other modules/core */
+
+extern int rcfs_mounted;
+extern int rcfs_engine_regd;
+
 #endif // CONFIG_CKRM
 
 #endif // __KERNEL__
diff -Nru a/include/linux/rcfs.h b/include/linux/rcfs.h
--- a/include/linux/rcfs.h	Mon May 31 11:30:17 2004
+++ b/include/linux/rcfs.h	Mon May 31 11:30:17 2004
@@ -93,6 +93,6 @@
 
 #define RCFS_ROOT "/rcfs"         // Hubertus .. we should use the mount point instead of hardcoded
 extern struct dentry *rcfs_rootde;
-
+extern rbce_eng_callback_t rcfs_eng_callbacks;
 
 #endif /* _LINUX_RCFS_H */ 
diff -Nru a/kernel/ckrm/ckrm.c b/kernel/ckrm/ckrm.c
--- a/kernel/ckrm/ckrm.c	Mon May 31 11:30:17 2004
+++ b/kernel/ckrm/ckrm.c	Mon May 31 11:30:17 2004
@@ -58,6 +58,12 @@
 struct rcfs_functions rcfs_fn ;
 EXPORT_SYMBOL(rcfs_fn);
 
+// rcfs state needed by another module
+int rcfs_engine_regd;
+EXPORT_SYMBOL(rcfs_engine_regd); 
+
+int rcfs_mounted;
+EXPORT_SYMBOL(rcfs_mounted); 
 
 /**************************************************************************
  *                   Helper Functions                                     *
diff -Nru a/kernel/ckrm/rbce/rbcemod.c b/kernel/ckrm/rbce/rbcemod.c
--- a/kernel/ckrm/rbce/rbcemod.c	Mon May 31 11:30:17 2004
+++ b/kernel/ckrm/rbce/rbcemod.c	Mon May 31 11:30:17 2004
@@ -2405,15 +2405,18 @@
 
 extern int rbce_mkdir(struct inode *, struct dentry *, int );
 extern int rbce_rmdir(struct inode *, struct dentry *);
+extern int rbce_create_magic(void);
+extern int rbce_clear_magic(void);
+
 rbce_eng_callback_t rcfs_ecbs = {
 	rbce_mkdir,
-	rbce_rmdir
+	rbce_rmdir,
+	rbce_create_magic,
+	rbce_clear_magic
 };
 
 /* ======================= Module definition Functions ======================== */
 
-extern int rbce_create_magic(void);
-extern int rbce_clear_magic(void);
 
 int
 init_rbce (void)
@@ -2437,8 +2440,10 @@
 	rc = rcfs_register_engine(&rcfs_ecbs);  line=__LINE__;
 	if (rc) goto out_unreg_ckrm;
 
-	rc = rbce_create_magic();  line=__LINE__;
-	if (rc) goto out_unreg_ckrm;
+	if (rcfs_mounted) {
+		rc = rbce_create_magic();  line=__LINE__;
+		if (rc) goto out_unreg_rcfs;
+	}
 
 	start_debug();
 
@@ -2449,8 +2454,10 @@
 
  out_debug:
 	stop_debug();
+
+ out_unreg_rcfs:
+	rcfs_unregister_engine(&rcfs_ecbs);
  out_unreg_ckrm:
-	
 	unregister_classtype_engines();
 	exit_rbce_ext();
  out:
@@ -2479,7 +2486,9 @@
 			printk("exit_rbce: Rules list for classtype %d is not empty\n", i);
 		}
 	}
-	rbce_clear_magic();
+	
+	if (rcfs_mounted)
+		rbce_clear_magic();
 
 	rcfs_unregister_engine(&rcfs_ecbs);
 	unregister_classtype_engines();
