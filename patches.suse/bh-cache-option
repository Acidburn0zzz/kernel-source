From: ak@suse.de
References: 175797
Subject: Add option to disable per CPU buffer LRU

It causes real time hickups on large systems.

Index: linux-2.6.16/fs/buffer.c
===================================================================
--- linux-2.6.16.orig/fs/buffer.c
+++ linux-2.6.16/fs/buffer.c
@@ -1339,6 +1339,8 @@ static DEFINE_PER_CPU(struct bh_lru, bh_
 #define bh_lru_unlock()	preempt_enable()
 #endif
 
+static int lru_disabled __read_mostly;
+
 static inline void check_irqs_on(void)
 {
 #ifdef irqs_disabled
@@ -1354,6 +1356,9 @@ static void bh_lru_install(struct buffer
 	struct buffer_head *evictee = NULL;
 	struct bh_lru *lru;
 
+	if (lru_disabled)
+		return; 
+
 	check_irqs_on();
 	bh_lru_lock();
 	lru = &__get_cpu_var(bh_lrus);
@@ -1398,6 +1403,9 @@ lookup_bh_lru(struct block_device *bdev,
 	struct bh_lru *lru;
 	int i;
 
+	if (lru_disabled)
+		return ret;	
+
 	check_irqs_on();
 	bh_lru_lock();
 	lru = &__get_cpu_var(bh_lrus);
@@ -1519,7 +1527,8 @@ static void invalidate_bh_lru(void *arg)
 	
 static void invalidate_bh_lrus(void)
 {
-	on_each_cpu(invalidate_bh_lru, NULL, 1, 1);
+	if (!lru_disabled)
+		on_each_cpu(invalidate_bh_lru, NULL, 1, 1);
 }
 
 void set_bh_page(struct buffer_head *bh,
@@ -3184,6 +3193,9 @@ static void buffer_exit_cpu(int cpu)
 	int i;
 	struct bh_lru *b = &per_cpu(bh_lrus, cpu);
 
+	if (lru_disabled)
+		return;
+
 	for (i = 0; i < BH_LRU_SIZE; i++) {
 		brelse(b->bhs[i]);
 		b->bhs[i] = NULL;
@@ -3218,6 +3230,13 @@ void __init buffer_init(void)
 	hotcpu_notifier(buffer_cpu_notify, 0);
 }
 
+static int __init disable_buffer_lru(char *s)
+{
+	lru_disabled = 1;
+	return 0;
+}
+__setup("disable_buffer_lru", disable_buffer_lru);
+
 EXPORT_SYMBOL(__bforget);
 EXPORT_SYMBOL(__brelse);
 EXPORT_SYMBOL(__wait_on_buffer);
Index: linux-2.6.16/Documentation/kernel-parameters.txt
===================================================================
--- linux-2.6.16.orig/Documentation/kernel-parameters.txt
+++ linux-2.6.16/Documentation/kernel-parameters.txt
@@ -1693,6 +1693,10 @@ running once the system is up.
 	norandmaps	Don't use address space randomization
 			Equivalent to echo 0 > /proc/sys/kernel/randomize_va_space
 
+	disable_buffer_lru
+			Disable per CPU LRU in the buffer cache.
+			This might avoid some real time hickups on large systems.
+
 
 ______________________________________________________________________
 Changelog:
