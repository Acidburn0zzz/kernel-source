Index: linux-2.6.5/fs/jfs/dmapi/dmapi_jfs.c
===================================================================
--- linux-2.6.5.orig/fs/jfs/dmapi/dmapi_jfs.c
+++ linux-2.6.5/fs/jfs/dmapi/dmapi_jfs.c
@@ -40,6 +40,10 @@
 #include <linux/buffer_head.h>
 #include <linux/mm.h>
 #include <linux/security.h>
+#ifdef CONFIG_COMPAT
+#include <linux/ioctl.h>
+#include <linux/ioctl32.h>
+#endif
 #include "dmapi_private.h"
 #include "jfs_debug.h"
 #include "jfs_incore.h"
@@ -52,12 +56,12 @@
 /* Here's what's left to be done:
  * Figure out locktype in jfs_dm_send_data_event()
  * Figure out how to get name of mounted dir for mount event without stupid 
- *   mount option
+ *   mount option (mtpt=)
  * Add jfs_dm_get_bulkattr (although unused by TSM)
  * Add DM_EVENT_NOSPACE (VERY intrusive to JFS code)
- * Finish up dt_change (may not cover all yet)
- * ? Whazzup with the dump under debug spinlock?
- * ? Whazzup with unmount hang under debug spinlock?
+ * Finish up dt_change (may not cover all cases yet)
+ * ? Whazzup with the dump under sleep-inside-spinlock checking?
+ * ? Whazzup with unmount hang under spinlock debugging?
  */
 
 /* XFS bugs fixed from original port
@@ -587,8 +591,8 @@ jfs_dm_bulkstat_one(
 		dm_ip_to_handle(ip, &handle);
 		memcpy(buf+1, &handle, sizeof(handle));	/* handle follows stat struct */
 
-		buf->dt_handle.vd_offset = (ssize_t) sizeof(dm_stat_t);
-		buf->dt_handle.vd_length = (size_t) JFS_HSIZE(handle);
+		buf->dt_handle.vd_offset = (int) sizeof(dm_stat_t);
+		buf->dt_handle.vd_length = (unsigned int) JFS_HSIZE(handle);
 
 		statstruct_sz = (statstruct_sz+(DM_STAT_ALIGN-1)) & ~(DM_STAT_ALIGN-1);
 	} else {
@@ -2209,7 +2213,7 @@ jfs_dm_getall_dmattr(
 		   keep track of the number of bytes for the user's
 		   next call.
 		*/
-		size_needed = sizeof(*ulist) + ea->valuelen;
+		size_needed = sizeof(*ulist) + le16_to_cpu(ea->valuelen);
 		size_needed = (size_needed + alignment) & ~alignment;
 
 		req_size += size_needed;
@@ -2244,13 +2248,13 @@ jfs_dm_getall_dmattr(
 		   keep track of the number of bytes for the user's
 		   next call.
 		*/
-		size_needed = sizeof(*ulist) + ea->valuelen;
+		size_needed = sizeof(*ulist) + le16_to_cpu(ea->valuelen);
 		size_needed = (size_needed + alignment) & ~alignment;
 
 		strncpy((char *)ulist->al_name.an_chars, user_name,
 				DM_ATTR_NAME_SIZE);
 		ulist->al_data.vd_offset = sizeof(*ulist);
-		ulist->al_data.vd_length = ea->valuelen;
+		ulist->al_data.vd_length = le16_to_cpu(ea->valuelen);
 		ulist->_link =	size_needed;
 		last_link = &ulist->_link;
 
@@ -2262,7 +2266,7 @@ jfs_dm_getall_dmattr(
 
 		memcpy((void *)(ulist + 1),
 		       (char *)ea + sizeof(ea) + ea->namelen + 1,
-		       ea->valuelen);
+		       le16_to_cpu(ea->valuelen));
 
 		ulist = (dm_attrlist_t *)((char *)ulist + ulist->_link);
 	}
@@ -3490,14 +3494,101 @@ jfs_dm_send_mmap_event(
 	return ret;
 }
 
+#ifdef CONFIG_COMPAT
+static struct {
+	unsigned int cmd;
+	int          reg;
+} ioctl32_cmds[] = {
+	{ .cmd = JFS_DM_IOC_CLEAR_INHERIT },
+	{ .cmd = JFS_DM_IOC_CREATE_BY_HANDLE },
+	{ .cmd = JFS_DM_IOC_CREATE_SESSION },
+	{ .cmd = JFS_DM_IOC_CREATE_USEREVENT },
+	{ .cmd = JFS_DM_IOC_DESTROY_SESSION },
+	{ .cmd = JFS_DM_IOC_DOWNGRADE_RIGHT },
+	{ .cmd = JFS_DM_IOC_FD_TO_HANDLE },
+	{ .cmd = JFS_DM_IOC_FIND_EVENTMSG },
+	{ .cmd = JFS_DM_IOC_GET_ALLOCINFO },
+	{ .cmd = JFS_DM_IOC_GET_BULKALL },
+	{ .cmd = JFS_DM_IOC_GET_BULKATTR },
+	{ .cmd = JFS_DM_IOC_GET_CONFIG },
+	{ .cmd = JFS_DM_IOC_GET_CONFIG_EVENTS },
+	{ .cmd = JFS_DM_IOC_GET_DIRATTRS },
+	{ .cmd = JFS_DM_IOC_GET_DMATTR },
+	{ .cmd = JFS_DM_IOC_GET_EVENTLIST },
+	{ .cmd = JFS_DM_IOC_GET_EVENTS },
+	{ .cmd = JFS_DM_IOC_GET_FILEATTR },
+	{ .cmd = JFS_DM_IOC_GET_MOUNTINFO },
+	{ .cmd = JFS_DM_IOC_GET_REGION },
+	{ .cmd = JFS_DM_IOC_GETALL_DISP },
+	{ .cmd = JFS_DM_IOC_GETALL_DMATTR },
+	{ .cmd = JFS_DM_IOC_GETALL_INHERIT },
+	{ .cmd = JFS_DM_IOC_GETALL_SESSIONS },
+	{ .cmd = JFS_DM_IOC_GETALL_TOKENS },
+	{ .cmd = JFS_DM_IOC_INIT_ATTRLOC },
+	{ .cmd = JFS_DM_IOC_MKDIR_BY_HANDLE },
+	{ .cmd = JFS_DM_IOC_MOVE_EVENT },
+	{ .cmd = JFS_DM_IOC_OBJ_REF_HOLD },
+	{ .cmd = JFS_DM_IOC_OBJ_REF_QUERY },
+	{ .cmd = JFS_DM_IOC_OBJ_REF_RELE },
+	{ .cmd = JFS_DM_IOC_PATH_TO_FSHANDLE },
+	{ .cmd = JFS_DM_IOC_PATH_TO_HANDLE },
+	{ .cmd = JFS_DM_IOC_PENDING },
+	{ .cmd = JFS_DM_IOC_PROBE_HOLE },
+	{ .cmd = JFS_DM_IOC_PUNCH_HOLE },
+	{ .cmd = JFS_DM_IOC_QUERY_RIGHT },
+	{ .cmd = JFS_DM_IOC_QUERY_SESSION },
+	{ .cmd = JFS_DM_IOC_READ_INVIS },
+	{ .cmd = JFS_DM_IOC_RELEASE_RIGHT },
+	{ .cmd = JFS_DM_IOC_REMOVE_DMATTR },
+	{ .cmd = JFS_DM_IOC_REQUEST_RIGHT },
+	{ .cmd = JFS_DM_IOC_RESPOND_EVENT },
+	{ .cmd = JFS_DM_IOC_SEND_MSG },
+	{ .cmd = JFS_DM_IOC_SET_DISP },
+	{ .cmd = JFS_DM_IOC_SET_DMATTR },
+	{ .cmd = JFS_DM_IOC_SET_EVENTLIST },
+	{ .cmd = JFS_DM_IOC_SET_FILEATTR },
+	{ .cmd = JFS_DM_IOC_SET_INHERIT },
+	{ .cmd = JFS_DM_IOC_SET_REGION },
+	{ .cmd = JFS_DM_IOC_SET_RETURN_ON_DESTROY },
+	{ .cmd = JFS_DM_IOC_SYMLINK_BY_HANDLE },
+	{ .cmd = JFS_DM_IOC_SYNC_BY_HANDLE },
+	{ .cmd = JFS_DM_IOC_UPGRADE_RIGHT },
+	{ .cmd = JFS_DM_IOC_WRITE_INVIS },
+	{ .cmd = JFS_DM_IOC_OPEN_BY_HANDLE },
+	{ .cmd = JFS_DM_IOC_HANDLE_TO_PATH },
+};
+#endif
+
 void __init
 jfs_dm_init(void)
 {
+#ifdef CONFIG_COMPAT
+	unsigned int i;
+	int err;
+
+	for (i = 0; i < ARRAY_SIZE(ioctl32_cmds); i++) {
+		err = register_ioctl32_conversion(ioctl32_cmds[i].cmd, NULL);
+		if (err >= 0)
+			ioctl32_cmds[i].reg++;
+		else
+			printk(KERN_ERR "jfs_dm_init: unable to register ioctl %x, err = %d\n", ioctl32_cmds[i].cmd, err);
+	}
+#endif
 }
 
 void __exit
 jfs_dm_exit(void)
 {
+#ifdef CONFIG_COMPAT
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(ioctl32_cmds); i++) {
+		if (ioctl32_cmds[i].reg) {
+			unregister_ioctl32_conversion(ioctl32_cmds[i].cmd);
+			ioctl32_cmds[i].reg--;
+		}
+	}
+#endif
 }
 
 /*
Index: linux-2.6.5/fs/jfs/dmapi/dmapi_kern.h
===================================================================
--- linux-2.6.5.orig/fs/jfs/dmapi/dmapi_kern.h
+++ linux-2.6.5/fs/jfs/dmapi/dmapi_kern.h
@@ -487,6 +487,7 @@ typedef struct dm_fcntl_mapevent dm_fcnt
 */
 
 #define DM_MAX_HANDLE_SIZE	56	/* maximum size for a file handle */
+typedef char dm_handle_t[DM_MAX_HANDLE_SIZE];
 
 
 /*
@@ -551,4 +552,120 @@ typedef struct dm_fcntl_mapevent dm_fcnt
 #define DM_OPEN_BY_HANDLE	56
 #define DM_HANDLE_TO_PATH	57				// XFS BUG #12
 
+#define JFS_DM_IOCTL_TYPE 0xDB
+
+#define JFS_DM_IOC_CLEAR_INHERIT \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_CLEAR_INHERIT, dm_attrname_t)
+#define JFS_DM_IOC_CREATE_BY_HANDLE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_CREATE_BY_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_CREATE_SESSION \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_CREATE_SESSION, dm_sessid_t)
+#define JFS_DM_IOC_CREATE_USEREVENT \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_CREATE_USEREVENT, dm_token_t)
+#define JFS_DM_IOC_DESTROY_SESSION \
+	_IO(JFS_DM_IOCTL_TYPE, DM_DESTROY_SESSION)
+#define JFS_DM_IOC_DOWNGRADE_RIGHT \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_DOWNGRADE_RIGHT, dm_handle_t)
+#define JFS_DM_IOC_FD_TO_HANDLE \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_FD_TO_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_FIND_EVENTMSG \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_FIND_EVENTMSG, dm_eventmsg_t)
+#define JFS_DM_IOC_GET_ALLOCINFO \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_ALLOCINFO, dm_extent_t)
+#define JFS_DM_IOC_GET_BULKALL \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_BULKALL, dm_stat_t)
+#define JFS_DM_IOC_GET_BULKATTR \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_BULKATTR, dm_stat_t)
+#define JFS_DM_IOC_GET_CONFIG \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_CONFIG, dm_size_t)
+#define JFS_DM_IOC_GET_CONFIG_EVENTS \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_CONFIG_EVENTS, dm_eventset_t)
+#define JFS_DM_IOC_GET_DIRATTRS \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_DIRATTRS, dm_stat_t)
+#define JFS_DM_IOC_GET_DMATTR \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_DMATTR, size_t)
+#define JFS_DM_IOC_GET_EVENTLIST \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_EVENTLIST, dm_eventset_t)
+#define JFS_DM_IOC_GET_EVENTS \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_GET_EVENTS, dm_eventmsg_t)
+#define JFS_DM_IOC_GET_FILEATTR \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_FILEATTR, dm_stat_t)
+#define JFS_DM_IOC_GET_MOUNTINFO \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_MOUNTINFO, dm_mount_event_t)
+#define JFS_DM_IOC_GET_REGION \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GET_REGION, dm_region_t)
+#define JFS_DM_IOC_GETALL_DISP \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_GETALL_DISP, dm_dispinfo_t)
+#define JFS_DM_IOC_GETALL_DMATTR \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GETALL_DMATTR, dm_attrlist_t)
+#define JFS_DM_IOC_GETALL_INHERIT \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_GETALL_INHERIT, dm_inherit_t)
+#define JFS_DM_IOC_GETALL_SESSIONS \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_GETALL_SESSIONS, dm_sessid_t)
+#define JFS_DM_IOC_GETALL_TOKENS \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_GETALL_TOKENS, dm_token_t)
+#define JFS_DM_IOC_INIT_ATTRLOC \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_INIT_ATTRLOC, dm_attrloc_t)
+#define JFS_DM_IOC_MKDIR_BY_HANDLE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_MKDIR_BY_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_MOVE_EVENT \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_MOVE_EVENT, dm_token_t)
+#define JFS_DM_IOC_OBJ_REF_HOLD \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_OBJ_REF_HOLD, dm_handle_t)
+#define JFS_DM_IOC_OBJ_REF_QUERY \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_OBJ_REF_QUERY, dm_handle_t)
+#define JFS_DM_IOC_OBJ_REF_RELE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_OBJ_REF_RELE, dm_handle_t)
+#define JFS_DM_IOC_PATH_TO_FSHANDLE \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_PATH_TO_FSHANDLE, dm_handle_t)
+#define JFS_DM_IOC_PATH_TO_HANDLE \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_PATH_TO_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_PENDING \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_PENDING, dm_timestruct_t)
+#define JFS_DM_IOC_PROBE_HOLE \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_PROBE_HOLE, dm_off_t)
+#define JFS_DM_IOC_PUNCH_HOLE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_PUNCH_HOLE, dm_handle_t)
+#define JFS_DM_IOC_QUERY_RIGHT \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_QUERY_RIGHT, dm_right_t)
+#define JFS_DM_IOC_QUERY_SESSION \
+	_IOR(JFS_DM_IOCTL_TYPE, DM_QUERY_SESSION, size_t)
+#define JFS_DM_IOC_READ_INVIS \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_READ_INVIS, dm_handle_t)
+#define JFS_DM_IOC_RELEASE_RIGHT \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_RELEASE_RIGHT, dm_handle_t)
+#define JFS_DM_IOC_REMOVE_DMATTR \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_REMOVE_DMATTR, dm_attrname_t)
+#define JFS_DM_IOC_REQUEST_RIGHT \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_REQUEST_RIGHT, dm_handle_t)
+#define JFS_DM_IOC_RESPOND_EVENT \
+	_IO(JFS_DM_IOCTL_TYPE, DM_RESPOND_EVENT)
+#define JFS_DM_IOC_SEND_MSG \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SEND_MSG, char)
+#define JFS_DM_IOC_SET_DISP \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SET_DISP, dm_eventset_t)
+#define JFS_DM_IOC_SET_DMATTR \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SET_DMATTR, dm_attrname_t)
+#define JFS_DM_IOC_SET_EVENTLIST \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SET_EVENTLIST, dm_eventset_t)
+#define JFS_DM_IOC_SET_FILEATTR \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SET_FILEATTR, dm_fileattr_t)
+#define JFS_DM_IOC_SET_INHERIT \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SET_INHERIT, dm_attrname_t)
+#define JFS_DM_IOC_SET_REGION \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_SET_REGION, dm_boolean_t)
+#define JFS_DM_IOC_SET_RETURN_ON_DESTROY \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SET_RETURN_ON_DESTROY, dm_attrname_t)
+#define JFS_DM_IOC_SYMLINK_BY_HANDLE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SYMLINK_BY_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_SYNC_BY_HANDLE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_SYNC_BY_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_UPGRADE_RIGHT \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_UPGRADE_RIGHT, dm_handle_t)
+#define JFS_DM_IOC_WRITE_INVIS \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_WRITE_INVIS, dm_handle_t)
+#define JFS_DM_IOC_OPEN_BY_HANDLE \
+	_IOW(JFS_DM_IOCTL_TYPE, DM_OPEN_BY_HANDLE, dm_handle_t)
+#define JFS_DM_IOC_HANDLE_TO_PATH \
+	_IOWR(JFS_DM_IOCTL_TYPE, DM_HANDLE_TO_PATH, size_t)
 #endif /* __DMAPI_KERN_H__ */
Index: linux-2.6.5/fs/jfs/dmapi/dmapi_sysent.c
===================================================================
--- linux-2.6.5.orig/fs/jfs/dmapi/dmapi_sysent.c
+++ linux-2.6.5/fs/jfs/dmapi/dmapi_sysent.c
@@ -72,7 +72,7 @@ dmapi_ioctl(struct inode *inode, struct 
 			   sizeof(sys_dmapi_args_t) ) )
 		return -EFAULT;
 
-	switch (cmd) {
+	switch (_IOC_NR(cmd)) {
 	case DM_CLEAR_INHERIT:
 		error = dm_clear_inherit(
 				(dm_sessid_t)	DM_Uarg(uap,1), /* sid */
