From: Sunil Mushran <sunil.mushran@oracle.com>
Subject: ocfs2: Make fence method a sysctl option
Patch-mainline: Never, ocfs2 1.2 branch

This patch is related to the one that changed the default fencing
call from panic to machine_restart. This patch allows one to go
back to panic by echoing 1 to /proc/fs/ocfs2_nodemanager/fence_method.

Signed-off-by: Mark Fasheh <mfasheh@oracle.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>

---

 fs/ocfs2/cluster/nodemanager.c |    3 +++
 fs/ocfs2/cluster/quorum.c      |   18 ++++++++++++------
 fs/ocfs2/cluster/quorum.h      |    3 +++
 fs/ocfs2/cluster/sys.c         |   25 +++++++++++++++++++++++++
 4 files changed, 43 insertions(+), 6 deletions(-)

--- a/fs/ocfs2/cluster/nodemanager.c	2007-07-08 19:32:17.000000000 -0400
+++ b/fs/ocfs2/cluster/nodemanager.c	2007-08-27 14:03:27.000000000 -0400
@@ -28,6 +28,7 @@
 #include "tcp.h"
 #include "nodemanager.h"
 #include "heartbeat.h"
+#include "quorum.h"
 #include "masklog.h"
 #include "sys.h"
 #include "ver.h"
@@ -37,6 +38,8 @@
  * cluster references throughout where nodes are looked up */
 struct o2nm_cluster *o2nm_single_cluster = NULL;
 
+unsigned int o2nm_api_version = O2NM_API_VERSION;
+
 #define OCFS2_MAX_HB_CTL_PATH 256
 static char ocfs2_hb_ctl_path[OCFS2_MAX_HB_CTL_PATH] = "/sbin/ocfs2_hb_ctl";
 
--- a/fs/ocfs2/cluster/quorum.c	2007-07-08 19:32:17.000000000 -0400
+++ b/fs/ocfs2/cluster/quorum.c	2007-08-27 14:03:27.000000000 -0400
@@ -66,16 +66,22 @@ static struct o2quo_state {
 	unsigned long		qs_hold_bm[BITS_TO_LONGS(O2NM_MAX_NODES)];
 } o2quo_state;
 
+unsigned int o2quo_fence_option = 0;
+
 /* this is horribly heavy-handed.  It should instead flip the file
  * system RO and call some userspace script. */
 static void o2quo_fence_self(void)
 {
-	/* panic spins with interrupts enabled.  with preempt
-	 * threads can still schedule, etc, etc */
-	o2hb_stop_all_regions();
-
-	printk("ocfs2 is very sorry to be fencing this system by restarting\n");
-	emergency_restart();
+	switch (o2quo_fence_option) {
+	case FENCE_PANIC_OPTION:
+		/* panic spins with interrupts enabled.  with preempt
+	 	* threads can still schedule, etc, etc */
+		o2hb_stop_all_regions();
+		panic("*** ocfs2 is very sorry to be fencing this system by panicing ***\n");
+	default:
+		printk("*** ocfs2 is very sorry to be fencing this system by restarting ***\n");
+		emergency_restart();
+	}
 }
 
 /* Indicate that a timeout occured on a hearbeat region write. The
--- a/fs/ocfs2/cluster/quorum.h	2007-07-08 19:32:17.000000000 -0400
+++ b/fs/ocfs2/cluster/quorum.h	2007-08-27 14:03:27.000000000 -0400
@@ -23,6 +23,9 @@
 #ifndef O2CLUSTER_QUORUM_H
 #define O2CLUSTER_QUORUM_H
 
+extern unsigned int o2quo_fence_option;
+#define FENCE_PANIC_OPTION	1
+
 void o2quo_init(void);
 void o2quo_exit(void);
 
--- a/fs/ocfs2/cluster/sys.c	2007-07-08 19:32:17.000000000 -0400
+++ b/fs/ocfs2/cluster/sys.c	2007-08-27 14:03:24.000000000 -0400
@@ -30,6 +30,7 @@
 #include <linux/sysfs.h>
 
 #include "ocfs2_nodemanager.h"
+#include "quorum.h"
 #include "masklog.h"
 #include "sys.h"
 
@@ -51,8 +52,32 @@ static ssize_t o2cb_interface_revision_s
 
 static O2CB_ATTR(interface_revision, S_IFREG | S_IRUGO, o2cb_interface_revision_show, NULL);
 
+static ssize_t o2cb_fence_method_show(char *buf)
+{
+	const char *method = "restart";
+	if (o2quo_fence_option)
+		method = "panic";
+
+	return snprintf(buf, PAGE_SIZE, "%s\n", method);
+}
+
+static ssize_t o2cb_fence_method_store(const char *buf, size_t count)
+{
+	if (!strcmp(buf, "panic") || !strcmp(buf, "1"))
+		o2quo_fence_option = FENCE_PANIC_OPTION;
+	else if (!strcmp(buf, "restart") || !strcmp(buf, "0"))
+		o2quo_fence_option = 0;
+	else
+		return -EINVAL;
+	return count;
+}
+
+static O2CB_ATTR(fence_method, S_IFREG | S_IRUGO | S_IWUSR,
+                 o2cb_fence_method_show, o2cb_fence_method_store);
+
 static struct attribute *o2cb_attrs[] = {
 	&o2cb_attr_interface_revision.attr,
+	&o2cb_attr_fence_method.attr,
 	NULL,
 };
 
