From: Andreas Gruenbacher <agruen@suse.de>
Subject: Allow filesystems to handle MAY_APPEND
    
The MS_WITHAPPEND super_block flag tells the vfs that the permission
inode operation understands the MAY_APPEND flag. This is required for
implementing permission models which go beyond the traditional UNIX
semantics.

If a filesystem does not set the flag, the behavior is unchanged.

Signed-off-by: Andreas Gruenbacher <agruen@suse.de>

---
 fs/namei.c         |    4 +++-
 include/linux/fs.h |    2 ++
 2 files changed, 5 insertions(+), 1 deletion(-)

--- a/fs/namei.c
+++ b/fs/namei.c
@@ -260,8 +260,10 @@ int permission(struct inode *inode, int 
 			return -EACCES;
 	}
 
+	submask = mask;
 	/* Ordinary permission routines do not understand MAY_APPEND. */
-	submask = mask & ~MAY_APPEND;
+	if (!IS_WITHAPPEND(inode))
+		submask &= ~MAY_APPEND;
 	if (inode->i_op && inode->i_op->permission) {
 		retval = inode->i_op->permission(inode, submask, nd);
 		if (!retval) {
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -125,6 +125,7 @@ extern int dir_notify_enable;
 #define MS_RELATIME	(1<<21)	/* Update atime relative to mtime/ctime. */
 #define MS_KERNMOUNT	(1<<22) /* this is a kern_mount call */
 #define MS_I_VERSION	(1<<23) /* Update inode I_version field */
+#define MS_WITHAPPEND	(1<<24) /* iop->permission() understands MAY_APPEND */
 #define MS_ACTIVE	(1<<30)
 #define MS_NOUSER	(1<<31)
 
@@ -175,6 +176,7 @@ extern int dir_notify_enable;
 #define IS_MANDLOCK(inode)	__IS_FLG(inode, MS_MANDLOCK)
 #define IS_NOATIME(inode)   __IS_FLG(inode, MS_RDONLY|MS_NOATIME)
 #define IS_I_VERSION(inode)   __IS_FLG(inode, MS_I_VERSION)
+#define IS_WITHAPPEND(inode)	__IS_FLG(inode, MS_WITHAPPEND)
 
 #define IS_NOQUOTA(inode)	((inode)->i_flags & S_NOQUOTA)
 #define IS_APPEND(inode)	((inode)->i_flags & S_APPEND)
