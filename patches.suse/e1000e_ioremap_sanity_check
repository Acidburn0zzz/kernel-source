From: Suresh Siddha <suresh.b.siddha@intel.com>
To:  <jbarnes@virtuousgeek.org>,  <mingo@elte.hu>,  <tglx@linutronix.de>,  <hpa@zytor.com>,  <torvalds@linux-foundation.org>,  <akpm@linux-foundation.org>
Cc:  <arjan@linux.intel.com>,  <linux-kernel@vger.kernel.org>
Subject: [patch] ioremap sanity check to catch mapping requests exceeding the BAR sizes
References: bnc#425480

Go through the iomem resource tree to check if any of the ioremap() requests
span more than any slot in the iomem resource tree and do a WARN_ON() if we hit
this check.

This will raise a red-flag, if some driver is mapping more than what
is needed. And hopefully identify possible corruptions much earlier.

Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com>
Acked-by: Jiri Kosina <jkosina@suse.cz>
---

---
 arch/x86/mm/ioremap.c  |    6 ++++++
 include/linux/ioport.h |    1 +
 kernel/resource.c      |   33 +++++++++++++++++++++++++++++++++
 3 files changed, 40 insertions(+)

--- a/arch/x86/mm/ioremap.c
+++ b/arch/x86/mm/ioremap.c
@@ -150,6 +150,12 @@ static void __iomem *__ioremap_caller(re
 		return (__force void __iomem *)phys_to_virt(phys_addr);
 
 	/*
+	 * Check if the request spans more than any BAR in the iomem resource
+	 * tree.
+	 */
+	WARN_ON(iomem_map_sanity_check(phys_addr, size));
+
+	/*
 	 * Don't allow anybody to remap normal RAM that we're using..
 	 */
 	for (pfn = phys_addr >> PAGE_SHIFT;
--- a/include/linux/ioport.h
+++ b/include/linux/ioport.h
@@ -166,6 +166,7 @@ extern struct resource * __devm_request_
 
 extern void __devm_release_region(struct device *dev, struct resource *parent,
 				  resource_size_t start, resource_size_t n);
+extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
 
 #endif /* __ASSEMBLY__ */
 #endif	/* _LINUX_IOPORT_H */
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@ -763,3 +763,36 @@ static int __init reserve_setup(char *st
 }
 
 __setup("reserve=", reserve_setup);
+
+/*
+ * Check if the requested addr and size spans more than any slot in the
+ * iomem resource tree.
+ */
+int iomem_map_sanity_check(resource_size_t addr, unsigned long size)
+{
+	struct resource *p = &iomem_resource;
+	int err = 0;
+	loff_t l;
+
+	read_lock(&resource_lock);
+	for (p = p->child; p ; p = r_next(NULL, p, &l)) {
+		/*
+		 * We can probably skip the resources with out
+		 * IORESOURCE_IO attribute?
+		 */
+		if (p->start >= addr + size)
+			continue;
+		if (p->end < addr)
+			continue;
+		if (p->start <= addr && (p->end >= addr + size - 1))
+			continue;
+		printk(KERN_WARNING "resource map sanity check conflict "
+		       " 0x%llx 0x%llx 0x%llx 0x%llx %s\n",
+		       addr, addr + size - 1, p->start, p->end, p->name);
+		err = -1;
+		break;
+	}
+	read_unlock(&resource_lock);
+
+	return err;
+}
