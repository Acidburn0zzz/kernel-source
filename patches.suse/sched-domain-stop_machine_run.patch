Date: Wed, 28 Apr 2004 16:21:31 +1000
From: Anton Blanchard <anton@samba.org>
To: olh@suse.de
Subject: 7725

Possible fix for 7725.

Anton

--

Name: Sched Domain Atomic Changeover
Status: Boots on Power4 Needs More Testing
Version: ppc64

Existing fix to sched domain setup code seems to have races: we have
reports of NULL derefs in find_busiest_group() on one CPU while
arch_init_sched_domains() is (probably) running on the other, and
vice-versa.

Use stop_machine_run: the sched domains are never traversed with
preemption on, so this is safe.  We need to do the switch-over later,
though, since stop_machine_run needs kthreads.

More cleanup could be done, but this tests the theory.

diff -urNp --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.6.5-7.3/include/linux/sched.h linux-2.6.5-7.3-sched-domain-init/include/linux/sched.h
--- linux-2.6.5-7.3/include/linux/sched.h	2004-04-27 13:21:02.596064504 +1000
+++ linux-2.6.5-7.3-sched-domain-init/include/linux/sched.h	2004-04-27 16:29:10.532163029 +1000
@@ -150,7 +150,6 @@ extern spinlock_t mmlist_lock;
 typedef struct task_struct task_t;
 
 extern void sched_init(void);
-extern void sched_init_smp(void);
 extern void init_idle(task_t *idle, int cpu);
 
 extern void show_state(void);
diff -urNp --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.6.5-7.3/init/main.c linux-2.6.5-7.3-sched-domain-init/init/main.c
--- linux-2.6.5-7.3/init/main.c	2004-04-27 13:21:03.862118859 +1000
+++ linux-2.6.5-7.3-sched-domain-init/init/main.c	2004-04-27 16:28:18.837327237 +1000
@@ -657,7 +657,6 @@ static int init(void * unused)
 	do_pre_smp_initcalls();
 
 	smp_init();
-	sched_init_smp();
 	do_basic_setup();
 
        /*
diff -urNp --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.6.5-7.3/kernel/sched.c linux-2.6.5-7.3-sched-domain-init/kernel/sched.c
--- linux-2.6.5-7.3/kernel/sched.c	2004-04-27 13:21:04.200214573 +1000
+++ linux-2.6.5-7.3-sched-domain-init/kernel/sched.c	2004-04-27 16:34:18.320118728 +1000
@@ -40,6 +40,7 @@
 #include <linux/cpu.h>
 #include <linux/percpu.h>
 #include <linux/kthread.h>
+#include <linux/stop_machine.h>
 
 #ifdef CONFIG_NUMA
 #define cpu_to_node_mask(cpu) node_to_cpumask(cpu_to_node(cpu))
@@ -499,22 +500,10 @@ inline int task_curr(task_t *p)
 }
 
 #ifdef CONFIG_SMP
-enum request_type {
-	REQ_MOVE_TASK,
-	REQ_SET_DOMAIN,
-};
-
 typedef struct {
 	struct list_head list;
-	enum request_type type;
-
-	/* For REQ_MOVE_TASK */
 	task_t *task;
 	int dest_cpu;
-
-	/* For REQ_SET_DOMAIN */
-	struct sched_domain *sd;
-
 	struct completion done;
 } migration_req_t;
 
@@ -536,7 +525,6 @@ static int migrate_task(task_t *p, int d
 	}
 
 	init_completion(&req->done);
-	req->type = REQ_MOVE_TASK;
 	req->task = p;
 	req->dest_cpu = dest_cpu;
 	list_add(&req->list, &rq->migration_queue);
@@ -3260,14 +3248,7 @@ static int migration_thread(void * data)
 
 		spin_unlock(&rq->lock);
 
-		if (req->type == REQ_MOVE_TASK) {
-			__migrate_task(req->task, req->dest_cpu);
-		} else if (req->type == REQ_SET_DOMAIN) {
-			rq->sd = req->sd;
-		} else {
-			WARN_ON(1);
-		}
-
+		__migrate_task(req->task, req->dest_cpu);
 		local_irq_enable();
 
 		complete(&req->done);
@@ -3408,33 +3389,7 @@ EXPORT_SYMBOL(kernel_flag);
 /* Attach the domain 'sd' to 'cpu' as its base domain */
 void cpu_attach_domain(struct sched_domain *sd, int cpu)
 {
-	migration_req_t req;
-	unsigned long flags;
-	runqueue_t *rq = cpu_rq(cpu);
-	int local = 1;
-
-	lock_cpu_hotplug();
-
-	spin_lock_irqsave(&rq->lock, flags);
-
-	if (cpu == smp_processor_id() || cpu_is_offline(cpu)) {
-		rq->sd = sd;
-	} else {
-		init_completion(&req.done);
-		req.type = REQ_SET_DOMAIN;
-		req.sd = sd;
-		list_add(&req.list, &rq->migration_queue);
-		local = 0;
-	}
-
-	spin_unlock_irqrestore(&rq->lock, flags);
-
-	if (!local) {
-		wake_up_process(rq->migration_thread);
-		wait_for_completion(&req.done);
-	}
-
-	unlock_cpu_hotplug();
+	cpu_rq(cpu)->sd = sd;
 }
 
 #ifdef ARCH_HAS_SCHED_DOMAIN
@@ -3636,15 +3591,18 @@ void sched_domain_debug(void)
 #define sched_domain_debug() {}
 #endif
 
-void __init sched_init_smp(void)
+static int __init init_sched_domains(void *unused)
 {
+	/* Interrupts disabled, CPUs stopped.  We can safely switch over. */
 	arch_init_sched_domains();
 	sched_domain_debug();
+	return 0;
 }
-#else
-void __init sched_init_smp(void)
+static int __init sched_init_smp(void)
 {
+	return stop_machine_run(init_sched_domains, NULL, NR_CPUS);
 }
+__initcall(sched_init_smp);
 #endif /* CONFIG_SMP */
 
 void __init sched_init(void)

