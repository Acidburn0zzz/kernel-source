Index: linux.lkcd/fs/reiserfs/Makefile
===================================================================
--- linux.lkcd.orig/fs/reiserfs/Makefile	2004-02-20 21:27:44.000000000 -0500
+++ linux.lkcd/fs/reiserfs/Makefile	2004-02-20 21:31:14.000000000 -0500
@@ -10,7 +10,7 @@
 		 item_ops.o ioctl.o procfs.o
 
 ifeq ($(CONFIG_REISERFS_FS_XATTR),y)
-reiserfs-objs += xattr.o xattr_user.o
+reiserfs-objs += xattr.o xattr_user.o xattr_trusted.o
 endif
 
 ifeq ($(CONFIG_REISERFS_FS_POSIX_ACL),y)
Index: linux.lkcd/fs/reiserfs/xattr_trusted.c
===================================================================
--- linux.lkcd.orig/fs/reiserfs/xattr_trusted.c	2003-09-23 13:59:22.000000000 -0400
+++ linux.lkcd/fs/reiserfs/xattr_trusted.c	2004-02-20 21:31:14.000000000 -0500
@@ -0,0 +1,81 @@
+#include <linux/reiserfs_fs.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+#include <linux/pagemap.h>
+#include <linux/xattr.h>
+#include <linux/reiserfs_xattr.h>
+#include <asm/uaccess.h>
+
+#define XATTR_TRUSTED_PREFIX "trusted."
+
+static int
+trusted_get (struct inode *inode, const char *name, void *buffer, size_t size)
+{
+    if (strlen(name) < sizeof(XATTR_TRUSTED_PREFIX))
+        return -EINVAL;
+
+    if (!reiserfs_xattrs_trusted (inode->i_sb))
+        return -EOPNOTSUPP;
+
+    if (!(capable(CAP_SYS_ADMIN) || is_reiserfs_priv_object(inode)))
+        return -EPERM;
+
+    return reiserfs_xattr_get (inode, name, buffer, size);
+}
+
+static int
+trusted_set (struct inode *inode, const char *name, const void *buffer,
+          size_t size, int flags)
+{
+    if (strlen(name) < sizeof(XATTR_TRUSTED_PREFIX))
+        return -EINVAL;
+
+    if (!reiserfs_xattrs_trusted (inode->i_sb))
+        return -EOPNOTSUPP;
+
+    if (!(capable(CAP_SYS_ADMIN) || is_reiserfs_priv_object(inode)))
+        return -EPERM;
+
+    return reiserfs_xattr_set (inode, name, buffer, size, flags);
+}
+
+static int
+trusted_del (struct inode *inode, const char *name)
+{
+    if (strlen(name) < sizeof(XATTR_TRUSTED_PREFIX))
+        return -EINVAL;
+
+    if (!reiserfs_xattrs_trusted (inode->i_sb))
+        return -EOPNOTSUPP;
+
+    if (!(capable(CAP_SYS_ADMIN) || is_reiserfs_priv_object(inode)))
+        return -EPERM;
+
+    return 0;
+}
+
+static int
+trusted_list (struct inode *inode, const char *name, int namelen, char *out)
+{
+    int len = namelen;
+
+    if (!reiserfs_xattrs_trusted (inode->i_sb))
+        return 0;
+
+    if (!(capable(CAP_SYS_ADMIN) || is_reiserfs_priv_object(inode)))
+        return 0;
+
+    if (out)
+        memcpy (out, name, len);
+
+    return len;
+}
+
+
+struct reiserfs_xattr_handler trusted_handler = {
+    prefix: XATTR_TRUSTED_PREFIX,
+    get: trusted_get,
+    set: trusted_set,
+    del: trusted_del,
+    list: trusted_list,
+};
Index: linux.lkcd/fs/reiserfs/xattr.c
===================================================================
--- linux.lkcd.orig/fs/reiserfs/xattr.c	2004-02-20 21:27:44.000000000 -0500
+++ linux.lkcd/fs/reiserfs/xattr.c	2004-02-20 21:31:14.000000000 -0500
@@ -1170,6 +1170,7 @@
 
     /* Add the handlers */
     list_add_tail (&user_handler.handlers, &xattr_handlers);
+    list_add_tail (&trusted_handler.handlers, &xattr_handlers);
 #ifdef CONFIG_REISERFS_FS_POSIX_ACL
     list_add_tail (&posix_acl_access_handler.handlers, &xattr_handlers);
     list_add_tail (&posix_acl_default_handler.handlers, &xattr_handlers);
Index: linux.lkcd/include/linux/reiserfs_xattr.h
===================================================================
--- linux.lkcd.orig/include/linux/reiserfs_xattr.h	2004-02-20 21:27:44.000000000 -0500
+++ linux.lkcd/include/linux/reiserfs_xattr.h	2004-02-20 21:31:14.000000000 -0500
@@ -50,6 +50,7 @@
                                size_t, int);
 
 extern struct reiserfs_xattr_handler user_handler;
+extern struct reiserfs_xattr_handler trusted_handler;
 
 int reiserfs_xattr_register_handlers (void) __init;
 void reiserfs_xattr_unregister_handlers (void);
Index: linux.lkcd/include/linux/reiserfs_fs_sb.h
===================================================================
--- linux.lkcd.orig/include/linux/reiserfs_fs_sb.h	2004-02-20 21:30:51.000000000 -0500
+++ linux.lkcd/include/linux/reiserfs_fs_sb.h	2004-02-20 21:31:27.000000000 -0500
@@ -468,10 +468,16 @@
 #define reiserfs_data_log(s) (REISERFS_SB(s)->s_mount_opt & (1 << REISERFS_DATA_LOG))
 #define reiserfs_data_ordered(s) (REISERFS_SB(s)->s_mount_opt & (1 << REISERFS_DATA_ORDERED))
 #define reiserfs_data_writeback(s) (REISERFS_SB(s)->s_mount_opt & (1 << REISERFS_DATA_WRITEBACK))
-#define reiserfs_xattrs(s) (REISERFS_SB(s)->s_mount_opt & (1 << REISERFS_XATTRS))
 #define reiserfs_xattrs_user(s) (REISERFS_SB(s)->s_mount_opt & (1 << REISERFS_XATTRS_USER))
 #define reiserfs_posixacl(s) (REISERFS_SB(s)->s_mount_opt & (1 << REISERFS_POSIXACL))
 #define reiserfs_xattrs_optional(s) (reiserfs_xattrs_user(s) || reiserfs_posixacl(s))
+#define reiserfs_xattrs(s) reiserfs_xattrs_trusted(s)
+#ifndef CONFIG_REISERFS_FS_XATTR
+# define reiserfs_xattrs_trusted(s) (0)
+#else
+/* If xattrs are compiled in, trusted xattrs are "always on." */
+# define reiserfs_xattrs_trusted(s) (1)
+#endif
 
 void reiserfs_file_buffer (struct buffer_head * bh, int list);
 extern struct file_system_type reiserfs_fs_type;
@@ -503,3 +509,4 @@
 }
 
 #endif	/* _LINUX_REISER_FS_SB */
+
