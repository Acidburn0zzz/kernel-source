From: Dean Roehrich <roehrich@sgi.com>
To: Andreas Gruenbacher <agruen@suse.de>
Date: Thu, 22 Apr 2004 14:37:31 -0500
Subject: DMAPI and mprotect

Andreas,

You might want this in SLES9.  This applies to at least one of your betas.

Dean


Index: linux/fs/xfs/linux/xfs_file.c
===================================================================
--- linux.orig/fs/xfs/linux/xfs_file.c	2004-04-28 11:38:10.000000000 -0500
+++ linux/fs/xfs/linux/xfs_file.c	2004-04-28 12:19:22.000000000 -0500
@@ -476,7 +476,6 @@
 	return error;
 }
 
-#ifdef HAVE_VMOP_MPROTECT
 STATIC int
 linvfs_mprotect(
 	struct vm_area_struct *vma,
@@ -495,7 +494,6 @@
 	}
 	return error;
 }
-#endif /* HAVE_VMOP_MPROTECT */
 
 
 struct file_operations linvfs_file_operations = {
@@ -540,7 +538,5 @@
 
 static struct vm_operations_struct linvfs_file_vm_ops = {
 	.nopage		= filemap_nopage,
-#ifdef HAVE_VMOP_MPROTECT
 	.mprotect	= linvfs_mprotect,
-#endif
 };
Index: linux/include/linux/mm.h
===================================================================
--- linux.orig/include/linux/mm.h	2004-04-28 12:17:59.000000000 -0500
+++ linux/include/linux/mm.h	2004-04-28 12:19:22.000000000 -0500
@@ -354,6 +354,7 @@
 	int (*populate)(struct vm_area_struct * area, unsigned long address, unsigned long len, pgprot_t prot, unsigned long pgoff, int nonblock);
 	int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
 	struct mempolicy *(*get_policy)(struct vm_area_struct *vma, unsigned long addr);
+	int (*mprotect)(struct vm_area_struct * area, unsigned int newflags);
 };
 
 /* forward declaration; pte_chain is meant to be internal to rmap.c */
Index: linux/kdb/modules/kdbm_vm.c
===================================================================
--- linux.orig/kdb/modules/kdbm_vm.c	2004-04-28 12:17:59.000000000 -0500
+++ linux/kdb/modules/kdbm_vm.c	2004-04-28 12:19:22.000000000 -0500
@@ -99,9 +99,7 @@
 		kdb_printf("vm_ops->open = 0x%p\n", vp->vm_ops->open);
 		kdb_printf("vm_ops->close = 0x%p\n", vp->vm_ops->close);
 		kdb_printf("vm_ops->nopage = 0x%p\n", vp->vm_ops->nopage);
-#ifdef HAVE_VMOP_MPROTECT
 		kdb_printf("vm_ops->mprotect = 0x%p\n", vp->vm_ops->mprotect);
-#endif
 	}
 	kdb_printf("vm_pgoff = 0x%lx\n", vp->vm_pgoff);
 	kdb_printf("vm_file = 0x%p\n", (void *) vp->vm_file);
