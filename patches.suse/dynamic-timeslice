Index: linux-2.6.8/include/linux/sched.h
===================================================================
--- linux-2.6.8.orig/include/linux/sched.h
+++ linux-2.6.8/include/linux/sched.h
@@ -178,8 +178,9 @@ extern int in_sched_functions(unsigned l
 
 #define	MAX_SCHEDULE_TIMEOUT	LONG_MAX
 extern signed long FASTCALL(schedule_timeout(signed long timeout));
 asmlinkage void schedule(void);
+extern int def_timeslice, min_timeslice;
 
 struct namespace;
 
 /* Maximum number of active map areas.. This is a random (large) number */
Index: linux-2.6.8/include/linux/sysctl.h
===================================================================
--- linux-2.6.8.orig/include/linux/sysctl.h
+++ linux-2.6.8/include/linux/sysctl.h
@@ -134,8 +134,11 @@ enum
 	KERN_SPARC_SCONS_PWROFF=64, /* int: serial console power-off halt */
 	KERN_HZ_TIMER=65,	/* int: hz timer on or off */
 	KERN_UNKNOWN_NMI_PANIC=66, /* int: unknown nmi panic flag */
 	KERN_KDB=67,		/* int: kdb on/off */
+	KERN_DEFTIMESLICE=68,	/* int: nice   0 def timeslice */
+	KERN_MINTIMESLICE=69,	/* int: nice +19 min timeslice */
+	KERN_HZ=70,		/* unsigned long: internal kernel HZ */
 };
 
 
 /* CTL_VM names: */
Index: linux-2.6.8/kernel/sched.c
===================================================================
--- linux-2.6.8.orig/kernel/sched.c
+++ linux-2.6.8/kernel/sched.c
@@ -80,13 +80,26 @@
 /*
  * These are the 'tuning knobs' of the scheduler:
  *
  * Minimum timeslice is 5 msecs (or 1 jiffy, whichever is larger),
- * default timeslice is 100 msecs, maximum timeslice is 800 msecs.
+ * default timeslice is 150 msecs, maximum timeslice is 800 msecs.
  * Timeslices get refilled after they expire.
  */
-#define MIN_TIMESLICE		max(5 * HZ / 1000, 1)
-#define DEF_TIMESLICE		(100 * HZ / 1000)
+#if HZ >= 200
+#define __MIN_TIMESLICE		(5 * HZ / 1000)
+#else
+#define __MIN_TIMESLICE		1
+#endif
+#define __DEF_TIMESLICE		(150 * HZ / 1000)
+#if HZ >= 500
+#define __MIN_TIMESLICE_DESKTOP	(2 * HZ / 1000)
+#else
+#define __MIN_TIMESLICE_DESKTOP	1
+#endif
+#define __DEF_TIMESLICE_DESKTOP	(60 * HZ / 1000)
+int def_timeslice = __DEF_TIMESLICE, min_timeslice = __MIN_TIMESLICE;
+#define MIN_TIMESLICE ((min_timeslice * HZ + 999999) / 1000000)
+#define DEF_TIMESLICE ((def_timeslice * HZ + 999999) / 1000000)
 #define ON_RUNQUEUE_WEIGHT	 30
 #define CHILD_PENALTY		 95
 #define PARENT_PENALTY		100
 #define EXIT_WEIGHT		  3
@@ -421,8 +434,15 @@ struct sched_domain {
 #endif
 #endif /* ARCH_HAS_SCHED_TUNE */
 #endif
 
+static int __init init_desktop(char *str)
+{
+	min_timeslice = __MIN_TIMESLICE_DESKTOP;
+	def_timeslice = __DEF_TIMESLICE_DESKTOP;
+	return 1;
+}
+__setup("desktop", init_desktop);
 
 #define for_each_domain(cpu, domain) \
 	for (domain = cpu_rq(cpu)->sd; domain; domain = domain->parent)
 
Index: linux-2.6.8/kernel/sysctl.c
===================================================================
--- linux-2.6.8.orig/kernel/sysctl.c
+++ linux-2.6.8/kernel/sysctl.c
@@ -175,8 +175,9 @@ extern struct proc_dir_entry *proc_sys_r
 static void register_proc_table(ctl_table *, struct proc_dir_entry *);
 static void unregister_proc_table(ctl_table *, struct proc_dir_entry *);
 #endif
 
+static unsigned int __HZ = HZ;
 /* The default sysctl tables: */
 
 static ctl_table root_table[] = {
 	{
@@ -930,8 +931,32 @@ static ctl_table fs_table[] = {
 		.maxlen		= sizeof(aio_max_nr),
 		.mode		= 0644,
 		.proc_handler	= &proc_dointvec,
 	},
+	{
+		.ctl_name	= KERN_DEFTIMESLICE, 
+		.procname	= "def-timeslice",
+		.data		=  &def_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
+		.ctl_name	= KERN_MINTIMESLICE, 
+		.procname	= "min-timeslice",
+		.data		= &min_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
+		.ctl_name	= KERN_HZ, 
+		.procname	= "HZ",
+		.data		= &__HZ,
+		.maxlen		= sizeof(int),
+		.mode		= 0444,
+		.proc_handler	= &proc_dointvec,
+	},
 	{ .ctl_name = 0 }
 };
 
 static ctl_table debug_table[] = {
