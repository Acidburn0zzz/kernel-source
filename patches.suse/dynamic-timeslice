diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/include/linux/sched.h sles/include/linux/sched.h
--- sles-ref/include/linux/sched.h	2004-10-14 03:02:13.690037912 +0200
+++ sles/include/linux/sched.h	2004-10-14 03:09:50.654568744 +0200
@@ -179,6 +179,7 @@ extern int in_sched_functions(unsigned l
 #define	MAX_SCHEDULE_TIMEOUT	LONG_MAX
 extern signed long FASTCALL(schedule_timeout(signed long timeout));
 asmlinkage void schedule(void);
+extern int def_timeslice, min_timeslice;
 
 struct namespace;
 
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/include/linux/sysctl.h sles/include/linux/sysctl.h
--- sles-ref/include/linux/sysctl.h	2004-10-14 03:02:05.864227616 +0200
+++ sles/include/linux/sysctl.h	2004-10-14 03:09:50.655568592 +0200
@@ -135,6 +135,9 @@ enum
 	KERN_HZ_TIMER=65,	/* int: hz timer on or off */
 	KERN_UNKNOWN_NMI_PANIC=66, /* int: unknown nmi panic flag */
 	KERN_KDB=67,		/* int: kdb on/off */
+	KERN_DEFTIMESLICE=68,	/* int: nice   0 def timeslice */
+	KERN_MINTIMESLICE=69,	/* int: nice +19 min timeslice */
+	KERN_HZ=70,		/* unsigned long: internal kernel HZ */
 };
 
 
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/kernel/sched.c sles/kernel/sched.c
--- sles-ref/kernel/sched.c	2004-10-14 03:02:14.167965256 +0200
+++ sles/kernel/sched.c	2004-10-14 03:10:08.941788664 +0200
@@ -81,11 +81,18 @@
  * These are the 'tuning knobs' of the scheduler:
  *
  * Minimum timeslice is 5 msecs (or 1 jiffy, whichever is larger),
- * default timeslice is 100 msecs, maximum timeslice is 800 msecs.
+ * default timeslice is 105 msecs, maximum timeslice is 805 msecs.
  * Timeslices get refilled after they expire.
+ * Those values are choosen accurately to make sure each nice level
+ * step does make a difference with HZ = 1000.
  */
-#define MIN_TIMESLICE		max(5 * HZ / 1000, 1)
-#define DEF_TIMESLICE		(100 * HZ / 1000)
+#define __MIN_TIMESLICE		5000 /* usec userspace */
+#define __DEF_TIMESLICE		105000 /* usec userspace */
+#define __MIN_TIMESLICE_DESKTOP	1000 /* usec userspace */
+#define __DEF_TIMESLICE_DESKTOP	21000 /* usec userspace */
+int def_timeslice = __DEF_TIMESLICE, min_timeslice = __MIN_TIMESLICE;
+#define MIN_TIMESLICE ((min_timeslice * HZ + 999999) / 1000000)
+#define DEF_TIMESLICE ((def_timeslice * HZ + 999999) / 1000000)
 #define ON_RUNQUEUE_WEIGHT	 30
 #define CHILD_PENALTY		 95
 #define PARENT_PENALTY		100
@@ -422,6 +429,13 @@ struct sched_domain {
 #endif /* ARCH_HAS_SCHED_TUNE */
 #endif
 
+static int __init init_desktop(char *str)
+{
+	min_timeslice = __MIN_TIMESLICE_DESKTOP;
+	def_timeslice = __DEF_TIMESLICE_DESKTOP;
+	return 1;
+}
+__setup("desktop", init_desktop);
 
 #define for_each_domain(cpu, domain) \
 	for (domain = cpu_rq(cpu)->sd; domain; domain = domain->parent)
diff -urNp --exclude CVS --exclude BitKeeper --exclude {arch} --exclude .arch-ids sles-ref/kernel/sysctl.c sles/kernel/sysctl.c
--- sles-ref/kernel/sysctl.c	2004-10-14 03:02:17.004534032 +0200
+++ sles/kernel/sysctl.c	2004-10-14 03:09:50.663567376 +0200
@@ -176,6 +176,7 @@ static void register_proc_table(ctl_tabl
 static void unregister_proc_table(ctl_table *, struct proc_dir_entry *);
 #endif
 
+static unsigned int __HZ = HZ;
 /* The default sysctl tables: */
 
 static ctl_table root_table[] = {
@@ -640,6 +641,30 @@ static ctl_table kern_table[] = {
 		.proc_handler   = &proc_unknown_nmi_panic,
 	},
 #endif
+	{
+		.ctl_name	= KERN_DEFTIMESLICE, 
+		.procname	= "def-timeslice",
+		.data		=  &def_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
+		.ctl_name	= KERN_MINTIMESLICE, 
+		.procname	= "min-timeslice",
+		.data		= &min_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
+		.ctl_name	= KERN_HZ, 
+		.procname	= "HZ",
+		.data		= &__HZ,
+		.maxlen		= sizeof(int),
+		.mode		= 0444,
+		.proc_handler	= &proc_dointvec,
+	},
 	{ .ctl_name = 0 }
 };
 
