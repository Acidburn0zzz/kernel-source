From: Jeff Mahoney <jeffm@suse.com>
Subject: [PATCH 06/15] ocfs2: introduce generic heartbeat resource

 This patch creates a generic heartbeat "base" object that can be used
 to create a generic heartbeat implementation.

 Following patches will split the disk-specific heartbeat code out from
 heartbeat.c, and finally add a user heartbeat implementation that uses
 the generic implementation.

 This patch alone is essentially a no-op.

 fs/ocfs2/cluster/heartbeat.c |   31 ++++++++++---------------------
 fs/ocfs2/cluster/heartbeat.h |   19 +++++++++++++++++++
 2 files changed, 29 insertions(+), 21 deletions(-)

Signed-off-by: Jeff Mahoney <jeffm@suse.com>

--- a/fs/ocfs2/cluster/heartbeat.c	2008-02-08 15:53:32.000000000 -0500
+++ b/fs/ocfs2/cluster/heartbeat.c	2008-02-08 15:53:40.000000000 -0500
@@ -107,7 +107,7 @@ struct o2hb_disk_slot {
 /* each thread owns a region.. when we're asked to tear down the region
  * we ask the thread to stop, who cleans up the region */
 struct o2hb_region {
-	struct config_item	hr_item;
+	struct o2hb_heartbeat_resource hr_res;
 
 	struct list_head	hr_all_item;
 	unsigned		hr_unclean_stop:1;
@@ -951,7 +951,8 @@ EXPORT_SYMBOL_GPL(o2hb_fill_node_map);
 
 static struct o2hb_region *to_o2hb_region(struct config_item *item)
 {
-	return item ? container_of(item, struct o2hb_region, hr_item) : NULL;
+	return container_of(to_o2hb_heartbeat_resource(item),
+	                    struct o2hb_region, hr_res);
 }
 
 /* drop_item only drops its ref after killing the thread, nothing should
@@ -1316,7 +1317,7 @@ static ssize_t o2hb_region_dev_write(str
 	atomic_set(&reg->hr_steady_iterations, O2HB_LIVE_THRESHOLD + 1);
 
 	hb_task = kthread_run(o2hb_thread, reg, "o2hb-%s",
-			      reg->hr_item.ci_name);
+			      reg->hr_res.hr_item.ci_name);
 	if (IS_ERR(hb_task)) {
 		ret = PTR_ERR(hb_task);
 		mlog_errno(ret);
@@ -1476,19 +1477,6 @@ static struct config_item_type o2hb_regi
 };
 
 /* heartbeat set */
-
-struct o2hb_heartbeat_group {
-	struct config_group hs_group;
-	/* some stuff? */
-};
-
-static struct o2hb_heartbeat_group *to_o2hb_heartbeat_group(struct config_group *group)
-{
-	return group ?
-		container_of(group, struct o2hb_heartbeat_group, hs_group)
-		: NULL;
-}
-
 static struct config_item *o2hb_heartbeat_group_make_item(struct config_group *group,
 							  const char *name)
 {
@@ -1499,9 +1487,10 @@ static struct config_item *o2hb_heartbea
 	if (reg == NULL)
 		goto out; /* ENOMEM */
 
-	config_item_init_type_name(&reg->hr_item, name, &o2hb_region_type);
+	config_item_init_type_name(&reg->hr_res.hr_item, name,
+	                           &o2hb_region_type);
 
-	ret = &reg->hr_item;
+	ret = &reg->hr_res.hr_item;
 
 	spin_lock(&o2hb_live_lock);
 	list_add_tail(&reg->hr_all_item, &o2hb_all_regions);
@@ -1686,7 +1675,7 @@ static struct o2hb_region *o2hb_find_reg
 	assert_spin_locked(&o2hb_live_lock);
 
 	list_for_each_entry(p, &o2hb_all_regions, hr_all_item) {
-		if (!strcmp(region_uuid, config_item_name(&p->hr_item))) {
+		if (!strcmp(region_uuid, config_item_name(&p->hr_res.hr_item))) {
 			reg = p;
 			break;
 		}
@@ -1714,7 +1703,7 @@ static int o2hb_region_get(const char *r
 	if (ret)
 		goto out;
 
-	ret = o2nm_depend_item(&reg->hr_item);
+	ret = o2nm_depend_item(&reg->hr_res.hr_item);
 	if (ret)
 		o2nm_undepend_this_node();
 
@@ -1733,7 +1722,7 @@ static void o2hb_region_put(const char *
 	spin_unlock(&o2hb_live_lock);
 
 	if (reg) {
-		o2nm_undepend_item(&reg->hr_item);
+		o2nm_undepend_item(&reg->hr_res.hr_item);
 		o2nm_undepend_this_node();
 	}
 }
--- a/fs/ocfs2/cluster/heartbeat.h	2008-02-08 15:53:32.000000000 -0500
+++ b/fs/ocfs2/cluster/heartbeat.h	2008-02-08 15:53:40.000000000 -0500
@@ -27,6 +27,7 @@
 #ifndef O2CLUSTER_HEARTBEAT_H
 #define O2CLUSTER_HEARTBEAT_H
 
+#include <linux/configfs.h>
 #include "ocfs2_heartbeat.h"
 
 #define O2HB_REGION_TIMEOUT_MS		2000
@@ -49,6 +50,15 @@ enum o2hb_callback_type {
 	O2HB_NUM_CB
 };
 
+struct o2hb_heartbeat_group {
+	struct config_group hs_group;
+	/* some stuff? */
+};
+
+struct o2hb_heartbeat_resource {
+	struct config_item hr_item;
+};
+
 struct o2nm_node;
 typedef void (o2hb_cb_func)(struct o2nm_node *, int, void *);
 
@@ -81,4 +91,13 @@ int o2hb_check_node_heartbeating_from_ca
 int o2hb_check_local_node_heartbeating(void);
 void o2hb_stop_all_regions(void);
 
+static inline struct o2hb_heartbeat_group *to_o2hb_heartbeat_group(struct config_group *group)
+{
+	return container_of(group, struct o2hb_heartbeat_group, hs_group);
+}
+
+static inline struct o2hb_heartbeat_resource *to_o2hb_heartbeat_resource(struct config_item *item)
+{
+	return container_of(item, struct o2hb_heartbeat_resource, hr_item);
+}
 #endif /* O2CLUSTER_HEARTBEAT_H */
