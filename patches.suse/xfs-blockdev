diff -u linux/include/linux/fs.h-XBLK linux/include/linux/fs.h
--- linux/include/linux/fs.h-XBLK	2004-06-11 16:33:14.000000000 +0200
+++ linux/include/linux/fs.h	2004-06-11 16:36:34.000000000 +0200
@@ -361,6 +361,7 @@
 	int			bd_invalidated;
 	struct gendisk *	bd_disk;
 	struct list_head	bd_list;
+	int 			bd_exclusive;
 	/*
 	 * Private data.  You must have bd_claim'ed the block_device
 	 * to use this.  NOTE:  bd_claim allows an owner to claim
diff -u linux/fs/xfs/linux/xfs_super.c-XBLK linux/fs/xfs/linux/xfs_super.c
--- linux/fs/xfs/linux/xfs_super.c-XBLK	2004-06-11 16:33:14.000000000 +0200
+++ linux/fs/xfs/linux/xfs_super.c	2004-06-11 17:05:21.000000000 +0200
@@ -72,6 +72,7 @@
 #include <linux/mount.h>
 #include <linux/suspend.h>
 #include <linux/writeback.h>
+#include <linux/smp_lock.h>
 
 STATIC struct quotactl_ops linvfs_qops;
 STATIC struct super_operations linvfs_sops;
@@ -278,11 +279,14 @@
 {
 	int			error = 0;
 
+	lock_kernel();
 	*bdevp = open_bdev_excl(name, 0, mp);
 	if (IS_ERR(*bdevp)) {
 		error = PTR_ERR(*bdevp);
 		printk("XFS: Invalid device [%s], error=%d\n", name, error);
 	}
+	(*bdevp)->bd_exclusive = 1;
+	unlock_kernel();
 
 	return -error;
 }
@@ -291,8 +295,10 @@
 xfs_blkdev_put(
 	struct block_device	*bdev)
 {
-	if (bdev)
+	if (bdev) { 
+		bdev->bd_exclusive = 0;
 		close_bdev_excl(bdev);
+	}
 }
 
 
@@ -470,6 +476,7 @@
 	}
 
 	vfs_deallocate(vfsp);
+	sb->s_bdev->bd_exclusive = 0;
 }
 
 STATIC void
@@ -726,6 +733,15 @@
 	struct kstatfs		statvfs;
 	int			error, error2;
 
+	/* temporary hack to protect the user against data corruption */
+	lock_kernel();
+	if (sb->s_bdev->bd_exclusive) {
+		error = EBUSY; 
+		goto fail_vfsop;
+	}
+	sb->s_bdev->bd_exclusive = 1;
+	unlock_kernel();
+
 	vfsp->vfs_super = sb;
 	LINVFS_SET_VFS(sb, vfsp);
 	if (sb->s_flags & MS_RDONLY)
@@ -794,6 +810,7 @@
 fail_vfsop:
 	vfs_deallocate(vfsp);
 	kmem_free(args, sizeof(*args));
+	sb->s_bdev->bd_exclusive = 0;
 	return -error;
 }
 
diff -u linux/fs/block_dev.c-XBLK linux/fs/block_dev.c
--- linux/fs/block_dev.c-XBLK	2004-06-11 16:33:04.000000000 +0200
+++ linux/fs/block_dev.c	2004-06-11 17:04:27.000000000 +0200
@@ -554,8 +554,18 @@
 	int ret = -ENXIO;
 	int part;
 
-	file->f_mapping = bdev->bd_inode->i_mapping;
 	lock_kernel();
+
+	/* Special hack for XFS. It cannot tolerate someone else
+	   opening the block device it has mounted. This should
+	   be handled by bd_claim, but isn't currently. */
+	if (bdev->bd_exclusive) {
+		unlock_kernel();
+		bdput(bdev);
+		return -EBUSY;
+	}
+
+	file->f_mapping = bdev->bd_inode->i_mapping;
 	disk = get_gendisk(bdev->bd_dev, &part);
 	if (!disk) {
 		unlock_kernel();
