From: Jeff Mahoney <jeffm@suse.com>
Subject: [PATCH] novfs: Merge with 2.6.29

 This patch merges novfs against 2.6.29-rc2.

 The implementation of write_{begin,end{ is incomplete and untested, so
 CONFIG_NOVFS is currently disabled on all configurations.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/novfs/file.c  |   12 +++++------
 fs/novfs/inode.c |   59 +++++++++++++++++++++++++++++++++++++------------------
 2 files changed, 46 insertions(+), 25 deletions(-)

--- a/fs/novfs/file.c
+++ b/fs/novfs/file.c
@@ -184,8 +184,8 @@ int novfs_get_file_info(unsigned char *
 	DbgPrint("Path = %s", Path);
 
 	Info->mode = S_IFDIR | 0700;
-	Info->uid = current->uid;
-	Info->gid = current->gid;
+	Info->uid = current_uid();
+	Info->gid = current_gid();
 	Info->size = 0;
 	Info->atime = Info->mtime = Info->ctime = CURRENT_TIME;
 
@@ -229,8 +229,8 @@ int novfs_get_file_info(unsigned char *
 						Info->mode &= ~(S_IWUSR);
 					}
 
-					Info->uid = current->euid;
-					Info->gid = current->egid;
+					Info->uid = current_euid();
+					Info->gid = current_egid();
 					Info->size = reply->fileSize;
 					Info->atime.tv_sec =
 					    reply->lastAccessTime;
@@ -677,8 +677,8 @@ static int directory_enumerate_ex(void *
 							info->mode |= S_IXUSR;
 						}
 
-						info->uid = current->euid;
-						info->gid = current->egid;
+						info->uid = current_euid();
+						info->gid = current_egid();
 						info->size = data->size;
 						info->atime.tv_sec =
 						    data->lastAccessTime;
--- a/fs/novfs/inode.c
+++ b/fs/novfs/inode.c
@@ -93,10 +93,12 @@ int novfs_dir_fsync(struct file *file, s
 int novfs_a_writepage(struct page *page, struct writeback_control *wbc);
 int novfs_a_writepages(struct address_space *mapping,
 		       struct writeback_control *wbc);
-int novfs_a_prepare_write(struct file *file, struct page *page, unsigned from,
-			  unsigned to);
-int novfs_a_commit_write(struct file *file, struct page *page, unsigned offset,
-			 unsigned to);
+int novfs_a_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned flags,
+			struct page **pagep, void **fsdata);
+int novfs_a_write_end(struct file *file, struct address_space *mapping,
+			  loff_t pos, unsigned len, unsigned copied,
+			  struct page *pagep, void *fsdata);
 int novfs_a_readpage(struct file *file, struct page *page);
 int novfs_a_readpages(struct file *file, struct address_space *mapping,
 		      struct list_head *page_lst, unsigned nr_pages);
@@ -246,8 +248,8 @@ static struct address_space_operations n
 	.readpages = novfs_a_readpages,
 	.writepage = novfs_a_writepage,
 	.writepages = novfs_a_writepages,
-	.prepare_write = novfs_a_prepare_write,
-	.commit_write = novfs_a_commit_write,
+	.write_begin = novfs_a_write_begin,
+	.write_end = novfs_a_write_end,
 	.set_page_dirty = __set_page_dirty_nobuffers,
 	.direct_IO = novfs_a_direct_IO,
 };
@@ -1221,7 +1223,7 @@ int novfs_dir_readdir(struct file *file,
 		uid = novfs_scope_get_uid(((struct inode_data *) inode->i_private)->Scope);
 	} else {
 		SC_INITIALIZE(sessionId);
-		uid = current->euid;
+		uid = current_euid();
 	}
 
 	if (IS_ROOT(file->f_dentry) ||	// Root
@@ -1884,7 +1886,7 @@ static void novfs_copy_cache_pages(struc
 		SetPageUptodate(page);
 		unlock_page(page);
 		if (!pagevec_add(plru_pvec, page))
-			__pagevec_lru_add(plru_pvec);
+			__pagevec_lru_add_file(plru_pvec);
 		data += PAGE_CACHE_SIZE;
 	}
 	return;
@@ -2368,7 +2370,7 @@ int novfs_a_readpages(struct file *file,
 			page_cache_release(page);
 		}
 
-		pagevec_lru_add(&lru_pvec);
+		pagevec_lru_add_file(&lru_pvec);
 		kfree(rbuf);
 	} else {
 		retCode = -ENOMEM;
@@ -2379,17 +2381,30 @@ int novfs_a_readpages(struct file *file,
 
 }
 
-int novfs_a_prepare_write(struct file *file, struct page *page, unsigned from,
-			  unsigned to)
+int novfs_a_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned flags,
+			struct page **pagep, void **fsdata)
 {
 	int retVal = 0;
-	loff_t offset = (loff_t) page->index << PAGE_CACHE_SHIFT;
-	size_t len = PAGE_CACHE_SIZE;
+	loff_t offset = pos;
 	struct novfs_schandle session;
 	struct novfs_data_list dllst[2];
 	struct inode *inode = file->f_dentry->d_inode;
+	struct page *page;
+	pgoff_t index;
+	unsigned from, to;
 	SC_INITIALIZE(session);
 
+	index = pos >> PAGE_CACHE_SHIFT;
+	from = pos & (PAGE_CACHE_SIZE - 1);
+	to = from + len;
+
+	page = grab_cache_page_write_begin(mapping, index, flags);
+	if (!page)
+		return -ENOMEM;
+
+	*pagep = page;
+
 	DbgPrint("File=0x%p Page=0x%p offset=0x%llx From=%u To=%u "
 		 "filesize=%lld\n", file, page, offset, from, to,
 		 i_size_read(file->f_dentry->d_inode));
@@ -2475,19 +2490,25 @@ int novfs_a_prepare_write(struct file *f
 	return (retVal);
 }
 
-int novfs_a_commit_write(struct file *file, struct page *page, unsigned offset,
-			 unsigned to)
+int novfs_a_write_end(struct file *file, struct address_space *mapping,
+		      loff_t pos, unsigned len, unsigned copied,
+		      struct page *page, void *fsdata)
 {
 	int retCode = 0;
 	struct inode *inode = page->mapping->host;
-	loff_t pos = ((loff_t) page->index << PAGE_CACHE_SHIFT) + to;
+	loff_t offset = pos;
 	struct novfs_schandle session;
 	struct inode_data *id;
 	struct novfs_data_list dlst[1];
-	size_t len = to - offset;
-
+	pgoff_t index;
+	unsigned from, to;
 	SC_INITIALIZE(session);
 
+	index = pos >> PAGE_CACHE_SHIFT;
+	from = pos & (PAGE_CACHE_SIZE - 1);
+	to = from + len;
+
+
 	DbgPrint("File=0x%p Page=0x%p offset=0x%x To=%u filesize=%lld",
 		 file, page, offset, to, i_size_read(file->f_dentry->d_inode));
 	if (file->f_dentry->d_inode
@@ -2670,7 +2691,7 @@ struct dentry *novfs_i_lookup(struct ino
 	struct novfs_entry_info *info = NULL;
 	struct inode_data *id;
 	struct inode *inode = NULL;
-	uid_t uid = current->euid;
+	uid_t uid = current_euid();
 	ino_t ino = 0;
 	struct qstr name;
 	char *buf;
