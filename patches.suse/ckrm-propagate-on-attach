diff -urNp linux-2.6.5/include/linux/ckrm_ce.h linux-2.6.5.SUSE/include/linux/ckrm_ce.h
--- linux-2.6.5/include/linux/ckrm_ce.h	2004-07-16 15:15:15.791738792 +0200
+++ linux-2.6.5.SUSE/include/linux/ckrm_ce.h	2004-07-16 15:15:53.163222883 +0200
@@ -50,8 +50,8 @@ typedef struct ckrm_eng_callback {
 	unsigned long c_interest;         /* set of classification events CE is interested in */
 	ce_classify_fct_t   classify;     /* generic classify */
 
-	void   (*class_add)   (const char *name, void *core); /* class added */
-	void   (*class_delete)(const char *name, void *core); /* class deleted */
+	void   (*class_add)   (const char *name, void *core, int classtype); /* class added */
+	void   (*class_delete)(const char *name, void *core, int classtype); /* class deleted */
 
 	/* callback which are called while holding task_lock(tsk) */
 	unsigned long n_interest;         /* set of notification events CE is interested in */
diff -urNp linux-2.6.5/kernel/ckrm/ckrm.c linux-2.6.5.SUSE/kernel/ckrm/ckrm.c
--- linux-2.6.5/kernel/ckrm/ckrm.c	2004-07-16 15:15:15.792738805 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/ckrm.c	2004-07-16 15:15:53.164222896 +0200
@@ -208,8 +208,17 @@ ckrm_register_engine(const char *typenam
 	ctype->ce_regd = 1;
 	ctype->ce_callbacks = *ecbs;
 	set_callbacks_active(ctype);
-	if (ctype->ce_callbacks.class_add) 
-		(*ctype->ce_callbacks.class_add)(ctype->default_class->name,ctype->default_class);
+
+	if (ctype->ce_callbacks.class_add) {
+                struct ckrm_core_class *core;
+
+	        read_lock(&ckrm_class_lock);
+
+                list_for_each_entry(core, &ctype->classes, clslist) {
+			(*ctype->ce_callbacks.class_add)(core->name,core,ctype->typeID);
+                }
+        	read_unlock(&ckrm_class_lock);
+        }
 	return ctype->typeID;
 }
 
diff -urNp linux-2.6.5/kernel/ckrm/ckrm_sockc.c linux-2.6.5.SUSE/kernel/ckrm/ckrm_sockc.c
--- linux-2.6.5/kernel/ckrm/ckrm_sockc.c	2004-07-16 15:15:15.760738390 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/ckrm_sockc.c	2004-07-16 15:15:53.165222909 +0200
@@ -304,7 +304,7 @@ sock_alloc_class(struct ckrm_core_class 
 
 	ce_protect(&CT_sockclass);
 	if (CT_sockclass.ce_cb_active && CT_sockclass.ce_callbacks.class_add)
-		(*CT_sockclass.ce_callbacks.class_add)(name,sockcls);
+		(*CT_sockclass.ce_callbacks.class_add)(name,sockcls,CT_sockclass.typeID);
 	ce_release(&CT_sockclass);
 
 	return class_core(sockcls);
@@ -330,7 +330,7 @@ sock_free_class(struct ckrm_core_class *
 	ce_protect(&CT_sockclass);
 
 	if (CT_sockclass.ce_cb_active && CT_sockclass.ce_callbacks.class_delete)
-		(*CT_sockclass.ce_callbacks.class_delete)(core->name,sockcls);
+		(*CT_sockclass.ce_callbacks.class_delete)(core->name,sockcls,CT_sockclass.typeID);
 
 	sock_reclassify_class ( sockcls );
 
diff -urNp linux-2.6.5/kernel/ckrm/ckrm_tc.c linux-2.6.5.SUSE/kernel/ckrm/ckrm_tc.c
--- linux-2.6.5/kernel/ckrm/ckrm_tc.c	2004-07-16 15:15:15.631736719 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/ckrm_tc.c	2004-07-16 15:15:53.166222922 +0200
@@ -643,7 +643,7 @@ ckrm_alloc_task_class(struct ckrm_core_c
 
 	ce_protect(&CT_taskclass);
 	if (CT_taskclass.ce_cb_active && CT_taskclass.ce_callbacks.class_add)
-		(*CT_taskclass.ce_callbacks.class_add)(name,taskcls);
+		(*CT_taskclass.ce_callbacks.class_add)(name,taskcls,CT_taskclass.typeID);
 	ce_release(&CT_taskclass);
 
 	return class_core(taskcls);
@@ -671,7 +671,7 @@ ckrm_free_task_class(struct ckrm_core_cl
 	ce_protect(&CT_taskclass);
 
 	if (CT_taskclass.ce_cb_active && CT_taskclass.ce_callbacks.class_delete)
-		(*CT_taskclass.ce_callbacks.class_delete)(core->name,taskcls);
+		(*CT_taskclass.ce_callbacks.class_delete)(core->name,taskcls,CT_taskclass.typeID);
 	ckrm_reclassify_class_tasks( taskcls );
 
 	ce_release(&CT_taskclass);
diff -urNp linux-2.6.5/kernel/ckrm/rbce/rbcemod.c linux-2.6.5.SUSE/kernel/ckrm/rbce/rbcemod.c
--- linux-2.6.5/kernel/ckrm/rbce/rbcemod.c	2004-07-16 15:15:15.794738831 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/rbce/rbcemod.c	2004-07-16 15:15:53.168222947 +0200
@@ -377,33 +377,13 @@ reinsert_rule(struct rbce_rule *rule, in
  */
 
 static struct rbce_class *
-get_class(char *classname, int *classtype)
+create_rbce_class(const char *classname, int classtype, void *classobj)
 {
-	static struct rbce_class *cls;
-	void *classobj;
+	struct rbce_class *cls;
 
-	if (!classname) {
-		return NULL;
-	}
-	cls = find_class_name(classname);
-	if (cls) {
-		if (cls->classobj) {
-			INC_REF(cls);
-			*classtype = cls->classtype;
-			return cls;
-		}
-		return NULL;
-	}
-	classobj = ckrm_classobj(classname, classtype);
-	if (!classobj) {
-		return NULL;
-	}
-
-	/* now walk through our list and see the mapping for that */
-
-	if (*classtype >= CKRM_MAX_CLASSTYPES) {
+	if (classtype >= CKRM_MAX_CLASSTYPES) {
 		printk(KERN_ERR "ckrm_classobj returned %d as classtype which cannot "
-				" be handled by RBCE\n", *classtype);
+				" be handled by RBCE\n", classtype);
 		return NULL;
 	}
 
@@ -417,13 +397,38 @@ get_class(char *classname, int *classtyp
 		cls->classobj = classobj;
 		strcpy(cls->obj.name, classname);
 		list_add_tail(&cls->obj.link, &class_list);
-		notify_class_action(cls,1);
-		cls->classtype = *classtype;
+		cls->classtype = classtype;
 	} else {
 		kfree(cls);
 		cls = NULL;
 	}
 	return cls;
+} 
+
+static struct rbce_class *
+get_class(char *classname, int *classtype)
+{
+	struct rbce_class *cls;
+	void *classobj;
+
+	if (!classname) {
+		return NULL;
+	}
+	cls = find_class_name(classname);
+	if (cls) {
+		if (cls->classobj) {
+			INC_REF(cls);
+			*classtype = cls->classtype;
+			return cls;
+		}
+		return NULL;
+	}
+	classobj = ckrm_classobj(classname, classtype);
+	if (!classobj) {
+		return NULL;
+	}
+
+	return create_rbce_class(classname,*classtype,classobj);
 }
 
 /*
@@ -436,7 +441,6 @@ put_class(struct rbce_class *cls)
 {
 	if (cls) {
 		if (DEC_REF(cls) <= 0) {
-			notify_class_action(cls,0);
 			list_del(&cls->obj.link);
 			kfree(cls->obj.name);
 			kfree(cls);
@@ -453,16 +457,19 @@ put_class(struct rbce_class *cls)
 
 #ifdef RBCE_EXTENSION 
 static void
-rbce_class_addcb(const char *classname, void *clsobj)
+rbce_class_addcb(const char *classname, void *clsobj, int classtype)
 {
-	static struct rbce_class *cls;
+	struct rbce_class *cls;
 
 	write_lock(&global_rwlock);
 	cls = find_class_name((char*)classname);
 	if (cls) {
-		cls->classobj = clsobj; 
-		notify_class_action(cls,1);
+		cls->classobj = clsobj;
+	} else {
+		cls = create_rbce_class(classname, classtype, clsobj);
 	}
+	if (cls)
+		notify_class_action(cls,1);
 	write_unlock(&global_rwlock);
 	return;
 }
@@ -472,7 +479,7 @@ rbce_class_addcb(const char *classname, 
  * Callback from core when a class is deleted.
  */
 static void
-rbce_class_deletecb(const char *classname, void *classobj)
+rbce_class_deletecb(const char *classname, void *classobj, int classtype)
 {
 	static struct rbce_class *cls;
 	struct named_obj_hdr *pos;
@@ -497,6 +504,7 @@ rbce_class_deletecb(const char *classnam
 				}
 			}
 		}
+		put_class(cls);
 		if ((cls = find_class_name(classname)) != NULL) {
 			printk(KERN_ERR "rbce ERROR: class %s exists in rbce after "
 					"removal in core\n", classname);
diff -urNp linux-2.6.5/kernel/ckrm/rbce/rbcemod_ext.c linux-2.6.5.SUSE/kernel/ckrm/rbce/rbcemod_ext.c
--- linux-2.6.5/kernel/ckrm/rbce/rbcemod_ext.c	2004-07-16 15:15:15.590736188 +0200
+++ linux-2.6.5.SUSE/kernel/ckrm/rbce/rbcemod_ext.c	2004-07-16 15:15:53.169222960 +0200
@@ -371,12 +371,13 @@ notify_class_action(struct rbce_class *c
 	struct crbce_class_info cinfo;
 	int len;
 
-
 	rec_set_timehdr(&cinfo,CRBCE_REC_CLASS_INFO,0,cls->classobj);
 	cinfo.action = action;
-	len = strlen(cls->obj.name) + 1;
-	cinfo.namelen = len;
+	len = strnlen(cls->obj.name,CRBCE_MAX_CLASS_NAME_LEN-1);
 	memcpy(&cinfo.name,cls->obj.name,len);
+	cinfo.name[len] = '\0';
+	len++;
+	cinfo.namelen = len;
 
 	len += sizeof(cinfo)-CRBCE_MAX_CLASS_NAME_LEN;
 	rec_send_len(&cinfo,len);
