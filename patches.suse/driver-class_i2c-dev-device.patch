From foo@baz Tue Apr  9 12:12:43 2002
Date: Mon, 03 Jul 2006 13:46:24 -0700
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: I2C: convert i2c-dev to use struct device instead of struct class_device
Patch-mainline: not yet.

As class_device is going away eventually...

Cc: Jean Delvare <khali@linux-fr.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/i2c/i2c-dev.c |   21 +++++++++++----------
 1 files changed, 11 insertions(+), 10 deletions(-)

--- linux-2.6.18.orig/drivers/i2c/i2c-dev.c
+++ linux-2.6.18/drivers/i2c/i2c-dev.c
@@ -42,7 +42,7 @@ static struct i2c_client i2cdev_client_t
 struct i2c_dev {
 	int minor;
 	struct i2c_adapter *adap;
-	struct class_device *class_dev;
+	struct device *dev;
 };
 #define to_i2c_dev(d) container_of(d, struct i2c_dev, class_dev)
 
@@ -102,15 +102,16 @@ static void return_i2c_dev(struct i2c_de
 	spin_unlock(&i2c_dev_array_lock);
 }
 
-static ssize_t show_adapter_name(struct class_device *class_dev, char *buf)
+static ssize_t show_adapter_name(struct device *dev,
+				 struct device_attribute *attr, char *buf)
 {
-	struct i2c_dev *i2c_dev = i2c_dev_get_by_minor(MINOR(class_dev->devt));
+	struct i2c_dev *i2c_dev = i2c_dev_get_by_minor(MINOR(dev->devt));
 
 	if (!i2c_dev)
 		return -ENODEV;
 	return sprintf(buf, "%s\n", i2c_dev->adap->name);
 }
-static CLASS_DEVICE_ATTR(name, S_IRUGO, show_adapter_name, NULL);
+static DEVICE_ATTR(name, S_IRUGO, show_adapter_name, NULL);
 
 static ssize_t i2cdev_read (struct file *file, char __user *buf, size_t count,
                             loff_t *offset)
@@ -427,12 +428,12 @@ static int i2cdev_attach_adapter(struct 
 	/* register this i2c device with the driver core */
 	i2c_dev->adap = adap;
 	dev = &adap->dev;
-	i2c_dev->class_dev = class_device_create(i2c_dev_class, NULL,
-						 MKDEV(I2C_MAJOR, i2c_dev->minor),
-						 dev, "i2c-%d", i2c_dev->minor);
-	if (!i2c_dev->class_dev)
+	i2c_dev->dev = device_create(i2c_dev_class, &adap->dev,
+				     MKDEV(I2C_MAJOR, adap->nr),
+				     "i2c-%d", adap->nr);
+	if (!i2c_dev->dev)
 		goto error;
-	class_device_create_file(i2c_dev->class_dev, &class_device_attr_name);
+	device_create_file(i2c_dev->dev, &dev_attr_name);
 	return 0;
 error:
 	return_i2c_dev(i2c_dev);
@@ -449,7 +450,7 @@ static int i2cdev_detach_adapter(struct 
 		return -ENODEV;
 
 	return_i2c_dev(i2c_dev);
-	class_device_destroy(i2c_dev_class, MKDEV(I2C_MAJOR, i2c_dev->minor));
+	device_destroy(i2c_dev_class, MKDEV(I2C_MAJOR, adap->nr));
 	kfree(i2c_dev);
 
 	pr_debug("i2c-dev: adapter [%s] unregistered\n", adap->name);
