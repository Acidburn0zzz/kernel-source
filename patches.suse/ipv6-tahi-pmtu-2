Index: linux-2.6.7/include/net/dst.h
===================================================================
--- linux-2.6.7.orig/include/net/dst.h	2004-08-04 15:27:59.366354817 +0200
+++ linux-2.6.7/include/net/dst.h	2004-08-04 15:35:34.049265386 +0200
@@ -48,6 +48,7 @@
 #define DST_NOXFRM		2
 #define DST_NOPOLICY		4
 #define DST_NOHASH		8
+#define DST_FRAGHDR		16
 	unsigned long		lastuse;
 	unsigned long		expires;
 
Index: linux-2.6.7/net/ipv6/ip6_output.c
===================================================================
--- linux-2.6.7.orig/net/ipv6/ip6_output.c	2004-08-04 15:34:49.996537114 +0200
+++ linux-2.6.7/net/ipv6/ip6_output.c	2004-08-04 15:36:11.860598929 +0200
@@ -149,7 +149,9 @@
 {
 	struct sk_buff *skb = *pskb;
 
-	if ((skb->len > dst_pmtu(skb->dst) || skb_shinfo(skb)->frag_list))
+	if ((skb->len > dst_pmtu(skb->dst)
+	     || (skb->dst->flags & DST_FRAGHDR)
+	     || skb_shinfo(skb)->frag_list))
 		return ip6_fragment(pskb, ip6_output2);
 	else
 		return ip6_output2(pskb);
Index: linux-2.6.7/net/ipv6/route.c
===================================================================
--- linux-2.6.7.orig/net/ipv6/route.c	2004-08-04 15:35:25.981047742 +0200
+++ linux-2.6.7/net/ipv6/route.c	2004-08-04 15:35:34.053264998 +0200
@@ -1112,6 +1112,7 @@
 			struct net_device *dev, u32 pmtu)
 {
 	struct rt6_info *rt, *nrt;
+	int fraghdr_flag = 0;
 
 	if (pmtu < IPV6_MIN_MTU) {
 		if (net_ratelimit())
@@ -1121,6 +1122,7 @@
 		   link MTU if the node receives a Packet Too Big message
 		   reporting next-hop MTU that is less than the IPv6 minimum MTU.
 		   */
+		fraghdr_flag = DST_FRAGHDR;
 		pmtu = IPV6_MIN_MTU;
 	}
 
@@ -1129,7 +1131,7 @@
 	if (rt == NULL)
 		return;
 
-	if (pmtu >= dst_pmtu(&rt->u.dst))
+	if (pmtu >= dst_pmtu(&rt->u.dst) && !fraghdr_flag)
 		goto out;
 
 	/* New mtu received -> path was valid.
@@ -1145,6 +1147,7 @@
 	 */
 	if (rt->rt6i_flags & RTF_CACHE) {
 		rt->u.dst.metrics[RTAX_MTU-1] = pmtu;
+		rt->u.dst.flags |= fraghdr_flag;
 		dst_set_expires(&rt->u.dst, ip6_rt_mtu_expires);
 		rt->rt6i_flags |= RTF_MODIFIED|RTF_EXPIRES;
 		goto out;
@@ -1159,6 +1162,7 @@
 		nrt = rt6_cow(rt, daddr, saddr);
 		if (!nrt->u.dst.error) {
 			nrt->u.dst.metrics[RTAX_MTU-1] = pmtu;
+			nrt->u.dst.flags |= fraghdr_flag;
 			/* According to RFC 1981, detecting PMTU increase shouldn't be
 			   happened within 5 mins, the recommended timer is 10 mins.
 			   Here this route expiration time is set to ip6_rt_mtu_expires
@@ -1180,6 +1184,7 @@
 		dst_set_expires(&nrt->u.dst, ip6_rt_mtu_expires);
 		nrt->rt6i_flags |= RTF_DYNAMIC|RTF_CACHE|RTF_EXPIRES;
 		nrt->u.dst.metrics[RTAX_MTU-1] = pmtu;
+		nrt->u.dst.flags |= fraghdr_flag;
 		rt6_ins(nrt, NULL, NULL);
 	}
 
