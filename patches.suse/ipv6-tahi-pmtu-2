Index: linux-2.6.5/include/net/dst.h
===================================================================
--- linux-2.6.5.orig/include/net/dst.h	2004-04-04 05:38:16.000000000 +0200
+++ linux-2.6.5/include/net/dst.h	2004-04-27 14:53:14.000000000 +0200
@@ -48,6 +48,7 @@
 #define DST_NOXFRM		2
 #define DST_NOPOLICY		4
 #define DST_NOHASH		8
+#define DST_FRAGHDR		16
 	unsigned long		lastuse;
 	unsigned long		expires;
 
Index: linux-2.6.5/net/ipv6/ip6_output.c
===================================================================
--- linux-2.6.5.orig/net/ipv6/ip6_output.c	2004-04-27 14:52:19.000000000 +0200
+++ linux-2.6.5/net/ipv6/ip6_output.c	2004-04-27 14:52:56.000000000 +0200
@@ -146,7 +146,9 @@
 
 int ip6_output(struct sk_buff *skb)
 {
-	if ((skb->len > dst_pmtu(skb->dst) || skb_shinfo(skb)->frag_list))
+	if ((skb->len > dst_pmtu(skb->dst)
+	     || (skb->dst->flags & DST_FRAGHDR)
+	     || skb_shinfo(skb)->frag_list))
 		return ip6_fragment(skb, ip6_output2);
 	else
 		return ip6_output2(skb);
@@ -1125,7 +1127,7 @@
 	if (flags&MSG_CONFIRM)
 		dst_confirm(dst);
 
-	if (pktlength <= mtu) {
+	if (pktlength <= mtu && !(dst->flags & DST_FRAGHDR)) {
 		struct sk_buff *skb;
 		struct ipv6hdr *hdr;
 		struct net_device *dev = dst->dev;
Index: linux-2.6.5/net/ipv6/route.c
===================================================================
--- linux-2.6.5.orig/net/ipv6/route.c	2004-04-27 14:52:19.000000000 +0200
+++ linux-2.6.5/net/ipv6/route.c	2004-04-27 14:54:02.000000000 +0200
@@ -1089,6 +1089,7 @@
 			struct net_device *dev, u32 pmtu)
 {
 	struct rt6_info *rt, *nrt;
+	int fraghdr_flag = 0;
 
 	if (pmtu < IPV6_MIN_MTU) {
 		if (net_ratelimit())
@@ -1098,6 +1099,7 @@
 		   link MTU if the node receives a Packet Too Big message
 		   reporting next-hop MTU that is less than the IPv6 minimum MTU.
 		   */
+		fraghdr_flag = DST_FRAGHDR;
 		pmtu = IPV6_MIN_MTU;
 	}
 
@@ -1106,7 +1108,7 @@
 	if (rt == NULL)
 		return;
 
-	if (pmtu >= dst_pmtu(&rt->u.dst))
+	if (pmtu >= dst_pmtu(&rt->u.dst) && !fraghdr_flag)
 		goto out;
 
 	/* New mtu received -> path was valid.
@@ -1122,6 +1124,7 @@
 	 */
 	if (rt->rt6i_flags & RTF_CACHE) {
 		rt->u.dst.metrics[RTAX_MTU-1] = pmtu;
+		rt->u.dst.flags |= fraghdr_flag;
 		dst_set_expires(&rt->u.dst, ip6_rt_mtu_expires);
 		rt->rt6i_flags |= RTF_MODIFIED|RTF_EXPIRES;
 		goto out;
@@ -1136,6 +1139,7 @@
 		nrt = rt6_cow(rt, daddr, saddr);
 		if (!nrt->u.dst.error) {
 			nrt->u.dst.metrics[RTAX_MTU-1] = pmtu;
+			nrt->u.dst.flags |= fraghdr_flag;
 			/* According to RFC 1981, detecting PMTU increase shouldn't be
 			   happened within 5 mins, the recommended timer is 10 mins.
 			   Here this route expiration time is set to ip6_rt_mtu_expires
@@ -1160,6 +1164,7 @@
 		dst_set_expires(&nrt->u.dst, ip6_rt_mtu_expires);
 		nrt->rt6i_flags |= RTF_DYNAMIC|RTF_CACHE|RTF_EXPIRES;
 		nrt->u.dst.metrics[RTAX_MTU-1] = pmtu;
+		nrt->u.dst.flags |= fraghdr_flag;
 		rt6_ins(nrt, NULL, NULL);
 	}
 
