diff -urNp linux-2.6.4/security/Kconfig linux-2.6.4.SUSE/security/Kconfig
--- linux-2.6.4/security/Kconfig	2004-03-11 03:55:36.000000000 +0100
+++ linux-2.6.4.SUSE/security/Kconfig	2004-03-24 12:03:14.000000000 +0100
@@ -31,6 +31,28 @@ config SECURITY_CAPABILITIES
 	  This enables the "default" Linux capabilities functionality.
 	  If you are unsure how to answer this question, answer Y.
 
+config SECURITY_CAPABILITIES_BOOTPARAM
+        bool "Capabilities boot parameter"
+        depends on SECURITY_CAPABILITIES
+        default n
+        help
+          This option adds a kernel parameter 'capabilities', which allows 
+	  Capabilities to be disabled at boot.  If this option is selected, 
+	  SECURITY_CAPABILITIES functionality can be disabled with 
+	  capabilities=0 on the kernel command line.  The purpose of this 
+	  option is to allow a single kernel image to be distributed with 
+	  Capabilities built in, but not necessarily enabled.  
+
+	  It is expected that capabilities will be disabled along with also 
+	  disabling SELinux (if configured, see SECURITY_SELINUX_BOOTPARAM) 
+	  thereby allowing a alternative security policy to be loaded via a 
+	  kernel module.  N.B. Any third party security modules loaded in this 
+	  manner should compose the functionality of the Capability module 
+	  (depend on the commoncap module).
+
+          If you are unsure how to answer this question, answer N.
+
+
 config SECURITY_ROOTPLUG
 	tristate "Root Plug Support"
 	depends on USB && SECURITY!=n
diff -urNp linux-2.6.4/security/capability.c linux-2.6.4.SUSE/security/capability.c
--- linux-2.6.4/security/capability.c	2004-03-11 03:55:25.000000000 +0100
+++ linux-2.6.4.SUSE/security/capability.c	2004-03-24 12:03:14.000000000 +0100
@@ -56,12 +56,30 @@ static struct security_operations capabi
 #define MY_NAME "capability"
 #endif
 
+#ifdef CONFIG_SECURITY_CAPABILITIES_BOOTPARAM
+int capability_enabled = 1;
+
+static int __init capability_enabled_setup(char *str)
+{
+        capability_enabled = simple_strtol(str, NULL, 0);
+        return 1;
+}
+__setup("capability=", capability_enabled_setup);
+#endif
+
 /* flag to keep track of how we were registered */
 static int secondary;
 
 
 static int __init capability_init (void)
 {
+#ifdef CONFIG_SECURITY_CAPABILITIES_BOOTPARAM
+	if (!capability_enabled){
+		printk(KERN_INFO "Capability: Disabled at boot.\n");
+		return 0;
+	}
+#endif
+
 	/* register ourselves with the security framework */
 	if (register_security (&capability_ops)) {
 		printk (KERN_INFO
