From: Patrick McHardy, Christophe Saout
Subject: nat over ipsec

The updated ipsec-02-input-hooks.diff

Acked-by: mason@suse.com
Acked-by: Jaroslav Kysela <perex@suse.de>

diff -pruN linux-2.6.15.suse/include/linux/netfilter_ipv4.h linux-2.6.15/include/linux/netfilter_ipv4.h
--- linux-2.6.15.suse/include/linux/netfilter_ipv4.h	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/include/linux/netfilter_ipv4.h	2006-01-11 15:53:02.332748817 +0100
@@ -7,6 +7,8 @@
 
 #include <linux/config.h>
 #include <linux/netfilter.h>
+#include <linux/netdevice.h>
+#include <net/protocol.h>
 
 /* only for userspace compatibility */
 #ifndef __KERNEL__
@@ -80,6 +82,57 @@ enum nf_ip_hook_priorities {
 #ifdef __KERNEL__
 extern int ip_route_me_harder(struct sk_buff **pskb);
 
+#if defined(CONFIG_XFRM) && defined(CONFIG_NETFILTER)
+#include <net/route.h>
+#include <net/xfrm.h>
+ 
+static inline int nf_hook_input_cond(struct sk_buff *skb)
+{
+        return !skb->sp || skb->sp->decap_done;
+}
+
+static inline int
+nf_xfrm_local_done(struct sk_buff *skb, struct net_protocol *ipprot)
+{
+        return skb->sp && !skb->sp->decap_done
+ 	       && (!ipprot || !ipprot->xfrm_prot);
+}
+ 
+static inline int nf_xfrm_nonlocal_done(struct sk_buff *skb)
+{
+ 	return skb->sp && !skb->sp->decap_done
+               && !(((struct rtable *)skb->dst)->rt_flags & RTCF_LOCAL);
+}
+ 
+extern int nf_rcv_postxfrm_local(struct sk_buff *skb);
+extern int nf_rcv_postxfrm_nonlocal(struct sk_buff *skb);
+#else /* CONFIG_XFRM */
+static inline int nf_hook_input_cond(struct sk_buff *skb)
+{
+        return 1;
+}
+ 
+static inline int
+nf_xfrm_local_done(struct sk_buff *skb, struct net_protocol *ipprot)
+{
+        return 0;
+}
+
+static inline int nf_xfrm_nonlocal_done(struct sk_buff *skb)
+{
+        return 0;
+}
+
+static inline int nf_rcv_postxfrm_local(struct sk_buff *skb)
+{
+        return 0;
+}
+
+static inline int nf_rcv_postxfrm_nonlocal(struct sk_buff *skb)
+{
+        return 0; 
+}
+#endif /* CONFIG_XFRM */
 #endif /*__KERNEL__*/
 
 #endif /*__LINUX_IP_NETFILTER_H*/
diff -pruN linux-2.6.15.suse/include/net/protocol.h linux-2.6.15/include/net/protocol.h
--- linux-2.6.15.suse/include/net/protocol.h	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/include/net/protocol.h	2006-01-11 15:49:52.782363189 +0100
@@ -38,6 +38,7 @@ struct net_protocol {
 	int			(*handler)(struct sk_buff *skb);
 	void			(*err_handler)(struct sk_buff *skb, u32 info);
 	int			no_policy;
+	int			xfrm_prot;
 };
 
 #if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)
diff -pruN linux-2.6.15.suse/include/net/xfrm.h linux-2.6.15/include/net/xfrm.h
--- linux-2.6.15.suse/include/net/xfrm.h	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/include/net/xfrm.h	2006-01-11 15:49:52.782363189 +0100
@@ -563,6 +563,9 @@ struct sec_path
 {
 	atomic_t		refcnt;
 	int			len;
+#ifdef CONFIG_NETFILTER
+	int			decap_done;
+#endif
 	struct sec_decap_state	x[XFRM_MAX_DEPTH];
 };
 
diff -pruN linux-2.6.15.suse/net/ipv4/ah4.c linux-2.6.15/net/ipv4/ah4.c
--- linux-2.6.15.suse/net/ipv4/ah4.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/ipv4/ah4.c	2006-01-11 15:49:55.538572317 +0100
@@ -300,6 +300,7 @@ static struct net_protocol ah4_protocol 
 	.handler	=	xfrm4_rcv,
 	.err_handler	=	ah4_err,
 	.no_policy	=	1,
+	.xfrm_prot	=	1,
 };
 
 static int __init ah4_init(void)
diff -pruN linux-2.6.15.suse/net/ipv4/esp4.c linux-2.6.15/net/ipv4/esp4.c
--- linux-2.6.15.suse/net/ipv4/esp4.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/ipv4/esp4.c	2006-01-11 15:49:55.538572317 +0100
@@ -465,6 +465,7 @@ static struct net_protocol esp4_protocol
 	.handler	=	xfrm4_rcv,
 	.err_handler	=	esp4_err,
 	.no_policy	=	1,
+	.xfrm_prot	=	1,
 };
 
 static int __init esp4_init(void)
diff -pruN linux-2.6.15.suse/net/ipv4/ipcomp.c linux-2.6.15/net/ipv4/ipcomp.c
--- linux-2.6.15.suse/net/ipv4/ipcomp.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/ipv4/ipcomp.c	2006-01-11 15:49:55.538572317 +0100
@@ -485,6 +485,7 @@ static struct net_protocol ipcomp4_proto
 	.handler	=	xfrm4_rcv,
 	.err_handler	=	ipcomp4_err,
 	.no_policy	=	1,
+	.xfrm_prot	=	1,
 };
 
 static int __init ipcomp4_init(void)
diff -pruN linux-2.6.15.suse/net/ipv4/ip_input.c linux-2.6.15/net/ipv4/ip_input.c
--- linux-2.6.15.suse/net/ipv4/ip_input.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/ipv4/ip_input.c	2006-01-11 15:49:55.542572621 +0100
@@ -221,6 +221,12 @@ static inline int ip_local_deliver_finis
 	resubmit:
 		hash = protocol & (MAX_INET_PROTOS - 1);
 		raw_sk = sk_head(&raw_v4_htable[hash]);
+		ipprot = rcu_dereference(inet_protos[hash]);
+
+		if (nf_xfrm_local_done(skb, ipprot)) {
+			nf_rcv_postxfrm_local(skb);
+			goto out;
+		}
 
 		/* If there maybe a raw socket we must check - if not we
 		 * don't care less
@@ -228,7 +234,7 @@ static inline int ip_local_deliver_finis
 		if (raw_sk && !raw_v4_input(skb, skb->nh.iph, hash))
 			raw_sk = NULL;
 
-		if ((ipprot = rcu_dereference(inet_protos[hash])) != NULL) {
+		if (ipprot != NULL) {
 			int ret;
 
 			if (!ipprot->no_policy &&
@@ -275,8 +281,8 @@ int ip_local_deliver(struct sk_buff *skb
 			return 0;
 	}
 
-	return NF_HOOK(PF_INET, NF_IP_LOCAL_IN, skb, skb->dev, NULL,
-		       ip_local_deliver_finish);
+	return NF_HOOK_COND(PF_INET, NF_IP_LOCAL_IN, skb, skb->dev, NULL,
+	                    ip_local_deliver_finish, nf_hook_input_cond(skb));
 }
 
 static inline int ip_rcv_options(struct sk_buff *skb)
@@ -349,6 +355,9 @@ static inline int ip_rcv_finish(struct s
 		}
 	}
 
+	if (nf_xfrm_nonlocal_done(skb))
+		return nf_rcv_postxfrm_nonlocal(skb);
+
 #ifdef CONFIG_NET_CLS_ROUTE
 	if (unlikely(skb->dst->tclassid)) {
 		struct ip_rt_acct *st = ip_rt_acct + 256*smp_processor_id();
@@ -431,8 +440,8 @@ int ip_rcv(struct sk_buff *skb, struct n
 		goto drop;
 	}
 
-	return NF_HOOK(PF_INET, NF_IP_PRE_ROUTING, skb, dev, NULL,
-		       ip_rcv_finish);
+	return NF_HOOK_COND(PF_INET, NF_IP_PRE_ROUTING, skb, dev, NULL,
+	                    ip_rcv_finish, nf_hook_input_cond(skb));
 
 inhdr_error:
 	IP_INC_STATS_BH(IPSTATS_MIB_INHDRERRORS);
diff -pruN linux-2.6.15.suse/net/ipv4/ipip.c linux-2.6.15/net/ipv4/ipip.c
--- linux-2.6.15.suse/net/ipv4/ipip.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/ipv4/ipip.c	2006-01-11 15:49:55.542572621 +0100
@@ -475,6 +475,11 @@ static int ipip_rcv(struct sk_buff *skb)
 
 	read_lock(&ipip_lock);
 	if ((tunnel = ipip_tunnel_lookup(iph->saddr, iph->daddr)) != NULL) {
+		/* IPIP packets decapsulated by IPsec missed netfilter hooks */
+		if (nf_xfrm_local_done(skb, NULL)) {
+			nf_rcv_postxfrm_local(skb);
+			return 0;
+		}
 		if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
 			read_unlock(&ipip_lock);
 			kfree_skb(skb);
diff -pruN linux-2.6.15.suse/net/ipv4/netfilter.c linux-2.6.15/net/ipv4/netfilter.c
--- linux-2.6.15.suse/net/ipv4/netfilter.c	2006-01-03 04:21:10.000000000 +0100
+++ linux-2.6.15/net/ipv4/netfilter.c	2006-01-11 15:57:20.416340010 +0100
@@ -11,8 +11,31 @@
 #include <linux/udp.h>
 #include <linux/icmp.h>
 #include <net/route.h>
+#include <net/xfrm.h>
 #include <linux/ip.h>
 
+#ifdef CONFIG_XFRM
+inline int nf_rcv_postxfrm_nonlocal(struct sk_buff *skb)
+{
+        skb->sp->decap_done = 1;
+        dst_release(skb->dst);
+        skb->dst = NULL;
+        nf_reset(skb);
+        return netif_rx(skb);
+}
+
+int nf_rcv_postxfrm_local(struct sk_buff *skb)
+{
+        __skb_push(skb, skb->data - skb->nh.raw);
+        /* Fix header len and checksum if last xfrm was transport mode */
+        if (!skb->sp->x[skb->sp->len - 1].xvec->props.mode) {
+                skb->nh.iph->tot_len = htons(skb->len);
+                ip_send_check(skb->nh.iph);
+        }
+        return nf_rcv_postxfrm_nonlocal(skb);
+}
+#endif CONFIG_XFRM
+
 /* route_me_harder function, used by iptable_nat, iptable_mangle + ip_queue */
 int ip_route_me_harder(struct sk_buff **pskb)
 {
diff -pruN linux-2.6.15.suse/net/ipv4/xfrm4_tunnel.c linux-2.6.15/net/ipv4/xfrm4_tunnel.c
--- linux-2.6.15.suse/net/ipv4/xfrm4_tunnel.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/ipv4/xfrm4_tunnel.c	2006-01-11 15:49:55.542572621 +0100
@@ -114,6 +114,7 @@ static struct net_protocol ipip_protocol
 	.handler	=	ipip_rcv,
 	.err_handler	=	ipip_err,
 	.no_policy	=	1,
+	.xfrm_prot	=	1,
 };
 
 static int __init ipip_init(void)
diff -pruN linux-2.6.15.suse/net/xfrm/xfrm_input.c linux-2.6.15/net/xfrm/xfrm_input.c
--- linux-2.6.15.suse/net/xfrm/xfrm_input.c	2006-01-11 15:37:19.000000000 +0100
+++ linux-2.6.15/net/xfrm/xfrm_input.c	2006-01-11 15:49:55.542572621 +0100
@@ -31,6 +31,9 @@ struct sec_path *secpath_dup(struct sec_
 	if (!sp)
 		return NULL;
 
+#ifdef CONFIG_NETFILTER
+	sp->decap_done = 0;
+#endif
 	sp->len = 0;
 	if (src) {
 		int i;
