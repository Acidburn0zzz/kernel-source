Subject: Re: [PATCH 4/11] powerpc: Add CONFIG_CRASH_DUMP
From: Haren Myneni <haren@us.ibm.com>

But, we found an issue (Oops) when we load the second kernel in to the
crash kernel region. During the first boot, the crash kernel region is
reserved (32M - 160M for crashkernel=128M@32M) and the initrd is at 36M.
But, after loading the initrd, free_initrd() is freed initrd region even
though it is part of crash kernel reserved region. When we load the
second kernel using kexec-tool, we are copying into unallocated memory.
Thus caused panic.

One solution is move the initrd during prom_init. But, prom_claim is
failed if try to claim outside of first memory node (> rmo_top) on my P5
machine. The other one could be move the initrd later.  Since we are
freeing the initrd anyway during early boot (before we load the second
kernel), it will be an extra step of moving initrd (allocating memory
and copy). The following patch could fix this issue - free only regions
that are not part of crash region.  As this issue may also exists on
other archs, made changes in the init/initramfs.c. Is there any better
way to fix this problem?

Signed-off-by: Olaf Hering <olh@suse.de>

 include/linux/kexec.h |    1 +
 init/initramfs.c      |   22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 1 deletion(-)

Index: linux-2.6.16-rc1-olh/include/linux/kexec.h
===================================================================
--- linux-2.6.16-rc1-olh.orig/include/linux/kexec.h
+++ linux-2.6.16-rc1-olh/include/linux/kexec.h
@@ -6,6 +6,7 @@
 #include <linux/list.h>
 #include <linux/linkage.h>
 #include <linux/compat.h>
+#include <linux/ioport.h>
 #include <asm/kexec.h>
 
 /* Verify architecture specific macros are defined */
Index: linux-2.6.16-rc1-olh/init/initramfs.c
===================================================================
--- linux-2.6.16-rc1-olh.orig/init/initramfs.c
+++ linux-2.6.16-rc1-olh/init/initramfs.c
@@ -466,10 +466,30 @@ static char * __init unpack_to_rootfs(ch
 extern char __initramfs_start[], __initramfs_end[];
 #ifdef CONFIG_BLK_DEV_INITRD
 #include <linux/initrd.h>
+#include <linux/kexec.h>
 
 static void __init free_initrd(void)
 {
-	free_initrd_mem(initrd_start, initrd_end);
+#ifdef CONFIG_KEXEC
+	/*
+	 * If the initrd region is overlapped with crashkernel reserved region,
+	 * free only memory that is not part of crashkernel region.
+	 */
+	if (crashk_res.start && (__pa(initrd_start) < crashk_res.end) &&
+		(__pa(initrd_end) > crashk_res.start)) {
+		/*
+		 * Initialize initrd memory region since kexec boot does not do.
+		 */
+		memset((void *)initrd_start, 0, initrd_end - initrd_start);
+		if (__pa(initrd_start) < crashk_res.start)
+			free_initrd_mem(initrd_start,
+					(unsigned long)__va(crashk_res.start));
+		if (__pa(initrd_end) > crashk_res.end)
+			free_initrd_mem((unsigned long)__va(crashk_res.end),
+					initrd_end);
+	} else
+#endif
+		free_initrd_mem(initrd_start, initrd_end);
 	initrd_start = 0;
 	initrd_end = 0;
 }
