# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/04/14 02:18:38+02:00 kaber@trash.net 
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/xfrm4_tunnel.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -0
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/raw.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -1
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/ipmr.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -1
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/ipcomp.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -0
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/ip_output.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +23 -4
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/ip_forward.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -1
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/igmp.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +2 -2
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/esp4.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -0
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# net/ipv4/ah4.c
#   2004/04/14 02:18:28+02:00 kaber@trash.net +1 -0
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# include/net/ip.h
#   2004/04/14 02:18:28+02:00 kaber@trash.net +9 -0
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
# include/linux/netfilter.h
#   2004/04/14 02:18:28+02:00 kaber@trash.net +9 -4
#   [NETFILTER]: netfilter+ipsec: output-hooks
# 
Index: linux-2.6.7/include/linux/netfilter.h
===================================================================
--- linux-2.6.7.orig/include/linux/netfilter.h
+++ linux-2.6.7/include/linux/netfilter.h
@@ -138,12 +138,14 @@
 /* This is gross, but inline doesn't cut it for avoiding the function
    call in fast path: gcc doesn't inline (needs value tracking?). --RR */
 #ifdef CONFIG_NETFILTER_DEBUG
-#define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
- nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN)
+#define NF_HOOK_COND(pf, hook, skb, indev, outdev, okfn, cond)		\
+(!(cond)								\
+ ? (okfn)(skb) 								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN))
 #define NF_HOOK_THRESH nf_hook_slow
 #else
-#define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
-(list_empty(&nf_hooks[(pf)][(hook)])					\
+#define NF_HOOK_COND(pf, hook, skb, indev, outdev, okfn, cond)		\
+(!(cond) || list_empty(&nf_hooks[(pf)][(hook)])				\
  ? (okfn)(skb)								\
  : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN))
 #define NF_HOOK_THRESH(pf, hook, skb, indev, outdev, okfn, thresh)	\
@@ -151,6 +153,8 @@
  ? (okfn)(skb)								\
  : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))
 #endif
+#define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
+ NF_HOOK_COND((pf), (hook), (skb), (indev), (outdev), (okfn), 1)
 
 int nf_hook_slow(int pf, unsigned int hook, struct sk_buff *skb,
 		 struct net_device *indev, struct net_device *outdev,
@@ -193,6 +197,7 @@
 
 #else /* !CONFIG_NETFILTER */
 #define NF_HOOK(pf, hook, skb, indev, outdev, okfn) (okfn)(skb)
+#define NF_HOOK_COND(pf, hook, skb, indev, outdev, okfn, cond) (okfn)(skb)
 #endif /*CONFIG_NETFILTER*/
 
 #endif /*__KERNEL__*/
Index: linux-2.6.7/include/net/ip.h
===================================================================
--- linux-2.6.7.orig/include/net/ip.h
+++ linux-2.6.7/include/net/ip.h
@@ -30,6 +30,8 @@
 #include <linux/netdevice.h>
 #include <linux/inetdevice.h>
 #include <linux/in_route.h>
+#include <linux/netfilter.h>
+#include <linux/netfilter_ipv4.h>
 #include <net/route.h>
 #include <net/arp.h>
 #include <net/snmp.h>
@@ -45,6 +47,7 @@
 #define IPSKB_TRANSLATED	2
 #define IPSKB_FORWARDED		4
 #define IPSKB_XFRM_TUNNEL_SIZE	8
+#define IPSKB_XFRM_TRANSFORMED	16
 };
 
 struct ipcm_cookie
@@ -212,6 +215,12 @@
 		__ip_select_ident(iph, dst, more);
 }
 
+extern inline int ip_dst_output(struct sk_buff *skb)
+{
+	return NF_HOOK_COND(PF_INET, NF_IP_POST_ROUTING, skb, NULL,
+	                    skb->dst->dev, dst_output, skb->dst->xfrm != NULL);
+}
+
 /*
  *	Map a multicast IP onto multicast MAC for type ethernet.
  */
Index: linux-2.6.7/net/ipv4/igmp.c
===================================================================
--- linux-2.6.7.orig/net/ipv4/igmp.c
+++ linux-2.6.7/net/ipv4/igmp.c
@@ -343,7 +343,7 @@
 	pig->csum = ip_compute_csum((void *)skb->h.igmph, igmplen);
 
 	return NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, skb->dev,
-		       dst_output);
+	               ip_dst_output);
 }
 
 static int grec_size(struct ip_mc_list *pmc, int type, int gdel, int sdel)
@@ -673,7 +673,7 @@
 	ih->csum=ip_compute_csum((void *)ih, sizeof(struct igmphdr));
 
 	return NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, rt->u.dst.dev,
-		       dst_output);
+	               ip_dst_output);
 }
 
 static void igmp_gq_timer_expire(unsigned long data)
Index: linux-2.6.7/net/ipv4/ip_forward.c
===================================================================
--- linux-2.6.7.orig/net/ipv4/ip_forward.c
+++ linux-2.6.7/net/ipv4/ip_forward.c
@@ -51,7 +51,7 @@
 	if (unlikely(opt->optlen))
 		ip_forward_options(skb);
 
-	return dst_output(skb);
+	return ip_dst_output(skb);
 }
 
 int ip_forward(struct sk_buff *skb)
Index: linux-2.6.7/net/ipv4/ip_output.c
===================================================================
--- linux-2.6.7.orig/net/ipv4/ip_output.c
+++ linux-2.6.7/net/ipv4/ip_output.c
@@ -123,6 +123,15 @@
 	return ttl;
 }
 
+#ifdef CONFIG_NETFILTER
+/* out-of-line copy is only required with netfilter */
+int ip_dst_output(struct sk_buff *skb)
+{
+	return NF_HOOK_COND(PF_INET, NF_IP_POST_ROUTING, skb, NULL,
+	                    skb->dst->dev, dst_output, skb->dst->xfrm != NULL);
+}
+#endif
+
 /* 
  *		Add an ip header to a skbuff and send it out.
  *
@@ -165,7 +174,7 @@
 
 	/* Send it out. */
 	return NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, rt->u.dst.dev,
-		       dst_output);
+		       ip_dst_output);
 }
 
 static inline int ip_finish_output2(struct sk_buff *skb)
@@ -284,10 +293,8 @@
 		return ip_finish_output(skb);
 }
 
-int ip_output(struct sk_buff **pskb)
+static inline int ip_output2(struct sk_buff *skb)
 {
-	struct sk_buff *skb = *pskb;
-
 	IP_INC_STATS(IPSTATS_MIB_OUTREQUESTS);
 
 	if ((skb->len > dst_pmtu(skb->dst) || skb_shinfo(skb)->frag_list) &&
@@ -297,6 +304,17 @@
 		return ip_finish_output(skb);
 }
 
+int ip_output(struct sk_buff **pskb)
+{
+	struct sk_buff *skb = *pskb;
+	int transformed = IPCB(skb)->flags & IPSKB_XFRM_TRANSFORMED;
+
+	if (transformed)
+		nf_reset(skb);
+	return NF_HOOK_COND(PF_INET, NF_IP_LOCAL_OUT, skb, NULL,
+	                    skb->dst->dev, ip_output2, transformed);
+}
+
 int ip_queue_xmit(struct sk_buff *skb, int ipfragok)
 {
 	struct sock *sk = skb->sk;
@@ -390,7 +408,7 @@
 	skb->priority = sk->sk_priority;
 
 	return NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, rt->u.dst.dev,
-		       dst_output);
+		       ip_dst_output);
 
 no_route:
 	IP_INC_STATS(IPSTATS_MIB_OUTNOROUTES);
@@ -1163,7 +1181,7 @@
 
 	/* Netfilter gets whole the not fragmented skb. */
 	err = NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, 
-		      skb->dst->dev, dst_output);
+		      skb->dst->dev, ip_dst_output);
 	if (err) {
 		if (err > 0)
 			err = inet->recverr ? net_xmit_errno(err) : 0;
Index: linux-2.6.7/net/ipv4/ipmr.c
===================================================================
--- linux-2.6.7.orig/net/ipv4/ipmr.c
+++ linux-2.6.7/net/ipv4/ipmr.c
@@ -1119,7 +1119,7 @@
 	if (unlikely(opt->optlen))
 		ip_forward_options(skb);
 
-	return dst_output(skb);
+	return ip_dst_output(skb);
 }
 
 /*
Index: linux-2.6.7/net/ipv4/raw.c
===================================================================
--- linux-2.6.7.orig/net/ipv4/raw.c
+++ linux-2.6.7/net/ipv4/raw.c
@@ -307,7 +307,7 @@
 	}
 
 	err = NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, rt->u.dst.dev,
-		      dst_output);
+	              ip_dst_output);
 	if (err > 0)
 		err = inet->recverr ? net_xmit_errno(err) : 0;
 	if (err)
Index: linux-2.6.7/net/ipv4/xfrm4_output.c
===================================================================
--- linux-2.6.7.orig/net/ipv4/xfrm4_output.c
+++ linux-2.6.7/net/ipv4/xfrm4_output.c
@@ -133,6 +133,7 @@
 		err = -EHOSTUNREACH;
 		goto error_nolock;
 	}
+	IPCB(skb)->flags |= IPSKB_XFRM_TRANSFORMED;
 	err = NET_XMIT_BYPASS;
 
 out_exit:
