From: Olaf Kirch <okir@suse.de>
Subject: [lockd] make nlmclnt_next_cookie SMP safe

  The way we incremented the NLM cookie in nlmclnt_next_cookie
  was not thread safe. This patch changes the counter to an
  atomic_t

Signed-off-by: Olaf Kirch <okir@suse.de>

 fs/lockd/clntproc.c         |   10 +++++-----
 include/linux/lockd/lockd.h |    1 +
 3 files changed, 17 insertions(+), 12 deletions(-)

Index: 2.6.15/fs/lockd/clntproc.c
===================================================================
--- 2.6.15.orig/fs/lockd/clntproc.c
+++ 2.6.15/fs/lockd/clntproc.c
@@ -34,14 +34,14 @@ static void	nlmclnt_locks_init_private(s
 /*
  * Cookie counter for NLM requests
  */
-static u32	nlm_cookie = 0x1234;
+static atomic_t	nlm_cookie = ATOMIC_INIT(0x1234);
 
-static inline void nlmclnt_next_cookie(struct nlm_cookie *c)
+void nlmclnt_next_cookie(struct nlm_cookie *c)
 {
-	memcpy(c->data, &nlm_cookie, 4);
-	memset(c->data+4, 0, 4);
+	u32	cookie = atomic_inc_return(&nlm_cookie);
+
+	memcpy(c->data, &cookie, 4);
 	c->len=4;
-	nlm_cookie++;
 }
 
 static struct nlm_lockowner *nlm_get_lockowner(struct nlm_lockowner *lockowner)
Index: 2.6.15/include/linux/lockd/lockd.h
===================================================================
--- 2.6.15.orig/include/linux/lockd/lockd.h
+++ 2.6.15/include/linux/lockd/lockd.h
@@ -148,6 +148,7 @@ extern int			nsm_use_hostnames;
 /*
  * Lockd client functions
  */
+void		  nlmclnt_next_cookie(struct nlm_cookie *);
 struct nlm_rqst * nlmclnt_alloc_call(void);
 int		  nlmclnt_prepare_block(struct nlm_rqst *req, struct nlm_host *host, struct file_lock *fl);
 void		  nlmclnt_finish_block(struct nlm_rqst *req);
