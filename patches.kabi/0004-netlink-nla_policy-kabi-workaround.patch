From: Cho, Yu-Chen <acho@suse.com>
Subject: Fix kABI breakage by nl80211 security fix
Patch-mainline: Never, kABI fix
References: CVE-2019-16746 bsc#1152107

- The recent fix for nl80211 driver for a security issue
 0001-netlink-add-attribute-range-validation-to-policy.patch
 0002-netlink-add-validation-function-to-policy.patch
 0003-nl80211-validate-beacon-head.patch
broke kABI. Fix by restoring the old firmware struct with ifdef.
- Remove extack and NL_SET_ERR_MSG_ATTR, that used only for the 
error mesage.

Signed-off-by: Cho, Yu-Chen <acho@suse.com>
---
 include/net/netlink.h  |   24 ++++++++++++++++++++----
 lib/nlattr.c           |   12 ++++--------
 net/wireless/nl80211.c |    4 +---
 3 files changed, 25 insertions(+), 15 deletions(-)

--- a/include/net/netlink.h
+++ b/include/net/netlink.h
@@ -179,6 +179,10 @@ enum {
 	NLA_S32,
 	NLA_S64,
 	NLA_BITFIELD32,
+#ifndef __GENKSYMS__
+	NLA_REJECT,
+	NLA_NESTED_ARRAY,
+#endif
 	__NLA_TYPE_MAX,
 };
 
@@ -255,17 +259,29 @@ enum nla_policy_validation {
  * };
  */
 struct nla_policy {
-	u8		type;
-	u8		validation_type;
+#ifdef __GENKSYMS__
+	u16 type;
+#else
+#ifdef __BIG_ENDIAN
+	u8 validation_type;
+	u8 type;
+#else
+	u8 type;
+	u8 validation_type;
+#endif
+#endif
 	u16		len;
+#ifdef __GENKSYMS__
+	void		*validation_data;
+#else
 	union {
 		const void *validation_data;
 		struct {
 			s16 min, max;
 		};
-		int (*validate)(const struct nlattr *attr,
-				struct netlink_ext_ack *extack);
+		int (*validate)(const struct nlattr *attr);
 	};
+#endif
 };
 
 /**
--- a/lib/nlattr.c
+++ b/lib/nlattr.c
@@ -52,8 +52,7 @@ static int validate_nla_bitfield32(const
 }
 
 static int nla_validate_int_range(const struct nla_policy *pt,
-				  const struct nlattr *nla,
-				  struct netlink_ext_ack *extack)
+				  const struct nlattr *nla)
 {
 	bool validate_min, validate_max;
 	s64 value;
@@ -89,8 +88,6 @@ static int nla_validate_int_range(const
 		/* treat this one specially, since it may not fit into s64 */
 		if ((validate_min && nla_get_u64(nla) < pt->min) ||
 		    (validate_max && nla_get_u64(nla) > pt->max)) {
-			NL_SET_ERR_MSG_ATTR(extack, nla,
-					    "integer out of range");
 			return -ERANGE;
 		}
 		return 0;
@@ -101,8 +98,6 @@ static int nla_validate_int_range(const
 
 	if ((validate_min && value < pt->min) ||
 	    (validate_max && value > pt->max)) {
-		NL_SET_ERR_MSG_ATTR(extack, nla,
-				    "integer out of range");
 		return -ERANGE;
 	}
 
@@ -114,6 +109,7 @@ static int validate_nla(const struct nla
 {
 	const struct nla_policy *pt;
 	int minlen = 0, attrlen = nla_len(nla), type = nla_type(nla);
+	int err = -ERANGE;
 
 	if (type <= 0 || type > maxtype)
 		return 0;
@@ -199,13 +195,13 @@ static int validate_nla(const struct nla
 	case NLA_VALIDATE_RANGE:
 	case NLA_VALIDATE_MIN:
 	case NLA_VALIDATE_MAX:
-		err = nla_validate_int_range(pt, nla, extack);
+		err = nla_validate_int_range(pt, nla);
 		if (err)
 			return err;
 		break;
 	case NLA_VALIDATE_FUNCTION:
 		if (pt->validate) {
-			err = pt->validate(nla, extack);
+			err = pt->validate(nla);
 			if (err)
 				return err;
 		}
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -200,8 +200,7 @@ cfg80211_get_dev_from_info(struct net *n
 	return __cfg80211_rdev_from_attrs(netns, info->attrs);
 }
 
-static int validate_beacon_head(const struct nlattr *attr,
-				struct netlink_ext_ack *extack)
+static int validate_beacon_head(const struct nlattr *attr)
 {
 	const u8 *data = nla_data(attr);
 	unsigned int len = nla_len(attr);
@@ -228,7 +227,6 @@ static int validate_beacon_head(const st
 		return 0;
 
 err:
-	NL_SET_ERR_MSG_ATTR(extack, attr, "malformed beacon head");
 	return -EINVAL;
 }
 
