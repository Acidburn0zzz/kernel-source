#!/bin/bash
#
# print the mainline / stable commit id this kernel is based on

usage()
{
	echo "Usage: $0 -g <mainline kernel git> [-v] [-f] version"
}

die()
{
	echo "$@" >&2
	exit 1
}

git()
{
	(cd "$git"; command git "$@")
}

rev_parse()
{
	git rev-parse --verify "$@"
}

git=
quiet=-q
force=false
options=$(getopt -n "$0" -o g:vfh --long git:,verbose,force,help -- "$@")
if test $? != 0; then
	usage >&2
	exit 1
fi
eval set -- "$options"
while test $# -gt 0; do
	case "$1" in
	-g | --git)
		git=$2
		shift 2
		;;
	-v | --verbose)
		quiet=
		shift
		;;
	-f | --force)
		force=true
		shift
		;;
	--)
		shift
		break
		;;
	esac
done
if test -z "$git" -o $# -ne 1; then
	usage >&2
	exit 1
fi
base=$1

sanity_check()
{
	if ! rev_parse 1da177e4c3^0 >/dev/null; then
		die "$git does not look like Linus' kernel repository"
	fi
	if $force; then
		git reset $quiet --hard
	fi

	if test -n "$(git diff --name-only; git diff --cached --name-only)"; then
		git status
		die "This script requires a clean working directory and index in $git (use -f throw away your changes)"
	fi
}

get_base_id()
{
	local base=$1

	base_id=
	case "$base" in
	2.6.*-git*)
		url="http://www.kernel.org/pub/linux/kernel/v2.6/snapshots"
		base_id=$(curl -f -s "$url/patch-$base.id")
		if test -z "$base_id"; then
			base_id=$(curl -f -s "$url/old/patch-$base.id")
		fi
		if test -n "$base_id" && \
			! rev_parse -q "$base_id^0" >/dev/null; then
			git fetch --tags $quiet
		fi
		;;
	2.6.*.*)
		case "$base" in
		2.6.*.*-rc*)
			# RCs for stable releases aren't available in git
			base=${base%-rc*}
			last=${base##*.}
			base=${base%.*}.$((last - 1))
		esac
		case "$base" in
		2.6.*.0)
			get_base_id "${base%.0}"
			return
		esac
		base_id=$(rev_parse -q "v$base")
		if test -z "$base_id"; then
			url="git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-${base%.*}.y.git"
			git fetch --tags $quiet "$url"
			base_id=$(rev_parse "v$base")
		fi
		;;
	2.6.*)
		base_id=$(rev_parse -q "v$base")
		if test -z "$base_id"; then
			git fetch --tags $quiet
			base_id=$(rev_parse "v$base")
		fi
		;;
	esac
}

sanity_check >&2
get_base_id "$base" >&2
if test -z "$base_id"; then
	die "Cannot match $base to commit id"
fi
if ! rev_parse "$base_id^0" >/dev/null; then
	die "internal error: got bogus id $base_id"
fi
echo "$base_id"

