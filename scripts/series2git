#!/bin/bash
#
# Apply the patch series to a linux git repository. Note that the generated
# branch will differ each time, it is only meant as an alternative to quilt
# annotate and friends, it should not be pushed anywhere.

usage()
{
	echo "Usage: $0 -g <mainline kernel git> [-b <branch>] [-v] [-f]"
	echo "branch is $branch by default"
}

die()
{
	echo "$@" >&2
	exit 1
}

# perform a git command in linux-2.6 git tree
l_git()
{
	(cd "$git"; command git "$@")
}

dir=${0%/*}
. "$dir"/wd-functions.sh
branch="suse/$(get_branch_name)"
if test "$branch" = "suse/"; then
	branch="suse/unknown"
fi
git=
verbose=false
force=false
options=$(getopt -n "$0" -o b:g:vfh --long branch:,git:,verbose,force,help -- "$@")
if test $? != 0; then
	usage >&2
	exit 1
fi
eval set -- "$options"
while test $# -gt 0; do
	case "$1" in
	-b | --branch)
		branch=$2
		shift 2
		;;
	-g | --git)
		git=$2
		shift 2
		;;
	-v | --verbose)
		verbose=true
		shift
		;;
	-f | --force)
		force=true
		shift
		;;
	-h | --help)
		usage
		exit 0
		;;
	--)
		shift
		break
		;;
	esac
done
if test $# -gt 0; then
	echo "$0: too many arguments"
	usage >&2
	exit 1
fi
if test -z "$git"; then
	usage >&2
	exit 1
fi

if test -x "$dir"/../rpm/compute-PATCHVERSION.sh; then
	base=$("$_")
else
	base=$("$dir"/compute-PATCHVERSION.sh)
fi
args=(--git "$git")
$verbose && args[${#args[@]}]="--verbose"
$force   && args[${#args[@]}]="--force"
base_id=$("${0%/*}"/mainline-commit "${args[@]}" "$base") || exit
echo "base is $base (${base_id:0:7})"

# workaround "cannot delete branch which you are currently on" errors
l_git checkout -q HEAD^0 || exit
l_git branch -f "$branch" "$base_id" || exit
l_git checkout "$branch" || exit

ex_hdr()
{
	local header=$1
	shift
	sed -n "s/^$header:  *//p; T; q" "$@"
}

apply_patch()
{
	local patch=$1
	# we could have used git-am directly, but it doesn't like some
	# of our patches
	l_git apply --index --whitespace=nowarn "$PWD/$patch" || return
	local from=$(ex_hdr From "$patch")
	case "$from" in
	*"<"*@*">")
		GIT_AUTHOR_NAME=${from% <*}
		GIT_AUTHOR_EMAIL="<${from##*<}"
		;;
	*@*)
		GIT_AUTHOR_NAME=${from%%@*}
		GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME#<}
		GIT_AUTHOR_EMAIL=$from
		;;
	*)
		GIT_AUTHOR_NAME=$from
		GIT_AUTHOR_EMAIL=
		;;
	esac
	local subject=$(ex_hdr Subject "$patch")
	GIT_AUTHOR_DATE=$(ex_hdr Date "$patch")
	export GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_AUTHOR_DATE
	(
		echo "$subject"
		echo
		sed -r '/^(Subject|From|Date):/d; /^(---$|--- |diff |Index:)/ Q' "$patch"
		echo
		echo "Patch-name: $patch"
	) | git stripspace | l_git commit -q -F -
}

"$dir"/guards <series.conf | while read patch; do
	case "$patch" in
	patches.kernel.org/patch-2.6.*.*-rc*)
		;;
	patches.kernel.org/patch-2.6.*)
		echo "skipping $patch"
		continue
		;;
	esac
	if $verbose; then
		echo "[ $patch ]"
	fi
	apply_patch "$patch" || die "*** $patch failed ***"
	if ! $verbose; then
		echo -n "."
	fi
done
echo
l_git checkout -f
