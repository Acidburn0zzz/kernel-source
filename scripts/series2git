#!/bin/bash

usage()
{
	echo "Usage: $0 --git <kernel git repository>"
}

die()
{
	echo "$@" >&2
	exit 1
}

git()
{
	(cd "$git"; command git "$@")
}

git=
verbose=false
force=false
while test $# -gt 0; do
	case "$1" in
	--*=*)
		opt=${1%%=*}
		arg=${1#*=}
		shift
		set -- "$opt" "$arg" "$@"
		;;
	-g | --git)
		git=$2
		shift 2
		;;
	-v | --verbose)
		verbose=true
		shift
		;;
	-f | --force)
		force=true
		shift
		;;
	esac
done

if test -z "$git"; then
	usage >&2
	exit 1
fi
# sanity check
if ! git rev-parse 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2^0 >/dev/null; then
	die "$git does not look like Linus' kernel repository"
fi
if $force; then
	git reset --hard
fi
if test -n "$(git diff --name-only; git diff --cached --name-only)"; then
	git status
	die "This script requires a clean working directory and index (use -f throw away your changes)"
fi


if test -x rpm/compute-PATCHVERSION.sh; then
	base=$(rpm/compute-PATCHVERSION.sh)
else
	base=$(scripts/compute-PATCHVERSION.sh)
fi
base_id=
case "$base" in
2.6.*-rc*-git*)
	base_id=$(curl -s "http://www.kernel.org/pub/linux/kernel/v2.6/snapshots/patch-$base.id")
	;;
2.6.*.*)
	case "$base" in
	2.6.*.*-rc*)
		# RCs for stable releases aren't available in git
		base=${base%-rc*}
		last=${base##*.}
		base=${base%.*}.$((last - 1))
		;;
	esac
	if ! git rev-parse "v${base%.*}.1" >/dev/null 2>&1; then
		stable="${base%.*}.y"
		url="git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-$stable.git"
		echo "Will add $url as remote \"$stable\" to your repository"
		git remote add "$stable" "$url"
	fi
	base_id=$(git rev-parse "v$base" >/dev/null 2>&1)
	if test -z "$base_id"; then
		git remote update
	fi
	base_id=$(git rev-parse "v$base")
	;;
2.6.*)
	base_id=$(git rev-parse "v$base" >/dev/null 2>&1)
	if test -z "$base_id"; then
		git fetch
	fi
	base_id=$(git rev-parse "v$base")
	;;
esac
if test -z "$base_id"; then
	die "Cannot match $base to commit id"
fi
if ! git rev-parse "$base_id^0" >/dev/null 2>&1; then
	git fetch
	if ! git rev-parse "$base_id^0" >/dev/null; then
		die "internal error: got bogus id $base_id"
	fi
fi
echo "base is $base (${base_id:0:7})"

# workaround "cannot delete branch which you are currently on" errors
git checkout -q HEAD^ || exit
git branch -f series2git "$base_id" || exit
git checkout series2git || exit

ex_hdr()
{
	local header=$1
	shift
	sed -n "s/^$header:  *//p; T; q" "$@"
}

apply_patch()
{
	local patch=$1
	# we could have used git-am directly, but it doesn't like some
	# of our patches
	git apply --index --whitespace=nowarn "$PWD/$patch" || return
	local from=$(ex_hdr From "$patch")
	case "$from" in
	*"<"*@*">")
		GIT_AUTHOR_NAME=${from% <*}
		GIT_AUTHOR_EMAIL="<${from##*<}"
		;;
	*@*)
		GIT_AUTHOR_NAME=${from%%@*}
		GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME#<}
		GIT_AUTHOR_EMAIL=$from
		;;
	*)
		GIT_AUTHOR_NAME=$from
		GIT_AUTHOR_EMAIL=
		;;
	esac
	local subject=$(ex_hdr Subject "$patch")
	GIT_AUTHOR_DATE=$(ex_hdr Date "$patch")
	export GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_AUTHOR_DATE
	(
		echo "$subject"
		echo
		sed -r '/^(Subject|From|Date):/d; /^(---$|--- |diff |Index:)/ Q' "$patch"
		echo
		echo "Patch-name: $patch"
	) | git stripspace | git commit -q -F -
}

./scripts/guards <series.conf | while read patch; do
	case "$patch" in
	patches.kernel.org/patch-2.6.*.*-rc*)
		;;
	patches.kernel.org/patch-2.6.*)
		echo "skipping $patch"
		continue
		;;
	esac
	if $verbose; then
		echo "[ $patch ]"
	fi
	apply_patch "$patch" || die "*** $patch failed ***"
	if ! $verbose; then
		echo -n "."
	fi
done
echo
git checkout -f
