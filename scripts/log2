#! /bin/sh

#############################################################################
# Copyright (c) 2004-2006,2008-2010 Novell, Inc.
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, contact Novell, Inc.
#
# To contact Novell about this file by physical or electronic mail,
# you may find current contact information at www.novell.com
#############################################################################

# git commit wrapper, generates unified commit messages from patch headers

. ${0%/*}/wd-functions.sh

if ! $using_git; then
    echo "ERROR: not in a git working directory."
    exit 1
fi

scripts/check-cvs-add || exit 1

trap 'rm -rf "$tmpdir"' EXIT
tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)
message=$tmpdir/message

log_entry() {
    local entry=$1

    echo "$entry" \
    | fmt --width 65 \
    | sed -e '1s/^/- /' -e '2,$s/^/  /' \
    >> $message
}

patch_meta() {
    local patch=$1

    subject=$(formail -c -x Subject < "$patch" \
             | sed -e 's, *\[[#/ A-Za-z0-9-]*\],,')
    subject=${subject## }
    subject=${subject%.}

    set -- $(formail -c -x References -x Reference < "$patch")
    references="$*"
}

patch_log_entry() {
    local patch=$1 subject references old_subj old_ref old_patch="$tmpdir/old"

    git show "HEAD:$patch" >"$old_patch" 2>/dev/null
    patch_meta "$old_patch"
    old_subj="$subject"
    old_ref="$references"

    patch_meta "$patch"

    if test -z "$subject"; then
        # should not happen
        log_entry "$patch: ${references:+($references).}"
    elif test "$subject" != "$old_subj"; then
	log_entry "$subject${references:+ ($references)}."
    elif test "$references" != "$old_ref"; then
        # a new bugzilla reference suggest a non-trivial change
        log_entry "Update $patch${references:+ ($references)}."
    else
        log_entry "Refresh $patch."
    fi
}

do_commit()
{
    if test -z "${added[*]}${modified[*]}${deleted[*]}"; then
        echo "No modified files" >&2
        exit 1
    fi

    for file in "${added[@]}" "${modified[@]}"; do
        case "$file" in
        config/*)
            if [ -z "$configs_updated" ]; then
                log_entry "Update config files."
                configs_updated=1
            fi
            ;;
        patches.*)
            patch_log_entry "$file"
            ;;
        kabi/*/symvers-* | kabi/*/symtypes-* | kabi/*/symsets-* )
            if [ -z "$symvers_updated" ]; then
                log_entry "Update reference module symbol versions."
                symvers_updated=1
            fi
            ;;
        series.conf)
            # don't log changes in there
            ;;
        *)
            log_entry "$file: "
            ;;
        esac
    done
    for file in "${deleted[@]}"; do
        log_entry "Delete $file."
    done

    if [ ! -s $message ]; then
        echo "- " >> $message
    fi

    cat >>"$message" <<EOF

# <green>DO NOT PANIC!</green>
# There is no kernel-source.changes anymore, just commit to git directly
# using the above template
EOF
    git commit "$@" -F $message -e || exit
}

added=($(git diff --name-only --diff-filter=A HEAD))
modified=($(git diff --name-only --diff-filter=MT HEAD))
deleted=($(git diff --name-only --diff-filter=D HEAD))

# FIXME: -a should not be the default
do_commit -a

branch=$(get_branch_name)
case "$branch" in
master | preload | slert* | SL*_BRANCH | openSUSE-??.? | \
SLE?? | SLE??-SP? | SLE??-SP?-RT)
    echo "after testing your changes, run"
    echo "    git push origin $branch"
esac

# vim: et:sts=4:sw=4
