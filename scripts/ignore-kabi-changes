#! /bin/bash

usage() {
    echo "USAGE: ${0##*/} [--dry-run] rpm ..." >&2
}

options=`getopt -o h --long dry-run,help -- "$@"`
if [ $? -ne 0 ]; then
    usage
    exit 1
fi
eval set -- "$options"

while :; do
    case "$1" in
	--dry-run)
	    opt_dry_run=1
	    ;;
	-h|--help)
	    usage
	    exit 0
	    ;;
	--)
	    shift
	    break;
    esac
    shift
done

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

tmpdir=$(mktemp -td ${0##*/}.XXXXXX)
trap "rm -rf $tmpdir" EXIT

shopt -s nullglob

archs_flavors="$(scripts/guards --list < config.conf)"
for file in "$@"; do
    case "${file##*/}" in
	*.src.rpm | *.nosrc.rpm | *.delta.rpm)
	    continue
	    ;;
	*.rpm | Logfile.*)
	    ;;
	*)
	    echo "Cannot guess file type from filename $file; skipping" >&2
	    continue
	    ;;
    esac

    # There may be symlinks and regular files. Skip duplicates.
    for file2 in "${files_processed[@]}"; do
	[ "$file" -ef "$file2" ] && continue 2
    done
    files_processed[${#files_processed[@]}]=$file

    case "${file##*/}" in
	*.rpm)
	    exec 3< <(rpm -qp --qf '%{NAME}\n%{ARCH}\n%{VERSION}\n%{RELEASE}' "$file")
	    read name <&3
	    read arch <&3
	    read version <&3
	    read release <&3
	    exec 3<&-

	    rpm2cpio "$file" \
	    | ( cd $tmpdir && cpio -dim --quiet './boot/symvers-*' )

	    set -- $tmpdir/boot/symvers-*
	    if [ $# -ne 1 ]; then
		echo "Only one /boot/symvers-* file expected in $file; skipping" >&2
		continue
	    fi
	    new_syms="$(zcat "$1")"
	    ;;
	Logfile.*)
	    name=$(cat "$file" \
		   | sed -ne 's/^----- building \(.*\)\.spec.*/\1/p')
	    dist=$(cat "$file" | sed -ne 's/^Building for \([^ ]*\)$/\1/p')
	    arch=${dist##*-}
	    version=$(cat "$file" | sed -ne 's/^> Version: *//p')
	    release=$(cat "$file" | sed -ne 's/^> Release: *//p')

	    if [ -z "$name" -o -z "$arch" ]; then
		echo "[$name]"
		echo "[$arch]"
		echo "Could not determine package name and architecture from $file; skipping" >&2
		continue
	    fi

	    new_syms="$(cat "$file" \
		        | sed -ne 's/^Warning: .*: .*(0x[0-9a-zA-Z]*) changed to \(.*\)(\(0x[0-9a-zA-Z]*\)).*/\2 \1/p')"

	    if [ -z "$new_syms" ]; then
		echo "No ABI changes found in $file; skipping" >&2
		continue
	    fi
	    ;;
    esac

    build_arch=$arch
    case "$arch" in
	i?86)
	    arch=i386 ;;
	ppc*)
	    arch=powerpc ;;
	s390*)
	    arch=s390 ;;
    esac
    flavor=${name#kernel-}

    if ! echo "$archs_flavors" | grep -q "$arch/$flavor"; then
	case "$flavor" in
	source | syms)
	    ;;
	*)
	    echo "${rpm%%*/}: not a known arch/flavor; skipping $file" >&2
	    ;;
	esac
	continue
    fi

    echo "[$name-$version-$release.$build_arch.rpm]"

    symvers=kabi/$arch/symvers-$flavor
    if [ ! -e $symvers ]; then
	echo "File $symvers not found; skipping $file" >&2
	continue
    fi

    awk -f <(
	echo "BEGIN {"
	echo $'\tsymvers="'$symvers'"'
	echo $'\tOFS="\t"'
	echo "$new_syms" \
	| sed -nre 's:^(0x[a-fA-Z0-9]+)[ \t]+([^ \t]+).*:\tsymver["\2"]="\1":p'
	echo "}"
	echo '
/^0x/	{ sub(/=>.*/, "", $1)
	  if ($2 in symver && $1 != symver[$2]) {
	    print symvers ": " $2 "(" $1 " => " symver[$2] ")" > "/dev/stderr"
	    there_are_changes=1
	    $1 = $1 "=>" symver[$2]
	  }
	}
	{ print }
	END {
	  if (!there_are_changes)
	    print symvers ": no changes" > "/dev/stderr"
	}
	'
	) $symvers > $symvers.new
    [ $? = 0 ] || continue
    [ -z "$dry_run" ] && mv $symvers.new $symvers
    rm -rf $tmpdir/boot
done
