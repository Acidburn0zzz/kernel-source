#!/bin/bash

# add scripts/git-hooks/pre-commit-test

SUBDIRECTORY_OK=true
. "$(git --exec-path)/git-sh-setup"
cd_to_toplevel

check_snippet()
{
    # do not grep for the exact line so that those who really don't like
    # the pre-commit check can add '# kernel-source-pre-commit' to silence
    # the warnings
    grep -qs kernel-source-pre-commit "$GIT_DIR"/hooks/pre-commit
}

install_snippet()
{
    local hook="$GIT_DIR"/hooks/pre-commit
    local snippet='
# runs kernel-source-patch-check for each added or modified patch
. "$GIT_DIR"/hooks/kernel-source-pre-commit'
    if check_snippet; then
        return
    fi
    if ! test -x "$hook"; then
        # if the hook was not enabled before, don't run the example code that
        # is usually there
        snippet="$snippet"$'\n'"exit 0"
    fi
    if test -e "$GIT_DIR"/hooks/pre-commit; then
        snippet="$snippet" perl -pi'.orig' -e '
           if (/^[^#]/ && !$inserted) {
               print $ENV{"snippet"} . "\n";
               $inserted = 1;
           }' "$hook"
    else
        (echo '#!/bin/sh'
        echo
        echo $snippet) >"$hook"
    fi
}


check_scripts()
{
    test -x "$GIT_DIR"/hooks/pre-commit -a \
         -r "$GIT_DIR"/hooks/kernel-source-pre-commit -a \
         -x "$GIT_DIR"/hooks/check-patch
}

install_scripts()
{
#    if check_scripts; then
#        return
#    fi
    chmod +x "$GIT_DIR"/hooks/pre-commit
    install scripts/git-pre-commit "$GIT_DIR"/hooks/kernel-source-pre-commit
    install scripts/check-patch "$GIT_DIR"/hooks/check-patch
}
    

case "$1" in
--check)
    check_snippet && check_scripts
    exit
    ;;
"")
    install_snippet
    install_scripts
    ;;
*)
    echo "Usage: $0 [--check]" >&2
    exit 1
    ;;
esac

# vim: sw=4 : et
